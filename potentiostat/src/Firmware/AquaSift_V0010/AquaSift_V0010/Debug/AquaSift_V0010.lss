
AquaSift_V0010.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00006720  000067b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800120  00800120  000067d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000067d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000458  00000000  00000000  00006804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ad35  00000000  00000000  00006c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c22  00000000  00000000  00011991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a57  00000000  00000000  000125b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e14  00000000  00000000  0001400c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000019ff  00000000  00000000  00014e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004cc7  00000000  00000000  0001681f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d8  00000000  00000000  0001b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 06 	jmp	0xcec	; 0xcec <__ctors_end>
       4:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
       8:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
       c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      10:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      14:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      18:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      1c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      20:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      24:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      28:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      2c:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_11>
      30:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      34:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      38:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      3c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      40:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      44:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      48:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_18>
      4c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      50:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      54:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      58:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      5c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      60:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      64:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      68:	2c 07       	cpc	r18, r28
      6a:	53 07       	cpc	r21, r19
      6c:	ea 07       	cpc	r30, r26
      6e:	9d 08       	sbc	r9, r13
      70:	f0 08       	sbc	r15, r0
      72:	3c 09       	sbc	r19, r12
      74:	ef 09       	sbc	r30, r15
      76:	30 0a       	sbc	r3, r16
      78:	f5 0a       	sbc	r15, r21
      7a:	bf 0c       	add	r11, r15
      7c:	1a 0d       	add	r17, r10
      7e:	e2 0d       	add	r30, r2
      80:	1e 10       	cpse	r1, r14
      82:	4a 10       	cpse	r4, r10
      84:	56 10       	cpse	r5, r6
      86:	60 10       	cpse	r6, r0
      88:	6a 10       	cpse	r6, r10
      8a:	d4 11       	cpse	r29, r4
      8c:	76 2d       	mov	r23, r6
      8e:	a6 2d       	mov	r26, r6
      90:	c8 2d       	mov	r28, r8
      92:	2f 31       	cpi	r18, 0x1F	; 31
      94:	2f 31       	cpi	r18, 0x1F	; 31
      96:	2f 31       	cpi	r18, 0x1F	; 31
      98:	2f 31       	cpi	r18, 0x1F	; 31
      9a:	2f 31       	cpi	r18, 0x1F	; 31
      9c:	2f 31       	cpi	r18, 0x1F	; 31
      9e:	d2 2d       	mov	r29, r2
      a0:	73 2e       	mov	r7, r19
      a2:	80 2e       	mov	r8, r16
      a4:	8d 2e       	mov	r8, r29
      a6:	97 2e       	mov	r9, r23
      a8:	a1 2e       	mov	r10, r17
      aa:	ab 2e       	mov	r10, r27
      ac:	b5 2e       	mov	r11, r21
      ae:	bf 2e       	mov	r11, r31
      b0:	c9 2e       	mov	r12, r25
      b2:	d3 2e       	mov	r13, r19
      b4:	dd 2e       	mov	r13, r29
      b6:	e7 2e       	mov	r14, r23
      b8:	f1 2e       	mov	r15, r17
      ba:	25 2f       	mov	r18, r21
      bc:	59 2f       	mov	r21, r25
      be:	ac 2f       	mov	r26, r28
      c0:	b6 2f       	mov	r27, r22
      c2:	c0 2f       	mov	r28, r16
      c4:	3e 30       	cpi	r19, 0x0E	; 14
      c6:	bd 30       	cpi	r27, 0x0D	; 13
      c8:	ce 30       	cpi	r28, 0x0E	; 14
      ca:	d8 30       	cpi	r29, 0x08	; 8
      cc:	07 31       	cpi	r16, 0x17	; 23
      ce:	11 31       	cpi	r17, 0x11	; 17
      d0:	1b 31       	cpi	r17, 0x1B	; 27
      d2:	25 31       	cpi	r18, 0x15	; 21
      d4:	2f 31       	cpi	r18, 0x1F	; 31
      d6:	2f 31       	cpi	r18, 0x1F	; 31
      d8:	2f 31       	cpi	r18, 0x1F	; 31
      da:	2f 31       	cpi	r18, 0x1F	; 31
      dc:	2f 31       	cpi	r18, 0x1F	; 31
      de:	2f 31       	cpi	r18, 0x1F	; 31
      e0:	2f 31       	cpi	r18, 0x1F	; 31
      e2:	2f 31       	cpi	r18, 0x1F	; 31
      e4:	2f 31       	cpi	r18, 0x1F	; 31
      e6:	2f 31       	cpi	r18, 0x1F	; 31
      e8:	2f 31       	cpi	r18, 0x1F	; 31
      ea:	2f 31       	cpi	r18, 0x1F	; 31
      ec:	2f 31       	cpi	r18, 0x1F	; 31
      ee:	2f 31       	cpi	r18, 0x1F	; 31
      f0:	2f 31       	cpi	r18, 0x1F	; 31
      f2:	2f 31       	cpi	r18, 0x1F	; 31
      f4:	2f 31       	cpi	r18, 0x1F	; 31
      f6:	2f 31       	cpi	r18, 0x1F	; 31
      f8:	2f 31       	cpi	r18, 0x1F	; 31
      fa:	2f 31       	cpi	r18, 0x1F	; 31
      fc:	2f 31       	cpi	r18, 0x1F	; 31
      fe:	2f 31       	cpi	r18, 0x1F	; 31
     100:	2f 31       	cpi	r18, 0x1F	; 31
     102:	2f 31       	cpi	r18, 0x1F	; 31
     104:	2f 31       	cpi	r18, 0x1F	; 31
     106:	2f 31       	cpi	r18, 0x1F	; 31
     108:	2f 31       	cpi	r18, 0x1F	; 31
     10a:	2f 31       	cpi	r18, 0x1F	; 31
     10c:	65 2d       	mov	r22, r5
     10e:	2f 31       	cpi	r18, 0x1F	; 31
     110:	2f 31       	cpi	r18, 0x1F	; 31
     112:	2f 31       	cpi	r18, 0x1F	; 31
     114:	2f 31       	cpi	r18, 0x1F	; 31
     116:	2f 31       	cpi	r18, 0x1F	; 31
     118:	2f 31       	cpi	r18, 0x1F	; 31
     11a:	2f 31       	cpi	r18, 0x1F	; 31
     11c:	2f 31       	cpi	r18, 0x1F	; 31
     11e:	2f 31       	cpi	r18, 0x1F	; 31
     120:	2f 31       	cpi	r18, 0x1F	; 31
     122:	43 2d       	mov	r20, r3
     124:	2f 31       	cpi	r18, 0x1F	; 31
     126:	2f 31       	cpi	r18, 0x1F	; 31
     128:	2f 31       	cpi	r18, 0x1F	; 31
     12a:	2f 31       	cpi	r18, 0x1F	; 31
     12c:	2f 31       	cpi	r18, 0x1F	; 31
     12e:	2f 31       	cpi	r18, 0x1F	; 31
     130:	54 2d       	mov	r21, r4
     132:	37 2d       	mov	r19, r7
     134:	2f 31       	cpi	r18, 0x1F	; 31
     136:	2f 31       	cpi	r18, 0x1F	; 31
     138:	2f 31       	cpi	r18, 0x1F	; 31
     13a:	2f 31       	cpi	r18, 0x1F	; 31
     13c:	2f 31       	cpi	r18, 0x1F	; 31
     13e:	2f 31       	cpi	r18, 0x1F	; 31
     140:	2f 31       	cpi	r18, 0x1F	; 31
     142:	2f 31       	cpi	r18, 0x1F	; 31
     144:	2f 31       	cpi	r18, 0x1F	; 31
     146:	2f 31       	cpi	r18, 0x1F	; 31
     148:	2f 31       	cpi	r18, 0x1F	; 31
     14a:	2f 31       	cpi	r18, 0x1F	; 31
     14c:	65 2d       	mov	r22, r5
     14e:	2f 31       	cpi	r18, 0x1F	; 31
     150:	2f 31       	cpi	r18, 0x1F	; 31
     152:	2f 31       	cpi	r18, 0x1F	; 31
     154:	2f 31       	cpi	r18, 0x1F	; 31
     156:	2f 31       	cpi	r18, 0x1F	; 31
     158:	2f 31       	cpi	r18, 0x1F	; 31
     15a:	2f 31       	cpi	r18, 0x1F	; 31
     15c:	2f 31       	cpi	r18, 0x1F	; 31
     15e:	2f 31       	cpi	r18, 0x1F	; 31
     160:	2f 31       	cpi	r18, 0x1F	; 31
     162:	43 2d       	mov	r20, r3
     164:	2f 31       	cpi	r18, 0x1F	; 31
     166:	2f 31       	cpi	r18, 0x1F	; 31
     168:	2f 31       	cpi	r18, 0x1F	; 31
     16a:	2f 31       	cpi	r18, 0x1F	; 31
     16c:	2f 31       	cpi	r18, 0x1F	; 31
     16e:	2f 31       	cpi	r18, 0x1F	; 31
     170:	54 2d       	mov	r21, r4
     172:	37 2d       	mov	r19, r7

00000174 <__trampolines_end>:
     174:	54 65       	ori	r21, 0x54	; 84
     176:	73 74       	andi	r23, 0x43	; 67
     178:	20 41       	sbci	r18, 0x10	; 16
     17a:	62 6f       	ori	r22, 0xF2	; 242
     17c:	72 74       	andi	r23, 0x42	; 66
     17e:	65 64       	ori	r22, 0x45	; 69
     180:	0d 00       	.word	0x000d	; ????

00000182 <_ZZ11__vector_11E3__c_62>:
     182:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

0000018d <_ZZ11__vector_11E3__c_61>:
     18d:	27 29 0d 00                                         ')..

00000191 <_ZZ11__vector_11E3__c_60>:
     191:	43 79 63 6c 65 73 29 00                             Cycles).

00000199 <_ZZ11__vector_11E3__c_59>:
     199:	20 00                                                .

0000019b <_ZZ11__vector_11E3__c_58>:
     19b:	20 28 00                                             (.

0000019e <_ZZ11__vector_11E3__c_57>:
     19e:	53 71 75 61 72 65 20 57 61 76 65 00                 Square Wave.

000001aa <_ZZ11__vector_11E3__c_56>:
     1aa:	4c 69 6e 65 61 72 20 53 77 65 65 70 00              Linear Sweep.

000001b7 <_ZZ11__vector_11E3__c_55>:
     1b7:	43 79 63 6c 69 63 20 00                             Cyclic .

000001bf <_ZZ11__vector_11E3__c_54>:
     1bf:	74 69 74 6c 65 28 27 00                             title('.

000001c7 <_ZZ11__vector_11E3__c_53>:
     1c7:	78 6c 61 62 65 6c 28 27 56 6f 6c 74 73 28 56 29     xlabel('Volts(V)
     1d7:	27 29 3b 0d 00                                      ');..

000001dc <_ZZ11__vector_11E3__c_52>:
     1dc:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     1ec:	41 29 27 29 3b 0d 00                                A)');..

000001f3 <_ZZ11__vector_11E3__c_51>:
     1f3:	29 3b 0d 00                                         );..

000001f7 <_ZZ11__vector_11E3__c_50>:
     1f7:	2e 2e 2e 0d 00                                      .....

000001fc <_ZZ11__vector_11E3__c_49>:
     1fc:	73 5f 75 61 00                                      s_ua.

00000201 <_ZZ11__vector_11E3__c_48>:
     201:	70 6c 6f 74 28 00                                   plot(.

00000207 <_ZZ11__vector_11E3__c_47>:
     207:	66 69 67 75 72 65 28 33 29 3b 0d 00                 figure(3);..

00000213 <_ZZ11__vector_11E3__c_46>:
     213:	29 3b 0d 00                                         );..

00000217 <_ZZ11__vector_11E3__c_45>:
     217:	3d 66 6c 69 70 6c 72 28 73 5f 75 61 00              =fliplr(s_ua.

00000224 <_ZZ11__vector_11E3__c_44>:
     224:	73 5f 75 61 00                                      s_ua.

00000229 <_ZZ11__vector_11E3__c_43>:
     229:	29 29 3b 0d 00                                      ));..

0000022e <_ZZ11__vector_11E3__c_42>:
     22e:	2c 6c 65 6e 67 74 68 28 73 5f 75 61 00              ,length(s_ua.

0000023b <_ZZ11__vector_11E3__c_41>:
     23b:	73 77 65 65 70 5f 76 73 2f 31 30 30 30 2c 73 77     sweep_vs/1000,sw
     24b:	65 65 70 5f 76 65 2f 31 30 30 30 00                 eep_ve/1000.

00000257 <_ZZ11__vector_11E3__c_40>:
     257:	73 71 75 61 72 65 5f 76 73 2f 31 30 30 30 2c 73     square_vs/1000,s
     267:	71 75 61 72 65 5f 76 65 2f 31 30 30 30 00           quare_ve/1000.

00000275 <_ZZ11__vector_11E3__c_39>:
     275:	3d 6c 69 6e 73 70 61 63 65 28 00                    =linspace(.

00000280 <_ZZ11__vector_11E3__c_38>:
     280:	29 2a 28 33 2e 33 2f 34 30 39 36 29 2f 72 65 73     )*(3.3/4096)/res
     290:	29 3b 0d 00                                         );..

00000294 <_ZZ11__vector_11E3__c_37>:
     294:	2d 32 30 34 37 00                                   -2047.

0000029a <_ZZ11__vector_11E3__c_36>:
     29a:	3d 28 28 73 00                                      =((s.

0000029f <_ZZ11__vector_11E3__c_35>:
     29f:	73 5f 75 61 00                                      s_ua.

000002a4 <_ZZ11__vector_11E3__c_34>:
     2a4:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

000002af <_ZZ11__vector_11E3__c_33>:
     2af:	74 69 74 6c 65 28 27 51 75 69 65 74 20 54 69 6d     title('Quiet Tim
     2bf:	65 20 53 65 71 75 65 6e 63 65 27 29 3b 0d 00        e Sequence');..

000002ce <_ZZ11__vector_11E3__c_32>:
     2ce:	78 6c 61 62 65 6c 28 27 54 69 6d 65 20 28 73 29     xlabel('Time (s)
     2de:	27 29 3b 0d 00                                      ');..

000002e3 <_ZZ11__vector_11E3__c_31>:
     2e3:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     2f3:	41 29 27 29 3b 0d 00                                A)');..

000002fa <_ZZ11__vector_11E3__c_30>:
     2fa:	70 6c 6f 74 28 74 71 2c 71 5f 75 61 29 3b 0d 00     plot(tq,q_ua);..

0000030a <_ZZ11__vector_11E3__c_29>:
     30a:	66 69 67 75 72 65 28 32 29 3b 0d 00                 figure(2);..

00000316 <_ZZ11__vector_11E3__c_28>:
     316:	74 71 3d 6c 69 6e 73 70 61 63 65 28 31 2c 71 75     tq=linspace(1,qu
     326:	69 65 74 5f 74 2f 31 30 30 30 2c 6c 65 6e 67 74     iet_t/1000,lengt
     336:	68 28 71 5f 75 61 29 29 3b 0d 00                    h(q_ua));..

00000341 <_ZZ11__vector_11E3__c_27>:
     341:	71 5f 75 61 3d 28 28 71 2d 32 30 34 37 29 2a 28     q_ua=((q-2047)*(
     351:	33 2e 33 2f 34 30 39 36 29 2f 72 65 73 29 3b 0d     3.3/4096)/res);.
	...

00000362 <_ZZ11__vector_11E3__c_26>:
     362:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

0000036d <_ZZ11__vector_11E3__c_25>:
     36d:	74 69 74 6c 65 28 27 44 65 70 6f 73 69 74 69 6f     title('Depositio
     37d:	6e 20 53 65 71 75 65 6e 63 65 27 29 3b 0d 00        n Sequence');..

0000038c <_ZZ11__vector_11E3__c_24>:
     38c:	78 6c 61 62 65 6c 28 27 54 69 6d 65 20 28 73 29     xlabel('Time (s)
     39c:	27 29 3b 0d 00                                      ');..

000003a1 <_ZZ11__vector_11E3__c_23>:
     3a1:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     3b1:	41 29 27 29 3b 0d 00                                A)');..

000003b8 <_ZZ11__vector_11E3__c_22>:
     3b8:	70 6c 6f 74 28 74 64 2c 64 5f 75 61 29 3b 0d 00     plot(td,d_ua);..

000003c8 <_ZZ11__vector_11E3__c_21>:
     3c8:	66 69 67 75 72 65 28 31 29 3b 0d 00                 figure(1);..

000003d4 <_ZZ11__vector_11E3__c_20>:
     3d4:	74 64 3d 6c 69 6e 73 70 61 63 65 28 31 2c 64 65     td=linspace(1,de
     3e4:	70 5f 74 2f 31 30 30 30 2c 6c 65 6e 67 74 68 28     p_t/1000,length(
     3f4:	64 5f 75 61 29 29 3b 0d 00                          d_ua));..

000003fd <_ZZ11__vector_11E3__c_19>:
     3fd:	64 5f 75 61 3d 28 28 64 2d 32 30 34 37 29 2a 28     d_ua=((d-2047)*(
     40d:	33 2e 33 2f 34 30 39 36 29 2f 72 65 73 29 3b 0d     3.3/4096)/res);.
	...

0000041e <_ZZ11__vector_11E3__c_18>:
     41e:	72 65 73 3d 74 69 61 5f 72 74 2a 31 30 30 30 30     res=tia_rt*10000
     42e:	30 2f 31 30 32 33 3b 0d 00                          0/1023;..

00000437 <_ZZ11__vector_11E3__c_17>:
     437:	41 52 42 5f 53 54 4f 50 0d 00                       ARB_STOP..

00000441 <_ZZ11__vector_11E3__c_16>:
     441:	41 52 42 0d 00                                      ARB..

00000446 <_ZZ11__vector_11E3__c_15>:
     446:	41 52 42 5f 49 4e 49 54 0d 00                       ARB_INIT..

00000450 <_ZZ11__vector_11E3__c_14>:
     450:	5d 3b 0d 0d 00                                      ];...

00000455 <_ZZ11__vector_11E3__c_13>:
     455:	2e 2e 2e 0d 00                                      .....

0000045a <_ZZ11__vector_11E3__c_12>:
     45a:	2e 2e 2e 0d 00                                      .....

0000045f <_ZZ11__vector_11E3__c_11>:
     45f:	3d 5b 00                                            =[.

00000462 <_ZZ11__vector_11E3__c_10>:
     462:	3d 5b 00                                            =[.

00000465 <_ZZ11__vector_11E3__c_9>:
     465:	5d 3b 0d 0d 00                                      ];...

0000046a <_ZZ11__vector_11E3__c_8>:
     46a:	2e 2e 2e 0d 00                                      .....

0000046f <_ZZ11__vector_11E3__c_7>:
     46f:	5d 3b 0d 0d 00                                      ];...

00000474 <_ZZ11__vector_11E3__c_6>:
     474:	2e 2e 2e 0d 00                                      .....

00000479 <_ZZ11__vector_11E3__c_5>:
     479:	3d 5b 00                                            =[.

0000047c <_ZZ11__vector_11E3__c_4>:
     47c:	5d 3b 0d 0d 00                                      ];...

00000481 <_ZZ11__vector_11E3__c_3>:
     481:	2e 2e 2e 0d 00                                      .....

00000486 <_ZZ11__vector_11E3__c_2>:
     486:	71 3d 5b 00                                         q=[.

0000048a <_ZZ11__vector_11E3__c_1>:
     48a:	5d 3b 0d 0d 00                                      ];...

0000048f <_ZZ11__vector_11E3__c_0>:
     48f:	2e 2e 2e 0d 00                                      .....

00000494 <_ZZ11__vector_11E3__c>:
     494:	64 3d 5b 00                                         d=[.

00000498 <_ZZ11arb_replacePKhE3__c>:
     498:	45 6e 74 72 79 20 4f 75 74 20 6f 66 20 52 61 6e     Entry Out of Ran
     4a8:	67 65 0d 00                                         ge..

000004ac <_ZZ10arb_appendPKhE3__c>:
     4ac:	4d 65 6d 6f 72 79 20 46 75 6c 6c 0d 00              Memory Full..

000004b9 <_ZZ14uart_tokenizerhP8as_classE3__c_87>:
     4b9:	53 74 61 72 74 6d 56 20 45 6e 64 6d 56 20 52 61     StartmV EndmV Ra
     4c9:	74 65 0d 00                                         te..

000004cd <_ZZ14uart_tokenizerhP8as_classE3__c_86>:
     4cd:	4d 65 6d 6f 72 79 20 45 6d 70 74 79 0d 00           Memory Empty..

000004db <_ZZ14uart_tokenizerhP8as_classE3__c_85>:
     4db:	45 6e 64 2b 41 6d 70 20 4c 6f 77 20 00              End+Amp Low .

000004e8 <_ZZ14uart_tokenizerhP8as_classE3__c_84>:
     4e8:	45 6e 64 2b 41 6d 70 20 48 69 67 68 20 00           End+Amp High .

000004f6 <_ZZ14uart_tokenizerhP8as_classE3__c_83>:
     4f6:	53 74 61 72 74 2b 41 6d 70 20 4c 6f 77 20 00        Start+Amp Low .

00000505 <_ZZ14uart_tokenizerhP8as_classE3__c_82>:
     505:	53 74 61 72 74 2b 41 6d 70 20 48 69 67 68 20 00     Start+Amp High .

00000515 <_ZZ14uart_tokenizerhP8as_classE3__c_81>:
     515:	45 6e 64 2b 41 6d 70 20 4c 6f 77 20 00              End+Amp Low .

00000522 <_ZZ14uart_tokenizerhP8as_classE3__c_80>:
     522:	45 6e 64 2b 41 6d 70 20 48 69 67 68 20 00           End+Amp High .

00000530 <_ZZ14uart_tokenizerhP8as_classE3__c_79>:
     530:	53 74 61 72 74 2b 41 6d 70 20 4c 6f 77 20 00        Start+Amp Low .

0000053f <_ZZ14uart_tokenizerhP8as_classE3__c_78>:
     53f:	53 74 61 72 74 2b 41 6d 70 20 48 69 67 68 20 00     Start+Amp High .

0000054f <_ZZ14uart_tokenizerhP8as_classE3__c_77>:
     54f:	37 3a 20 32 30 30 48 7a 0d 0d 0d 0d 0d 0d 0d 0d     7: 200Hz........
     55f:	0d 0d 0d 0d 0d 00                                   ......

00000565 <_ZZ14uart_tokenizerhP8as_classE3__c_76>:
     565:	36 3a 20 31 35 30 48 7a 0d 00                       6: 150Hz..

0000056f <_ZZ14uart_tokenizerhP8as_classE3__c_75>:
     56f:	35 3a 20 31 30 30 48 7a 0d 00                       5: 100Hz..

00000579 <_ZZ14uart_tokenizerhP8as_classE3__c_74>:
     579:	34 3a 20 20 35 30 48 7a 0d 00                       4:  50Hz..

00000583 <_ZZ14uart_tokenizerhP8as_classE3__c_73>:
     583:	33 3a 20 20 31 30 48 7a 0d 00                       3:  10Hz..

0000058d <_ZZ14uart_tokenizerhP8as_classE3__c_72>:
     58d:	32 3a 20 20 20 35 48 7a 0d 00                       2:   5Hz..

00000597 <_ZZ14uart_tokenizerhP8as_classE3__c_71>:
     597:	31 3a 20 20 20 31 48 7a 0d 00                       1:   1Hz..

000005a1 <_ZZ14uart_tokenizerhP8as_classE3__c_70>:
     5a1:	20 20 20 43 75 74 6f 66 66 0d 00                       Cutoff..

000005ac <_ZZ14uart_tokenizerhP8as_classE3__c_69>:
     5ac:	33 36 2e 20 53 65 6c 65 63 74 65 64 20 46 69 6c     36. Selected Fil
     5bc:	74 65 72 00                                         ter.

000005c0 <_ZZ14uart_tokenizerhP8as_classE3__c_68>:
     5c0:	33 35 2e 20 45 6e 61 62 6c 65 20 53 6f 66 74 77     35. Enable Softw
     5d0:	61 72 65 20 46 69 6c 74 65 72 20 28 59 2f 4e 29     are Filter (Y/N)
     5e0:	3a 20 00                                            : .

000005e3 <_ZZ14uart_tokenizerhP8as_classE3__c_67>:
     5e3:	2d 2d 2d 4c 4f 57 2d 50 41 53 53 20 46 49 4c 54     ---LOW-PASS FILT
     5f3:	45 52 20 4d 45 4e 55 2d 2d 2d 0d 00                 ER MENU---..

000005ff <_ZZ14uart_tokenizerhP8as_classE3__c_66>:
     5ff:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 00                    ...........

0000060a <_ZZ14uart_tokenizerhP8as_classE3__c_65>:
     60a:	20 74 6f 20 00                                       to .

0000060f <_ZZ14uart_tokenizerhP8as_classE3__c_64>:
     60f:	0d 52 61 74 65 6d 56 2f 73 3a 20 00                 .RatemV/s: .

0000061b <_ZZ14uart_tokenizerhP8as_classE3__c_63>:
     61b:	20 74 6f 20 00                                       to .

00000620 <_ZZ14uart_tokenizerhP8as_classE3__c_62>:
     620:	0d 45 6e 64 6d 56 3a 20 20 20 00                    .EndmV:   .

0000062b <_ZZ14uart_tokenizerhP8as_classE3__c_61>:
     62b:	20 74 6f 20 00                                       to .

00000630 <_ZZ14uart_tokenizerhP8as_classE3__c_60>:
     630:	0d 0d 53 74 61 72 74 6d 56 3a 20 00                 ..StartmV: .

0000063c <_ZZ14uart_tokenizerhP8as_classE3__c_59>:
     63c:	29 3a 20 00                                         ): .

00000640 <_ZZ14uart_tokenizerhP8as_classE3__c_58>:
     640:	4e 75 6d 62 65 72 20 6f 66 20 53 74 6f 72 65 64     Number of Stored
     650:	20 45 6e 74 72 69 65 73 20 28 55 70 20 74 6f 20      Entries (Up to 
	...

00000661 <_ZZ14uart_tokenizerhP8as_classE3__c_57>:
     661:	0d 0d 00                                            ...

00000664 <_ZZ14uart_tokenizerhP8as_classE3__c_56>:
     664:	33 34 2e 20 4e 75 6d 62 65 72 20 6f 66 20 43 79     34. Number of Cy
     674:	63 6c 65 73 00                                      cles.

00000679 <_ZZ14uart_tokenizerhP8as_classE3__c_55>:
     679:	33 33 2e 20 43 79 63 6c 69 63 20 28 59 2f 4e 29     33. Cyclic (Y/N)
     689:	3a 20 00                                            : .

0000068c <_ZZ14uart_tokenizerhP8as_classE3__c_54>:
     68c:	33 32 2e 20 47 65 74 20 53 74 6f 72 65 64 20 56     32. Get Stored V
     69c:	61 6c 75 65 73 0d 00                                alues..

000006a3 <_ZZ14uart_tokenizerhP8as_classE3__c_53>:
     6a3:	33 31 2e 20 44 65 6c 65 74 65 20 41 6c 6c 20 45     31. Delete All E
     6b3:	6e 74 72 69 65 73 0d 00                             ntries..

000006bb <_ZZ14uart_tokenizerhP8as_classE3__c_52>:
     6bb:	33 30 2e 20 44 65 6c 65 74 65 20 4c 61 73 74 20     30. Delete Last 
     6cb:	45 6e 74 72 79 0d 00                                Entry..

000006d2 <_ZZ14uart_tokenizerhP8as_classE3__c_51>:
     6d2:	32 39 2e 20 52 65 70 6c 61 63 65 20 45 6e 74 72     29. Replace Entr
     6e2:	79 20 28 45 6e 74 72 79 23 20 53 74 61 72 74 6d     y (Entry# Startm
     6f2:	56 20 53 74 6f 70 6d 56 20 52 61 74 65 6d 56 2f     V StopmV RatemV/
     702:	73 29 0d 00                                         s)..

00000706 <_ZZ14uart_tokenizerhP8as_classE3__c_50>:
     706:	32 38 2e 20 41 70 70 65 6e 64 20 45 6e 74 72 79     28. Append Entry
     716:	20 28 53 74 61 72 74 6d 56 20 53 74 6f 70 6d 56      (StartmV StopmV
     726:	20 52 61 74 65 6d 56 2f 73 29 0d 00                  RatemV/s)..

00000732 <_ZZ14uart_tokenizerhP8as_classE3__c_49>:
     732:	2d 2d 2d 41 52 42 49 54 52 41 52 59 20 57 41 56     ---ARBITRARY WAV
     742:	45 46 4f 52 4d 20 4d 45 4e 55 2d 2d 2d 0d 00        EFORM MENU---..

00000751 <_ZZ14uart_tokenizerhP8as_classE3__c_48>:
     751:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     761:	0d 0d 00                                            ...

00000764 <_ZZ14uart_tokenizerhP8as_classE3__c_47>:
     764:	32 37 2e 20 53 71 75 61 72 65 20 57 61 76 65 20     27. Square Wave 
     774:	48 61 6c 66 20 50 65 72 69 6f 64 20 6d 73 00        Half Period ms.

00000783 <_ZZ14uart_tokenizerhP8as_classE3__c_46>:
     783:	32 36 2e 20 53 71 75 61 72 65 20 57 61 76 65 20     26. Square Wave 
     793:	49 6e 63 72 65 6d 65 6e 74 20 6d 56 00              Increment mV.

000007a0 <_ZZ14uart_tokenizerhP8as_classE3__c_45>:
     7a0:	32 35 2e 20 53 71 75 61 72 65 20 57 61 76 65 20     25. Square Wave 
     7b0:	41 6d 70 6c 69 74 75 64 65 20 6d 56 00              Amplitude mV.

000007bd <_ZZ14uart_tokenizerhP8as_classE3__c_44>:
     7bd:	32 34 2e 20 45 6e 64 20 56 6f 6c 74 61 67 65 20     24. End Voltage 
     7cd:	6d 56 00                                            mV.

000007d0 <_ZZ14uart_tokenizerhP8as_classE3__c_43>:
     7d0:	32 33 2e 20 53 74 61 72 74 20 56 6f 6c 74 61 67     23. Start Voltag
     7e0:	65 20 6d 56 00                                      e mV.

000007e5 <_ZZ14uart_tokenizerhP8as_classE3__c_42>:
     7e5:	2d 2d 2d 53 51 55 41 52 45 20 57 41 56 45 20 4d     ---SQUARE WAVE M
     7f5:	45 4e 55 2d 2d 2d 0d 00                             ENU---..

000007fd <_ZZ14uart_tokenizerhP8as_classE3__c_41>:
     7fd:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     80d:	0d 0d 00                                            ...

00000810 <_ZZ14uart_tokenizerhP8as_classE3__c_40>:
     810:	32 32 2e 20 4e 75 6d 62 65 72 20 6f 66 20 43 79     22. Number of Cy
     820:	63 6c 65 73 00                                      cles.

00000825 <_ZZ14uart_tokenizerhP8as_classE3__c_39>:
     825:	32 31 2e 20 43 79 63 6c 69 63 20 28 59 2f 4e 29     21. Cyclic (Y/N)
     835:	3a 20 00                                            : .

00000838 <_ZZ14uart_tokenizerhP8as_classE3__c_38>:
     838:	32 30 2e 20 53 77 65 65 70 20 52 61 74 65 20 6d     20. Sweep Rate m
     848:	56 2f 73 00                                         V/s.

0000084c <_ZZ14uart_tokenizerhP8as_classE3__c_37>:
     84c:	31 39 2e 20 45 6e 64 20 56 6f 6c 74 61 67 65 20     19. End Voltage 
     85c:	6d 56 00                                            mV.

0000085f <_ZZ14uart_tokenizerhP8as_classE3__c_36>:
     85f:	31 38 2e 20 53 74 61 72 74 20 56 6f 6c 74 61 67     18. Start Voltag
     86f:	65 20 6d 56 00                                      e mV.

00000874 <_ZZ14uart_tokenizerhP8as_classE3__c_35>:
     874:	2d 2d 2d 4c 49 4e 45 41 52 20 53 57 45 45 50 20     ---LINEAR SWEEP 
     884:	4d 45 4e 55 2d 2d 2d 0d 00                          MENU---..

0000088d <_ZZ14uart_tokenizerhP8as_classE3__c_34>:
     88d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     89d:	0d 00                                               ..

0000089f <_ZZ14uart_tokenizerhP8as_classE3__c_33>:
     89f:	31 37 2e 20 52 65 63 6f 72 64 20 44 65 70 6f 73     17. Record Depos
     8af:	69 74 69 6f 6e 20 53 65 71 75 65 6e 63 65 20 28     ition Sequence (
     8bf:	59 2f 4e 29 3a 20 00                                Y/N): .

000008c6 <_ZZ14uart_tokenizerhP8as_classE3__c_32>:
     8c6:	31 36 2e 20 51 75 69 65 74 20 54 69 6d 65 20 6d     16. Quiet Time m
     8d6:	73 00                                               s.

000008d8 <_ZZ14uart_tokenizerhP8as_classE3__c_31>:
     8d8:	31 35 2e 20 44 65 70 6f 73 69 74 69 6f 6e 20 56     15. Deposition V
     8e8:	6f 6c 74 61 67 65 20 6d 56 00                       oltage mV.

000008f2 <_ZZ14uart_tokenizerhP8as_classE3__c_30>:
     8f2:	31 34 2e 20 44 65 70 6f 73 69 74 69 6f 6e 20 54     14. Deposition T
     902:	69 6d 65 20 6d 73 00                                ime ms.

00000909 <_ZZ14uart_tokenizerhP8as_classE3__c_29>:
     909:	31 33 2e 20 45 6e 61 62 6c 65 20 44 65 70 6f 73     13. Enable Depos
     919:	69 74 69 6f 6e 20 28 59 2f 4e 29 3a 20 00           ition (Y/N): .

00000927 <_ZZ14uart_tokenizerhP8as_classE3__c_28>:
     927:	2d 2d 2d 44 45 50 4f 53 49 54 49 4f 4e 20 4d 45     ---DEPOSITION ME
     937:	4e 55 2d 2d 2d 0d 00                                NU---..

0000093e <_ZZ14uart_tokenizerhP8as_classE3__c_27>:
     93e:	42 69 74 20 30 3a 20 31 30 75 66 0d 0d 0d 0d 0d     Bit 0: 10uf.....
     94e:	0d 0d 0d 0d 0d 0d 0d 0d 00                          .........

00000957 <_ZZ14uart_tokenizerhP8as_classE3__c_26>:
     957:	42 69 74 20 31 3a 20 31 75 66 0d 00                 Bit 1: 1uf..

00000963 <_ZZ14uart_tokenizerhP8as_classE3__c_25>:
     963:	42 69 74 20 32 3a 20 2e 31 75 66 0d 00              Bit 2: .1uf..

00000970 <_ZZ14uart_tokenizerhP8as_classE3__c_24>:
     970:	42 69 74 20 33 3a 20 2e 30 31 75 66 0d 00           Bit 3: .01uf..

0000097e <_ZZ14uart_tokenizerhP8as_classE3__c_23>:
     97e:	42 69 74 20 34 3a 20 31 30 30 30 70 66 0d 00        Bit 4: 1000pf..

0000098d <_ZZ14uart_tokenizerhP8as_classE3__c_22>:
     98d:	42 69 74 20 35 3a 20 31 30 30 70 66 0d 00           Bit 5: 100pf..

0000099b <_ZZ14uart_tokenizerhP8as_classE3__c_21>:
     99b:	31 32 2e 20 54 49 41 20 36 2d 62 69 74 20 43 61     12. TIA 6-bit Ca
     9ab:	70 61 63 69 74 6f 72 20 4d 61 73 6b 20 28 58 58     pacitor Mask (XX
     9bb:	58 58 58 58 29 3a 20 00                             XXXX): .

000009c3 <_ZZ14uart_tokenizerhP8as_classE3__c_20>:
     9c3:	52 20 3d 20 54 61 70 20 2a 20 31 30 30 30 30 30     R = Tap * 100000
     9d3:	20 2f 20 31 30 32 33 20 4f 68 6d 73 0d 00            / 1023 Ohms..

000009e1 <_ZZ14uart_tokenizerhP8as_classE3__c_19>:
     9e1:	20 4f 68 6d 73 0d 00                                 Ohms..

000009e8 <_ZZ14uart_tokenizerhP8as_classE3__c_18>:
     9e8:	52 65 73 69 73 74 61 6e 63 65 20 3d 20 00           Resistance = .

000009f6 <_ZZ14uart_tokenizerhP8as_classE3__c_17>:
     9f6:	31 31 2e 20 54 49 41 20 52 65 73 69 73 74 6f 72     11. TIA Resistor
     a06:	20 54 61 70 00                                       Tap.

00000a0b <_ZZ14uart_tokenizerhP8as_classE3__c_16>:
     a0b:	2d 2d 2d 54 49 41 20 4d 45 4e 55 2d 2d 2d 0d 00     ---TIA MENU---..

00000a1b <_ZZ14uart_tokenizerhP8as_classE3__c_15>:
     a1b:	58 20 41 62 6f 72 74 20 54 65 73 74 0d 0d 0d 0d     X Abort Test....
     a2b:	0d 00                                               ..

00000a2d <_ZZ14uart_tokenizerhP8as_classE3__c_14>:
     a2d:	41 20 53 74 61 72 74 20 41 72 62 69 74 72 61 72     A Start Arbitrar
     a3d:	79 20 57 61 76 65 66 6f 72 6d 20 54 65 73 74 0d     y Waveform Test.
	...

00000a4e <_ZZ14uart_tokenizerhP8as_classE3__c_13>:
     a4e:	53 20 53 74 61 72 74 20 53 71 75 61 72 65 20 57     S Start Square W
     a5e:	61 76 65 20 54 65 73 74 0d 00                       ave Test..

00000a68 <_ZZ14uart_tokenizerhP8as_classE3__c_12>:
     a68:	0d 4c 20 53 74 61 72 74 20 4c 69 6e 65 61 72 20     .L Start Linear 
     a78:	53 77 65 65 70 20 54 65 73 74 0d 00                 Sweep Test..

00000a84 <_ZZ14uart_tokenizerhP8as_classE3__c_11>:
     a84:	50 72 6f 64 75 63 74 20 49 44 3a 20 00              Product ID: .

00000a91 <_ZZ14uart_tokenizerhP8as_classE3__c_10>:
     a91:	46 69 72 6d 77 61 72 65 20 52 65 76 69 73 69 6f     Firmware Revisio
     aa1:	6e 3a 20 00                                         n: .

00000aa5 <_ZZ14uart_tokenizerhP8as_classE3__c_9>:
     aa5:	31 30 2e 20 47 65 74 20 73 65 74 74 69 6e 67 73     10. Get settings
     ab5:	0d 0d 00                                            ...

00000ab8 <_ZZ14uart_tokenizerhP8as_classE3__c_8>:
     ab8:	39 2e 20 20 4c 6f 77 2d 70 61 73 73 20 46 69 6c     9.  Low-pass Fil
     ac8:	74 65 72 20 4d 65 6e 75 0d 00                       ter Menu..

00000ad2 <_ZZ14uart_tokenizerhP8as_classE3__c_7>:
     ad2:	38 2e 20 20 41 72 62 69 74 72 61 72 79 20 57 61     8.  Arbitrary Wa
     ae2:	76 65 66 6f 72 6d 20 4d 65 6e 75 0d 00              veform Menu..

00000aef <_ZZ14uart_tokenizerhP8as_classE3__c_6>:
     aef:	37 2e 20 20 53 71 75 61 72 65 20 57 61 76 65 20     7.  Square Wave 
     aff:	4d 65 6e 75 0d 00                                   Menu..

00000b05 <_ZZ14uart_tokenizerhP8as_classE3__c_5>:
     b05:	36 2e 20 20 4c 69 6e 65 61 72 20 53 77 65 65 70     6.  Linear Sweep
     b15:	20 4d 65 6e 75 0d 00                                 Menu..

00000b1c <_ZZ14uart_tokenizerhP8as_classE3__c_4>:
     b1c:	35 2e 20 20 44 65 70 6f 73 69 74 69 6f 6e 20 4d     5.  Deposition M
     b2c:	65 6e 75 0d 00                                      enu..

00000b31 <_ZZ14uart_tokenizerhP8as_classE3__c_3>:
     b31:	34 2e 20 20 54 72 61 6e 73 69 6d 70 65 64 61 6e     4.  Transimpedan
     b41:	63 65 20 41 6d 70 6c 69 66 69 65 72 20 4d 65 6e     ce Amplifier Men
     b51:	75 0d 00                                            u..

00000b54 <_ZZ14uart_tokenizerhP8as_classE3__c_2>:
     b54:	33 2e 20 20 41 44 43 20 53 61 6d 70 6c 65 20 49     3.  ADC Sample I
     b64:	6e 74 65 72 76 61 6c 20 6d 73 00                    nterval ms.

00000b6f <_ZZ14uart_tokenizerhP8as_classE3__c_1>:
     b6f:	32 2e 20 20 4e 75 6d 62 65 72 20 6f 66 20 45 6c     2.  Number of El
     b7f:	65 63 74 72 6f 64 65 73 20 28 32 20 6f 72 20 33     ectrodes (2 or 3
     b8f:	29 3a 20 00                                         ): .

00000b93 <_ZZ14uart_tokenizerhP8as_classE3__c_0>:
     b93:	31 2e 20 20 54 72 61 6e 73 6d 69 73 73 69 6f 6e     1.  Transmission
     ba3:	20 4d 6f 64 65 20 28 41 29 53 43 49 49 2c 20 28      Mode (A)SCII, (
     bb3:	4d 29 61 74 4c 61 62 2c 20 28 42 29 69 6e 61 72     M)atLab, (B)inar
     bc3:	79 3a 20 00                                         y: .

00000bc7 <_ZZ14uart_tokenizerhP8as_classE3__c>:
     bc7:	2d 2d 2d 4d 41 49 4e 20 4d 45 4e 55 2d 2d 2d 0d     ---MAIN MENU---.
	...

00000bd8 <_ZZ7uart_okvE3__c>:
     bd8:	4f 4b 0d 00                                         OK..

00000bdc <_ZZ8uart_errvE3__c>:
     bdc:	45 52 52 0d 00                                      ERR..

00000be1 <_ZZ15uart_true_falsebE3__c_0>:
     be1:	66 61 6c 73 65 00                                   false.

00000be7 <_ZZ15uart_true_falsebE3__c>:
     be7:	74 72 75 65 00                                      true.

00000bec <_ZZ16uart_min_max_intiiE3__c_1>:
     bec:	29 3a 20 00                                         ): .

00000bf0 <_ZZ16uart_min_max_intiiE3__c_0>:
     bf0:	20 74 6f 20 00                                       to .

00000bf5 <_ZZ16uart_min_max_intiiE3__c>:
     bf5:	20 28 00                                             (.

00000bf8 <_ZZ16uart_min_max_u32mmE3__c_1>:
     bf8:	29 3a 20 00                                         ): .

00000bfc <_ZZ16uart_min_max_u32mmE3__c_0>:
     bfc:	20 74 6f 20 00                                       to .

00000c01 <_ZZ16uart_min_max_u32mmE3__c>:
     c01:	20 28 00                                             (.

00000c04 <_ZZ19uart_print_settingsP8as_classE3__c_24>:
     c04:	66 69 6c 74 5f 73 3d 00                             filt_s=.

00000c0c <_ZZ19uart_print_settingsP8as_classE3__c_23>:
     c0c:	66 69 6c 74 5f 65 3d 00                             filt_e=.

00000c14 <_ZZ19uart_print_settingsP8as_classE3__c_22>:
     c14:	61 72 62 5f 63 73 3d 00                             arb_cs=.

00000c1c <_ZZ19uart_print_settingsP8as_classE3__c_21>:
     c1c:	61 72 62 5f 63 3d 00                                arb_c=.

00000c23 <_ZZ19uart_print_settingsP8as_classE3__c_20>:
     c23:	61 72 62 5f 6e 3d 00                                arb_n=.

00000c2a <_ZZ19uart_print_settingsP8as_classE3__c_19>:
     c2a:	73 71 75 61 72 65 5f 70 3d 00                       square_p=.

00000c34 <_ZZ19uart_print_settingsP8as_classE3__c_18>:
     c34:	73 71 75 61 72 65 5f 69 3d 00                       square_i=.

00000c3e <_ZZ19uart_print_settingsP8as_classE3__c_17>:
     c3e:	73 71 75 61 72 65 5f 61 3d 00                       square_a=.

00000c48 <_ZZ19uart_print_settingsP8as_classE3__c_16>:
     c48:	73 71 75 61 72 65 5f 76 65 3d 00                    square_ve=.

00000c53 <_ZZ19uart_print_settingsP8as_classE3__c_15>:
     c53:	73 71 75 61 72 65 5f 76 73 3d 00                    square_vs=.

00000c5e <_ZZ19uart_print_settingsP8as_classE3__c_14>:
     c5e:	73 77 65 65 70 5f 63 73 3d 00                       sweep_cs=.

00000c68 <_ZZ19uart_print_settingsP8as_classE3__c_13>:
     c68:	73 77 65 65 70 5f 63 3d 00                          sweep_c=.

00000c71 <_ZZ19uart_print_settingsP8as_classE3__c_12>:
     c71:	73 77 65 65 70 5f 72 3d 00                          sweep_r=.

00000c7a <_ZZ19uart_print_settingsP8as_classE3__c_11>:
     c7a:	73 77 65 65 70 5f 76 65 3d 00                       sweep_ve=.

00000c84 <_ZZ19uart_print_settingsP8as_classE3__c_10>:
     c84:	73 77 65 65 70 5f 76 73 3d 00                       sweep_vs=.

00000c8e <_ZZ19uart_print_settingsP8as_classE3__c_9>:
     c8e:	64 65 70 5f 72 3d 00                                dep_r=.

00000c95 <_ZZ19uart_print_settingsP8as_classE3__c_8>:
     c95:	71 75 69 65 74 5f 74 3d 00                          quiet_t=.

00000c9e <_ZZ19uart_print_settingsP8as_classE3__c_7>:
     c9e:	64 65 70 5f 76 3d 00                                dep_v=.

00000ca5 <_ZZ19uart_print_settingsP8as_classE3__c_6>:
     ca5:	64 65 70 5f 74 3d 00                                dep_t=.

00000cac <_ZZ19uart_print_settingsP8as_classE3__c_5>:
     cac:	64 65 70 5f 65 3d 00                                dep_e=.

00000cb3 <_ZZ19uart_print_settingsP8as_classE3__c_4>:
     cb3:	74 69 61 5f 63 6d 3d 00                             tia_cm=.

00000cbb <_ZZ19uart_print_settingsP8as_classE3__c_3>:
     cbb:	74 69 61 5f 72 74 3d 00                             tia_rt=.

00000cc3 <_ZZ19uart_print_settingsP8as_classE3__c_2>:
     cc3:	61 64 63 5f 72 3d 00                                adc_r=.

00000cca <_ZZ19uart_print_settingsP8as_classE3__c_1>:
     cca:	6e 75 6d 5f 65 3d 00                                num_e=.

00000cd1 <_ZZ19uart_print_settingsP8as_classE3__c_0>:
     cd1:	27 3b 0d 00                                         ';..

00000cd5 <_ZZ19uart_print_settingsP8as_classE3__c>:
     cd5:	74 78 5f 6d 3d 27 00                                tx_m='.

00000cdc <_ZZ13calibrate_oscvE3__c>:
     cdc:	4f 4b 2e 20 4f 53 43 43 41 4c 20 3d 20 00           OK. OSCCAL = .

00000cea <__ctors_start>:
     cea:	5b 12       	cpse	r5, r27

00000cec <__ctors_end>:
     cec:	11 24       	eor	r1, r1
     cee:	1f be       	out	0x3f, r1	; 63
     cf0:	cf ef       	ldi	r28, 0xFF	; 255
     cf2:	d8 e0       	ldi	r29, 0x08	; 8
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	cd bf       	out	0x3d, r28	; 61

00000cf8 <__do_copy_data>:
     cf8:	11 e0       	ldi	r17, 0x01	; 1
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	b1 e0       	ldi	r27, 0x01	; 1
     cfe:	e0 e2       	ldi	r30, 0x20	; 32
     d00:	f7 e6       	ldi	r31, 0x67	; 103
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <__do_copy_data+0x10>
     d04:	05 90       	lpm	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	a0 32       	cpi	r26, 0x20	; 32
     d0a:	b1 07       	cpc	r27, r17
     d0c:	d9 f7       	brne	.-10     	; 0xd04 <__do_copy_data+0xc>

00000d0e <__do_clear_bss>:
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	a0 e2       	ldi	r26, 0x20	; 32
     d12:	b1 e0       	ldi	r27, 0x01	; 1
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <.do_clear_bss_start>

00000d16 <.do_clear_bss_loop>:
     d16:	1d 92       	st	X+, r1

00000d18 <.do_clear_bss_start>:
     d18:	a4 39       	cpi	r26, 0x94	; 148
     d1a:	b2 07       	cpc	r27, r18
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <.do_clear_bss_loop>

00000d1e <__do_global_ctors>:
     d1e:	1c e0       	ldi	r17, 0x0C	; 12
     d20:	cc ee       	ldi	r28, 0xEC	; 236
     d22:	dc e0       	ldi	r29, 0x0C	; 12
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__do_global_ctors+0x10>
     d26:	22 97       	sbiw	r28, 0x02	; 2
     d28:	fe 01       	movw	r30, r28
     d2a:	0e 94 16 33 	call	0x662c	; 0x662c <__tablejump__>
     d2e:	ca 3e       	cpi	r28, 0xEA	; 234
     d30:	d1 07       	cpc	r29, r17
     d32:	c9 f7       	brne	.-14     	; 0xd26 <__do_global_ctors+0x8>
     d34:	0e 94 a0 06 	call	0xd40	; 0xd40 <main>
     d38:	0c 94 8e 33 	jmp	0x671c	; 0x671c <_exit>

00000d3c <__bad_interrupt>:
     d3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d40 <main>:
as_class as;

int main(void)
{	
	//Setup processor.
	init_processor(&as);
     d40:	87 e4       	ldi	r24, 0x47	; 71
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_Z14init_processorP8as_class>
	
	//Set initial value of tia resistor.
	i2c_load_pot(&as);
     d48:	87 e4       	ldi	r24, 0x47	; 71
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_Z12i2c_load_potP8as_class>
     d50:	ff cf       	rjmp	.-2      	; 0xd50 <main+0x10>

00000d52 <__vector_18>:
	while(1);
}

//Interrupt based UART RX function.
ISR(USART_RX_vect)
{
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	cf 93       	push	r28
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
	uint8_t rx_byte;
	
	rx_byte = UDR0;	//Get RX byte.
     d76:	c0 91 c6 00 	lds	r28, 0x00C6
	
	//Check if in binary mode.
	if (as.get_tx_mode() == TX_MODE_BIN)
     d7a:	87 e4       	ldi	r24, 0x47	; 71
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	b1 f4       	brne	.+44     	; 0xdb2 <__vector_18+0x60>
	{
		//Build input array when idle.
		if(as.get_test_state() == IDLE)
     d86:	87 e4       	ldi	r24, 0x47	; 71
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 33 14 	call	0x2866	; 0x2866 <_ZN8as_class14get_test_stateEv>
     d8e:	81 11       	cpse	r24, r1
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <__vector_18+0x4e>
		{
			//Start timeout timer.
			bin_timeout = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 72 01 	sts	0x0172, r24
			
			//Add byte to array.
			bin_build_array(rx_byte);
     d98:	8c 2f       	mov	r24, r28
     d9a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_Z15bin_build_arrayh>
     d9e:	1d c0       	rjmp	.+58     	; 0xdda <__vector_18+0x88>
		}
		//If not idle and 'x' is received, abort test.
		else if(rx_byte == 'x' || rx_byte == 'X')
     da0:	cf 7d       	andi	r28, 0xDF	; 223
     da2:	c8 35       	cpi	r28, 0x58	; 88
     da4:	d1 f4       	brne	.+52     	; 0xdda <__vector_18+0x88>
		{
			as.set_test_state(ABORT);
     da6:	61 e1       	ldi	r22, 0x11	; 17
     da8:	87 e4       	ldi	r24, 0x47	; 71
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
     db0:	14 c0       	rjmp	.+40     	; 0xdda <__vector_18+0x88>
		}
	}
	else//Must be in ASCII or MatLab mode.
	{		
		//Go to tokenizer when idle.
		if(as.get_test_state() == IDLE)
     db2:	87 e4       	ldi	r24, 0x47	; 71
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 33 14 	call	0x2866	; 0x2866 <_ZN8as_class14get_test_stateEv>
     dba:	81 11       	cpse	r24, r1
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <__vector_18+0x78>
		{
			//Pass byte to tokenizer.
			uart_tokenizer(rx_byte, &as);
     dbe:	67 e4       	ldi	r22, 0x47	; 71
     dc0:	71 e0       	ldi	r23, 0x01	; 1
     dc2:	8c 2f       	mov	r24, r28
     dc4:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <_Z14uart_tokenizerhP8as_class>
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <__vector_18+0x88>
		}
		//If not idle and 'x' is pressed, abort test.
		else if(rx_byte == 'x' || rx_byte == 'X')
     dca:	cf 7d       	andi	r28, 0xDF	; 223
     dcc:	c8 35       	cpi	r28, 0x58	; 88
     dce:	29 f4       	brne	.+10     	; 0xdda <__vector_18+0x88>
		{
			as.set_test_state(ABORT);
     dd0:	61 e1       	ldi	r22, 0x11	; 17
     dd2:	87 e4       	ldi	r24, 0x47	; 71
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		}
	}
}
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	cf 91       	pop	r28
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <__vector_11>:

//16-bit timer used for 1 ms system timing.
ISR(TIMER1_COMPA_vect)
{
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
	static int32_t voltage, sv, ev, temp;
	static uint32_t samp_count, this_offset, sq_amp;
	static uint16_t output, rate, temp_adc;
	static uint8_t this_cyc, tot_cyc, slope, graph_cycles, square_half;
	
	PORTB |= (1 << PORTB0);
     e38:	28 9a       	sbi	0x05, 0	; 5
	
	switch (as.get_test_state())
     e3a:	87 e4       	ldi	r24, 0x47	; 71
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 33 14 	call	0x2866	; 0x2866 <_ZN8as_class14get_test_stateEv>
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	82 31       	cpi	r24, 0x12	; 18
     e46:	91 05       	cpc	r25, r1
     e48:	10 f0       	brcs	.+4      	; 0xe4e <__vector_11+0x50>
     e4a:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__vector_11+0x15de>
     e4e:	fc 01       	movw	r30, r24
     e50:	ec 5c       	subi	r30, 0xCC	; 204
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__tablejump2__>
	{
		case IDLE://Maintenance stuff that happens every millisecond.
			ms_counter = 0;
     e58:	10 92 73 01 	sts	0x0173, r1
     e5c:	10 92 74 01 	sts	0x0174, r1
     e60:	10 92 75 01 	sts	0x0175, r1
     e64:	10 92 76 01 	sts	0x0176, r1
			samp_count = 0;
     e68:	10 92 43 01 	sts	0x0143, r1
     e6c:	10 92 44 01 	sts	0x0144, r1
     e70:	10 92 45 01 	sts	0x0145, r1
     e74:	10 92 46 01 	sts	0x0146, r1
			//Binary transmission timeout handling stuff.
			//Binary transmissions have to rely on a timeout function to
			//determine when to evaluate an array because the array can
			//have any combination of characters so a terminating character
			//is not possible as in the ASCII transmission mode.
			if(bin_timeout > 0 && bin_timeout <= BIN_TIME_MAX)
     e78:	80 91 72 01 	lds	r24, 0x0172
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
     e7e:	98 0f       	add	r25, r24
     e80:	96 30       	cpi	r25, 0x06	; 6
     e82:	18 f4       	brcc	.+6      	; 0xe8a <__vector_11+0x8c>
			{
				bin_timeout++;
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	80 93 72 01 	sts	0x0172, r24
			}
			
			//If timeout occurs, evaluate input array.
			if(bin_timeout >= BIN_TIME_MAX)
     e8a:	80 91 72 01 	lds	r24, 0x0172
     e8e:	86 30       	cpi	r24, 0x06	; 6
     e90:	10 f4       	brcc	.+4      	; 0xe96 <__vector_11+0x98>
     e92:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			{
				bin_timeout = 0;
     e96:	10 92 72 01 	sts	0x0172, r1
				bin_tokenize(&as);
     e9a:	87 e4       	ldi	r24, 0x47	; 71
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <_Z12bin_tokenizeP8as_class>
     ea2:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
		break;
		
		case DEP_INIT:
			i2c_connect_ce();//Always connect counter electrode.
     ea6:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <_Z14i2c_connect_cev>
			
			//Zero out sample counter.
			samp_count = 0;
     eaa:	10 92 43 01 	sts	0x0143, r1
     eae:	10 92 44 01 	sts	0x0144, r1
     eb2:	10 92 45 01 	sts	0x0145, r1
     eb6:	10 92 46 01 	sts	0x0146, r1
			
			//Always print header if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
     eba:	87 e4       	ldi	r24, 0x47	; 71
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	21 f4       	brne	.+8      	; 0xece <__vector_11+0xd0>
			{
				//send all parameters in MatLab format.
				uart_print_settings(&as);
     ec6:	87 e4       	ldi	r24, 0x47	; 71
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Z19uart_print_settingsP8as_class>
			}
			
			if(as.get_dep_enable())//Prep for deposition.
     ece:	87 e4       	ldi	r24, 0x47	; 71
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN8as_class14get_dep_enableEv>
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <__vector_11+0xde>
     eda:	5b c0       	rjmp	.+182    	; 0xf92 <__vector_11+0x194>
			{
				
				//Create MatLab array for deposition currents if they are to be streamed.
				if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_MATLAB)
     edc:	87 e4       	ldi	r24, 0x47	; 71
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
     ee4:	88 23       	and	r24, r24
     ee6:	59 f0       	breq	.+22     	; 0xefe <__vector_11+0x100>
     ee8:	87 e4       	ldi	r24, 0x47	; 71
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	29 f4       	brne	.+10     	; 0xefe <__vector_11+0x100>
				{
					atmega_uart::tx_string_p(PSTR("d=["));
     ef4:	84 e9       	ldi	r24, 0x94	; 148
     ef6:	94 e0       	ldi	r25, 0x04	; 4
     ef8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
     efc:	24 c0       	rjmp	.+72     	; 0xf46 <__vector_11+0x148>
				}
				//Send ASCII deposition data word.
				else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_ASCII)
     efe:	87 e4       	ldi	r24, 0x47	; 71
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
     f06:	88 23       	and	r24, r24
     f08:	71 f0       	breq	.+28     	; 0xf26 <__vector_11+0x128>
     f0a:	87 e4       	ldi	r24, 0x47	; 71
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
     f12:	81 11       	cpse	r24, r1
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <__vector_11+0x128>
				{
					tx_u16_to_ascii(DEP_DATA);
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e8       	ldi	r25, 0x80	; 128
     f1a:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
     f1e:	8c e2       	ldi	r24, 0x2C	; 44
     f20:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
     f24:	10 c0       	rjmp	.+32     	; 0xf46 <__vector_11+0x148>
				}
				//send binary deposition word.
				else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_BIN)
     f26:	87 e4       	ldi	r24, 0x47	; 71
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
     f2e:	88 23       	and	r24, r24
     f30:	51 f0       	breq	.+20     	; 0xf46 <__vector_11+0x148>
     f32:	87 e4       	ldi	r24, 0x47	; 71
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	21 f4       	brne	.+8      	; 0xf46 <__vector_11+0x148>
				{
					atmega_uart::tx_word(DEP_DATA);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e8       	ldi	r25, 0x80	; 128
     f42:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				}
				
				//Set deposition voltage.
				voltage = ZERO_VOLT + (1000L * as.get_dep_volt() / V_PER_COUNT);
     f46:	87 e4       	ldi	r24, 0x47	; 71
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN8as_class12get_dep_voltEv>
     f4e:	28 ee       	ldi	r18, 0xE8	; 232
     f50:	33 e0       	ldi	r19, 0x03	; 3
     f52:	dc 01       	movw	r26, r24
     f54:	0e 94 29 33 	call	0x6652	; 0x6652 <__usmulhisi3>
     f58:	26 e2       	ldi	r18, 0x26	; 38
     f5a:	33 e0       	ldi	r19, 0x03	; 3
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
     f64:	da 01       	movw	r26, r20
     f66:	c9 01       	movw	r24, r18
     f68:	81 50       	subi	r24, 0x01	; 1
     f6a:	98 4f       	sbci	r25, 0xF8	; 248
     f6c:	af 4f       	sbci	r26, 0xFF	; 255
     f6e:	bf 4f       	sbci	r27, 0xFF	; 255
     f70:	80 93 3f 01 	sts	0x013F, r24
     f74:	90 93 40 01 	sts	0x0140, r25
     f78:	a0 93 41 01 	sts	0x0141, r26
     f7c:	b0 93 42 01 	sts	0x0142, r27
				write_dac(voltage);
     f80:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
				
				//move to next state.
				as.set_test_state(DEPOSIT);
     f84:	62 e0       	ldi	r22, 0x02	; 2
     f86:	87 e4       	ldi	r24, 0x47	; 71
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
     f8e:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
			else//Skip deposition and quiet time.
			{
				if(as.get_test_type() == TEST_LIN)
     f92:	87 e4       	ldi	r24, 0x47	; 71
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
     f9a:	81 11       	cpse	r24, r1
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <__vector_11+0x1ae>
				{
					as.set_test_state(RAMP_INIT);//Start linear sweep test.
     f9e:	67 e0       	ldi	r22, 0x07	; 7
     fa0:	87 e4       	ldi	r24, 0x47	; 71
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
     fa8:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
				}
				else if(as.get_test_type() == TEST_SQR)
     fac:	87 e4       	ldi	r24, 0x47	; 71
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <__vector_11+0x1c8>
				{
					as.set_test_state(SQUARE_INIT);//Start square wave test.
     fb8:	6a e0       	ldi	r22, 0x0A	; 10
     fba:	87 e4       	ldi	r24, 0x47	; 71
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
     fc2:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
				}
				else
				{
					as.set_test_state(ARB_INIT);//Start arbitrary waveform test.
     fc6:	6d e0       	ldi	r22, 0x0D	; 13
     fc8:	87 e4       	ldi	r24, 0x47	; 71
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
     fd0:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
				}
			}	
		break;
		 
		case DEPOSIT:
			if(ms_counter < as.get_dep_time())
     fd4:	87 e4       	ldi	r24, 0x47	; 71
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN8as_class12get_dep_timeEv>
     fdc:	c0 90 73 01 	lds	r12, 0x0173
     fe0:	d0 90 74 01 	lds	r13, 0x0174
     fe4:	e0 90 75 01 	lds	r14, 0x0175
     fe8:	f0 90 76 01 	lds	r15, 0x0176
     fec:	c6 16       	cp	r12, r22
     fee:	d7 06       	cpc	r13, r23
     ff0:	e8 06       	cpc	r14, r24
     ff2:	f9 06       	cpc	r15, r25
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <__vector_11+0x1fa>
     ff6:	9a c0       	rjmp	.+308    	; 0x112c <__vector_11+0x32e>
			{
				if(as.get_soft_filt())//Use filter.
     ff8:	87 e4       	ldi	r24, 0x47	; 71
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN8as_class13get_soft_filtEv>
    1000:	88 23       	and	r24, r24
    1002:	59 f0       	breq	.+22     	; 0x101a <__vector_11+0x21c>
				{
					output = lpf(read_adc(), &as);
    1004:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    1008:	67 e4       	ldi	r22, 0x47	; 71
    100a:	71 e0       	ldi	r23, 0x01	; 1
    100c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_Z3lpfjP8as_class>
    1010:	90 93 3e 01 	sts	0x013E, r25
    1014:	80 93 3d 01 	sts	0x013D, r24
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <__vector_11+0x228>
				}
				else//Do not use software filter.
				{
					output = read_adc();
    101a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    101e:	90 93 3e 01 	sts	0x013E, r25
    1022:	80 93 3d 01 	sts	0x013D, r24
				}
				
				//Check if time to transmit another sample.
				if((!(ms_counter % as.get_adc_rate())) && as.get_dep_rec())
    1026:	c0 90 73 01 	lds	r12, 0x0173
    102a:	d0 90 74 01 	lds	r13, 0x0174
    102e:	e0 90 75 01 	lds	r14, 0x0175
    1032:	f0 90 76 01 	lds	r15, 0x0176
    1036:	87 e4       	ldi	r24, 0x47	; 71
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN8as_class12get_adc_rateEv>
    103e:	9c 01       	movw	r18, r24
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	c7 01       	movw	r24, r14
    1046:	b6 01       	movw	r22, r12
    1048:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    104c:	67 2b       	or	r22, r23
    104e:	68 2b       	or	r22, r24
    1050:	69 2b       	or	r22, r25
    1052:	09 f0       	breq	.+2      	; 0x1056 <__vector_11+0x258>
    1054:	56 c0       	rjmp	.+172    	; 0x1102 <__vector_11+0x304>
    1056:	87 e4       	ldi	r24, 0x47	; 71
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    105e:	88 23       	and	r24, r24
    1060:	09 f4       	brne	.+2      	; 0x1064 <__vector_11+0x266>
    1062:	4f c0       	rjmp	.+158    	; 0x1102 <__vector_11+0x304>
				{
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    1064:	87 e4       	ldi	r24, 0x47	; 71
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	99 f5       	brne	.+102    	; 0x10d6 <__vector_11+0x2d8>
					{
						tx_u16_to_ascii(output);
    1070:	80 91 3d 01 	lds	r24, 0x013D
    1074:	90 91 3e 01 	lds	r25, 0x013E
    1078:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    107c:	8c e2       	ldi	r24, 0x2C	; 44
    107e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
						
						//Indicate a new sample has been sent.
						samp_count++;
    1082:	80 91 43 01 	lds	r24, 0x0143
    1086:	90 91 44 01 	lds	r25, 0x0144
    108a:	a0 91 45 01 	lds	r26, 0x0145
    108e:	b0 91 46 01 	lds	r27, 0x0146
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	6f 5f       	subi	r22, 0xFF	; 255
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
    109a:	8f 4f       	sbci	r24, 0xFF	; 255
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	60 93 43 01 	sts	0x0143, r22
    10a2:	70 93 44 01 	sts	0x0144, r23
    10a6:	80 93 45 01 	sts	0x0145, r24
    10aa:	90 93 46 01 	sts	0x0146, r25
						
						//Start newline if 10 or more samples on this line.
						if(samp_count && !(samp_count % 10))
    10ae:	61 15       	cp	r22, r1
    10b0:	71 05       	cpc	r23, r1
    10b2:	81 05       	cpc	r24, r1
    10b4:	91 05       	cpc	r25, r1
    10b6:	29 f1       	breq	.+74     	; 0x1102 <__vector_11+0x304>
    10b8:	2a e0       	ldi	r18, 0x0A	; 10
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    10c4:	67 2b       	or	r22, r23
    10c6:	68 2b       	or	r22, r24
    10c8:	69 2b       	or	r22, r25
    10ca:	d9 f4       	brne	.+54     	; 0x1102 <__vector_11+0x304>
						{
							atmega_uart::tx_string_p(PSTR("...\r"));
    10cc:	8f e8       	ldi	r24, 0x8F	; 143
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    10d4:	16 c0       	rjmp	.+44     	; 0x1102 <__vector_11+0x304>
						}
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    10d6:	87 e4       	ldi	r24, 0x47	; 71
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    10de:	81 11       	cpse	r24, r1
    10e0:	0a c0       	rjmp	.+20     	; 0x10f6 <__vector_11+0x2f8>
					{
						tx_u16_to_ascii(output);
    10e2:	80 91 3d 01 	lds	r24, 0x013D
    10e6:	90 91 3e 01 	lds	r25, 0x013E
    10ea:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    10ee:	8c e2       	ldi	r24, 0x2C	; 44
    10f0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <__vector_11+0x304>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(output);
    10f6:	80 91 3d 01 	lds	r24, 0x013D
    10fa:	90 91 3e 01 	lds	r25, 0x013E
    10fe:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
					}
				}
				
				ms_counter++;//Always increment counter.
    1102:	80 91 73 01 	lds	r24, 0x0173
    1106:	90 91 74 01 	lds	r25, 0x0174
    110a:	a0 91 75 01 	lds	r26, 0x0175
    110e:	b0 91 76 01 	lds	r27, 0x0176
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	a1 1d       	adc	r26, r1
    1116:	b1 1d       	adc	r27, r1
    1118:	80 93 73 01 	sts	0x0173, r24
    111c:	90 93 74 01 	sts	0x0174, r25
    1120:	a0 93 75 01 	sts	0x0175, r26
    1124:	b0 93 76 01 	sts	0x0176, r27
    1128:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
			else
			{
				as.set_test_state(DEP_STOP);//Stop deposition.
    112c:	63 e0       	ldi	r22, 0x03	; 3
    112e:	87 e4       	ldi	r24, 0x47	; 71
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    1136:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
		break;
		
		case DEP_STOP:
			//Print end character if deposition is being recorded.
			if(as.get_dep_rec())
    113a:	87 e4       	ldi	r24, 0x47	; 71
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    1142:	88 23       	and	r24, r24
    1144:	e9 f0       	breq	.+58     	; 0x1180 <__vector_11+0x382>
			{
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    1146:	87 e4       	ldi	r24, 0x47	; 71
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	29 f4       	brne	.+10     	; 0x115c <__vector_11+0x35e>
				{
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    1152:	8a e8       	ldi	r24, 0x8A	; 138
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    115a:	12 c0       	rjmp	.+36     	; 0x1180 <__vector_11+0x382>
				}
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    115c:	87 e4       	ldi	r24, 0x47	; 71
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1164:	81 11       	cpse	r24, r1
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <__vector_11+0x37a>
				{
					tx_u16_to_ascii(END_BLOCK);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    1170:	8c e2       	ldi	r24, 0x2C	; 44
    1172:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <__vector_11+0x382>
				}
				//Print binary data.
				else
				{
					atmega_uart::tx_word(END_BLOCK);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	9f ef       	ldi	r25, 0xFF	; 255
    117c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				}
			}
			
			if(as.get_quiet_time())
    1180:	87 e4       	ldi	r24, 0x47	; 71
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN8as_class14get_quiet_timeEv>
    1188:	67 2b       	or	r22, r23
    118a:	68 2b       	or	r22, r24
    118c:	69 2b       	or	r22, r25
    118e:	39 f0       	breq	.+14     	; 0x119e <__vector_11+0x3a0>
			{
				//Start quiet time.
				as.set_test_state(QUIET_INIT);
    1190:	64 e0       	ldi	r22, 0x04	; 4
    1192:	87 e4       	ldi	r24, 0x47	; 71
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    119a:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
			else if(as.get_test_type() == TEST_LIN)
    119e:	87 e4       	ldi	r24, 0x47	; 71
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
    11a6:	81 11       	cpse	r24, r1
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <__vector_11+0x3ba>
			{
				//Start linear sweep.
				as.set_test_state(RAMP_INIT);
    11aa:	67 e0       	ldi	r22, 0x07	; 7
    11ac:	87 e4       	ldi	r24, 0x47	; 71
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    11b4:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
			else if(as.get_test_type() == TEST_SQR)
    11b8:	87 e4       	ldi	r24, 0x47	; 71
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	39 f4       	brne	.+14     	; 0x11d2 <__vector_11+0x3d4>
			{
				//Start square wave.
				as.set_test_state(SQUARE_INIT);
    11c4:	6a e0       	ldi	r22, 0x0A	; 10
    11c6:	87 e4       	ldi	r24, 0x47	; 71
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    11ce:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
			else
			{
				//Start arbitrary waveform.
				as.set_test_state(ARB_INIT);
    11d2:	6d e0       	ldi	r22, 0x0D	; 13
    11d4:	87 e4       	ldi	r24, 0x47	; 71
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    11dc:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}	
		break;
		
		case QUIET_INIT:
			//Zero out sample counter.
			samp_count = 0;
    11e0:	10 92 43 01 	sts	0x0143, r1
    11e4:	10 92 44 01 	sts	0x0144, r1
    11e8:	10 92 45 01 	sts	0x0145, r1
    11ec:	10 92 46 01 	sts	0x0146, r1
			
			//Zero out ms counter.
			ms_counter = 0;
    11f0:	10 92 73 01 	sts	0x0173, r1
    11f4:	10 92 74 01 	sts	0x0174, r1
    11f8:	10 92 75 01 	sts	0x0175, r1
    11fc:	10 92 76 01 	sts	0x0176, r1
			
			//Create MatLab array for quiet time currents if they are to be streamed.
			if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_MATLAB)
    1200:	87 e4       	ldi	r24, 0x47	; 71
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    1208:	88 23       	and	r24, r24
    120a:	59 f0       	breq	.+22     	; 0x1222 <__vector_11+0x424>
    120c:	87 e4       	ldi	r24, 0x47	; 71
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	29 f4       	brne	.+10     	; 0x1222 <__vector_11+0x424>
			{
				atmega_uart::tx_string_p(PSTR("q=["));
    1218:	86 e8       	ldi	r24, 0x86	; 134
    121a:	94 e0       	ldi	r25, 0x04	; 4
    121c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1220:	24 c0       	rjmp	.+72     	; 0x126a <__vector_11+0x46c>
			}
			//Send ASCII deposition data word.
			else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_ASCII)
    1222:	87 e4       	ldi	r24, 0x47	; 71
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    122a:	88 23       	and	r24, r24
    122c:	71 f0       	breq	.+28     	; 0x124a <__vector_11+0x44c>
    122e:	87 e4       	ldi	r24, 0x47	; 71
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1236:	81 11       	cpse	r24, r1
    1238:	08 c0       	rjmp	.+16     	; 0x124a <__vector_11+0x44c>
			{
				tx_u16_to_ascii(QUIET_DATA);
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	91 e8       	ldi	r25, 0x81	; 129
    123e:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1242:	8c e2       	ldi	r24, 0x2C	; 44
    1244:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1248:	10 c0       	rjmp	.+32     	; 0x126a <__vector_11+0x46c>
			}
			//send binary deposition word.
			else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_BIN)
    124a:	87 e4       	ldi	r24, 0x47	; 71
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    1252:	88 23       	and	r24, r24
    1254:	51 f0       	breq	.+20     	; 0x126a <__vector_11+0x46c>
    1256:	87 e4       	ldi	r24, 0x47	; 71
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	21 f4       	brne	.+8      	; 0x126a <__vector_11+0x46c>
			{
				atmega_uart::tx_word(QUIET_DATA);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	91 e8       	ldi	r25, 0x81	; 129
    1266:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
			}
			
			//move to next state.
			as.set_test_state(QUIET);
    126a:	65 e0       	ldi	r22, 0x05	; 5
    126c:	87 e4       	ldi	r24, 0x47	; 71
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    1274:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
		
		case QUIET:
			if(ms_counter < as.get_quiet_time())
    1278:	87 e4       	ldi	r24, 0x47	; 71
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN8as_class14get_quiet_timeEv>
    1280:	c0 90 73 01 	lds	r12, 0x0173
    1284:	d0 90 74 01 	lds	r13, 0x0174
    1288:	e0 90 75 01 	lds	r14, 0x0175
    128c:	f0 90 76 01 	lds	r15, 0x0176
    1290:	c6 16       	cp	r12, r22
    1292:	d7 06       	cpc	r13, r23
    1294:	e8 06       	cpc	r14, r24
    1296:	f9 06       	cpc	r15, r25
    1298:	08 f0       	brcs	.+2      	; 0x129c <__vector_11+0x49e>
    129a:	9a c0       	rjmp	.+308    	; 0x13d0 <__vector_11+0x5d2>
			{
				if(as.get_soft_filt())//Use filter.
    129c:	87 e4       	ldi	r24, 0x47	; 71
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN8as_class13get_soft_filtEv>
    12a4:	88 23       	and	r24, r24
    12a6:	59 f0       	breq	.+22     	; 0x12be <__vector_11+0x4c0>
				{
					output = lpf(read_adc(), &as);
    12a8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    12ac:	67 e4       	ldi	r22, 0x47	; 71
    12ae:	71 e0       	ldi	r23, 0x01	; 1
    12b0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_Z3lpfjP8as_class>
    12b4:	90 93 3e 01 	sts	0x013E, r25
    12b8:	80 93 3d 01 	sts	0x013D, r24
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <__vector_11+0x4cc>
				}
				else//Do not use software filter.
				{
					output = read_adc();
    12be:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    12c2:	90 93 3e 01 	sts	0x013E, r25
    12c6:	80 93 3d 01 	sts	0x013D, r24
				}
				
				//Check if time to transmit another sample.
				if((!(ms_counter % as.get_adc_rate())) && as.get_dep_rec())
    12ca:	c0 90 73 01 	lds	r12, 0x0173
    12ce:	d0 90 74 01 	lds	r13, 0x0174
    12d2:	e0 90 75 01 	lds	r14, 0x0175
    12d6:	f0 90 76 01 	lds	r15, 0x0176
    12da:	87 e4       	ldi	r24, 0x47	; 71
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN8as_class12get_adc_rateEv>
    12e2:	9c 01       	movw	r18, r24
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	c7 01       	movw	r24, r14
    12ea:	b6 01       	movw	r22, r12
    12ec:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    12f0:	67 2b       	or	r22, r23
    12f2:	68 2b       	or	r22, r24
    12f4:	69 2b       	or	r22, r25
    12f6:	09 f0       	breq	.+2      	; 0x12fa <__vector_11+0x4fc>
    12f8:	56 c0       	rjmp	.+172    	; 0x13a6 <__vector_11+0x5a8>
    12fa:	87 e4       	ldi	r24, 0x47	; 71
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    1302:	88 23       	and	r24, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <__vector_11+0x50a>
    1306:	4f c0       	rjmp	.+158    	; 0x13a6 <__vector_11+0x5a8>
				{
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    1308:	87 e4       	ldi	r24, 0x47	; 71
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	99 f5       	brne	.+102    	; 0x137a <__vector_11+0x57c>
					{
						tx_u16_to_ascii(output);
    1314:	80 91 3d 01 	lds	r24, 0x013D
    1318:	90 91 3e 01 	lds	r25, 0x013E
    131c:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1320:	8c e2       	ldi	r24, 0x2C	; 44
    1322:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
						
						//Indicate a new sample has been sent.
						samp_count++;
    1326:	80 91 43 01 	lds	r24, 0x0143
    132a:	90 91 44 01 	lds	r25, 0x0144
    132e:	a0 91 45 01 	lds	r26, 0x0145
    1332:	b0 91 46 01 	lds	r27, 0x0146
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	60 93 43 01 	sts	0x0143, r22
    1346:	70 93 44 01 	sts	0x0144, r23
    134a:	80 93 45 01 	sts	0x0145, r24
    134e:	90 93 46 01 	sts	0x0146, r25
						
						//Start newline if 10 or more samples on this line.
						if(samp_count && !(samp_count % 10))
    1352:	61 15       	cp	r22, r1
    1354:	71 05       	cpc	r23, r1
    1356:	81 05       	cpc	r24, r1
    1358:	91 05       	cpc	r25, r1
    135a:	29 f1       	breq	.+74     	; 0x13a6 <__vector_11+0x5a8>
    135c:	2a e0       	ldi	r18, 0x0A	; 10
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    1368:	67 2b       	or	r22, r23
    136a:	68 2b       	or	r22, r24
    136c:	69 2b       	or	r22, r25
    136e:	d9 f4       	brne	.+54     	; 0x13a6 <__vector_11+0x5a8>
						{
							atmega_uart::tx_string_p(PSTR("...\r"));
    1370:	81 e8       	ldi	r24, 0x81	; 129
    1372:	94 e0       	ldi	r25, 0x04	; 4
    1374:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1378:	16 c0       	rjmp	.+44     	; 0x13a6 <__vector_11+0x5a8>
						}
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    137a:	87 e4       	ldi	r24, 0x47	; 71
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1382:	81 11       	cpse	r24, r1
    1384:	0a c0       	rjmp	.+20     	; 0x139a <__vector_11+0x59c>
					{
						tx_u16_to_ascii(output);
    1386:	80 91 3d 01 	lds	r24, 0x013D
    138a:	90 91 3e 01 	lds	r25, 0x013E
    138e:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1392:	8c e2       	ldi	r24, 0x2C	; 44
    1394:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <__vector_11+0x5a8>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(output);
    139a:	80 91 3d 01 	lds	r24, 0x013D
    139e:	90 91 3e 01 	lds	r25, 0x013E
    13a2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
					}
				}
				
				ms_counter++;//Always increment counter.
    13a6:	80 91 73 01 	lds	r24, 0x0173
    13aa:	90 91 74 01 	lds	r25, 0x0174
    13ae:	a0 91 75 01 	lds	r26, 0x0175
    13b2:	b0 91 76 01 	lds	r27, 0x0176
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	a1 1d       	adc	r26, r1
    13ba:	b1 1d       	adc	r27, r1
    13bc:	80 93 73 01 	sts	0x0173, r24
    13c0:	90 93 74 01 	sts	0x0174, r25
    13c4:	a0 93 75 01 	sts	0x0175, r26
    13c8:	b0 93 76 01 	sts	0x0176, r27
    13cc:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
			else
			{
				as.set_test_state(QUIET_STOP);//Stop quiet time.
    13d0:	66 e0       	ldi	r22, 0x06	; 6
    13d2:	87 e4       	ldi	r24, 0x47	; 71
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    13da:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_11+0x15f4>
			}
		break;
		
		case QUIET_STOP:
			//Print end character if quiet time is being recorded.
			if(as.get_dep_rec())
    13de:	87 e4       	ldi	r24, 0x47	; 71
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    13e6:	88 23       	and	r24, r24
    13e8:	e9 f0       	breq	.+58     	; 0x1424 <__vector_11+0x626>
			{
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    13ea:	87 e4       	ldi	r24, 0x47	; 71
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	29 f4       	brne	.+10     	; 0x1400 <__vector_11+0x602>
				{
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    13f6:	8c e7       	ldi	r24, 0x7C	; 124
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    13fe:	12 c0       	rjmp	.+36     	; 0x1424 <__vector_11+0x626>
				}
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    1400:	87 e4       	ldi	r24, 0x47	; 71
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1408:	81 11       	cpse	r24, r1
    140a:	08 c0       	rjmp	.+16     	; 0x141c <__vector_11+0x61e>
				{
					tx_u16_to_ascii(END_BLOCK);
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	9f ef       	ldi	r25, 0xFF	; 255
    1410:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    1414:	8c e2       	ldi	r24, 0x2C	; 44
    1416:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <__vector_11+0x626>
				}
				//Print binary data.
				else
				{
					atmega_uart::tx_word(END_BLOCK);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	9f ef       	ldi	r25, 0xFF	; 255
    1420:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				}
			}
			
			if(as.get_test_type() == TEST_LIN)
    1424:	87 e4       	ldi	r24, 0x47	; 71
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
    142c:	81 11       	cpse	r24, r1
    142e:	06 c0       	rjmp	.+12     	; 0x143c <__vector_11+0x63e>
			{
				//Start linear sweep.
				as.set_test_state(RAMP_INIT);
    1430:	67 e0       	ldi	r22, 0x07	; 7
    1432:	87 e4       	ldi	r24, 0x47	; 71
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    143a:	db c7       	rjmp	.+4022   	; 0x23f2 <__vector_11+0x15f4>
			}
			else if(as.get_test_type() == TEST_SQR)
    143c:	87 e4       	ldi	r24, 0x47	; 71
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	31 f4       	brne	.+12     	; 0x1454 <__vector_11+0x656>
			{
				//Start square wave.
				as.set_test_state(SQUARE_INIT);
    1448:	6a e0       	ldi	r22, 0x0A	; 10
    144a:	87 e4       	ldi	r24, 0x47	; 71
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    1452:	cf c7       	rjmp	.+3998   	; 0x23f2 <__vector_11+0x15f4>
			}
			else
			{
				//Start arbitrary waveform.
				as.set_test_state(ARB_INIT);
    1454:	6d e0       	ldi	r22, 0x0D	; 13
    1456:	87 e4       	ldi	r24, 0x47	; 71
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    145e:	c9 c7       	rjmp	.+3986   	; 0x23f2 <__vector_11+0x15f4>
			}
		break;
		
		case RAMP_INIT:
			//Initialize variables.
			this_cyc = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	80 93 3c 01 	sts	0x013C, r24
			samp_count = 0;
    1466:	10 92 43 01 	sts	0x0143, r1
    146a:	10 92 44 01 	sts	0x0144, r1
    146e:	10 92 45 01 	sts	0x0145, r1
    1472:	10 92 46 01 	sts	0x0146, r1
			tot_cyc = as.get_sweep_cycles() * 2;
    1476:	87 e4       	ldi	r24, 0x47	; 71
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN8as_class16get_sweep_cyclesEv>
    147e:	88 0f       	add	r24, r24
    1480:	80 93 3b 01 	sts	0x013B, r24
			sv = ZERO_VOLT + (1000L * as.get_sweep_volt_start() / V_PER_COUNT);
    1484:	87 e4       	ldi	r24, 0x47	; 71
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN8as_class20get_sweep_volt_startEv>
    148c:	28 ee       	ldi	r18, 0xE8	; 232
    148e:	33 e0       	ldi	r19, 0x03	; 3
    1490:	dc 01       	movw	r26, r24
    1492:	0e 94 29 33 	call	0x6652	; 0x6652 <__usmulhisi3>
    1496:	0f 2e       	mov	r0, r31
    1498:	f6 e2       	ldi	r31, 0x26	; 38
    149a:	cf 2e       	mov	r12, r31
    149c:	f3 e0       	ldi	r31, 0x03	; 3
    149e:	df 2e       	mov	r13, r31
    14a0:	e1 2c       	mov	r14, r1
    14a2:	f1 2c       	mov	r15, r1
    14a4:	f0 2d       	mov	r31, r0
    14a6:	a7 01       	movw	r20, r14
    14a8:	96 01       	movw	r18, r12
    14aa:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    14ae:	da 01       	movw	r26, r20
    14b0:	c9 01       	movw	r24, r18
    14b2:	81 50       	subi	r24, 0x01	; 1
    14b4:	98 4f       	sbci	r25, 0xF8	; 248
    14b6:	af 4f       	sbci	r26, 0xFF	; 255
    14b8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ba:	80 93 37 01 	sts	0x0137, r24
    14be:	90 93 38 01 	sts	0x0138, r25
    14c2:	a0 93 39 01 	sts	0x0139, r26
    14c6:	b0 93 3a 01 	sts	0x013A, r27
			ev = ZERO_VOLT + (1000L * as.get_sweep_volt_end() / V_PER_COUNT);
    14ca:	87 e4       	ldi	r24, 0x47	; 71
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN8as_class18get_sweep_volt_endEv>
    14d2:	28 ee       	ldi	r18, 0xE8	; 232
    14d4:	33 e0       	ldi	r19, 0x03	; 3
    14d6:	dc 01       	movw	r26, r24
    14d8:	0e 94 29 33 	call	0x6652	; 0x6652 <__usmulhisi3>
    14dc:	a7 01       	movw	r20, r14
    14de:	96 01       	movw	r18, r12
    14e0:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    14e4:	da 01       	movw	r26, r20
    14e6:	c9 01       	movw	r24, r18
    14e8:	81 50       	subi	r24, 0x01	; 1
    14ea:	98 4f       	sbci	r25, 0xF8	; 248
    14ec:	af 4f       	sbci	r26, 0xFF	; 255
    14ee:	bf 4f       	sbci	r27, 0xFF	; 255
    14f0:	80 93 33 01 	sts	0x0133, r24
    14f4:	90 93 34 01 	sts	0x0134, r25
    14f8:	a0 93 35 01 	sts	0x0135, r26
    14fc:	b0 93 36 01 	sts	0x0136, r27
			rate = as.get_sweep_rate();	
    1500:	87 e4       	ldi	r24, 0x47	; 71
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN8as_class14get_sweep_rateEv>
    1508:	90 93 32 01 	sts	0x0132, r25
    150c:	80 93 31 01 	sts	0x0131, r24
			ms_counter = 0;	
    1510:	10 92 73 01 	sts	0x0173, r1
    1514:	10 92 74 01 	sts	0x0174, r1
    1518:	10 92 75 01 	sts	0x0175, r1
    151c:	10 92 76 01 	sts	0x0176, r1
			
			//Determine initial slope.
			if(sv < ev)
    1520:	40 91 37 01 	lds	r20, 0x0137
    1524:	50 91 38 01 	lds	r21, 0x0138
    1528:	60 91 39 01 	lds	r22, 0x0139
    152c:	70 91 3a 01 	lds	r23, 0x013A
    1530:	80 91 33 01 	lds	r24, 0x0133
    1534:	90 91 34 01 	lds	r25, 0x0134
    1538:	a0 91 35 01 	lds	r26, 0x0135
    153c:	b0 91 36 01 	lds	r27, 0x0136
    1540:	48 17       	cp	r20, r24
    1542:	59 07       	cpc	r21, r25
    1544:	6a 07       	cpc	r22, r26
    1546:	7b 07       	cpc	r23, r27
    1548:	24 f4       	brge	.+8      	; 0x1552 <__vector_11+0x754>
			{
				slope = POS_SLOPE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 30 01 	sts	0x0130, r24
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <__vector_11+0x758>
			}
			else
			{
				slope = NEG_SLOPE;
    1552:	10 92 30 01 	sts	0x0130, r1
			}
			
			//Print initial stream data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    1556:	87 e4       	ldi	r24, 0x47	; 71
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	69 f4       	brne	.+26     	; 0x157c <__vector_11+0x77e>
			{
				atmega_uart::tx_byte('s');
    1562:	83 e7       	ldi	r24, 0x73	; 115
    1564:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(this_cyc);
    1568:	80 91 3c 01 	lds	r24, 0x013C
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
				atmega_uart::tx_string_p(PSTR("=["));
    1572:	89 e7       	ldi	r24, 0x79	; 121
    1574:	94 e0       	ldi	r25, 0x04	; 4
    1576:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    157a:	16 c0       	rjmp	.+44     	; 0x15a8 <__vector_11+0x7aa>
			}
			else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    157c:	87 e4       	ldi	r24, 0x47	; 71
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1584:	81 11       	cpse	r24, r1
    1586:	0a c0       	rjmp	.+20     	; 0x159c <__vector_11+0x79e>
			{
				tx_u16_to_ascii(LIN_DATA + this_cyc);
    1588:	80 91 3c 01 	lds	r24, 0x013C
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9e 57       	subi	r25, 0x7E	; 126
    1590:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1594:	8c e2       	ldi	r24, 0x2C	; 44
    1596:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <__vector_11+0x7aa>
			}
			else//Print binary data.
			{
				atmega_uart::tx_word(LIN_DATA + this_cyc);
    159c:	80 91 3c 01 	lds	r24, 0x013C
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9e 57       	subi	r25, 0x7E	; 126
    15a4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
			}
			
			write_dac(sv);//Write initial DAC value.
    15a8:	80 91 37 01 	lds	r24, 0x0137
    15ac:	90 91 38 01 	lds	r25, 0x0138
    15b0:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
			i2c_connect_ce();//Always connect counter electrode.
    15b4:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <_Z14i2c_connect_cev>
			ms_counter++;//Always increment counter.
    15b8:	80 91 73 01 	lds	r24, 0x0173
    15bc:	90 91 74 01 	lds	r25, 0x0174
    15c0:	a0 91 75 01 	lds	r26, 0x0175
    15c4:	b0 91 76 01 	lds	r27, 0x0176
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	a1 1d       	adc	r26, r1
    15cc:	b1 1d       	adc	r27, r1
    15ce:	80 93 73 01 	sts	0x0173, r24
    15d2:	90 93 74 01 	sts	0x0174, r25
    15d6:	a0 93 75 01 	sts	0x0175, r26
    15da:	b0 93 76 01 	sts	0x0176, r27
			as.set_test_state(RAMP);
    15de:	68 e0       	ldi	r22, 0x08	; 8
    15e0:	87 e4       	ldi	r24, 0x47	; 71
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    15e8:	04 c7       	rjmp	.+3592   	; 0x23f2 <__vector_11+0x15f4>
		
		case RAMP:
			//Calculate current offset for the DAC.
			this_offset = rate * ms_counter / V_PER_COUNT;
    15ea:	a0 91 31 01 	lds	r26, 0x0131
    15ee:	b0 91 32 01 	lds	r27, 0x0132
    15f2:	20 91 73 01 	lds	r18, 0x0173
    15f6:	30 91 74 01 	lds	r19, 0x0174
    15fa:	40 91 75 01 	lds	r20, 0x0175
    15fe:	50 91 76 01 	lds	r21, 0x0176
    1602:	0e 94 30 33 	call	0x6660	; 0x6660 <__muluhisi3>
    1606:	26 e2       	ldi	r18, 0x26	; 38
    1608:	33 e0       	ldi	r19, 0x03	; 3
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    1612:	20 93 2c 01 	sts	0x012C, r18
    1616:	30 93 2d 01 	sts	0x012D, r19
    161a:	40 93 2e 01 	sts	0x012E, r20
    161e:	50 93 2f 01 	sts	0x012F, r21
			
			if(slope == POS_SLOPE)//Positive slope.
    1622:	80 91 30 01 	lds	r24, 0x0130
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	09 f0       	breq	.+2      	; 0x162c <__vector_11+0x82e>
    162a:	cb c0       	rjmp	.+406    	; 0x17c2 <__vector_11+0x9c4>
			{
				if(sv + (int32_t)this_offset < ev)//More to go.
    162c:	80 91 37 01 	lds	r24, 0x0137
    1630:	90 91 38 01 	lds	r25, 0x0138
    1634:	a0 91 39 01 	lds	r26, 0x0139
    1638:	b0 91 3a 01 	lds	r27, 0x013A
    163c:	ba 01       	movw	r22, r20
    163e:	a9 01       	movw	r20, r18
    1640:	48 0f       	add	r20, r24
    1642:	59 1f       	adc	r21, r25
    1644:	6a 1f       	adc	r22, r26
    1646:	7b 1f       	adc	r23, r27
    1648:	80 91 33 01 	lds	r24, 0x0133
    164c:	90 91 34 01 	lds	r25, 0x0134
    1650:	a0 91 35 01 	lds	r26, 0x0135
    1654:	b0 91 36 01 	lds	r27, 0x0136
    1658:	48 17       	cp	r20, r24
    165a:	59 07       	cpc	r21, r25
    165c:	6a 07       	cpc	r22, r26
    165e:	7b 07       	cpc	r23, r27
    1660:	0c f0       	brlt	.+2      	; 0x1664 <__vector_11+0x866>
    1662:	80 c0       	rjmp	.+256    	; 0x1764 <__vector_11+0x966>
				{
					if(as.get_soft_filt())//Use filter.
    1664:	87 e4       	ldi	r24, 0x47	; 71
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN8as_class13get_soft_filtEv>
    166c:	88 23       	and	r24, r24
    166e:	59 f0       	breq	.+22     	; 0x1686 <__vector_11+0x888>
					{
						output = lpf(read_adc(), &as);
    1670:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    1674:	67 e4       	ldi	r22, 0x47	; 71
    1676:	71 e0       	ldi	r23, 0x01	; 1
    1678:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_Z3lpfjP8as_class>
    167c:	90 93 3e 01 	sts	0x013E, r25
    1680:	80 93 3d 01 	sts	0x013D, r24
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <__vector_11+0x894>
					}
					else//Do not use software filter.
					{
						output = read_adc();
    1686:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    168a:	90 93 3e 01 	sts	0x013E, r25
    168e:	80 93 3d 01 	sts	0x013D, r24
					}
					
					//Check if time to transmit another sample.
					if(!(ms_counter % as.get_adc_rate()))
    1692:	c0 90 73 01 	lds	r12, 0x0173
    1696:	d0 90 74 01 	lds	r13, 0x0174
    169a:	e0 90 75 01 	lds	r14, 0x0175
    169e:	f0 90 76 01 	lds	r15, 0x0176
    16a2:	87 e4       	ldi	r24, 0x47	; 71
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN8as_class12get_adc_rateEv>
    16aa:	9c 01       	movw	r18, r24
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	c7 01       	movw	r24, r14
    16b2:	b6 01       	movw	r22, r12
    16b4:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    16b8:	67 2b       	or	r22, r23
    16ba:	68 2b       	or	r22, r24
    16bc:	69 2b       	or	r22, r25
    16be:	09 f0       	breq	.+2      	; 0x16c2 <__vector_11+0x8c4>
    16c0:	73 c0       	rjmp	.+230    	; 0x17a8 <__vector_11+0x9aa>
					{
						//Print MatLab data.
						if(as.get_tx_mode() == TX_MODE_MATLAB)
    16c2:	87 e4       	ldi	r24, 0x47	; 71
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	a1 f5       	brne	.+104    	; 0x1736 <__vector_11+0x938>
						{
							tx_u16_to_ascii(output);
    16ce:	80 91 3d 01 	lds	r24, 0x013D
    16d2:	90 91 3e 01 	lds	r25, 0x013E
    16d6:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    16da:	8c e2       	ldi	r24, 0x2C	; 44
    16dc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
							
							//Indicate a new sample has been sent.
							samp_count++;
    16e0:	80 91 43 01 	lds	r24, 0x0143
    16e4:	90 91 44 01 	lds	r25, 0x0144
    16e8:	a0 91 45 01 	lds	r26, 0x0145
    16ec:	b0 91 46 01 	lds	r27, 0x0146
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	6f 5f       	subi	r22, 0xFF	; 255
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	60 93 43 01 	sts	0x0143, r22
    1700:	70 93 44 01 	sts	0x0144, r23
    1704:	80 93 45 01 	sts	0x0145, r24
    1708:	90 93 46 01 	sts	0x0146, r25
							
							//Start newline if 10 or more samples on this line.
							if(samp_count && !(samp_count % 10))
    170c:	61 15       	cp	r22, r1
    170e:	71 05       	cpc	r23, r1
    1710:	81 05       	cpc	r24, r1
    1712:	91 05       	cpc	r25, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <__vector_11+0x91a>
    1716:	48 c0       	rjmp	.+144    	; 0x17a8 <__vector_11+0x9aa>
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    1724:	67 2b       	or	r22, r23
    1726:	68 2b       	or	r22, r24
    1728:	69 2b       	or	r22, r25
    172a:	f1 f5       	brne	.+124    	; 0x17a8 <__vector_11+0x9aa>
							{
								atmega_uart::tx_string_p(PSTR("...\r"));
    172c:	84 e7       	ldi	r24, 0x74	; 116
    172e:	94 e0       	ldi	r25, 0x04	; 4
    1730:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1734:	39 c0       	rjmp	.+114    	; 0x17a8 <__vector_11+0x9aa>
							}
						}
						//Print ASCII data.
						else if(as.get_tx_mode() == TX_MODE_ASCII)
    1736:	87 e4       	ldi	r24, 0x47	; 71
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    173e:	81 11       	cpse	r24, r1
    1740:	0a c0       	rjmp	.+20     	; 0x1756 <__vector_11+0x958>
						{
							tx_u16_to_ascii(output);
    1742:	80 91 3d 01 	lds	r24, 0x013D
    1746:	90 91 3e 01 	lds	r25, 0x013E
    174a:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    174e:	8c e2       	ldi	r24, 0x2C	; 44
    1750:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1754:	29 c0       	rjmp	.+82     	; 0x17a8 <__vector_11+0x9aa>
						}
						//Print binary data.
						else
						{
							atmega_uart::tx_word(output);
    1756:	80 91 3d 01 	lds	r24, 0x013D
    175a:	90 91 3e 01 	lds	r25, 0x013E
    175e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
    1762:	22 c0       	rjmp	.+68     	; 0x17a8 <__vector_11+0x9aa>
						}
				    }
				}
				else//Done.
				{
					as.set_test_state(RAMP_STOP);
    1764:	69 e0       	ldi	r22, 0x09	; 9
    1766:	87 e4       	ldi	r24, 0x47	; 71
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
					
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    176e:	87 e4       	ldi	r24, 0x47	; 71
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	29 f4       	brne	.+10     	; 0x1784 <__vector_11+0x986>
					{
						atmega_uart::tx_string_p(PSTR("];\r\r"));
    177a:	8f e6       	ldi	r24, 0x6F	; 111
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1782:	12 c0       	rjmp	.+36     	; 0x17a8 <__vector_11+0x9aa>
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    1784:	87 e4       	ldi	r24, 0x47	; 71
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    178c:	81 11       	cpse	r24, r1
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <__vector_11+0x9a2>
					{
						tx_u16_to_ascii(END_BLOCK);
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1798:	8c e2       	ldi	r24, 0x2C	; 44
    179a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <__vector_11+0x9aa>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(END_BLOCK);
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
					}
				}
				write_dac(sv + this_offset); //Load value into the DAC.
    17a8:	20 91 2c 01 	lds	r18, 0x012C
    17ac:	30 91 2d 01 	lds	r19, 0x012D
    17b0:	80 91 37 01 	lds	r24, 0x0137
    17b4:	90 91 38 01 	lds	r25, 0x0138
    17b8:	82 0f       	add	r24, r18
    17ba:	93 1f       	adc	r25, r19
    17bc:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
    17c0:	ca c0       	rjmp	.+404    	; 0x1956 <__vector_11+0xb58>
			}
			
			else//Negative slope.
			{				
				if(sv - (int32_t)this_offset > ev)//More to go.
    17c2:	80 91 37 01 	lds	r24, 0x0137
    17c6:	90 91 38 01 	lds	r25, 0x0138
    17ca:	a0 91 39 01 	lds	r26, 0x0139
    17ce:	b0 91 3a 01 	lds	r27, 0x013A
    17d2:	7c 01       	movw	r14, r24
    17d4:	8d 01       	movw	r16, r26
    17d6:	e2 1a       	sub	r14, r18
    17d8:	f3 0a       	sbc	r15, r19
    17da:	04 0b       	sbc	r16, r20
    17dc:	15 0b       	sbc	r17, r21
    17de:	80 91 33 01 	lds	r24, 0x0133
    17e2:	90 91 34 01 	lds	r25, 0x0134
    17e6:	a0 91 35 01 	lds	r26, 0x0135
    17ea:	b0 91 36 01 	lds	r27, 0x0136
    17ee:	8e 15       	cp	r24, r14
    17f0:	9f 05       	cpc	r25, r15
    17f2:	a0 07       	cpc	r26, r16
    17f4:	b1 07       	cpc	r27, r17
    17f6:	0c f0       	brlt	.+2      	; 0x17fa <__vector_11+0x9fc>
    17f8:	80 c0       	rjmp	.+256    	; 0x18fa <__vector_11+0xafc>
				{
					if(as.get_soft_filt())//Use filter.
    17fa:	87 e4       	ldi	r24, 0x47	; 71
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN8as_class13get_soft_filtEv>
    1802:	88 23       	and	r24, r24
    1804:	59 f0       	breq	.+22     	; 0x181c <__vector_11+0xa1e>
					{
						output = lpf(read_adc(), &as);
    1806:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    180a:	67 e4       	ldi	r22, 0x47	; 71
    180c:	71 e0       	ldi	r23, 0x01	; 1
    180e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_Z3lpfjP8as_class>
    1812:	90 93 3e 01 	sts	0x013E, r25
    1816:	80 93 3d 01 	sts	0x013D, r24
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <__vector_11+0xa2a>
					}
					else//Do not use software filter.
					{
						output = read_adc();
    181c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    1820:	90 93 3e 01 	sts	0x013E, r25
    1824:	80 93 3d 01 	sts	0x013D, r24
					}
					
					//Check if time to transmit another sample.
					if(!(ms_counter % as.get_adc_rate()))
    1828:	c0 90 73 01 	lds	r12, 0x0173
    182c:	d0 90 74 01 	lds	r13, 0x0174
    1830:	e0 90 75 01 	lds	r14, 0x0175
    1834:	f0 90 76 01 	lds	r15, 0x0176
    1838:	87 e4       	ldi	r24, 0x47	; 71
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN8as_class12get_adc_rateEv>
    1840:	9c 01       	movw	r18, r24
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	c7 01       	movw	r24, r14
    1848:	b6 01       	movw	r22, r12
    184a:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    184e:	67 2b       	or	r22, r23
    1850:	68 2b       	or	r22, r24
    1852:	69 2b       	or	r22, r25
    1854:	09 f0       	breq	.+2      	; 0x1858 <__vector_11+0xa5a>
    1856:	73 c0       	rjmp	.+230    	; 0x193e <__vector_11+0xb40>
					{
						//Print MatLab data.
						if(as.get_tx_mode() == TX_MODE_MATLAB)
    1858:	87 e4       	ldi	r24, 0x47	; 71
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	a1 f5       	brne	.+104    	; 0x18cc <__vector_11+0xace>
						{
							tx_u16_to_ascii(output);
    1864:	80 91 3d 01 	lds	r24, 0x013D
    1868:	90 91 3e 01 	lds	r25, 0x013E
    186c:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    1870:	8c e2       	ldi	r24, 0x2C	; 44
    1872:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
							
							//Indicate a new sample has been sent.
							samp_count++;
    1876:	80 91 43 01 	lds	r24, 0x0143
    187a:	90 91 44 01 	lds	r25, 0x0144
    187e:	a0 91 45 01 	lds	r26, 0x0145
    1882:	b0 91 46 01 	lds	r27, 0x0146
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	6f 5f       	subi	r22, 0xFF	; 255
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	60 93 43 01 	sts	0x0143, r22
    1896:	70 93 44 01 	sts	0x0144, r23
    189a:	80 93 45 01 	sts	0x0145, r24
    189e:	90 93 46 01 	sts	0x0146, r25
							
							//Start newline if 10 or more samples on this line.
							if(samp_count && !(samp_count % 10))
    18a2:	61 15       	cp	r22, r1
    18a4:	71 05       	cpc	r23, r1
    18a6:	81 05       	cpc	r24, r1
    18a8:	91 05       	cpc	r25, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <__vector_11+0xab0>
    18ac:	48 c0       	rjmp	.+144    	; 0x193e <__vector_11+0xb40>
    18ae:	2a e0       	ldi	r18, 0x0A	; 10
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    18ba:	67 2b       	or	r22, r23
    18bc:	68 2b       	or	r22, r24
    18be:	69 2b       	or	r22, r25
    18c0:	f1 f5       	brne	.+124    	; 0x193e <__vector_11+0xb40>
							{
								atmega_uart::tx_string_p(PSTR("...\r"));
    18c2:	8a e6       	ldi	r24, 0x6A	; 106
    18c4:	94 e0       	ldi	r25, 0x04	; 4
    18c6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    18ca:	39 c0       	rjmp	.+114    	; 0x193e <__vector_11+0xb40>
							}
						}
						//Print ASCII data.
						else if(as.get_tx_mode() == TX_MODE_ASCII)
    18cc:	87 e4       	ldi	r24, 0x47	; 71
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    18d4:	81 11       	cpse	r24, r1
    18d6:	0a c0       	rjmp	.+20     	; 0x18ec <__vector_11+0xaee>
						{
							tx_u16_to_ascii(output);
    18d8:	80 91 3d 01 	lds	r24, 0x013D
    18dc:	90 91 3e 01 	lds	r25, 0x013E
    18e0:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    18e4:	8c e2       	ldi	r24, 0x2C	; 44
    18e6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    18ea:	29 c0       	rjmp	.+82     	; 0x193e <__vector_11+0xb40>
						}
						//Print binary data.
						else
						{
							atmega_uart::tx_word(output);
    18ec:	80 91 3d 01 	lds	r24, 0x013D
    18f0:	90 91 3e 01 	lds	r25, 0x013E
    18f4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
    18f8:	22 c0       	rjmp	.+68     	; 0x193e <__vector_11+0xb40>
					}
				}
				
				else//Done.
				{
					as.set_test_state(RAMP_STOP);
    18fa:	69 e0       	ldi	r22, 0x09	; 9
    18fc:	87 e4       	ldi	r24, 0x47	; 71
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
					
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    1904:	87 e4       	ldi	r24, 0x47	; 71
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	29 f4       	brne	.+10     	; 0x191a <__vector_11+0xb1c>
					{
						atmega_uart::tx_string_p(PSTR("];\r\r"));
    1910:	85 e6       	ldi	r24, 0x65	; 101
    1912:	94 e0       	ldi	r25, 0x04	; 4
    1914:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1918:	12 c0       	rjmp	.+36     	; 0x193e <__vector_11+0xb40>
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    191a:	87 e4       	ldi	r24, 0x47	; 71
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1922:	81 11       	cpse	r24, r1
    1924:	08 c0       	rjmp	.+16     	; 0x1936 <__vector_11+0xb38>
					{
						tx_u16_to_ascii(END_BLOCK);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	9f ef       	ldi	r25, 0xFF	; 255
    192a:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    192e:	8c e2       	ldi	r24, 0x2C	; 44
    1930:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1934:	04 c0       	rjmp	.+8      	; 0x193e <__vector_11+0xb40>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(END_BLOCK);
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	9f ef       	ldi	r25, 0xFF	; 255
    193a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
					}
				}
				
				write_dac(sv - this_offset); //Load value into the DAC.
    193e:	80 91 37 01 	lds	r24, 0x0137
    1942:	90 91 38 01 	lds	r25, 0x0138
    1946:	20 91 2c 01 	lds	r18, 0x012C
    194a:	30 91 2d 01 	lds	r19, 0x012D
    194e:	82 1b       	sub	r24, r18
    1950:	93 0b       	sbc	r25, r19
    1952:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
			}
			
			ms_counter++;//Always increment counter.
    1956:	80 91 73 01 	lds	r24, 0x0173
    195a:	90 91 74 01 	lds	r25, 0x0174
    195e:	a0 91 75 01 	lds	r26, 0x0175
    1962:	b0 91 76 01 	lds	r27, 0x0176
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	a1 1d       	adc	r26, r1
    196a:	b1 1d       	adc	r27, r1
    196c:	80 93 73 01 	sts	0x0173, r24
    1970:	90 93 74 01 	sts	0x0174, r25
    1974:	a0 93 75 01 	sts	0x0175, r26
    1978:	b0 93 76 01 	sts	0x0176, r27
		break;
    197c:	3a c5       	rjmp	.+2676   	; 0x23f2 <__vector_11+0x15f4>
		
		case RAMP_STOP:
			//Reset counter and sample counter.
			ms_counter = 0;
    197e:	10 92 73 01 	sts	0x0173, r1
    1982:	10 92 74 01 	sts	0x0174, r1
    1986:	10 92 75 01 	sts	0x0175, r1
    198a:	10 92 76 01 	sts	0x0176, r1
			samp_count = 0;
    198e:	10 92 43 01 	sts	0x0143, r1
    1992:	10 92 44 01 	sts	0x0144, r1
    1996:	10 92 45 01 	sts	0x0145, r1
    199a:	10 92 46 01 	sts	0x0146, r1
			
			//Next cycle.
			this_cyc++;
    199e:	80 91 3c 01 	lds	r24, 0x013C
    19a2:	8f 5f       	subi	r24, 0xFF	; 255
    19a4:	80 93 3c 01 	sts	0x013C, r24
			
			if(as.get_sweep_cyclic() && (this_cyc <= tot_cyc))
    19a8:	87 e4       	ldi	r24, 0x47	; 71
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	0e 94 95 13 	call	0x272a	; 0x272a <_ZN8as_class16get_sweep_cyclicEv>
    19b0:	88 23       	and	r24, r24
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__vector_11+0xbb8>
    19b4:	20 c5       	rjmp	.+2624   	; 0x23f6 <__vector_11+0x15f8>
    19b6:	90 91 3c 01 	lds	r25, 0x013C
    19ba:	80 91 3b 01 	lds	r24, 0x013B
    19be:	89 17       	cp	r24, r25
    19c0:	08 f0       	brcs	.+2      	; 0x19c4 <__vector_11+0xbc6>
    19c2:	26 c5       	rjmp	.+2636   	; 0x2410 <__vector_11+0x1612>
    19c4:	18 c5       	rjmp	.+2608   	; 0x23f6 <__vector_11+0x15f8>
				ev = temp;
				
				//Print initial stream data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
				{
					atmega_uart::tx_byte('s');
    19c6:	83 e7       	ldi	r24, 0x73	; 115
    19c8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(this_cyc);
    19cc:	80 91 3c 01 	lds	r24, 0x013C
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=["));
    19d6:	82 e6       	ldi	r24, 0x62	; 98
    19d8:	94 e0       	ldi	r25, 0x04	; 4
    19da:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    19de:	16 c0       	rjmp	.+44     	; 0x1a0c <__vector_11+0xc0e>
				}
				else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    19e0:	87 e4       	ldi	r24, 0x47	; 71
    19e2:	91 e0       	ldi	r25, 0x01	; 1
    19e4:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    19e8:	81 11       	cpse	r24, r1
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <__vector_11+0xc02>
				{
					tx_u16_to_ascii(LIN_DATA + this_cyc);
    19ec:	80 91 3c 01 	lds	r24, 0x013C
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9e 57       	subi	r25, 0x7E	; 126
    19f4:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    19f8:	8c e2       	ldi	r24, 0x2C	; 44
    19fa:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <__vector_11+0xc0e>
				}
				else//Print binary data.
				{
					atmega_uart::tx_word(LIN_DATA + this_cyc);
    1a00:	80 91 3c 01 	lds	r24, 0x013C
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9e 57       	subi	r25, 0x7E	; 126
    1a08:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				}
				
				as.set_test_state(RAMP);
    1a0c:	68 e0       	ldi	r22, 0x08	; 8
    1a0e:	87 e4       	ldi	r24, 0x47	; 71
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    1a16:	ed c4       	rjmp	.+2522   	; 0x23f2 <__vector_11+0x15f4>
				write_dac(ZERO_VOLT);
				
				//Determine how many cycles need to be graphed.
				if(as.get_sweep_cyclic())
				{
					graph_cycles = tot_cyc;
    1a18:	80 91 3b 01 	lds	r24, 0x013B
    1a1c:	80 93 27 01 	sts	0x0127, r24
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <__vector_11+0xc2a>
				}
				else
				{
					graph_cycles = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 93 27 01 	sts	0x0127, r24
				}
				
				as.set_test_state(FOOTER);//Done.
    1a28:	60 e1       	ldi	r22, 0x10	; 16
    1a2a:	87 e4       	ldi	r24, 0x47	; 71
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    1a32:	df c4       	rjmp	.+2494   	; 0x23f2 <__vector_11+0x15f4>
			}	
		break;
			
		case SQUARE_INIT:
			//Initialize variables.
			samp_count = 0;
    1a34:	10 92 43 01 	sts	0x0143, r1
    1a38:	10 92 44 01 	sts	0x0144, r1
    1a3c:	10 92 45 01 	sts	0x0145, r1
    1a40:	10 92 46 01 	sts	0x0146, r1
			ms_counter = 0;
    1a44:	10 92 73 01 	sts	0x0173, r1
    1a48:	10 92 74 01 	sts	0x0174, r1
    1a4c:	10 92 75 01 	sts	0x0175, r1
    1a50:	10 92 76 01 	sts	0x0176, r1
			tot_cyc = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	80 93 3b 01 	sts	0x013B, r24
			square_half = POS_HALF;
    1a5a:	10 92 26 01 	sts	0x0126, r1
			this_offset = 0;
    1a5e:	10 92 2c 01 	sts	0x012C, r1
    1a62:	10 92 2d 01 	sts	0x012D, r1
    1a66:	10 92 2e 01 	sts	0x012E, r1
    1a6a:	10 92 2f 01 	sts	0x012F, r1
			sv = ZERO_VOLT + (1000L * as.get_square_volt_start() / V_PER_COUNT);
    1a6e:	87 e4       	ldi	r24, 0x47	; 71
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    1a76:	28 ee       	ldi	r18, 0xE8	; 232
    1a78:	33 e0       	ldi	r19, 0x03	; 3
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	0e 94 29 33 	call	0x6652	; 0x6652 <__usmulhisi3>
    1a80:	0f 2e       	mov	r0, r31
    1a82:	f6 e2       	ldi	r31, 0x26	; 38
    1a84:	cf 2e       	mov	r12, r31
    1a86:	f3 e0       	ldi	r31, 0x03	; 3
    1a88:	df 2e       	mov	r13, r31
    1a8a:	e1 2c       	mov	r14, r1
    1a8c:	f1 2c       	mov	r15, r1
    1a8e:	f0 2d       	mov	r31, r0
    1a90:	a7 01       	movw	r20, r14
    1a92:	96 01       	movw	r18, r12
    1a94:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    1a98:	da 01       	movw	r26, r20
    1a9a:	c9 01       	movw	r24, r18
    1a9c:	81 50       	subi	r24, 0x01	; 1
    1a9e:	98 4f       	sbci	r25, 0xF8	; 248
    1aa0:	af 4f       	sbci	r26, 0xFF	; 255
    1aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa4:	80 93 37 01 	sts	0x0137, r24
    1aa8:	90 93 38 01 	sts	0x0138, r25
    1aac:	a0 93 39 01 	sts	0x0139, r26
    1ab0:	b0 93 3a 01 	sts	0x013A, r27
			ev = ZERO_VOLT + (1000L * as.get_square_volt_end() / V_PER_COUNT);
    1ab4:	87 e4       	ldi	r24, 0x47	; 71
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    1abc:	28 ee       	ldi	r18, 0xE8	; 232
    1abe:	33 e0       	ldi	r19, 0x03	; 3
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	0e 94 29 33 	call	0x6652	; 0x6652 <__usmulhisi3>
    1ac6:	a7 01       	movw	r20, r14
    1ac8:	96 01       	movw	r18, r12
    1aca:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    1ace:	da 01       	movw	r26, r20
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	81 50       	subi	r24, 0x01	; 1
    1ad4:	98 4f       	sbci	r25, 0xF8	; 248
    1ad6:	af 4f       	sbci	r26, 0xFF	; 255
    1ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    1ada:	80 93 33 01 	sts	0x0133, r24
    1ade:	90 93 34 01 	sts	0x0134, r25
    1ae2:	a0 93 35 01 	sts	0x0135, r26
    1ae6:	b0 93 36 01 	sts	0x0136, r27
			sq_amp = 1000L * as.get_square_amp() / V_PER_COUNT;
    1aea:	87 e4       	ldi	r24, 0x47	; 71
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    1af2:	9c 01       	movw	r18, r24
    1af4:	a8 ee       	ldi	r26, 0xE8	; 232
    1af6:	b3 e0       	ldi	r27, 0x03	; 3
    1af8:	0e 94 1a 33 	call	0x6634	; 0x6634 <__umulhisi3>
    1afc:	a7 01       	movw	r20, r14
    1afe:	96 01       	movw	r18, r12
    1b00:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    1b04:	20 93 22 01 	sts	0x0122, r18
    1b08:	30 93 23 01 	sts	0x0123, r19
    1b0c:	40 93 24 01 	sts	0x0124, r20
    1b10:	50 93 25 01 	sts	0x0125, r21
			
			//Determine initial slope.
			if(sv < ev)
    1b14:	40 91 37 01 	lds	r20, 0x0137
    1b18:	50 91 38 01 	lds	r21, 0x0138
    1b1c:	60 91 39 01 	lds	r22, 0x0139
    1b20:	70 91 3a 01 	lds	r23, 0x013A
    1b24:	80 91 33 01 	lds	r24, 0x0133
    1b28:	90 91 34 01 	lds	r25, 0x0134
    1b2c:	a0 91 35 01 	lds	r26, 0x0135
    1b30:	b0 91 36 01 	lds	r27, 0x0136
    1b34:	48 17       	cp	r20, r24
    1b36:	59 07       	cpc	r21, r25
    1b38:	6a 07       	cpc	r22, r26
    1b3a:	7b 07       	cpc	r23, r27
    1b3c:	24 f4       	brge	.+8      	; 0x1b46 <__vector_11+0xd48>
			{
				slope = POS_SLOPE;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 30 01 	sts	0x0130, r24
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <__vector_11+0xd4c>
			}
			else
			{
				slope = NEG_SLOPE;
    1b46:	10 92 30 01 	sts	0x0130, r1
			}
		
			//Print initial stream data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    1b4a:	87 e4       	ldi	r24, 0x47	; 71
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	69 f4       	brne	.+26     	; 0x1b70 <__vector_11+0xd72>
			{
				atmega_uart::tx_byte('s');
    1b56:	83 e7       	ldi	r24, 0x73	; 115
    1b58:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(tot_cyc);
    1b5c:	80 91 3b 01 	lds	r24, 0x013B
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
				atmega_uart::tx_string_p(PSTR("=["));
    1b66:	8f e5       	ldi	r24, 0x5F	; 95
    1b68:	94 e0       	ldi	r25, 0x04	; 4
    1b6a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1b6e:	16 c0       	rjmp	.+44     	; 0x1b9c <__vector_11+0xd9e>
			}
			else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    1b70:	87 e4       	ldi	r24, 0x47	; 71
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1b78:	81 11       	cpse	r24, r1
    1b7a:	0a c0       	rjmp	.+20     	; 0x1b90 <__vector_11+0xd92>
			{
				tx_u16_to_ascii(SQR_DATA + tot_cyc);
    1b7c:	80 91 3b 01 	lds	r24, 0x013B
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9c 57       	subi	r25, 0x7C	; 124
    1b84:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1b88:	8c e2       	ldi	r24, 0x2C	; 44
    1b8a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <__vector_11+0xd9e>
			}
			else//Print binary data.
			{
				atmega_uart::tx_word(SQR_DATA + tot_cyc);
    1b90:	80 91 3b 01 	lds	r24, 0x013B
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 57       	subi	r25, 0x7C	; 124
    1b98:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
			}
		
			write_dac(sv + sq_amp);
    1b9c:	20 91 22 01 	lds	r18, 0x0122
    1ba0:	30 91 23 01 	lds	r19, 0x0123
    1ba4:	80 91 37 01 	lds	r24, 0x0137
    1ba8:	90 91 38 01 	lds	r25, 0x0138
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
			i2c_connect_ce();//Always connect counter electrode.
    1bb4:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <_Z14i2c_connect_cev>
			
			as.set_test_state(SQUARE);
    1bb8:	6b e0       	ldi	r22, 0x0B	; 11
    1bba:	87 e4       	ldi	r24, 0x47	; 71
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    1bc2:	17 c4       	rjmp	.+2094   	; 0x23f2 <__vector_11+0x15f4>
		
		case SQUARE:
			//Do stuff if time to switch square wave halves.
			if(ms_counter >= as.get_square_period())
    1bc4:	87 e4       	ldi	r24, 0x47	; 71
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN8as_class17get_square_periodEv>
    1bcc:	a0 e0       	ldi	r26, 0x00	; 0
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	40 91 73 01 	lds	r20, 0x0173
    1bd4:	50 91 74 01 	lds	r21, 0x0174
    1bd8:	60 91 75 01 	lds	r22, 0x0175
    1bdc:	70 91 76 01 	lds	r23, 0x0176
    1be0:	48 17       	cp	r20, r24
    1be2:	59 07       	cpc	r21, r25
    1be4:	6a 07       	cpc	r22, r26
    1be6:	7b 07       	cpc	r23, r27
    1be8:	08 f4       	brcc	.+2      	; 0x1bec <__vector_11+0xdee>
    1bea:	14 c2       	rjmp	.+1064   	; 0x2014 <__vector_11+0x1216>
			{
				if(slope == POS_SLOPE)//Positive slope.
    1bec:	80 91 30 01 	lds	r24, 0x0130
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <__vector_11+0xdf8>
    1bf4:	01 c1       	rjmp	.+514    	; 0x1df8 <__vector_11+0xffa>
				{
					if(sv + (int32_t)this_offset <= ev)//More to go.
    1bf6:	40 91 37 01 	lds	r20, 0x0137
    1bfa:	50 91 38 01 	lds	r21, 0x0138
    1bfe:	60 91 39 01 	lds	r22, 0x0139
    1c02:	70 91 3a 01 	lds	r23, 0x013A
    1c06:	80 91 2c 01 	lds	r24, 0x012C
    1c0a:	90 91 2d 01 	lds	r25, 0x012D
    1c0e:	a0 91 2e 01 	lds	r26, 0x012E
    1c12:	b0 91 2f 01 	lds	r27, 0x012F
    1c16:	48 0f       	add	r20, r24
    1c18:	59 1f       	adc	r21, r25
    1c1a:	6a 1f       	adc	r22, r26
    1c1c:	7b 1f       	adc	r23, r27
    1c1e:	80 91 33 01 	lds	r24, 0x0133
    1c22:	90 91 34 01 	lds	r25, 0x0134
    1c26:	a0 91 35 01 	lds	r26, 0x0135
    1c2a:	b0 91 36 01 	lds	r27, 0x0136
    1c2e:	84 17       	cp	r24, r20
    1c30:	95 07       	cpc	r25, r21
    1c32:	a6 07       	cpc	r26, r22
    1c34:	b7 07       	cpc	r27, r23
    1c36:	0c f4       	brge	.+2      	; 0x1c3a <__vector_11+0xe3c>
    1c38:	d9 c0       	rjmp	.+434    	; 0x1dec <__vector_11+0xfee>
					{
						if(square_half == POS_HALF)//Positive half cycle.
    1c3a:	80 91 26 01 	lds	r24, 0x0126
    1c3e:	81 11       	cpse	r24, r1
    1c40:	19 c0       	rjmp	.+50     	; 0x1c74 <__vector_11+0xe76>
						{
							//Get sample.
							temp_adc = read_adc();
    1c42:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    1c46:	90 93 21 01 	sts	0x0121, r25
    1c4a:	80 93 20 01 	sts	0x0120, r24
							
							//Update DAC with negative half cycle value.
							write_dac(sv + this_offset - sq_amp);
    1c4e:	20 91 2c 01 	lds	r18, 0x012C
    1c52:	30 91 2d 01 	lds	r19, 0x012D
    1c56:	80 91 37 01 	lds	r24, 0x0137
    1c5a:	90 91 38 01 	lds	r25, 0x0138
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	20 91 22 01 	lds	r18, 0x0122
    1c66:	30 91 23 01 	lds	r19, 0x0123
    1c6a:	82 1b       	sub	r24, r18
    1c6c:	93 0b       	sbc	r25, r19
    1c6e:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
    1c72:	c2 c1       	rjmp	.+900    	; 0x1ff8 <__vector_11+0x11fa>
						}
						else//Negative half cycle.
						{
							//Get sample.
							output = read_adc();
    1c74:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
							
							//Make sure this value is not greater than last value.  This can be due to noise.
							(output > temp_adc) ? temp_adc = 0 : temp_adc -= output;
    1c78:	20 91 20 01 	lds	r18, 0x0120
    1c7c:	30 91 21 01 	lds	r19, 0x0121
    1c80:	28 17       	cp	r18, r24
    1c82:	39 07       	cpc	r19, r25
    1c84:	28 f4       	brcc	.+10     	; 0x1c90 <__vector_11+0xe92>
    1c86:	10 92 21 01 	sts	0x0121, r1
    1c8a:	10 92 20 01 	sts	0x0120, r1
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <__vector_11+0xe9e>
    1c90:	28 1b       	sub	r18, r24
    1c92:	39 0b       	sbc	r19, r25
    1c94:	30 93 21 01 	sts	0x0121, r19
    1c98:	20 93 20 01 	sts	0x0120, r18
							
							//temp_adc -= read_adc();
							
							output = temp_adc;
    1c9c:	80 91 20 01 	lds	r24, 0x0120
    1ca0:	90 91 21 01 	lds	r25, 0x0121
    1ca4:	90 93 3e 01 	sts	0x013E, r25
    1ca8:	80 93 3d 01 	sts	0x013D, r24
							
							//Print MatLab data.
							if(as.get_tx_mode() == TX_MODE_MATLAB)
    1cac:	87 e4       	ldi	r24, 0x47	; 71
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	99 f5       	brne	.+102    	; 0x1d1e <__vector_11+0xf20>
							{
								tx_u16_to_ascii(output);
    1cb8:	80 91 3d 01 	lds	r24, 0x013D
    1cbc:	90 91 3e 01 	lds	r25, 0x013E
    1cc0:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    1cc4:	8c e2       	ldi	r24, 0x2C	; 44
    1cc6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
								
								//Indicate a new sample has been sent.
								samp_count++;
    1cca:	80 91 43 01 	lds	r24, 0x0143
    1cce:	90 91 44 01 	lds	r25, 0x0144
    1cd2:	a0 91 45 01 	lds	r26, 0x0145
    1cd6:	b0 91 46 01 	lds	r27, 0x0146
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	6f 5f       	subi	r22, 0xFF	; 255
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	60 93 43 01 	sts	0x0143, r22
    1cea:	70 93 44 01 	sts	0x0144, r23
    1cee:	80 93 45 01 	sts	0x0145, r24
    1cf2:	90 93 46 01 	sts	0x0146, r25
								
								//Start newline if 10 or more samples on this line.
								if(samp_count && !(samp_count % 10))
    1cf6:	61 15       	cp	r22, r1
    1cf8:	71 05       	cpc	r23, r1
    1cfa:	81 05       	cpc	r24, r1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	29 f1       	breq	.+74     	; 0x1d4a <__vector_11+0xf4c>
    1d00:	2a e0       	ldi	r18, 0x0A	; 10
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    1d0c:	67 2b       	or	r22, r23
    1d0e:	68 2b       	or	r22, r24
    1d10:	69 2b       	or	r22, r25
    1d12:	d9 f4       	brne	.+54     	; 0x1d4a <__vector_11+0xf4c>
								{
									atmega_uart::tx_string_p(PSTR("...\r"));
    1d14:	8a e5       	ldi	r24, 0x5A	; 90
    1d16:	94 e0       	ldi	r25, 0x04	; 4
    1d18:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1d1c:	16 c0       	rjmp	.+44     	; 0x1d4a <__vector_11+0xf4c>
								}
							}
							//Print ASCII data.
							else if(as.get_tx_mode() == TX_MODE_ASCII)
    1d1e:	87 e4       	ldi	r24, 0x47	; 71
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1d26:	81 11       	cpse	r24, r1
    1d28:	0a c0       	rjmp	.+20     	; 0x1d3e <__vector_11+0xf40>
							{
								tx_u16_to_ascii(output);
    1d2a:	80 91 3d 01 	lds	r24, 0x013D
    1d2e:	90 91 3e 01 	lds	r25, 0x013E
    1d32:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    1d36:	8c e2       	ldi	r24, 0x2C	; 44
    1d38:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1d3c:	06 c0       	rjmp	.+12     	; 0x1d4a <__vector_11+0xf4c>
							}
							//Print binary data.
							else
							{
								atmega_uart::tx_word(output);
    1d3e:	80 91 3d 01 	lds	r24, 0x013D
    1d42:	90 91 3e 01 	lds	r25, 0x013E
    1d46:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
							}
							
							//Update increment.
							this_offset += (1000L * as.get_square_inc() / V_PER_COUNT);
    1d4a:	87 e4       	ldi	r24, 0x47	; 71
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN8as_class14get_square_incEv>
    1d52:	9c 01       	movw	r18, r24
    1d54:	a8 ee       	ldi	r26, 0xE8	; 232
    1d56:	b3 e0       	ldi	r27, 0x03	; 3
    1d58:	0e 94 1a 33 	call	0x6634	; 0x6634 <__umulhisi3>
    1d5c:	26 e2       	ldi	r18, 0x26	; 38
    1d5e:	33 e0       	ldi	r19, 0x03	; 3
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    1d68:	80 91 2c 01 	lds	r24, 0x012C
    1d6c:	90 91 2d 01 	lds	r25, 0x012D
    1d70:	a0 91 2e 01 	lds	r26, 0x012E
    1d74:	b0 91 2f 01 	lds	r27, 0x012F
    1d78:	89 01       	movw	r16, r18
    1d7a:	9a 01       	movw	r18, r20
    1d7c:	08 0f       	add	r16, r24
    1d7e:	19 1f       	adc	r17, r25
    1d80:	2a 1f       	adc	r18, r26
    1d82:	3b 1f       	adc	r19, r27
    1d84:	00 93 2c 01 	sts	0x012C, r16
    1d88:	10 93 2d 01 	sts	0x012D, r17
    1d8c:	20 93 2e 01 	sts	0x012E, r18
    1d90:	30 93 2f 01 	sts	0x012F, r19
							
							if(sv + (int32_t)this_offset > ev)//Special stop case.
    1d94:	80 91 37 01 	lds	r24, 0x0137
    1d98:	90 91 38 01 	lds	r25, 0x0138
    1d9c:	a0 91 39 01 	lds	r26, 0x0139
    1da0:	b0 91 3a 01 	lds	r27, 0x013A
    1da4:	4c 01       	movw	r8, r24
    1da6:	5d 01       	movw	r10, r26
    1da8:	80 0e       	add	r8, r16
    1daa:	91 1e       	adc	r9, r17
    1dac:	a2 1e       	adc	r10, r18
    1dae:	b3 1e       	adc	r11, r19
    1db0:	c0 90 33 01 	lds	r12, 0x0133
    1db4:	d0 90 34 01 	lds	r13, 0x0134
    1db8:	e0 90 35 01 	lds	r14, 0x0135
    1dbc:	f0 90 36 01 	lds	r15, 0x0136
    1dc0:	c8 14       	cp	r12, r8
    1dc2:	d9 04       	cpc	r13, r9
    1dc4:	ea 04       	cpc	r14, r10
    1dc6:	fb 04       	cpc	r15, r11
    1dc8:	34 f4       	brge	.+12     	; 0x1dd6 <__vector_11+0xfd8>
							{
								as.set_test_state(SQUARE_STOP);
    1dca:	6c e0       	ldi	r22, 0x0C	; 12
    1dcc:	87 e4       	ldi	r24, 0x47	; 71
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    1dd4:	11 c1       	rjmp	.+546    	; 0x1ff8 <__vector_11+0x11fa>
							}
							else
							{
								//Update DAC with positive half cycle value.
								write_dac(sv + this_offset + sq_amp);
    1dd6:	60 91 22 01 	lds	r22, 0x0122
    1dda:	70 91 23 01 	lds	r23, 0x0123
    1dde:	86 0f       	add	r24, r22
    1de0:	97 1f       	adc	r25, r23
    1de2:	80 0f       	add	r24, r16
    1de4:	91 1f       	adc	r25, r17
    1de6:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
    1dea:	06 c1       	rjmp	.+524    	; 0x1ff8 <__vector_11+0x11fa>
							}
						}
					}
					else//Ready to move on.
					{						
						as.set_test_state(SQUARE_STOP);
    1dec:	6c e0       	ldi	r22, 0x0C	; 12
    1dee:	87 e4       	ldi	r24, 0x47	; 71
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    1df6:	00 c1       	rjmp	.+512    	; 0x1ff8 <__vector_11+0x11fa>
					}
				}
				else//Negative slope.
				{
					if(sv - (int32_t)this_offset >= ev)//More to go.
    1df8:	40 91 37 01 	lds	r20, 0x0137
    1dfc:	50 91 38 01 	lds	r21, 0x0138
    1e00:	60 91 39 01 	lds	r22, 0x0139
    1e04:	70 91 3a 01 	lds	r23, 0x013A
    1e08:	80 91 2c 01 	lds	r24, 0x012C
    1e0c:	90 91 2d 01 	lds	r25, 0x012D
    1e10:	a0 91 2e 01 	lds	r26, 0x012E
    1e14:	b0 91 2f 01 	lds	r27, 0x012F
    1e18:	48 1b       	sub	r20, r24
    1e1a:	59 0b       	sbc	r21, r25
    1e1c:	6a 0b       	sbc	r22, r26
    1e1e:	7b 0b       	sbc	r23, r27
    1e20:	80 91 33 01 	lds	r24, 0x0133
    1e24:	90 91 34 01 	lds	r25, 0x0134
    1e28:	a0 91 35 01 	lds	r26, 0x0135
    1e2c:	b0 91 36 01 	lds	r27, 0x0136
    1e30:	48 17       	cp	r20, r24
    1e32:	59 07       	cpc	r21, r25
    1e34:	6a 07       	cpc	r22, r26
    1e36:	7b 07       	cpc	r23, r27
    1e38:	0c f4       	brge	.+2      	; 0x1e3c <__vector_11+0x103e>
    1e3a:	d9 c0       	rjmp	.+434    	; 0x1fee <__vector_11+0x11f0>
					{
						if(square_half == POS_HALF)//Positive half cycle.
    1e3c:	80 91 26 01 	lds	r24, 0x0126
    1e40:	81 11       	cpse	r24, r1
    1e42:	19 c0       	rjmp	.+50     	; 0x1e76 <__vector_11+0x1078>
						{
							//Get sample.
							temp_adc = read_adc();
    1e44:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
    1e48:	90 93 21 01 	sts	0x0121, r25
    1e4c:	80 93 20 01 	sts	0x0120, r24
							
							//Update DAC with negative half cycle value.
							write_dac(sv - this_offset - sq_amp);
    1e50:	80 91 37 01 	lds	r24, 0x0137
    1e54:	90 91 38 01 	lds	r25, 0x0138
    1e58:	20 91 2c 01 	lds	r18, 0x012C
    1e5c:	30 91 2d 01 	lds	r19, 0x012D
    1e60:	82 1b       	sub	r24, r18
    1e62:	93 0b       	sbc	r25, r19
    1e64:	20 91 22 01 	lds	r18, 0x0122
    1e68:	30 91 23 01 	lds	r19, 0x0123
    1e6c:	82 1b       	sub	r24, r18
    1e6e:	93 0b       	sbc	r25, r19
    1e70:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
    1e74:	c1 c0       	rjmp	.+386    	; 0x1ff8 <__vector_11+0x11fa>
						}
						else//Negative half cycle.
						{
							//Get sample.
							output = read_adc();
    1e76:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_Z8read_adcv>
							
							//Make sure this value is not greater than last value.  This can be due to noise.
							(output > temp_adc) ? temp_adc = 0 : temp_adc -= output;
    1e7a:	20 91 20 01 	lds	r18, 0x0120
    1e7e:	30 91 21 01 	lds	r19, 0x0121
    1e82:	28 17       	cp	r18, r24
    1e84:	39 07       	cpc	r19, r25
    1e86:	28 f4       	brcc	.+10     	; 0x1e92 <__vector_11+0x1094>
    1e88:	10 92 21 01 	sts	0x0121, r1
    1e8c:	10 92 20 01 	sts	0x0120, r1
    1e90:	06 c0       	rjmp	.+12     	; 0x1e9e <__vector_11+0x10a0>
    1e92:	28 1b       	sub	r18, r24
    1e94:	39 0b       	sbc	r19, r25
    1e96:	30 93 21 01 	sts	0x0121, r19
    1e9a:	20 93 20 01 	sts	0x0120, r18
							
							//temp_adc -= read_adc();
							
							output = temp_adc;
    1e9e:	80 91 20 01 	lds	r24, 0x0120
    1ea2:	90 91 21 01 	lds	r25, 0x0121
    1ea6:	90 93 3e 01 	sts	0x013E, r25
    1eaa:	80 93 3d 01 	sts	0x013D, r24
							
							//Print MatLab data.
							if(as.get_tx_mode() == TX_MODE_MATLAB)
    1eae:	87 e4       	ldi	r24, 0x47	; 71
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	99 f5       	brne	.+102    	; 0x1f20 <__vector_11+0x1122>
							{
								tx_u16_to_ascii(output);
    1eba:	80 91 3d 01 	lds	r24, 0x013D
    1ebe:	90 91 3e 01 	lds	r25, 0x013E
    1ec2:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    1ec6:	8c e2       	ldi	r24, 0x2C	; 44
    1ec8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
								
								//Indicate a new sample has been sent.
								samp_count++;
    1ecc:	80 91 43 01 	lds	r24, 0x0143
    1ed0:	90 91 44 01 	lds	r25, 0x0144
    1ed4:	a0 91 45 01 	lds	r26, 0x0145
    1ed8:	b0 91 46 01 	lds	r27, 0x0146
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	6f 5f       	subi	r22, 0xFF	; 255
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	60 93 43 01 	sts	0x0143, r22
    1eec:	70 93 44 01 	sts	0x0144, r23
    1ef0:	80 93 45 01 	sts	0x0145, r24
    1ef4:	90 93 46 01 	sts	0x0146, r25
								
								//Start newline if 10 or more samples on this line.
								if(samp_count && !(samp_count % 10))
    1ef8:	61 15       	cp	r22, r1
    1efa:	71 05       	cpc	r23, r1
    1efc:	81 05       	cpc	r24, r1
    1efe:	91 05       	cpc	r25, r1
    1f00:	29 f1       	breq	.+74     	; 0x1f4c <__vector_11+0x114e>
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    1f0e:	67 2b       	or	r22, r23
    1f10:	68 2b       	or	r22, r24
    1f12:	69 2b       	or	r22, r25
    1f14:	d9 f4       	brne	.+54     	; 0x1f4c <__vector_11+0x114e>
								{
									atmega_uart::tx_string_p(PSTR("...\r"));
    1f16:	85 e5       	ldi	r24, 0x55	; 85
    1f18:	94 e0       	ldi	r25, 0x04	; 4
    1f1a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    1f1e:	16 c0       	rjmp	.+44     	; 0x1f4c <__vector_11+0x114e>
								}
							}
							//Print ASCII data.
							else if(as.get_tx_mode() == TX_MODE_ASCII)
    1f20:	87 e4       	ldi	r24, 0x47	; 71
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    1f28:	81 11       	cpse	r24, r1
    1f2a:	0a c0       	rjmp	.+20     	; 0x1f40 <__vector_11+0x1142>
							{
								tx_u16_to_ascii(output);
    1f2c:	80 91 3d 01 	lds	r24, 0x013D
    1f30:	90 91 3e 01 	lds	r25, 0x013E
    1f34:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    1f38:	8c e2       	ldi	r24, 0x2C	; 44
    1f3a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    1f3e:	06 c0       	rjmp	.+12     	; 0x1f4c <__vector_11+0x114e>
							}
							//Print binary data.
							else
							{
								atmega_uart::tx_word(output);
    1f40:	80 91 3d 01 	lds	r24, 0x013D
    1f44:	90 91 3e 01 	lds	r25, 0x013E
    1f48:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
							}
							
							//Update increment.
							this_offset += (1000L * as.get_square_inc() / V_PER_COUNT);
    1f4c:	87 e4       	ldi	r24, 0x47	; 71
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN8as_class14get_square_incEv>
    1f54:	9c 01       	movw	r18, r24
    1f56:	a8 ee       	ldi	r26, 0xE8	; 232
    1f58:	b3 e0       	ldi	r27, 0x03	; 3
    1f5a:	0e 94 1a 33 	call	0x6634	; 0x6634 <__umulhisi3>
    1f5e:	26 e2       	ldi	r18, 0x26	; 38
    1f60:	33 e0       	ldi	r19, 0x03	; 3
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    1f6a:	80 91 2c 01 	lds	r24, 0x012C
    1f6e:	90 91 2d 01 	lds	r25, 0x012D
    1f72:	a0 91 2e 01 	lds	r26, 0x012E
    1f76:	b0 91 2f 01 	lds	r27, 0x012F
    1f7a:	89 01       	movw	r16, r18
    1f7c:	9a 01       	movw	r18, r20
    1f7e:	08 0f       	add	r16, r24
    1f80:	19 1f       	adc	r17, r25
    1f82:	2a 1f       	adc	r18, r26
    1f84:	3b 1f       	adc	r19, r27
    1f86:	00 93 2c 01 	sts	0x012C, r16
    1f8a:	10 93 2d 01 	sts	0x012D, r17
    1f8e:	20 93 2e 01 	sts	0x012E, r18
    1f92:	30 93 2f 01 	sts	0x012F, r19
							
							if(sv - (int32_t)this_offset < ev)//Special stop case.
    1f96:	80 91 37 01 	lds	r24, 0x0137
    1f9a:	90 91 38 01 	lds	r25, 0x0138
    1f9e:	a0 91 39 01 	lds	r26, 0x0139
    1fa2:	b0 91 3a 01 	lds	r27, 0x013A
    1fa6:	4c 01       	movw	r8, r24
    1fa8:	5d 01       	movw	r10, r26
    1faa:	80 1a       	sub	r8, r16
    1fac:	91 0a       	sbc	r9, r17
    1fae:	a2 0a       	sbc	r10, r18
    1fb0:	b3 0a       	sbc	r11, r19
    1fb2:	c0 90 33 01 	lds	r12, 0x0133
    1fb6:	d0 90 34 01 	lds	r13, 0x0134
    1fba:	e0 90 35 01 	lds	r14, 0x0135
    1fbe:	f0 90 36 01 	lds	r15, 0x0136
    1fc2:	8c 14       	cp	r8, r12
    1fc4:	9d 04       	cpc	r9, r13
    1fc6:	ae 04       	cpc	r10, r14
    1fc8:	bf 04       	cpc	r11, r15
    1fca:	34 f4       	brge	.+12     	; 0x1fd8 <__vector_11+0x11da>
							{
								as.set_test_state(SQUARE_STOP);
    1fcc:	6c e0       	ldi	r22, 0x0C	; 12
    1fce:	87 e4       	ldi	r24, 0x47	; 71
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    1fd6:	10 c0       	rjmp	.+32     	; 0x1ff8 <__vector_11+0x11fa>
							}
							else
							{
								//Update DAC with positive half cycle value.
								write_dac(sv - this_offset + sq_amp);
    1fd8:	60 91 22 01 	lds	r22, 0x0122
    1fdc:	70 91 23 01 	lds	r23, 0x0123
    1fe0:	86 0f       	add	r24, r22
    1fe2:	97 1f       	adc	r25, r23
    1fe4:	80 1b       	sub	r24, r16
    1fe6:	91 0b       	sbc	r25, r17
    1fe8:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <__vector_11+0x11fa>
							}
						}
					}
					else//Ready to move on.
					{
						as.set_test_state(SQUARE_STOP);
    1fee:	6c e0       	ldi	r22, 0x0C	; 12
    1ff0:	87 e4       	ldi	r24, 0x47	; 71
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
					}
				}
				
				ms_counter = 0;//Reset counter.
    1ff8:	10 92 73 01 	sts	0x0173, r1
    1ffc:	10 92 74 01 	sts	0x0174, r1
    2000:	10 92 75 01 	sts	0x0175, r1
    2004:	10 92 76 01 	sts	0x0176, r1
				square_half ^= 0x01;//Change to other square wave half.
    2008:	90 91 26 01 	lds	r25, 0x0126
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	89 27       	eor	r24, r25
    2010:	80 93 26 01 	sts	0x0126, r24
			}
			ms_counter++;//Always Increment counter.
    2014:	80 91 73 01 	lds	r24, 0x0173
    2018:	90 91 74 01 	lds	r25, 0x0174
    201c:	a0 91 75 01 	lds	r26, 0x0175
    2020:	b0 91 76 01 	lds	r27, 0x0176
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	a1 1d       	adc	r26, r1
    2028:	b1 1d       	adc	r27, r1
    202a:	80 93 73 01 	sts	0x0173, r24
    202e:	90 93 74 01 	sts	0x0174, r25
    2032:	a0 93 75 01 	sts	0x0175, r26
    2036:	b0 93 76 01 	sts	0x0176, r27
		break;
    203a:	db c1       	rjmp	.+950    	; 0x23f2 <__vector_11+0x15f4>
		
		case SQUARE_STOP:
			//Zero out voltage and return to idle.
			write_dac(ZERO_VOLT);
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	97 e0       	ldi	r25, 0x07	; 7
    2040:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
			
			//Disconnect counter electrode.
			i2c_disconnect_ce();
    2044:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_Z17i2c_disconnect_cev>
			
			graph_cycles = 1;//Get ready to graph.
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	80 93 27 01 	sts	0x0127, r24
			
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    204e:	87 e4       	ldi	r24, 0x47	; 71
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	29 f4       	brne	.+10     	; 0x2064 <__vector_11+0x1266>
			{
				atmega_uart::tx_string_p(PSTR("];\r\r"));
    205a:	80 e5       	ldi	r24, 0x50	; 80
    205c:	94 e0       	ldi	r25, 0x04	; 4
    205e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    2062:	12 c0       	rjmp	.+36     	; 0x2088 <__vector_11+0x128a>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    2064:	87 e4       	ldi	r24, 0x47	; 71
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    206c:	81 11       	cpse	r24, r1
    206e:	08 c0       	rjmp	.+16     	; 0x2080 <__vector_11+0x1282>
			{
				tx_u16_to_ascii(END_BLOCK);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	9f ef       	ldi	r25, 0xFF	; 255
    2074:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    2078:	8c e2       	ldi	r24, 0x2C	; 44
    207a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <__vector_11+0x128a>
			}
			//Print binary data.
			else
			{
				atmega_uart::tx_word(END_BLOCK);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	9f ef       	ldi	r25, 0xFF	; 255
    2084:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
			}
			
			as.set_test_state(FOOTER);//Done.
    2088:	60 e1       	ldi	r22, 0x10	; 16
    208a:	87 e4       	ldi	r24, 0x47	; 71
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    2092:	af c1       	rjmp	.+862    	; 0x23f2 <__vector_11+0x15f4>
		
		
		
		
		case ARB_INIT:
			i2c_connect_ce();//Always connect counter electrode.
    2094:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <_Z14i2c_connect_cev>
			atmega_uart::tx_string_p(PSTR("ARB_INIT\r"));
    2098:	86 e4       	ldi	r24, 0x46	; 70
    209a:	94 e0       	ldi	r25, 0x04	; 4
    209c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			as.set_test_state(IDLE);
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	87 e4       	ldi	r24, 0x47	; 71
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    20aa:	a3 c1       	rjmp	.+838    	; 0x23f2 <__vector_11+0x15f4>
		
		case ARB:
			atmega_uart::tx_string_p(PSTR("ARB\r"));
    20ac:	81 e4       	ldi	r24, 0x41	; 65
    20ae:	94 e0       	ldi	r25, 0x04	; 4
    20b0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			as.set_test_state(IDLE);
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	87 e4       	ldi	r24, 0x47	; 71
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    20be:	99 c1       	rjmp	.+818    	; 0x23f2 <__vector_11+0x15f4>
		
		case ARB_STOP:
			atmega_uart::tx_string_p(PSTR("ARB_STOP\r"));
    20c0:	87 e3       	ldi	r24, 0x37	; 55
    20c2:	94 e0       	ldi	r25, 0x04	; 4
    20c4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			as.set_test_state(IDLE);
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	87 e4       	ldi	r24, 0x47	; 71
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    20d2:	8f c1       	rjmp	.+798    	; 0x23f2 <__vector_11+0x15f4>
		
		
		
		case FOOTER:
			//Only do stuff if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    20d4:	87 e4       	ldi	r24, 0x47	; 71
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	09 f0       	breq	.+2      	; 0x20e2 <__vector_11+0x12e4>
    20e0:	54 c1       	rjmp	.+680    	; 0x238a <__vector_11+0x158c>
			{
				//Calculate TIA resistance value.
				atmega_uart::tx_string_p(PSTR("res=tia_rt*100000/1023;\r"));
    20e2:	8e e1       	ldi	r24, 0x1E	; 30
    20e4:	94 e0       	ldi	r25, 0x04	; 4
    20e6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				
				//Print deposition graph if it is active.
				if(as.get_dep_rec() && as.get_dep_enable())
    20ea:	87 e4       	ldi	r24, 0x47	; 71
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    20f2:	88 23       	and	r24, r24
    20f4:	31 f1       	breq	.+76     	; 0x2142 <__vector_11+0x1344>
    20f6:	87 e4       	ldi	r24, 0x47	; 71
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN8as_class14get_dep_enableEv>
    20fe:	88 23       	and	r24, r24
    2100:	01 f1       	breq	.+64     	; 0x2142 <__vector_11+0x1344>
				{
					atmega_uart::tx_string_p(PSTR("d_ua=((d-2047)*(3.3/4096)/res);\r"));
    2102:	8d ef       	ldi	r24, 0xFD	; 253
    2104:	93 e0       	ldi	r25, 0x03	; 3
    2106:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("td=linspace(1,dep_t/1000,length(d_ua));\r"));
    210a:	84 ed       	ldi	r24, 0xD4	; 212
    210c:	93 e0       	ldi	r25, 0x03	; 3
    210e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(1);\r"));
    2112:	88 ec       	ldi	r24, 0xC8	; 200
    2114:	93 e0       	ldi	r25, 0x03	; 3
    2116:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(td,d_ua);\r"));
    211a:	88 eb       	ldi	r24, 0xB8	; 184
    211c:	93 e0       	ldi	r25, 0x03	; 3
    211e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    2122:	81 ea       	ldi	r24, 0xA1	; 161
    2124:	93 e0       	ldi	r25, 0x03	; 3
    2126:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Time (s)');\r"));
    212a:	8c e8       	ldi	r24, 0x8C	; 140
    212c:	93 e0       	ldi	r25, 0x03	; 3
    212e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Deposition Sequence');\r"));
    2132:	8d e6       	ldi	r24, 0x6D	; 109
    2134:	93 e0       	ldi	r25, 0x03	; 3
    2136:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    213a:	82 e6       	ldi	r24, 0x62	; 98
    213c:	93 e0       	ldi	r25, 0x03	; 3
    213e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Print quiet time graph if it is active.
				if(as.get_dep_rec() && as.get_dep_enable() && (as.get_quiet_time() > 0))
    2142:	87 e4       	ldi	r24, 0x47	; 71
    2144:	91 e0       	ldi	r25, 0x01	; 1
    2146:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    214a:	88 23       	and	r24, r24
    214c:	71 f1       	breq	.+92     	; 0x21aa <__vector_11+0x13ac>
    214e:	87 e4       	ldi	r24, 0x47	; 71
    2150:	91 e0       	ldi	r25, 0x01	; 1
    2152:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN8as_class14get_dep_enableEv>
    2156:	88 23       	and	r24, r24
    2158:	41 f1       	breq	.+80     	; 0x21aa <__vector_11+0x13ac>
    215a:	87 e4       	ldi	r24, 0x47	; 71
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN8as_class14get_quiet_timeEv>
    2162:	67 2b       	or	r22, r23
    2164:	68 2b       	or	r22, r24
    2166:	69 2b       	or	r22, r25
    2168:	01 f1       	breq	.+64     	; 0x21aa <__vector_11+0x13ac>
				{
					atmega_uart::tx_string_p(PSTR("q_ua=((q-2047)*(3.3/4096)/res);\r"));
    216a:	81 e4       	ldi	r24, 0x41	; 65
    216c:	93 e0       	ldi	r25, 0x03	; 3
    216e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("tq=linspace(1,quiet_t/1000,length(q_ua));\r"));
    2172:	86 e1       	ldi	r24, 0x16	; 22
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(2);\r"));
    217a:	8a e0       	ldi	r24, 0x0A	; 10
    217c:	93 e0       	ldi	r25, 0x03	; 3
    217e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(tq,q_ua);\r"));
    2182:	8a ef       	ldi	r24, 0xFA	; 250
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    218a:	83 ee       	ldi	r24, 0xE3	; 227
    218c:	92 e0       	ldi	r25, 0x02	; 2
    218e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Time (s)');\r"));
    2192:	8e ec       	ldi	r24, 0xCE	; 206
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Quiet Time Sequence');\r"));
    219a:	8f ea       	ldi	r24, 0xAF	; 175
    219c:	92 e0       	ldi	r25, 0x02	; 2
    219e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    21a2:	84 ea       	ldi	r24, 0xA4	; 164
    21a4:	92 e0       	ldi	r25, 0x02	; 2
    21a6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Print voltammetry graphs.
				for(uint16_t i = 1; i <= graph_cycles; i++)
    21aa:	80 91 27 01 	lds	r24, 0x0127
    21ae:	88 23       	and	r24, r24
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <__vector_11+0x13b6>
    21b2:	5e c0       	rjmp	.+188    	; 0x2270 <__vector_11+0x1472>
    21b4:	c1 e0       	ldi	r28, 0x01	; 1
    21b6:	d0 e0       	ldi	r29, 0x00	; 0
				{
					//First, convert all values to microamps.
					atmega_uart::tx_string_p(PSTR("s_ua"));
    21b8:	8f e9       	ldi	r24, 0x9F	; 159
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    21c0:	ce 01       	movw	r24, r28
    21c2:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=((s"));
    21c6:	8a e9       	ldi	r24, 0x9A	; 154
    21c8:	92 e0       	ldi	r25, 0x02	; 2
    21ca:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    21ce:	ce 01       	movw	r24, r28
    21d0:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					
					//Only have positive and negative values for linear tests.
					if(as.get_test_type() == TEST_LIN)
    21d4:	87 e4       	ldi	r24, 0x47	; 71
    21d6:	91 e0       	ldi	r25, 0x01	; 1
    21d8:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
    21dc:	81 11       	cpse	r24, r1
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <__vector_11+0x13ea>
						atmega_uart::tx_string_p(PSTR("-2047"));
    21e0:	84 e9       	ldi	r24, 0x94	; 148
    21e2:	92 e0       	ldi	r25, 0x02	; 2
    21e4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					
					atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/res);\r"));
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Next, create time arrays.
					atmega_uart::tx_byte('t');
    21f0:	84 e7       	ldi	r24, 0x74	; 116
    21f2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(i);
    21f6:	ce 01       	movw	r24, r28
    21f8:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=linspace("));
    21fc:	85 e7       	ldi	r24, 0x75	; 117
    21fe:	92 e0       	ldi	r25, 0x02	; 2
    2200:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					if(as.get_test_type() == TEST_SQR)
    2204:	87 e4       	ldi	r24, 0x47	; 71
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	29 f4       	brne	.+10     	; 0x221a <__vector_11+0x141c>
					{
						atmega_uart::tx_string_p(PSTR("square_vs/1000,square_ve/1000"));
    2210:	87 e5       	ldi	r24, 0x57	; 87
    2212:	92 e0       	ldi	r25, 0x02	; 2
    2214:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <__vector_11+0x1424>
					}
					else
					{
						atmega_uart::tx_string_p(PSTR("sweep_vs/1000,sweep_ve/1000"));
    221a:	8b e3       	ldi	r24, 0x3B	; 59
    221c:	92 e0       	ldi	r25, 0x02	; 2
    221e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					}
					atmega_uart::tx_string_p(PSTR(",length(s_ua"));
    2222:	8e e2       	ldi	r24, 0x2E	; 46
    2224:	92 e0       	ldi	r25, 0x02	; 2
    2226:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    222a:	ce 01       	movw	r24, r28
    222c:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("));\r"));
    2230:	89 e2       	ldi	r24, 0x29	; 41
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Then, time reverse every other array.
					if(!(i % 2))
    2238:	c0 fd       	sbrc	r28, 0
    223a:	12 c0       	rjmp	.+36     	; 0x2260 <__vector_11+0x1462>
					{
						atmega_uart::tx_string_p(PSTR("s_ua"));
    223c:	84 e2       	ldi	r24, 0x24	; 36
    223e:	92 e0       	ldi	r25, 0x02	; 2
    2240:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2244:	ce 01       	movw	r24, r28
    2246:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("=fliplr(s_ua"));
    224a:	87 e1       	ldi	r24, 0x17	; 23
    224c:	92 e0       	ldi	r25, 0x02	; 2
    224e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2252:	ce 01       	movw	r24, r28
    2254:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR(");\r"));
    2258:	83 e1       	ldi	r24, 0x13	; 19
    225a:	92 e0       	ldi	r25, 0x02	; 2
    225c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Quiet Time Sequence');\r"));
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
				}
				
				//Print voltammetry graphs.
				for(uint16_t i = 1; i <= graph_cycles; i++)
    2260:	21 96       	adiw	r28, 0x01	; 1
    2262:	80 91 27 01 	lds	r24, 0x0127
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	8c 17       	cp	r24, r28
    226a:	9d 07       	cpc	r25, r29
    226c:	08 f0       	brcs	.+2      	; 0x2270 <__vector_11+0x1472>
    226e:	a4 cf       	rjmp	.-184    	; 0x21b8 <__vector_11+0x13ba>
						tx_u16_to_ascii(i);
						atmega_uart::tx_string_p(PSTR(");\r"));
					}
				}
				
				atmega_uart::tx_string_p(PSTR("figure(3);\r"));
    2270:	87 e0       	ldi	r24, 0x07	; 7
    2272:	92 e0       	ldi	r25, 0x02	; 2
    2274:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				
				atmega_uart::tx_string_p(PSTR("plot("));
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				for(uint16_t i = 1; i <= graph_cycles; i++)
    2280:	80 91 27 01 	lds	r24, 0x0127
    2284:	88 23       	and	r24, r24
    2286:	d9 f1       	breq	.+118    	; 0x22fe <__vector_11+0x1500>
    2288:	c1 e0       	ldi	r28, 0x01	; 1
    228a:	d0 e0       	ldi	r29, 0x00	; 0
				{
					atmega_uart::tx_byte('t');
    228c:	84 e7       	ldi	r24, 0x74	; 116
    228e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(i);
    2292:	ce 01       	movw	r24, r28
    2294:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    2298:	8c e2       	ldi	r24, 0x2C	; 44
    229a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					atmega_uart::tx_string_p(PSTR("s_ua"));
    229e:	8c ef       	ldi	r24, 0xFC	; 252
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    22a6:	ce 01       	movw	r24, r28
    22a8:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					if(i < graph_cycles)
    22ac:	80 91 27 01 	lds	r24, 0x0127
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	c8 17       	cp	r28, r24
    22b4:	d9 07       	cpc	r29, r25
    22b6:	18 f4       	brcc	.+6      	; 0x22be <__vector_11+0x14c0>
						atmega_uart::tx_byte(',');
    22b8:	8c e2       	ldi	r24, 0x2C	; 44
    22ba:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					if(i != 0 && !(i % 5))
    22be:	20 97       	sbiw	r28, 0x00	; 0
    22c0:	b9 f0       	breq	.+46     	; 0x22f0 <__vector_11+0x14f2>
    22c2:	9e 01       	movw	r18, r28
    22c4:	ad ec       	ldi	r26, 0xCD	; 205
    22c6:	bc ec       	ldi	r27, 0xCC	; 204
    22c8:	0e 94 1a 33 	call	0x6634	; 0x6634 <__umulhisi3>
    22cc:	96 95       	lsr	r25
    22ce:	87 95       	ror	r24
    22d0:	96 95       	lsr	r25
    22d2:	87 95       	ror	r24
    22d4:	9c 01       	movw	r18, r24
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	22 0f       	add	r18, r18
    22dc:	33 1f       	adc	r19, r19
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	c8 17       	cp	r28, r24
    22e4:	d9 07       	cpc	r29, r25
    22e6:	21 f4       	brne	.+8      	; 0x22f0 <__vector_11+0x14f2>
						atmega_uart::tx_string_p(PSTR("...\r"));
    22e8:	87 ef       	ldi	r24, 0xF7	; 247
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				atmega_uart::tx_string_p(PSTR("figure(3);\r"));
				
				atmega_uart::tx_string_p(PSTR("plot("));
				for(uint16_t i = 1; i <= graph_cycles; i++)
    22f0:	21 96       	adiw	r28, 0x01	; 1
    22f2:	80 91 27 01 	lds	r24, 0x0127
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	8c 17       	cp	r24, r28
    22fa:	9d 07       	cpc	r25, r29
    22fc:	38 f6       	brcc	.-114    	; 0x228c <__vector_11+0x148e>
					if(i < graph_cycles)
						atmega_uart::tx_byte(',');
					if(i != 0 && !(i % 5))
						atmega_uart::tx_string_p(PSTR("...\r"));
				}
				atmega_uart::tx_string_p(PSTR(");\r"));
    22fe:	83 ef       	ldi	r24, 0xF3	; 243
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				
				atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    2306:	8c ed       	ldi	r24, 0xDC	; 220
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				atmega_uart::tx_string_p(PSTR("xlabel('Volts(V)');\r"));
    230e:	87 ec       	ldi	r24, 0xC7	; 199
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				
				//Customize title of graph.
				atmega_uart::tx_string_p(PSTR("title('"));
    2316:	8f eb       	ldi	r24, 0xBF	; 191
    2318:	91 e0       	ldi	r25, 0x01	; 1
    231a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				if(graph_cycles > 1)
    231e:	80 91 27 01 	lds	r24, 0x0127
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	20 f0       	brcs	.+8      	; 0x232e <__vector_11+0x1530>
				{
					atmega_uart::tx_string_p(PSTR("Cyclic "));
    2326:	87 eb       	ldi	r24, 0xB7	; 183
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Determine test type.
				if(as.get_test_type() == TEST_LIN)
    232e:	87 e4       	ldi	r24, 0x47	; 71
    2330:	91 e0       	ldi	r25, 0x01	; 1
    2332:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN8as_class13get_test_typeEv>
    2336:	81 11       	cpse	r24, r1
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <__vector_11+0x1546>
				{
					atmega_uart::tx_string_p(PSTR("Linear Sweep"));
    233a:	8a ea       	ldi	r24, 0xAA	; 170
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    2342:	04 c0       	rjmp	.+8      	; 0x234c <__vector_11+0x154e>
				}
				else
				{
					atmega_uart::tx_string_p(PSTR("Square Wave"));
    2344:	8e e9       	ldi	r24, 0x9E	; 158
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				if(graph_cycles > 1)
    234c:	80 91 27 01 	lds	r24, 0x0127
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	90 f0       	brcs	.+36     	; 0x2378 <__vector_11+0x157a>
				{
					atmega_uart::tx_string_p(PSTR(" ("));
    2354:	8b e9       	ldi	r24, 0x9B	; 155
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(graph_cycles / 2);
    235c:	80 91 27 01 	lds	r24, 0x0127
    2360:	86 95       	lsr	r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR(" "));
    2368:	89 e9       	ldi	r24, 0x99	; 153
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("Cycles)"));
    2370:	81 e9       	ldi	r24, 0x91	; 145
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				atmega_uart::tx_string_p(PSTR("')\r"));
    2378:	8d e8       	ldi	r24, 0x8D	; 141
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				
				atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    2380:	82 e8       	ldi	r24, 0x82	; 130
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    2388:	09 c0       	rjmp	.+18     	; 0x239c <__vector_11+0x159e>
			}
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    238a:	87 e4       	ldi	r24, 0x47	; 71
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    2392:	81 11       	cpse	r24, r1
    2394:	03 c0       	rjmp	.+6      	; 0x239c <__vector_11+0x159e>
			{
				atmega_uart::tx_byte('\r');
    2396:	8d e0       	ldi	r24, 0x0D	; 13
    2398:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
			}
			
			as.set_test_state(IDLE);
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	87 e4       	ldi	r24, 0x47	; 71
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
    23a6:	25 c0       	rjmp	.+74     	; 0x23f2 <__vector_11+0x15f4>
		
		case ABORT:
			//Print message if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    23a8:	87 e4       	ldi	r24, 0x47	; 71
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	29 f4       	brne	.+10     	; 0x23be <__vector_11+0x15c0>
			{
				atmega_uart::tx_string_p(PSTR("Test Aborted\r"));
    23b4:	84 e7       	ldi	r24, 0x74	; 116
    23b6:	91 e0       	ldi	r25, 0x01	; 1
    23b8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <__vector_11+0x15de>
			}
			//Print ASCII stream code.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    23be:	87 e4       	ldi	r24, 0x47	; 71
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    23c6:	81 11       	cpse	r24, r1
    23c8:	05 c0       	rjmp	.+10     	; 0x23d4 <__vector_11+0x15d6>
			{
				tx_u16_to_ascii(TEST_ABORT);
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 ef       	ldi	r25, 0xF0	; 240
    23ce:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z15tx_u16_to_asciij>
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <__vector_11+0x15de>
			}
			//Print binary stream code.	
			else
			{
				atmega_uart::tx_word(TEST_ABORT);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 ef       	ldi	r25, 0xF0	; 240
    23d8:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
			}
			
		default://Unrecognized state or abort.
			//Disconnect counter electrode.
			i2c_disconnect_ce();
    23dc:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_Z17i2c_disconnect_cev>
			//Zero out voltage and return to idle.
			write_dac(ZERO_VOLT);
    23e0:	8f ef       	ldi	r24, 0xFF	; 255
    23e2:	97 e0       	ldi	r25, 0x07	; 7
    23e4:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
			as.set_test_state(IDLE);
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	87 e4       	ldi	r24, 0x47	; 71
    23ec:	91 e0       	ldi	r25, 0x01	; 1
    23ee:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		break;
	}
	
	PORTB &= ~(1 << PORTB0);
    23f2:	28 98       	cbi	0x05, 0	; 5
    23f4:	43 c0       	rjmp	.+134    	; 0x247c <__vector_11+0x167e>
				as.set_test_state(RAMP);
			}
			else
			{
				//Disconnect counter electrode.
				i2c_disconnect_ce();
    23f6:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_Z17i2c_disconnect_cev>
				//Zero out voltage and return to idle.
				write_dac(ZERO_VOLT);
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	97 e0       	ldi	r25, 0x07	; 7
    23fe:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
				
				//Determine how many cycles need to be graphed.
				if(as.get_sweep_cyclic())
    2402:	87 e4       	ldi	r24, 0x47	; 71
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	0e 94 95 13 	call	0x272a	; 0x272a <_ZN8as_class16get_sweep_cyclicEv>
    240a:	81 11       	cpse	r24, r1
    240c:	05 cb       	rjmp	.-2550   	; 0x1a18 <__vector_11+0xc1a>
    240e:	09 cb       	rjmp	.-2542   	; 0x1a22 <__vector_11+0xc24>
			this_cyc++;
			
			if(as.get_sweep_cyclic() && (this_cyc <= tot_cyc))
			{
				//Change slope.
				slope ^= 0x01;
    2410:	90 91 30 01 	lds	r25, 0x0130
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	89 27       	eor	r24, r25
    2418:	80 93 30 01 	sts	0x0130, r24
			
				//Swap start and end voltages.
				temp = sv;
    241c:	80 91 37 01 	lds	r24, 0x0137
    2420:	90 91 38 01 	lds	r25, 0x0138
    2424:	a0 91 39 01 	lds	r26, 0x0139
    2428:	b0 91 3a 01 	lds	r27, 0x013A
    242c:	80 93 28 01 	sts	0x0128, r24
    2430:	90 93 29 01 	sts	0x0129, r25
    2434:	a0 93 2a 01 	sts	0x012A, r26
    2438:	b0 93 2b 01 	sts	0x012B, r27
				sv = ev;
    243c:	40 91 33 01 	lds	r20, 0x0133
    2440:	50 91 34 01 	lds	r21, 0x0134
    2444:	60 91 35 01 	lds	r22, 0x0135
    2448:	70 91 36 01 	lds	r23, 0x0136
    244c:	40 93 37 01 	sts	0x0137, r20
    2450:	50 93 38 01 	sts	0x0138, r21
    2454:	60 93 39 01 	sts	0x0139, r22
    2458:	70 93 3a 01 	sts	0x013A, r23
				ev = temp;
    245c:	80 93 33 01 	sts	0x0133, r24
    2460:	90 93 34 01 	sts	0x0134, r25
    2464:	a0 93 35 01 	sts	0x0135, r26
    2468:	b0 93 36 01 	sts	0x0136, r27
				
				//Print initial stream data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    246c:	87 e4       	ldi	r24, 0x47	; 71
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	09 f0       	breq	.+2      	; 0x247a <__vector_11+0x167c>
    2478:	b3 ca       	rjmp	.-2714   	; 0x19e0 <__vector_11+0xbe2>
    247a:	a5 ca       	rjmp	.-2742   	; 0x19c6 <__vector_11+0xbc8>
			as.set_test_state(IDLE);
		break;
	}
	
	PORTB &= ~(1 << PORTB0);
}
    247c:	ff 91       	pop	r31
    247e:	ef 91       	pop	r30
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	bf 91       	pop	r27
    2486:	af 91       	pop	r26
    2488:	9f 91       	pop	r25
    248a:	8f 91       	pop	r24
    248c:	7f 91       	pop	r23
    248e:	6f 91       	pop	r22
    2490:	5f 91       	pop	r21
    2492:	4f 91       	pop	r20
    2494:	3f 91       	pop	r19
    2496:	2f 91       	pop	r18
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	ff 90       	pop	r15
    249e:	ef 90       	pop	r14
    24a0:	df 90       	pop	r13
    24a2:	cf 90       	pop	r12
    24a4:	bf 90       	pop	r11
    24a6:	af 90       	pop	r10
    24a8:	9f 90       	pop	r9
    24aa:	8f 90       	pop	r8
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	0f 90       	pop	r0
    24b2:	1f 90       	pop	r1
    24b4:	18 95       	reti

000024b6 <_GLOBAL__sub_I_ms_counter>:
#include "helper.h"
#include "AquaSift_V0010.h"

uint32_t ms_counter;
uint8_t bin_timeout;
as_class as;
    24b6:	87 e4       	ldi	r24, 0x47	; 71
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	0e 94 60 12 	call	0x24c0	; 0x24c0 <_ZN8as_classC1Ev>
    24be:	08 95       	ret

000024c0 <_ZN8as_classC1Ev>:
#include <avr/io.h>
#include "as_class.h"

//Constructor that initializes default values of the test parameters.
as_class::as_class() : tx_mode(TX_MODE_MATLAB), num_electrodes(ELEC_3), adc_rate(2), 
    24c0:	fc 01       	movw	r30, r24
tia_res_tap(10), tia_cap_mask(0), dep_enable(true), dep_time(60000), dep_volt(-500),
quiet_time(0), dep_rec(true), sweep_volt_start(-500), sweep_volt_end(500), 
sweep_rate(10), sweep_cyclic(false), sweep_cycles(5), square_volt_start(-500),
square_volt_end(500), square_amp(25), square_inc(10), square_period(10),
arb_cyclic(false), arb_cycles(5), soft_filt(false), soft_sel(1), test_state(IDLE){}
    24c2:	a1 e0       	ldi	r26, 0x01	; 1
    24c4:	a0 83       	st	Z, r26
    24c6:	a1 83       	std	Z+1, r26	; 0x01
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	93 83       	std	Z+3, r25	; 0x03
    24ce:	82 83       	std	Z+2, r24	; 0x02
    24d0:	8a e0       	ldi	r24, 0x0A	; 10
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	95 83       	std	Z+5, r25	; 0x05
    24d6:	84 83       	std	Z+4, r24	; 0x04
    24d8:	16 82       	std	Z+6, r1	; 0x06
    24da:	a7 83       	std	Z+7, r26	; 0x07
    24dc:	40 e6       	ldi	r20, 0x60	; 96
    24de:	5a ee       	ldi	r21, 0xEA	; 234
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	70 e0       	ldi	r23, 0x00	; 0
    24e4:	40 87       	std	Z+8, r20	; 0x08
    24e6:	51 87       	std	Z+9, r21	; 0x09
    24e8:	62 87       	std	Z+10, r22	; 0x0a
    24ea:	73 87       	std	Z+11, r23	; 0x0b
    24ec:	2c e0       	ldi	r18, 0x0C	; 12
    24ee:	3e ef       	ldi	r19, 0xFE	; 254
    24f0:	35 87       	std	Z+13, r19	; 0x0d
    24f2:	24 87       	std	Z+12, r18	; 0x0c
    24f4:	16 86       	std	Z+14, r1	; 0x0e
    24f6:	17 86       	std	Z+15, r1	; 0x0f
    24f8:	10 8a       	std	Z+16, r1	; 0x10
    24fa:	11 8a       	std	Z+17, r1	; 0x11
    24fc:	a2 8b       	std	Z+18, r26	; 0x12
    24fe:	34 8b       	std	Z+20, r19	; 0x14
    2500:	23 8b       	std	Z+19, r18	; 0x13
    2502:	44 ef       	ldi	r20, 0xF4	; 244
    2504:	51 e0       	ldi	r21, 0x01	; 1
    2506:	56 8b       	std	Z+22, r21	; 0x16
    2508:	45 8b       	std	Z+21, r20	; 0x15
    250a:	90 8f       	std	Z+24, r25	; 0x18
    250c:	87 8b       	std	Z+23, r24	; 0x17
    250e:	11 8e       	std	Z+25, r1	; 0x19
    2510:	65 e0       	ldi	r22, 0x05	; 5
    2512:	62 8f       	std	Z+26, r22	; 0x1a
    2514:	34 8f       	std	Z+28, r19	; 0x1c
    2516:	23 8f       	std	Z+27, r18	; 0x1b
    2518:	56 8f       	std	Z+30, r21	; 0x1e
    251a:	45 8f       	std	Z+29, r20	; 0x1d
    251c:	29 e1       	ldi	r18, 0x19	; 25
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	30 a3       	std	Z+32, r19	; 0x20
    2522:	27 8f       	std	Z+31, r18	; 0x1f
    2524:	92 a3       	std	Z+34, r25	; 0x22
    2526:	81 a3       	std	Z+33, r24	; 0x21
    2528:	94 a3       	std	Z+36, r25	; 0x24
    252a:	83 a3       	std	Z+35, r24	; 0x23
    252c:	15 a2       	std	Z+37, r1	; 0x25
    252e:	66 a3       	std	Z+38, r22	; 0x26
    2530:	17 a2       	std	Z+39, r1	; 0x27
    2532:	a0 a7       	std	Z+40, r26	; 0x28
    2534:	11 a6       	std	Z+41, r1	; 0x29
    2536:	08 95       	ret

00002538 <_ZN8as_class11set_tx_modeE8tx_modes>:
	
/*************************************************Main Menu Functions*************************************************/
//Set transmission mode.
uint8_t as_class::set_tx_mode(tx_modes tx_m)
{
	tx_mode = tx_m;
    2538:	fc 01       	movw	r30, r24
    253a:	60 83       	st	Z, r22
	return AS_NO_ERR;
}
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	08 95       	ret

00002540 <_ZN8as_class11get_tx_modeEv>:

//Get transmission mode.
tx_modes as_class::get_tx_mode()
{
	return tx_mode;
}
    2540:	fc 01       	movw	r30, r24
    2542:	80 81       	ld	r24, Z
    2544:	08 95       	ret

00002546 <_ZN8as_class18set_num_electrodesE9num_elecs>:

//Set number of electrodes.
uint8_t as_class::set_num_electrodes(num_elecs num_e)
{
	num_electrodes = num_e;
    2546:	fc 01       	movw	r30, r24
    2548:	61 83       	std	Z+1, r22	; 0x01
	return AS_NO_ERR;
}
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	08 95       	ret

0000254e <_ZN8as_class18get_num_electrodesEv>:

//Get number of electrodes.
num_elecs as_class::get_num_electrodes()
{
	return num_electrodes;
}
    254e:	fc 01       	movw	r30, r24
    2550:	81 81       	ldd	r24, Z+1	; 0x01
    2552:	08 95       	ret

00002554 <_ZN8as_class12set_adc_rateEj>:

//Set ADC sample rate.
uint8_t as_class::set_adc_rate(uint16_t adc_r)
{
	if(adc_r > ADC_RATE_MAX)
    2554:	69 3e       	cpi	r22, 0xE9	; 233
    2556:	23 e0       	ldi	r18, 0x03	; 3
    2558:	72 07       	cpc	r23, r18
    255a:	40 f4       	brcc	.+16     	; 0x256c <_ZN8as_class12set_adc_rateEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(adc_r < ADC_RATE_MIN)
    255c:	61 15       	cp	r22, r1
    255e:	71 05       	cpc	r23, r1
    2560:	39 f0       	breq	.+14     	; 0x2570 <_ZN8as_class12set_adc_rateEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	adc_rate = adc_r;
    2562:	fc 01       	movw	r30, r24
    2564:	73 83       	std	Z+3, r23	; 0x03
    2566:	62 83       	std	Z+2, r22	; 0x02
	return AS_NO_ERR;
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	08 95       	ret
//Set ADC sample rate.
uint8_t as_class::set_adc_rate(uint16_t adc_r)
{
	if(adc_r > ADC_RATE_MAX)
	{
		return AS_VALUE_HIGH;
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	08 95       	ret
	}
	
	if(adc_r < ADC_RATE_MIN)
	{
		return AS_VALUE_LOW;
    2570:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	adc_rate = adc_r;
	return AS_NO_ERR;
}
    2572:	08 95       	ret

00002574 <_ZN8as_class12get_adc_rateEv>:

//Get ADC sample rate.
uint16_t as_class::get_adc_rate()
{
	return adc_rate;
}
    2574:	fc 01       	movw	r30, r24
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	08 95       	ret

0000257c <_ZN8as_class15set_tia_res_tapEj>:

/****************************************************TIA Functions****************************************************/
//Set TIA resistor tap value.
uint8_t as_class::set_tia_res_tap(uint16_t tia_res_t)
{
	if(tia_res_t > TAP_MAX)
    257c:	61 15       	cp	r22, r1
    257e:	24 e0       	ldi	r18, 0x04	; 4
    2580:	72 07       	cpc	r23, r18
    2582:	40 f5       	brcc	.+80     	; 0x25d4 <_ZN8as_class15set_tia_res_tapEj+0x58>
	{
		return AS_VALUE_HIGH;
	}
	
	if(tia_res_t < TAP_MIN)
    2584:	61 15       	cp	r22, r1
    2586:	71 05       	cpc	r23, r1
    2588:	39 f1       	breq	.+78     	; 0x25d8 <_ZN8as_class15set_tia_res_tapEj+0x5c>
	{
		return AS_VALUE_LOW;
	}
	
	//Hack.  Remove later!
	if(tia_res_t < 5)
    258a:	65 30       	cpi	r22, 0x05	; 5
    258c:	71 05       	cpc	r23, r1
    258e:	38 f4       	brcc	.+14     	; 0x259e <_ZN8as_class15set_tia_res_tapEj+0x22>
		tia_res_tap = 1;
    2590:	21 e0       	ldi	r18, 0x01	; 1
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	fc 01       	movw	r30, r24
    2596:	35 83       	std	Z+5, r19	; 0x05
    2598:	24 83       	std	Z+4, r18	; 0x04
		tia_res_tap = 102;
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	08 95       	ret
	}
	
	//Hack.  Remove later!
	if(tia_res_t < 5)
		tia_res_tap = 1;
	else if(tia_res_t < 50)
    259e:	62 33       	cpi	r22, 0x32	; 50
    25a0:	71 05       	cpc	r23, r1
    25a2:	38 f4       	brcc	.+14     	; 0x25b2 <_ZN8as_class15set_tia_res_tapEj+0x36>
		tia_res_tap = 10;
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	fc 01       	movw	r30, r24
    25aa:	35 83       	std	Z+5, r19	; 0x05
    25ac:	24 83       	std	Z+4, r18	; 0x04
		tia_res_tap = 102;
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	08 95       	ret
	//Hack.  Remove later!
	if(tia_res_t < 5)
		tia_res_tap = 1;
	else if(tia_res_t < 50)
		tia_res_tap = 10;
	else if(tia_res_t < 500)
    25b2:	64 3f       	cpi	r22, 0xF4	; 244
    25b4:	71 40       	sbci	r23, 0x01	; 1
    25b6:	38 f4       	brcc	.+14     	; 0x25c6 <_ZN8as_class15set_tia_res_tapEj+0x4a>
		tia_res_tap = 102;
    25b8:	26 e6       	ldi	r18, 0x66	; 102
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	fc 01       	movw	r30, r24
    25be:	35 83       	std	Z+5, r19	; 0x05
    25c0:	24 83       	std	Z+4, r18	; 0x04
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	08 95       	ret
	else if(tia_res_t < 50)
		tia_res_tap = 10;
	else if(tia_res_t < 500)
		tia_res_tap = 102;
	else
		tia_res_tap = 1023;
    25c6:	2f ef       	ldi	r18, 0xFF	; 255
    25c8:	33 e0       	ldi	r19, 0x03	; 3
    25ca:	fc 01       	movw	r30, r24
    25cc:	35 83       	std	Z+5, r19	; 0x05
    25ce:	24 83       	std	Z+4, r18	; 0x04
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	08 95       	ret
//Set TIA resistor tap value.
uint8_t as_class::set_tia_res_tap(uint16_t tia_res_t)
{
	if(tia_res_t > TAP_MAX)
	{
		return AS_VALUE_HIGH;
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	08 95       	ret
	}
	
	if(tia_res_t < TAP_MIN)
	{
		return AS_VALUE_LOW;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
}
    25da:	08 95       	ret

000025dc <_ZN8as_class15get_tia_res_tapEv>:

//Get TIA resistor tap value.
uint16_t as_class::get_tia_res_tap()
{
	return tia_res_tap;
}
    25dc:	fc 01       	movw	r30, r24
    25de:	84 81       	ldd	r24, Z+4	; 0x04
    25e0:	95 81       	ldd	r25, Z+5	; 0x05
    25e2:	08 95       	ret

000025e4 <_ZN8as_class16set_tia_cap_maskEh>:

//Set TIA capacitor 6-bit flag value.
uint8_t as_class::set_tia_cap_mask(uint8_t tia_cap_m)
{
	if(tia_cap_m > CAP_MAX)
    25e4:	60 34       	cpi	r22, 0x40	; 64
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <_ZN8as_class16set_tia_cap_maskEh+0xc>
	if(tia_cap_m < CAP_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	tia_cap_mask = tia_cap_m;
    25e8:	fc 01       	movw	r30, r24
    25ea:	66 83       	std	Z+6, r22	; 0x06
	return AS_NO_ERR;
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	08 95       	ret
//Set TIA capacitor 6-bit flag value.
uint8_t as_class::set_tia_cap_mask(uint8_t tia_cap_m)
{
	if(tia_cap_m > CAP_MAX)
	{
		return AS_VALUE_HIGH;
    25f0:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	tia_cap_mask = tia_cap_m;
	return AS_NO_ERR;
}
    25f2:	08 95       	ret

000025f4 <_ZN8as_class16get_tia_cap_maskEv>:

//Get TIA capacitor 6-bit flag value.
uint8_t as_class::get_tia_cap_mask()
{
	return tia_cap_mask;
}
    25f4:	fc 01       	movw	r30, r24
    25f6:	86 81       	ldd	r24, Z+6	; 0x06
    25f8:	08 95       	ret

000025fa <_ZN8as_class14set_dep_enableEb>:

/************************************************Deposition Functions*************************************************/
//Set deposition enable.
uint8_t as_class::set_dep_enable(bool dep_e)
{
	dep_enable = dep_e;
    25fa:	fc 01       	movw	r30, r24
    25fc:	67 83       	std	Z+7, r22	; 0x07
	return AS_NO_ERR;
}
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	08 95       	ret

00002602 <_ZN8as_class14get_dep_enableEv>:

//Get deposition enable.
bool as_class::get_dep_enable()
{
	return dep_enable;
}
    2602:	fc 01       	movw	r30, r24
    2604:	87 81       	ldd	r24, Z+7	; 0x07
    2606:	08 95       	ret

00002608 <_ZN8as_class12set_dep_timeEm>:

//Set deposition time.
uint8_t as_class::set_dep_time(uint32_t dep_t)
{
	if(dep_t > DEP_TIME_MAX)
    2608:	41 30       	cpi	r20, 0x01	; 1
    260a:	25 e3       	ldi	r18, 0x35	; 53
    260c:	52 07       	cpc	r21, r18
    260e:	2c e0       	ldi	r18, 0x0C	; 12
    2610:	62 07       	cpc	r22, r18
    2612:	71 05       	cpc	r23, r1
    2614:	60 f4       	brcc	.+24     	; 0x262e <_ZN8as_class12set_dep_timeEm+0x26>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dep_t < DEP_TIME_MIN)
    2616:	41 15       	cp	r20, r1
    2618:	51 05       	cpc	r21, r1
    261a:	61 05       	cpc	r22, r1
    261c:	71 05       	cpc	r23, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <_ZN8as_class12set_dep_timeEm+0x2a>
	{
		return AS_VALUE_LOW;
	}
	
	dep_time = dep_t;
    2620:	fc 01       	movw	r30, r24
    2622:	40 87       	std	Z+8, r20	; 0x08
    2624:	51 87       	std	Z+9, r21	; 0x09
    2626:	62 87       	std	Z+10, r22	; 0x0a
    2628:	73 87       	std	Z+11, r23	; 0x0b
	return AS_NO_ERR;
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	08 95       	ret
//Set deposition time.
uint8_t as_class::set_dep_time(uint32_t dep_t)
{
	if(dep_t > DEP_TIME_MAX)
	{
		return AS_VALUE_HIGH;
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	08 95       	ret
	}
	
	if(dep_t < DEP_TIME_MIN)
	{
		return AS_VALUE_LOW;
    2632:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dep_time = dep_t;
	return AS_NO_ERR;
}
    2634:	08 95       	ret

00002636 <_ZN8as_class12get_dep_timeEv>:

//Get deposition time.
uint32_t as_class::get_dep_time()
{
	return dep_time;
    2636:	fc 01       	movw	r30, r24
    2638:	60 85       	ldd	r22, Z+8	; 0x08
    263a:	71 85       	ldd	r23, Z+9	; 0x09
    263c:	82 85       	ldd	r24, Z+10	; 0x0a
    263e:	93 85       	ldd	r25, Z+11	; 0x0b
}
    2640:	08 95       	ret

00002642 <_ZN8as_class12set_dep_voltEi>:

//Set deposition voltage.
uint8_t as_class::set_dep_volt(int16_t dep_v)
{
	if(dep_v > DEP_VOLT_MAX)
    2642:	63 37       	cpi	r22, 0x73	; 115
    2644:	26 e0       	ldi	r18, 0x06	; 6
    2646:	72 07       	cpc	r23, r18
    2648:	4c f4       	brge	.+18     	; 0x265c <_ZN8as_class12set_dep_voltEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dep_v < DEP_VOLT_MIN)
    264a:	6e 38       	cpi	r22, 0x8E	; 142
    264c:	e9 ef       	ldi	r30, 0xF9	; 249
    264e:	7e 07       	cpc	r23, r30
    2650:	3c f0       	brlt	.+14     	; 0x2660 <_ZN8as_class12set_dep_voltEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	dep_volt = dep_v;
    2652:	fc 01       	movw	r30, r24
    2654:	75 87       	std	Z+13, r23	; 0x0d
    2656:	64 87       	std	Z+12, r22	; 0x0c
	return AS_NO_ERR;
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	08 95       	ret
//Set deposition voltage.
uint8_t as_class::set_dep_volt(int16_t dep_v)
{
	if(dep_v > DEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    265c:	82 e0       	ldi	r24, 0x02	; 2
    265e:	08 95       	ret
	}
	
	if(dep_v < DEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    2660:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dep_volt = dep_v;
	return AS_NO_ERR;
}
    2662:	08 95       	ret

00002664 <_ZN8as_class12get_dep_voltEv>:

//Get deposition voltage.
int as_class::get_dep_volt()
{
	return dep_volt;
}
    2664:	fc 01       	movw	r30, r24
    2666:	84 85       	ldd	r24, Z+12	; 0x0c
    2668:	95 85       	ldd	r25, Z+13	; 0x0d
    266a:	08 95       	ret

0000266c <_ZN8as_class14set_quiet_timeEm>:

//Set quiet time.
uint8_t as_class::set_quiet_time(uint32_t quiet_t)
{
	if(quiet_t > QUIET_TIME_MAX)
    266c:	41 30       	cpi	r20, 0x01	; 1
    266e:	25 e3       	ldi	r18, 0x35	; 53
    2670:	52 07       	cpc	r21, r18
    2672:	2c e0       	ldi	r18, 0x0C	; 12
    2674:	62 07       	cpc	r22, r18
    2676:	71 05       	cpc	r23, r1
    2678:	38 f4       	brcc	.+14     	; 0x2688 <_ZN8as_class14set_quiet_timeEm+0x1c>
	if(quiet_t < QUIET_TIME_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	quiet_time = quiet_t;
    267a:	fc 01       	movw	r30, r24
    267c:	46 87       	std	Z+14, r20	; 0x0e
    267e:	57 87       	std	Z+15, r21	; 0x0f
    2680:	60 8b       	std	Z+16, r22	; 0x10
    2682:	71 8b       	std	Z+17, r23	; 0x11
	return AS_NO_ERR;
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	08 95       	ret
//Set quiet time.
uint8_t as_class::set_quiet_time(uint32_t quiet_t)
{
	if(quiet_t > QUIET_TIME_MAX)
	{
		return AS_VALUE_HIGH;
    2688:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	quiet_time = quiet_t;
	return AS_NO_ERR;
}
    268a:	08 95       	ret

0000268c <_ZN8as_class14get_quiet_timeEv>:

//Get quiet time.
uint32_t as_class::get_quiet_time()
{
	return quiet_time;
    268c:	fc 01       	movw	r30, r24
    268e:	66 85       	ldd	r22, Z+14	; 0x0e
    2690:	77 85       	ldd	r23, Z+15	; 0x0f
    2692:	80 89       	ldd	r24, Z+16	; 0x10
    2694:	91 89       	ldd	r25, Z+17	; 0x11
}
    2696:	08 95       	ret

00002698 <_ZN8as_class11set_dep_recEb>:

//Set if deposition voltage is to be streamed.
uint8_t as_class::set_dep_rec(bool dep_r)
{
	dep_rec = dep_r;
    2698:	fc 01       	movw	r30, r24
    269a:	62 8b       	std	Z+18, r22	; 0x12
	return AS_NO_ERR;
}
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	08 95       	ret

000026a0 <_ZN8as_class11get_dep_recEv>:

//Get if deposition voltage is to be streamed.
bool as_class::get_dep_rec()
{
	return dep_rec;
}
    26a0:	fc 01       	movw	r30, r24
    26a2:	82 89       	ldd	r24, Z+18	; 0x12
    26a4:	08 95       	ret

000026a6 <_ZN8as_class20set_sweep_volt_startEi>:

/***********************************************Linear Sweep Functions************************************************/
//Set starting sweep voltage.
uint8_t as_class::set_sweep_volt_start(int16_t sweep_vs)
{
	if(sweep_vs > SWEEP_VOLT_MAX)
    26a6:	63 37       	cpi	r22, 0x73	; 115
    26a8:	26 e0       	ldi	r18, 0x06	; 6
    26aa:	72 07       	cpc	r23, r18
    26ac:	4c f4       	brge	.+18     	; 0x26c0 <_ZN8as_class20set_sweep_volt_startEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_vs < SWEEP_VOLT_MIN)
    26ae:	6e 38       	cpi	r22, 0x8E	; 142
    26b0:	e9 ef       	ldi	r30, 0xF9	; 249
    26b2:	7e 07       	cpc	r23, r30
    26b4:	3c f0       	brlt	.+14     	; 0x26c4 <_ZN8as_class20set_sweep_volt_startEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_volt_start = sweep_vs;
    26b6:	fc 01       	movw	r30, r24
    26b8:	74 8b       	std	Z+20, r23	; 0x14
    26ba:	63 8b       	std	Z+19, r22	; 0x13
	return AS_NO_ERR;
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	08 95       	ret
//Set starting sweep voltage.
uint8_t as_class::set_sweep_volt_start(int16_t sweep_vs)
{
	if(sweep_vs > SWEEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	08 95       	ret
	}
	
	if(sweep_vs < SWEEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_volt_start = sweep_vs;
	return AS_NO_ERR;
}
    26c6:	08 95       	ret

000026c8 <_ZN8as_class20get_sweep_volt_startEv>:

//Get starting sweep voltage.
int as_class::get_sweep_volt_start()
{
	return sweep_volt_start;
}
    26c8:	fc 01       	movw	r30, r24
    26ca:	83 89       	ldd	r24, Z+19	; 0x13
    26cc:	94 89       	ldd	r25, Z+20	; 0x14
    26ce:	08 95       	ret

000026d0 <_ZN8as_class18set_sweep_volt_endEi>:

//Set ending sweep voltage.
uint8_t as_class::set_sweep_volt_end(int16_t sweep_ve)
{
	if(sweep_ve > SWEEP_VOLT_MAX)
    26d0:	63 37       	cpi	r22, 0x73	; 115
    26d2:	26 e0       	ldi	r18, 0x06	; 6
    26d4:	72 07       	cpc	r23, r18
    26d6:	4c f4       	brge	.+18     	; 0x26ea <_ZN8as_class18set_sweep_volt_endEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_ve < SWEEP_VOLT_MIN)
    26d8:	6e 38       	cpi	r22, 0x8E	; 142
    26da:	e9 ef       	ldi	r30, 0xF9	; 249
    26dc:	7e 07       	cpc	r23, r30
    26de:	3c f0       	brlt	.+14     	; 0x26ee <_ZN8as_class18set_sweep_volt_endEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_volt_end = sweep_ve;
    26e0:	fc 01       	movw	r30, r24
    26e2:	76 8b       	std	Z+22, r23	; 0x16
    26e4:	65 8b       	std	Z+21, r22	; 0x15
	return AS_NO_ERR;
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	08 95       	ret
//Set ending sweep voltage.
uint8_t as_class::set_sweep_volt_end(int16_t sweep_ve)
{
	if(sweep_ve > SWEEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	08 95       	ret
	}
	
	if(sweep_ve < SWEEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_volt_end = sweep_ve;
	return AS_NO_ERR;
}
    26f0:	08 95       	ret

000026f2 <_ZN8as_class18get_sweep_volt_endEv>:

//Get ending sweep voltage.
int as_class::get_sweep_volt_end()
{
	return sweep_volt_end;
}
    26f2:	fc 01       	movw	r30, r24
    26f4:	85 89       	ldd	r24, Z+21	; 0x15
    26f6:	96 89       	ldd	r25, Z+22	; 0x16
    26f8:	08 95       	ret

000026fa <_ZN8as_class14set_sweep_rateEj>:

//Set sweep rate.
uint8_t as_class::set_sweep_rate(uint16_t sweep_r)
{
	if(sweep_r > SWEEP_RATE_MAX)
    26fa:	61 3d       	cpi	r22, 0xD1	; 209
    26fc:	27 e0       	ldi	r18, 0x07	; 7
    26fe:	72 07       	cpc	r23, r18
    2700:	40 f4       	brcc	.+16     	; 0x2712 <_ZN8as_class14set_sweep_rateEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_r < SWEEP_RATE_MIN)
    2702:	61 15       	cp	r22, r1
    2704:	71 05       	cpc	r23, r1
    2706:	39 f0       	breq	.+14     	; 0x2716 <_ZN8as_class14set_sweep_rateEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_rate = sweep_r;
    2708:	fc 01       	movw	r30, r24
    270a:	70 8f       	std	Z+24, r23	; 0x18
    270c:	67 8b       	std	Z+23, r22	; 0x17
	return AS_NO_ERR;
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	08 95       	ret
//Set sweep rate.
uint8_t as_class::set_sweep_rate(uint16_t sweep_r)
{
	if(sweep_r > SWEEP_RATE_MAX)
	{
		return AS_VALUE_HIGH;
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	08 95       	ret
	}
	
	if(sweep_r < SWEEP_RATE_MIN)
	{
		return AS_VALUE_LOW;
    2716:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_rate = sweep_r;
	return AS_NO_ERR;
}
    2718:	08 95       	ret

0000271a <_ZN8as_class14get_sweep_rateEv>:

//Get sweep rate.
uint16_t as_class::get_sweep_rate()
{
	return sweep_rate;
}
    271a:	fc 01       	movw	r30, r24
    271c:	87 89       	ldd	r24, Z+23	; 0x17
    271e:	90 8d       	ldd	r25, Z+24	; 0x18
    2720:	08 95       	ret

00002722 <_ZN8as_class16set_sweep_cyclicEb>:

//Set if sweep is cyclic.
uint8_t as_class::set_sweep_cyclic(bool sweep_c)
{
	sweep_cyclic = sweep_c;
    2722:	fc 01       	movw	r30, r24
    2724:	61 8f       	std	Z+25, r22	; 0x19
	return AS_NO_ERR;
}
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	08 95       	ret

0000272a <_ZN8as_class16get_sweep_cyclicEv>:

//Get if sweep is cyclic.
bool as_class::get_sweep_cyclic()
{
	return sweep_cyclic;
}
    272a:	fc 01       	movw	r30, r24
    272c:	81 8d       	ldd	r24, Z+25	; 0x19
    272e:	08 95       	ret

00002730 <_ZN8as_class16set_sweep_cyclesEh>:

//Set number of sweep cycles.
uint8_t as_class::set_sweep_cycles(uint8_t sweep_cs)
{
	if(sweep_cs > SWEEP_CYCLES_MAX)
    2730:	65 36       	cpi	r22, 0x65	; 101
    2732:	30 f4       	brcc	.+12     	; 0x2740 <_ZN8as_class16set_sweep_cyclesEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_cs < SWEEP_CYCLES_MIN)
    2734:	66 23       	and	r22, r22
    2736:	31 f0       	breq	.+12     	; 0x2744 <_ZN8as_class16set_sweep_cyclesEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_cycles = sweep_cs;
    2738:	fc 01       	movw	r30, r24
    273a:	62 8f       	std	Z+26, r22	; 0x1a
	return AS_NO_ERR;
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	08 95       	ret
//Set number of sweep cycles.
uint8_t as_class::set_sweep_cycles(uint8_t sweep_cs)
{
	if(sweep_cs > SWEEP_CYCLES_MAX)
	{
		return AS_VALUE_HIGH;
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	08 95       	ret
	}
	
	if(sweep_cs < SWEEP_CYCLES_MIN)
	{
		return AS_VALUE_LOW;
    2744:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_cycles = sweep_cs;
	return AS_NO_ERR;
}
    2746:	08 95       	ret

00002748 <_ZN8as_class16get_sweep_cyclesEv>:

//Get number of sweep cycles.
uint8_t as_class::get_sweep_cycles()
{
	return sweep_cycles;
}
    2748:	fc 01       	movw	r30, r24
    274a:	82 8d       	ldd	r24, Z+26	; 0x1a
    274c:	08 95       	ret

0000274e <_ZN8as_class21set_square_volt_startEi>:

/************************************************Square Wave Functions************************************************/
//Set square wave start voltage.
uint8_t as_class::set_square_volt_start(int16_t square_volt_s)
{
	if(square_volt_s > SQUARE_VOLT_MAX)
    274e:	63 37       	cpi	r22, 0x73	; 115
    2750:	26 e0       	ldi	r18, 0x06	; 6
    2752:	72 07       	cpc	r23, r18
    2754:	4c f4       	brge	.+18     	; 0x2768 <_ZN8as_class21set_square_volt_startEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(square_volt_s < SQUARE_VOLT_MIN)
    2756:	6e 38       	cpi	r22, 0x8E	; 142
    2758:	e9 ef       	ldi	r30, 0xF9	; 249
    275a:	7e 07       	cpc	r23, r30
    275c:	3c f0       	brlt	.+14     	; 0x276c <_ZN8as_class21set_square_volt_startEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	square_volt_start = square_volt_s;
    275e:	fc 01       	movw	r30, r24
    2760:	74 8f       	std	Z+28, r23	; 0x1c
    2762:	63 8f       	std	Z+27, r22	; 0x1b
	return AS_NO_ERR;
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	08 95       	ret
//Set square wave start voltage.
uint8_t as_class::set_square_volt_start(int16_t square_volt_s)
{
	if(square_volt_s > SQUARE_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	08 95       	ret
	}
	
	if(square_volt_s < SQUARE_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    276c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	square_volt_start = square_volt_s;
	return AS_NO_ERR;
}
    276e:	08 95       	ret

00002770 <_ZN8as_class21get_square_volt_startEv>:

//Get square wave start voltage.
int as_class::get_square_volt_start()
{
	return square_volt_start;
}
    2770:	fc 01       	movw	r30, r24
    2772:	83 8d       	ldd	r24, Z+27	; 0x1b
    2774:	94 8d       	ldd	r25, Z+28	; 0x1c
    2776:	08 95       	ret

00002778 <_ZN8as_class19set_square_volt_endEi>:

//Set square wave end voltage.
uint8_t as_class::set_square_volt_end(int16_t square_volt_e)
{
	if(square_volt_e > SQUARE_VOLT_MAX)
    2778:	63 37       	cpi	r22, 0x73	; 115
    277a:	26 e0       	ldi	r18, 0x06	; 6
    277c:	72 07       	cpc	r23, r18
    277e:	4c f4       	brge	.+18     	; 0x2792 <_ZN8as_class19set_square_volt_endEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(square_volt_e < SQUARE_VOLT_MIN)
    2780:	6e 38       	cpi	r22, 0x8E	; 142
    2782:	e9 ef       	ldi	r30, 0xF9	; 249
    2784:	7e 07       	cpc	r23, r30
    2786:	3c f0       	brlt	.+14     	; 0x2796 <_ZN8as_class19set_square_volt_endEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	square_volt_end = square_volt_e;
    2788:	fc 01       	movw	r30, r24
    278a:	76 8f       	std	Z+30, r23	; 0x1e
    278c:	65 8f       	std	Z+29, r22	; 0x1d
	return AS_NO_ERR;
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	08 95       	ret
//Set square wave end voltage.
uint8_t as_class::set_square_volt_end(int16_t square_volt_e)
{
	if(square_volt_e > SQUARE_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	08 95       	ret
	}
	
	if(square_volt_e < SQUARE_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    2796:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	square_volt_end = square_volt_e;
	return AS_NO_ERR;
}
    2798:	08 95       	ret

0000279a <_ZN8as_class19get_square_volt_endEv>:

//Set square wave end voltage.
int as_class::get_square_volt_end()
{
	return square_volt_end;
}
    279a:	fc 01       	movw	r30, r24
    279c:	85 8d       	ldd	r24, Z+29	; 0x1d
    279e:	96 8d       	ldd	r25, Z+30	; 0x1e
    27a0:	08 95       	ret

000027a2 <_ZN8as_class14set_square_ampEj>:

//Set square wave amplitude.
uint8_t as_class::set_square_amp(uint16_t square_a)
{
	if(square_a > SQUARE_AMP_MAX)
    27a2:	63 37       	cpi	r22, 0x73	; 115
    27a4:	26 e0       	ldi	r18, 0x06	; 6
    27a6:	72 07       	cpc	r23, r18
    27a8:	28 f4       	brcc	.+10     	; 0x27b4 <_ZN8as_class14set_square_ampEj+0x12>
	if(square_a < SQUARE_AMP_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	square_amp = square_a;
    27aa:	fc 01       	movw	r30, r24
    27ac:	70 a3       	std	Z+32, r23	; 0x20
    27ae:	67 8f       	std	Z+31, r22	; 0x1f
	return AS_NO_ERR;
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	08 95       	ret
//Set square wave amplitude.
uint8_t as_class::set_square_amp(uint16_t square_a)
{
	if(square_a > SQUARE_AMP_MAX)
	{
		return AS_VALUE_HIGH;
    27b4:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	square_amp = square_a;
	return AS_NO_ERR;
}
    27b6:	08 95       	ret

000027b8 <_ZN8as_class14get_square_ampEv>:

//Get square wave amplitude.
uint16_t as_class::get_square_amp()
{
	return square_amp;
}
    27b8:	fc 01       	movw	r30, r24
    27ba:	87 8d       	ldd	r24, Z+31	; 0x1f
    27bc:	90 a1       	ldd	r25, Z+32	; 0x20
    27be:	08 95       	ret

000027c0 <_ZN8as_class14set_square_incEj>:

//Set square wave increment.
uint8_t as_class::set_square_inc(uint16_t square_i)
{
	if(square_i > SQUARE_INC_MAX)
    27c0:	63 37       	cpi	r22, 0x73	; 115
    27c2:	26 e0       	ldi	r18, 0x06	; 6
    27c4:	72 07       	cpc	r23, r18
    27c6:	28 f4       	brcc	.+10     	; 0x27d2 <_ZN8as_class14set_square_incEj+0x12>
	if(square_i < SQUARE_INC_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	square_inc = square_i;
    27c8:	fc 01       	movw	r30, r24
    27ca:	72 a3       	std	Z+34, r23	; 0x22
    27cc:	61 a3       	std	Z+33, r22	; 0x21
	return AS_NO_ERR;
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	08 95       	ret
//Set square wave increment.
uint8_t as_class::set_square_inc(uint16_t square_i)
{
	if(square_i > SQUARE_INC_MAX)
	{
		return AS_VALUE_HIGH;
    27d2:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	square_inc = square_i;
	return AS_NO_ERR;
}
    27d4:	08 95       	ret

000027d6 <_ZN8as_class14get_square_incEv>:

//Get square wave increment.
uint16_t as_class::get_square_inc()
{
	return square_inc;
}
    27d6:	fc 01       	movw	r30, r24
    27d8:	81 a1       	ldd	r24, Z+33	; 0x21
    27da:	92 a1       	ldd	r25, Z+34	; 0x22
    27dc:	08 95       	ret

000027de <_ZN8as_class17set_square_periodEj>:

//Set square wave period.
uint8_t as_class::set_square_period(uint16_t square_p)
{
	if(square_p > SQUARE_PER_MAX)
    27de:	61 31       	cpi	r22, 0x11	; 17
    27e0:	27 e2       	ldi	r18, 0x27	; 39
    27e2:	72 07       	cpc	r23, r18
    27e4:	40 f4       	brcc	.+16     	; 0x27f6 <_ZN8as_class17set_square_periodEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(square_p < SQUARE_PER_MIN)
    27e6:	61 15       	cp	r22, r1
    27e8:	71 05       	cpc	r23, r1
    27ea:	39 f0       	breq	.+14     	; 0x27fa <_ZN8as_class17set_square_periodEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	square_period = square_p;
    27ec:	fc 01       	movw	r30, r24
    27ee:	74 a3       	std	Z+36, r23	; 0x24
    27f0:	63 a3       	std	Z+35, r22	; 0x23
	return AS_NO_ERR;
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	08 95       	ret
//Set square wave period.
uint8_t as_class::set_square_period(uint16_t square_p)
{
	if(square_p > SQUARE_PER_MAX)
	{
		return AS_VALUE_HIGH;
    27f6:	82 e0       	ldi	r24, 0x02	; 2
    27f8:	08 95       	ret
	}
	
	if(square_p < SQUARE_PER_MIN)
	{
		return AS_VALUE_LOW;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	square_period = square_p;
	return AS_NO_ERR;
}
    27fc:	08 95       	ret

000027fe <_ZN8as_class17get_square_periodEv>:

//Get square wave period.
uint16_t as_class::get_square_period()
{
	return square_period;
}
    27fe:	fc 01       	movw	r30, r24
    2800:	83 a1       	ldd	r24, Z+35	; 0x23
    2802:	94 a1       	ldd	r25, Z+36	; 0x24
    2804:	08 95       	ret

00002806 <_ZN8as_class14set_arb_cyclicEb>:

/*********************************************Arbitrary Waveform Functions********************************************/
//Set if arbitrary waveform is cyclic.
uint8_t as_class::set_arb_cyclic(bool arb_c)
{
	arb_cyclic = arb_c;
    2806:	fc 01       	movw	r30, r24
    2808:	65 a3       	std	Z+37, r22	; 0x25
	return AS_NO_ERR;
}
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	08 95       	ret

0000280e <_ZN8as_class14get_arb_cyclicEv>:

//Get if arbitrary waveform is cyclic.
uint8_t as_class::get_arb_cyclic()
{
	return arb_cyclic;
}
    280e:	fc 01       	movw	r30, r24
    2810:	85 a1       	ldd	r24, Z+37	; 0x25
    2812:	08 95       	ret

00002814 <_ZN8as_class14set_arb_cyclesEh>:

//Set number of arbitrary waveform cycles.
uint8_t as_class::set_arb_cycles(uint8_t arb_cs)
{
	if(arb_cs > ARB_CYCLES_MAX)
    2814:	65 36       	cpi	r22, 0x65	; 101
    2816:	30 f4       	brcc	.+12     	; 0x2824 <_ZN8as_class14set_arb_cyclesEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(arb_cs < ARB_CYCLES_MIN)
    2818:	66 23       	and	r22, r22
    281a:	31 f0       	breq	.+12     	; 0x2828 <_ZN8as_class14set_arb_cyclesEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	arb_cycles = arb_cs;
    281c:	fc 01       	movw	r30, r24
    281e:	66 a3       	std	Z+38, r22	; 0x26
	return AS_NO_ERR;
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	08 95       	ret
//Set number of arbitrary waveform cycles.
uint8_t as_class::set_arb_cycles(uint8_t arb_cs)
{
	if(arb_cs > ARB_CYCLES_MAX)
	{
		return AS_VALUE_HIGH;
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	08 95       	ret
	}
	
	if(arb_cs < ARB_CYCLES_MIN)
	{
		return AS_VALUE_LOW;
    2828:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	arb_cycles = arb_cs;
	return AS_NO_ERR;
}
    282a:	08 95       	ret

0000282c <_ZN8as_class14get_arb_cyclesEv>:

//Get number of arbitrary waveform cycles.
uint8_t as_class::get_arb_cycles()
{
	return arb_cycles;
}
    282c:	fc 01       	movw	r30, r24
    282e:	86 a1       	ldd	r24, Z+38	; 0x26
    2830:	08 95       	ret

00002832 <_ZN8as_class13set_soft_filtEb>:

/**********************************************Low-pass Filter Functions**********************************************/
//Set if software filter is to be used.
uint8_t as_class::set_soft_filt(bool soft_f)
{
	soft_filt = soft_f;
    2832:	fc 01       	movw	r30, r24
    2834:	67 a3       	std	Z+39, r22	; 0x27
	return AS_NO_ERR;
}
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	08 95       	ret

0000283a <_ZN8as_class13get_soft_filtEv>:

//Get if software filter is to be used.
bool as_class::get_soft_filt()
{
	return soft_filt;
}
    283a:	fc 01       	movw	r30, r24
    283c:	87 a1       	ldd	r24, Z+39	; 0x27
    283e:	08 95       	ret

00002840 <_ZN8as_class12set_soft_selEh>:

//Set software filter to use.
uint8_t as_class::set_soft_sel(uint8_t soft_s)
{
	if(soft_s > LPF_FILT_MAX)
    2840:	68 30       	cpi	r22, 0x08	; 8
    2842:	30 f4       	brcc	.+12     	; 0x2850 <_ZN8as_class12set_soft_selEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(soft_s < LPF_FILT_MIN)
    2844:	66 23       	and	r22, r22
    2846:	31 f0       	breq	.+12     	; 0x2854 <_ZN8as_class12set_soft_selEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	soft_sel = soft_s;
    2848:	fc 01       	movw	r30, r24
    284a:	60 a7       	std	Z+40, r22	; 0x28
	return AS_NO_ERR;
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	08 95       	ret
//Set software filter to use.
uint8_t as_class::set_soft_sel(uint8_t soft_s)
{
	if(soft_s > LPF_FILT_MAX)
	{
		return AS_VALUE_HIGH;
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	08 95       	ret
	}
	
	if(soft_s < LPF_FILT_MIN)
	{
		return AS_VALUE_LOW;
    2854:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	soft_sel = soft_s;
	return AS_NO_ERR;
}
    2856:	08 95       	ret

00002858 <_ZN8as_class12get_soft_selEv>:

//Get software filter to use.
uint8_t as_class::get_soft_sel()
{
	return soft_sel;
}
    2858:	fc 01       	movw	r30, r24
    285a:	80 a5       	ldd	r24, Z+40	; 0x28
    285c:	08 95       	ret

0000285e <_ZN8as_class14set_test_stateE11test_states>:

/*************************************************Test State Functions************************************************/
//Set current test state.
uint8_t as_class::set_test_state(test_states test_s)
{
	test_state = test_s;
    285e:	fc 01       	movw	r30, r24
    2860:	61 a7       	std	Z+41, r22	; 0x29
	return AS_NO_ERR;
}
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	08 95       	ret

00002866 <_ZN8as_class14get_test_stateEv>:

//Get current test state.
test_states as_class::get_test_state()
{
	return test_state;
}
    2866:	fc 01       	movw	r30, r24
    2868:	81 a5       	ldd	r24, Z+41	; 0x29
    286a:	08 95       	ret

0000286c <_ZN8as_class13set_test_typeE10test_types>:

//Set test type.
uint8_t as_class::set_test_type(test_types test_t)
{
	test_type = test_t;
    286c:	fc 01       	movw	r30, r24
    286e:	62 a7       	std	Z+42, r22	; 0x2a
	return AS_NO_ERR;
}
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	08 95       	ret

00002874 <_ZN8as_class13get_test_typeEv>:

//Get test type.
test_types as_class::get_test_type()
{
	return test_type;
}
    2874:	fc 01       	movw	r30, r24
    2876:	82 a5       	ldd	r24, Z+42	; 0x2a
    2878:	08 95       	ret

0000287a <_ZN13atmega_eeprom10write_wordEPjj>:
#include "atmega_eeprom.h"

//Write a 16-bit value to the EEPROM.
void atmega_eeprom::write_word(uint16_t *address, uint16_t data)
{
	cli();											//Disable interrupts.
    287a:	f8 94       	cli
	eeprom_write_word(address, data);				//Write data.
    287c:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__eewr_word_m328>
	eeprom_write_word((uint16_t *)EEPROM_PARK, 0);	//Park the pointer.
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__eewr_word_m328>
	sei();											//Enable interrupts.
    288c:	78 94       	sei
    288e:	08 95       	ret

00002890 <_ZN13atmega_eeprom9read_wordEPj>:
//Read a 16-bit value from the EEPROM.
uint16_t atmega_eeprom::read_word(uint16_t *address)
{
	uint16_t read_data;
	
	cli();											//Disable interrupts.
    2890:	f8 94       	cli
	read_data = eeprom_read_word(address);			//Get data.
    2892:	0e 94 65 33 	call	0x66ca	; 0x66ca <__eerd_word_m328>
	sei();											//Enable interrupts.
    2896:	78 94       	sei
	
	return read_data;
}
    2898:	08 95       	ret

0000289a <_ZN13atmega_eeprom16read_word_no_cliEPj>:

//Read a 16-bit value from the EEPROM without disabling the interrupt.
uint16_t atmega_eeprom::read_word_no_cli(uint16_t *address)
{
	return eeprom_read_word(address);
    289a:	0e 94 65 33 	call	0x66ca	; 0x66ca <__eerd_word_m328>
}
    289e:	08 95       	ret

000028a0 <_ZN13atmega_eeprom10write_byteEPhh>:

//Write an 8-bit value to the EEPROM. 8-bit addressing only.
void atmega_eeprom::write_byte(uint8_t *address, uint8_t data)
{
	cli();											//Disable interrupts.
    28a0:	f8 94       	cli
	eeprom_write_byte(address, data);				//Write data.
    28a2:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <__eewr_byte_m328>
	eeprom_write_byte((uint8_t *)EEPROM_PARK, 0);	//Park the pointer.
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <__eewr_byte_m328>
	sei();											//Enable interrupts.
    28b0:	78 94       	sei
    28b2:	08 95       	ret

000028b4 <_ZN13atmega_eeprom9read_byteEPh>:
//Read an 8-bit value from the EEPROM. 8-bit addressing only.
uint8_t atmega_eeprom::read_byte(uint8_t *address)
{
	uint8_t read_data;
	
	cli();											//Disable interrupts.
    28b4:	f8 94       	cli
	read_data = eeprom_read_byte(address);			//Get data.
    28b6:	0e 94 5d 33 	call	0x66ba	; 0x66ba <__eerd_byte_m328>
	sei();											//Enable interrupts.
    28ba:	78 94       	sei
	
	return read_data;
    28bc:	08 95       	ret

000028be <_ZN10atmega_spi15spi_master_initEv>:

//Setup all registers required for an spi master.
void atmega_spi::spi_master_init()
{
	//Set pins as outputs.
	ddrMOSI |= (1 << MOSI);
    28be:	23 9a       	sbi	0x04, 3	; 4
	ddrSCK  |= (1 << SCK);
    28c0:	25 9a       	sbi	0x04, 5	; 4
	ddrSS   |= (1 << SS);
    28c2:	22 9a       	sbi	0x04, 2	; 4
	
	//Enable SPI controller and clock it at system clock speed / 2.
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    28c4:	81 e5       	ldi	r24, 0x51	; 81
    28c6:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= (1 << SPI2X);
	
	//Turn on pull-up resistors.
	prtMOSI |= (1 << MOSI);
    28c8:	2b 9a       	sbi	0x05, 3	; 5
	prtMISO |= (1 << MISO);
    28ca:	2c 9a       	sbi	0x05, 4	; 5
    28cc:	08 95       	ret

000028ce <_ZN10atmega_spi9spi_writeEh>:
}

//Send data byte.
void atmega_spi::spi_write(uint8_t data)
{
	SPDR = data;
    28ce:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))){}
    28d0:	0d b4       	in	r0, 0x2d	; 45
    28d2:	07 fe       	sbrs	r0, 7
    28d4:	fd cf       	rjmp	.-6      	; 0x28d0 <_ZN10atmega_spi9spi_writeEh+0x2>
}
    28d6:	08 95       	ret

000028d8 <_ZN10atmega_spi8spi_readEv>:

//Receive data byte.
uint8_t atmega_spi::spi_read()
{	
	SPDR = 0xFF;
    28d8:	8f ef       	ldi	r24, 0xFF	; 255
    28da:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))){}
    28dc:	0d b4       	in	r0, 0x2d	; 45
    28de:	07 fe       	sbrs	r0, 7
    28e0:	fd cf       	rjmp	.-6      	; 0x28dc <_ZN10atmega_spi8spi_readEv+0x4>
	return SPDR;
    28e2:	8e b5       	in	r24, 0x2e	; 46
}
    28e4:	08 95       	ret

000028e6 <_ZN10atmega_twi15twi_master_initEv>:
#include "atmega_twi.h"

//TWI initialize as master.
void atmega_twi::twi_master_init(void)
{
	TWCR = 0x00;	//disable twi.
    28e6:	ec eb       	ldi	r30, 0xBC	; 188
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	10 82       	st	Z, r1
	TWBR = 0x02;	//set bit rate 400KHz @ 8 MHz CPU clock.
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;	//set prescale = 1.
    28f2:	10 92 b9 00 	sts	0x00B9, r1
	TWCR = 0x44;	//enable twi.
    28f6:	84 e4       	ldi	r24, 0x44	; 68
    28f8:	80 83       	st	Z, r24
    28fa:	08 95       	ret

000028fc <_ZN10atmega_twi9i2c_startEPh>:
//Function to start i2c communication.  No return value.  Sets errno 
//with error code if function failed, clears errno if function successful.
void atmega_twi::i2c_start(uint8_t* errno)
{
	//Send START condition.
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    28fc:	24 ea       	ldi	r18, 0xA4	; 164
    28fe:	20 93 bc 00 	sts	0x00BC, r18
	
	//Wait for TWINT flag set.
    while(!(TWCR & (1 << TWINT)));
    2902:	ec eb       	ldi	r30, 0xBC	; 188
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	20 81       	ld	r18, Z
    2908:	22 23       	and	r18, r18
    290a:	ec f7       	brge	.-6      	; 0x2906 <_ZN10atmega_twi9i2c_startEPh+0xa>
	
	//Check value of TWI Status Register.
    (TWSR & 0xF8) == START ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    290c:	20 91 b9 00 	lds	r18, 0x00B9
    2910:	28 7f       	andi	r18, 0xF8	; 248
    2912:	28 30       	cpi	r18, 0x08	; 8
    2914:	19 f4       	brne	.+6      	; 0x291c <_ZN10atmega_twi9i2c_startEPh+0x20>
    2916:	fc 01       	movw	r30, r24
    2918:	10 82       	st	Z, r1
    291a:	08 95       	ret
    291c:	20 91 b9 00 	lds	r18, 0x00B9
    2920:	28 7f       	andi	r18, 0xF8	; 248
    2922:	fc 01       	movw	r30, r24
    2924:	20 83       	st	Z, r18
    2926:	08 95       	ret

00002928 <_ZN10atmega_twi15i2c_sendAddressEhPh>:
void atmega_twi::i2c_sendAddress(const uint8_t address, uint8_t* errno)
{
	uint8_t ack;
   
	//Set ack based on whether receiving or transmitting.
	(address & 0x01) == 0 ? ack = MT_SLA_ACK : ack = MR_SLA_ACK;
    2928:	80 fd       	sbrc	r24, 0
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <_ZN10atmega_twi15i2c_sendAddressEhPh+0x8>
    292c:	48 e1       	ldi	r20, 0x18	; 24
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <_ZN10atmega_twi15i2c_sendAddressEhPh+0xa>
    2930:	40 e4       	ldi	r20, 0x40	; 64
	
	//Load SLA_W into TWDR Register. Clear TWINT bit to start transmission.
	TWDR = address; 
    2932:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    2936:	84 e8       	ldi	r24, 0x84	; 132
    2938:	80 93 bc 00 	sts	0x00BC, r24
   
	//Wait for TWINT flag set.
	while(!(TWCR & (1 << TWINT)));
    293c:	ec eb       	ldi	r30, 0xBC	; 188
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	90 81       	ld	r25, Z
    2942:	99 23       	and	r25, r25
    2944:	ec f7       	brge	.-6      	; 0x2940 <_ZN10atmega_twi15i2c_sendAddressEhPh+0x18>
	
	//Check value of TWI Status Register.
	(TWSR & 0xF8) == ack ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    2946:	20 91 b9 00 	lds	r18, 0x00B9
    294a:	28 7f       	andi	r18, 0xF8	; 248
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	84 2f       	mov	r24, r20
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	28 17       	cp	r18, r24
    2954:	39 07       	cpc	r19, r25
    2956:	19 f4       	brne	.+6      	; 0x295e <_ZN10atmega_twi15i2c_sendAddressEhPh+0x36>
    2958:	fb 01       	movw	r30, r22
    295a:	10 82       	st	Z, r1
    295c:	08 95       	ret
    295e:	80 91 b9 00 	lds	r24, 0x00B9
    2962:	88 7f       	andi	r24, 0xF8	; 248
    2964:	fb 01       	movw	r30, r22
    2966:	80 83       	st	Z, r24
    2968:	08 95       	ret

0000296a <_ZN10atmega_twi12i2c_sendDataEhPh>:
//Function to transmit a data byte.  No return value.  Sets errno
//with error code if function failed, clears errno if function successful.
void atmega_twi::i2c_sendData(const uint8_t data, uint8_t* errno)
{
	//Load SLA_W into TWDR Register. Clear TWINT bit to start transmission.
	TWDR = data; 
    296a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);	
    296e:	84 e8       	ldi	r24, 0x84	; 132
    2970:	80 93 bc 00 	sts	0x00BC, r24
	
	//Wait for TWINT flag set.
	while(!(TWCR & (1 << TWINT)));
    2974:	ec eb       	ldi	r30, 0xBC	; 188
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	88 23       	and	r24, r24
    297c:	ec f7       	brge	.-6      	; 0x2978 <_ZN10atmega_twi12i2c_sendDataEhPh+0xe>
	
	//Check value of TWI Status Register
	(TWSR & 0xF8) == MT_DATA_ACK ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    297e:	80 91 b9 00 	lds	r24, 0x00B9
    2982:	88 7f       	andi	r24, 0xF8	; 248
    2984:	88 32       	cpi	r24, 0x28	; 40
    2986:	19 f4       	brne	.+6      	; 0x298e <_ZN10atmega_twi12i2c_sendDataEhPh+0x24>
    2988:	fb 01       	movw	r30, r22
    298a:	10 82       	st	Z, r1
    298c:	08 95       	ret
    298e:	80 91 b9 00 	lds	r24, 0x00B9
    2992:	88 7f       	andi	r24, 0xF8	; 248
    2994:	fb 01       	movw	r30, r22
    2996:	80 83       	st	Z, r24
    2998:	08 95       	ret

0000299a <_ZN10atmega_twi20i2c_receiveData_NACKEPh>:
uint8_t atmega_twi::i2c_receiveData_NACK(uint8_t* errno)
{
	uint8_t data;
  
	//Start transmission.
	TWCR = (1 << TWINT) | (1 << TWEN);
    299a:	24 e8       	ldi	r18, 0x84	; 132
    299c:	20 93 bc 00 	sts	0x00BC, r18
  
	//Wait for TWINT flag set.  
	while(!(TWCR & (1 << TWINT)));
    29a0:	ec eb       	ldi	r30, 0xBC	; 188
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	20 81       	ld	r18, Z
    29a6:	22 23       	and	r18, r18
    29a8:	ec f7       	brge	.-6      	; 0x29a4 <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0xa>
	
	//Check value of TWI Status Register.   	   
	(TWSR & 0xF8) == MR_DATA_NACK ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    29aa:	20 91 b9 00 	lds	r18, 0x00B9
    29ae:	28 7f       	andi	r18, 0xF8	; 248
    29b0:	28 35       	cpi	r18, 0x58	; 88
    29b2:	19 f4       	brne	.+6      	; 0x29ba <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0x20>
    29b4:	fc 01       	movw	r30, r24
    29b6:	10 82       	st	Z, r1
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0x2a>
    29ba:	20 91 b9 00 	lds	r18, 0x00B9
    29be:	28 7f       	andi	r18, 0xF8	; 248
    29c0:	fc 01       	movw	r30, r24
    29c2:	20 83       	st	Z, r18
  
	data = TWDR;
    29c4:	80 91 bb 00 	lds	r24, 0x00BB
	return(data);
}
    29c8:	08 95       	ret

000029ca <_ZN10atmega_twi8i2c_stopEv>:

//Function to end the i2c communication.   	
void atmega_twi::i2c_stop()
{
	//Transmit STOP condition.
	TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    29ca:	84 e9       	ldi	r24, 0x94	; 148
    29cc:	80 93 bc 00 	sts	0x00BC, r24
    29d0:	08 95       	ret

000029d2 <_ZN11atmega_uart9uart_initEj>:
#include "atmega_uart.h"

///Configure the UART.
void atmega_uart::uart_init(const uint16_t ubrr)
{
	UBRR0H = (uint8_t)(ubrr >> 8);							//Load upper ubrr byte.
    29d2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)ubrr;									//Load lower ubrr byte.
    29d6:	80 93 c4 00 	sts	0x00C4, r24
	//UCSR0A = (1 << U2X0);									//Double speed mode.
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);	//Enable RX interrupt, receive and transmit circuits.
    29da:	88 e9       	ldi	r24, 0x98	; 152
    29dc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3 << UCSZ00);									//Use 8 bit bytes.
    29e0:	86 e0       	ldi	r24, 0x06	; 6
    29e2:	80 93 c2 00 	sts	0x00C2, r24
    29e6:	08 95       	ret

000029e8 <_ZN11atmega_uart7tx_byteEh>:
}

//Transmits a single byte out the UART.
void atmega_uart::tx_byte(const uint8_t data)
{
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    29e8:	e0 ec       	ldi	r30, 0xC0	; 192
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	90 81       	ld	r25, Z
    29ee:	95 ff       	sbrs	r25, 5
    29f0:	fd cf       	rjmp	.-6      	; 0x29ec <_ZN11atmega_uart7tx_byteEh+0x4>
	UDR0 = data;
    29f2:	80 93 c6 00 	sts	0x00C6, r24
    29f6:	08 95       	ret

000029f8 <_ZN11atmega_uart7tx_wordEj>:
}

//Transmit 16-bit number.
void atmega_uart::tx_word(const uint16_t data)
{
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    29f8:	e0 ec       	ldi	r30, 0xC0	; 192
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	20 81       	ld	r18, Z
    29fe:	25 ff       	sbrs	r18, 5
    2a00:	fd cf       	rjmp	.-6      	; 0x29fc <_ZN11atmega_uart7tx_wordEj+0x4>
	UDR0 = data >> 8;
    2a02:	90 93 c6 00 	sts	0x00C6, r25
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2a06:	e0 ec       	ldi	r30, 0xC0	; 192
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	90 81       	ld	r25, Z
    2a0c:	95 ff       	sbrs	r25, 5
    2a0e:	fd cf       	rjmp	.-6      	; 0x2a0a <_ZN11atmega_uart7tx_wordEj+0x12>
	UDR0 = data;
    2a10:	80 93 c6 00 	sts	0x00C6, r24
    2a14:	08 95       	ret

00002a16 <_ZN11atmega_uart8tx_dwordEm>:
}

//Transmit 32-bit number.
void atmega_uart::tx_dword(const uint32_t data)
{
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2a1a:	e0 ec       	ldi	r30, 0xC0	; 192
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	20 81       	ld	r18, Z
    2a20:	25 ff       	sbrs	r18, 5
    2a22:	fd cf       	rjmp	.-6      	; 0x2a1e <_ZN11atmega_uart8tx_dwordEm+0x8>
	UDR0 = data >> 24;
    2a24:	09 2f       	mov	r16, r25
    2a26:	11 27       	eor	r17, r17
    2a28:	22 27       	eor	r18, r18
    2a2a:	33 27       	eor	r19, r19
    2a2c:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2a30:	e0 ec       	ldi	r30, 0xC0	; 192
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	20 81       	ld	r18, Z
    2a36:	25 ff       	sbrs	r18, 5
    2a38:	fd cf       	rjmp	.-6      	; 0x2a34 <_ZN11atmega_uart8tx_dwordEm+0x1e>
	UDR0 = data >> 16;
    2a3a:	8c 01       	movw	r16, r24
    2a3c:	22 27       	eor	r18, r18
    2a3e:	33 27       	eor	r19, r19
    2a40:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2a44:	e0 ec       	ldi	r30, 0xC0	; 192
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	20 81       	ld	r18, Z
    2a4a:	25 ff       	sbrs	r18, 5
    2a4c:	fd cf       	rjmp	.-6      	; 0x2a48 <_ZN11atmega_uart8tx_dwordEm+0x32>
	UDR0 = data >> 8;
    2a4e:	07 2f       	mov	r16, r23
    2a50:	18 2f       	mov	r17, r24
    2a52:	29 2f       	mov	r18, r25
    2a54:	33 27       	eor	r19, r19
    2a56:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2a5a:	e0 ec       	ldi	r30, 0xC0	; 192
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	20 81       	ld	r18, Z
    2a60:	25 ff       	sbrs	r18, 5
    2a62:	fd cf       	rjmp	.-6      	; 0x2a5e <_ZN11atmega_uart8tx_dwordEm+0x48>
	UDR0 = data;
    2a64:	60 93 c6 00 	sts	0x00C6, r22
}
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	08 95       	ret

00002a6e <_ZN11atmega_uart9tx_stringEPKc>:

//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	ec 01       	movw	r28, r24
	uint8_t tx_string_index = 0;
	
	while(data[tx_string_index])
    2a76:	88 81       	ld	r24, Y
    2a78:	88 23       	and	r24, r24
    2a7a:	51 f0       	breq	.+20     	; 0x2a90 <_ZN11atmega_uart9tx_stringEPKc+0x22>
}

//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
	uint8_t tx_string_index = 0;
    2a7c:	10 e0       	ldi	r17, 0x00	; 0
	
	while(data[tx_string_index])
	{
		tx_byte(data[tx_string_index++]);	//Transmit byte.
    2a7e:	1f 5f       	subi	r17, 0xFF	; 255
    2a80:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
	uint8_t tx_string_index = 0;
	
	while(data[tx_string_index])
    2a84:	fe 01       	movw	r30, r28
    2a86:	e1 0f       	add	r30, r17
    2a88:	f1 1d       	adc	r31, r1
    2a8a:	80 81       	ld	r24, Z
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	f7 cf       	rjmp	.-18     	; 0x2a7e <_ZN11atmega_uart9tx_stringEPKc+0x10>
	{
		tx_byte(data[tx_string_index++]);	//Transmit byte.
	}
}
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	1f 91       	pop	r17
    2a96:	08 95       	ret

00002a98 <_ZN11atmega_uart11tx_string_pEPKc>:

//Transmits a string from program space out the UART.
void atmega_uart::tx_string_p(const char *data)
{
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	ec 01       	movw	r28, r24
	while(pgm_read_byte(data))
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	24 91       	lpm	r18, Z
    2aa2:	22 23       	and	r18, r18
    2aa4:	51 f0       	breq	.+20     	; 0x2aba <_ZN11atmega_uart11tx_string_pEPKc+0x22>
	{
		tx_byte(pgm_read_byte(data));
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	84 91       	lpm	r24, Z
    2aaa:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
			
		data++;
    2aae:	21 96       	adiw	r28, 0x01	; 1
}

//Transmits a string from program space out the UART.
void atmega_uart::tx_string_p(const char *data)
{
	while(pgm_read_byte(data))
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	24 91       	lpm	r18, Z
    2ab6:	21 11       	cpse	r18, r1
    2ab8:	f6 cf       	rjmp	.-20     	; 0x2aa6 <_ZN11atmega_uart11tx_string_pEPKc+0xe>
	{
		tx_byte(pgm_read_byte(data));
			
		data++;
	}
}
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	08 95       	ret

00002ac0 <_ZN11atmega_uart5tx_tfEb>:

//Transmit 0x01 for true, 0x00 for false.
void atmega_uart::tx_tf(const bool data)
{
	data ? atmega_uart::tx_byte(0x01) : atmega_uart::tx_byte(0x00);
    2ac0:	88 23       	and	r24, r24
    2ac2:	21 f0       	breq	.+8      	; 0x2acc <_ZN11atmega_uart5tx_tfEb+0xc>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    2aca:	08 95       	ret
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    2ad2:	08 95       	ret

00002ad4 <_Z17i2c_load_cap_maskP8as_class>:
	sei(); //Enable global interrupts.
}

//Update capacitors connected to system.
void i2c_load_cap_mask(as_class *as)
{
    2ad4:	1f 93       	push	r17
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
    2ada:	ec 01       	movw	r28, r24
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2adc:	83 e9       	ldi	r24, 0x93	; 147
    2ade:	91 e0       	ldi	r25, 0x01	; 1
    2ae0:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2ae4:	63 e9       	ldi	r22, 0x93	; 147
    2ae6:	71 e0       	ldi	r23, 0x01	; 1
    2ae8:	87 e9       	ldi	r24, 0x97	; 151
    2aea:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2aee:	83 e9       	ldi	r24, 0x93	; 147
    2af0:	91 e0       	ldi	r25, 0x01	; 1
    2af2:	0e 94 cd 14 	call	0x299a	; 0x299a <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2af6:	18 2f       	mov	r17, r24
	atmega_twi::i2c_stop();
    2af8:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
	
	//Get rid of 6 upper bits of temp.
	temp &= 0x03;
	
	//Update temp with current cap mask.
	temp |= (as->get_tia_cap_mask() << 2);
    2afc:	ce 01       	movw	r24, r28
    2afe:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN8as_class16get_tia_cap_maskEv>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
	atmega_twi::i2c_stop();
	
	//Get rid of 6 upper bits of temp.
	temp &= 0x03;
    2b02:	13 70       	andi	r17, 0x03	; 3
	
	//Update temp with current cap mask.
	temp |= (as->get_tia_cap_mask() << 2);
    2b04:	24 e0       	ldi	r18, 0x04	; 4
    2b06:	82 9f       	mul	r24, r18
    2b08:	c0 01       	movw	r24, r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	ec 01       	movw	r28, r24
    2b0e:	c1 2b       	or	r28, r17
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2b10:	83 e9       	ldi	r24, 0x93	; 147
    2b12:	91 e0       	ldi	r25, 0x01	; 1
    2b14:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2b18:	63 e9       	ldi	r22, 0x93	; 147
    2b1a:	71 e0       	ldi	r23, 0x01	; 1
    2b1c:	86 e9       	ldi	r24, 0x96	; 150
    2b1e:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2b22:	63 e9       	ldi	r22, 0x93	; 147
    2b24:	71 e0       	ldi	r23, 0x01	; 1
    2b26:	8c 2f       	mov	r24, r28
    2b28:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2b2c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
}
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	08 95       	ret

00002b38 <_Z19i2c_load_electrodesP8as_class>:

//Update config for one or two electrodes.
void i2c_load_electrodes(as_class *as)
{
    2b38:	1f 93       	push	r17
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	ec 01       	movw	r28, r24
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2b40:	83 e9       	ldi	r24, 0x93	; 147
    2b42:	91 e0       	ldi	r25, 0x01	; 1
    2b44:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2b48:	63 e9       	ldi	r22, 0x93	; 147
    2b4a:	71 e0       	ldi	r23, 0x01	; 1
    2b4c:	87 e9       	ldi	r24, 0x97	; 151
    2b4e:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2b52:	83 e9       	ldi	r24, 0x93	; 147
    2b54:	91 e0       	ldi	r25, 0x01	; 1
    2b56:	0e 94 cd 14 	call	0x299a	; 0x299a <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2b5a:	18 2f       	mov	r17, r24
	atmega_twi::i2c_stop();
    2b5c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
	
	//Setup 2 electrode configuration.
	if(as->get_num_electrodes() == ELEC_2)
    2b60:	ce 01       	movw	r24, r28
    2b62:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN8as_class18get_num_electrodesEv>
    2b66:	81 11       	cpse	r24, r1
    2b68:	03 c0       	rjmp	.+6      	; 0x2b70 <_Z19i2c_load_electrodesP8as_class+0x38>
	{
		temp |= ANS_2_ELEC;
    2b6a:	c1 2f       	mov	r28, r17
    2b6c:	c2 60       	ori	r28, 0x02	; 2
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <_Z19i2c_load_electrodesP8as_class+0x3c>
	}
	//Setup 3 electrode configuration.
	else
	{
		temp &= ~ANS_2_ELEC;
    2b70:	c1 2f       	mov	r28, r17
    2b72:	cd 7f       	andi	r28, 0xFD	; 253
	}
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2b74:	83 e9       	ldi	r24, 0x93	; 147
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2b7c:	63 e9       	ldi	r22, 0x93	; 147
    2b7e:	71 e0       	ldi	r23, 0x01	; 1
    2b80:	86 e9       	ldi	r24, 0x96	; 150
    2b82:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2b86:	63 e9       	ldi	r22, 0x93	; 147
    2b88:	71 e0       	ldi	r23, 0x01	; 1
    2b8a:	8c 2f       	mov	r24, r28
    2b8c:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2b90:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
}
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	08 95       	ret

00002b9c <_Z14i2c_connect_cev>:

//Connects the counter electrode to the system.
void i2c_connect_ce()
{
    2b9c:	cf 93       	push	r28
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2b9e:	83 e9       	ldi	r24, 0x93	; 147
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2ba6:	63 e9       	ldi	r22, 0x93	; 147
    2ba8:	71 e0       	ldi	r23, 0x01	; 1
    2baa:	87 e9       	ldi	r24, 0x97	; 151
    2bac:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2bb0:	83 e9       	ldi	r24, 0x93	; 147
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	0e 94 cd 14 	call	0x299a	; 0x299a <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2bb8:	c8 2f       	mov	r28, r24
	atmega_twi::i2c_stop();
    2bba:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
	
	temp |= ANS_CE;	//Set bit for counter electrode.
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2bbe:	83 e9       	ldi	r24, 0x93	; 147
    2bc0:	91 e0       	ldi	r25, 0x01	; 1
    2bc2:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2bc6:	63 e9       	ldi	r22, 0x93	; 147
    2bc8:	71 e0       	ldi	r23, 0x01	; 1
    2bca:	86 e9       	ldi	r24, 0x96	; 150
    2bcc:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2bd0:	63 e9       	ldi	r22, 0x93	; 147
    2bd2:	71 e0       	ldi	r23, 0x01	; 1
    2bd4:	8c 2f       	mov	r24, r28
    2bd6:	81 60       	ori	r24, 0x01	; 1
    2bd8:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2bdc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
}
    2be0:	cf 91       	pop	r28
    2be2:	08 95       	ret

00002be4 <_Z17i2c_disconnect_cev>:

//Disconnects the counter electrode from the system.
void i2c_disconnect_ce()
{
    2be4:	cf 93       	push	r28
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2be6:	83 e9       	ldi	r24, 0x93	; 147
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2bee:	63 e9       	ldi	r22, 0x93	; 147
    2bf0:	71 e0       	ldi	r23, 0x01	; 1
    2bf2:	87 e9       	ldi	r24, 0x97	; 151
    2bf4:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2bf8:	83 e9       	ldi	r24, 0x93	; 147
    2bfa:	91 e0       	ldi	r25, 0x01	; 1
    2bfc:	0e 94 cd 14 	call	0x299a	; 0x299a <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2c00:	c8 2f       	mov	r28, r24
	atmega_twi::i2c_stop();
    2c02:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
	
	temp &= ~ANS_CE;	//Set bit for counter electrode.
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2c06:	83 e9       	ldi	r24, 0x93	; 147
    2c08:	91 e0       	ldi	r25, 0x01	; 1
    2c0a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2c0e:	63 e9       	ldi	r22, 0x93	; 147
    2c10:	71 e0       	ldi	r23, 0x01	; 1
    2c12:	86 e9       	ldi	r24, 0x96	; 150
    2c14:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2c18:	63 e9       	ldi	r22, 0x93	; 147
    2c1a:	71 e0       	ldi	r23, 0x01	; 1
    2c1c:	8c 2f       	mov	r24, r28
    2c1e:	8e 7f       	andi	r24, 0xFE	; 254
    2c20:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2c24:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
}
    2c28:	cf 91       	pop	r28
    2c2a:	08 95       	ret

00002c2c <_Z12i2c_load_potP8as_class>:

//Update the tap position on the digital pot.
void i2c_load_pot(as_class *as)
{
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
	//Get current value of resistor tap.
	uint16_t temp = as->get_tia_res_tap();
    2c32:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN8as_class15get_tia_res_tapEv>
    2c36:	ec 01       	movw	r28, r24
	uint8_t val;
	
	//Hack.  Fix later!
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2c38:	83 e9       	ldi	r24, 0x93	; 147
    2c3a:	91 e0       	ldi	r25, 0x01	; 1
    2c3c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2c40:	63 e9       	ldi	r22, 0x93	; 147
    2c42:	71 e0       	ldi	r23, 0x01	; 1
    2c44:	87 e9       	ldi	r24, 0x97	; 151
    2c46:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	val = atmega_twi::i2c_receiveData_NACK(&errno);
    2c4a:	83 e9       	ldi	r24, 0x93	; 147
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	0e 94 cd 14 	call	0x299a	; 0x299a <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2c52:	18 2f       	mov	r17, r24
	atmega_twi::i2c_stop();
    2c54:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
	
	//Strip away resistor data and keep electrode data.
	val &= 0x03;
    2c58:	13 70       	andi	r17, 0x03	; 3
	
	if(temp == 1)
    2c5a:	c1 30       	cpi	r28, 0x01	; 1
    2c5c:	d1 05       	cpc	r29, r1
    2c5e:	11 f4       	brne	.+4      	; 0x2c64 <_Z12i2c_load_potP8as_class+0x38>
		val |= 0x20;
    2c60:	10 62       	ori	r17, 0x20	; 32
    2c62:	0b c0       	rjmp	.+22     	; 0x2c7a <_Z12i2c_load_potP8as_class+0x4e>
	else if(temp == 10)
    2c64:	ca 30       	cpi	r28, 0x0A	; 10
    2c66:	d1 05       	cpc	r29, r1
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <_Z12i2c_load_potP8as_class+0x42>
		val |= 0x10;
    2c6a:	10 61       	ori	r17, 0x10	; 16
    2c6c:	06 c0       	rjmp	.+12     	; 0x2c7a <_Z12i2c_load_potP8as_class+0x4e>
	else if(temp == 102)
    2c6e:	c6 36       	cpi	r28, 0x66	; 102
    2c70:	d1 05       	cpc	r29, r1
    2c72:	11 f4       	brne	.+4      	; 0x2c78 <_Z12i2c_load_potP8as_class+0x4c>
		val |= 0x08;
    2c74:	18 60       	ori	r17, 0x08	; 8
    2c76:	01 c0       	rjmp	.+2      	; 0x2c7a <_Z12i2c_load_potP8as_class+0x4e>
	else
		val |= 0x04;
    2c78:	14 60       	ori	r17, 0x04	; 4
	
	
		
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2c7a:	83 e9       	ldi	r24, 0x93	; 147
    2c7c:	91 e0       	ldi	r25, 0x01	; 1
    2c7e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2c82:	63 e9       	ldi	r22, 0x93	; 147
    2c84:	71 e0       	ldi	r23, 0x01	; 1
    2c86:	86 e9       	ldi	r24, 0x96	; 150
    2c88:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(val, &errno);
    2c8c:	63 e9       	ldi	r22, 0x93	; 147
    2c8e:	71 e0       	ldi	r23, 0x01	; 1
    2c90:	81 2f       	mov	r24, r17
    2c92:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2c96:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
	/*atmega_twi::i2c_start(&errno);
	atmega_twi::i2c_sendAddress(I2C_POT_W_ADDR, &errno);
	atmega_twi::i2c_sendData(0x04 | (temp >> 8), &errno);
	atmega_twi::i2c_sendData(temp, &errno);
	atmega_twi::i2c_stop();*/
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	08 95       	ret

00002ca2 <_Z16init_i2c_devicesP8as_class>:

//Set initial capacitor and resistor values for the TIA.
void init_i2c_devices(as_class *as)
{
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	ec 01       	movw	r28, r24
	//Enable updates to the digital pot wiper.
	atmega_twi::i2c_start(&errno);
    2ca8:	83 e9       	ldi	r24, 0x93	; 147
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_POT_W_ADDR, &errno);
    2cb0:	63 e9       	ldi	r22, 0x93	; 147
    2cb2:	71 e0       	ldi	r23, 0x01	; 1
    2cb4:	88 e5       	ldi	r24, 0x58	; 88
    2cb6:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(0x1C, &errno);
    2cba:	63 e9       	ldi	r22, 0x93	; 147
    2cbc:	71 e0       	ldi	r23, 0x01	; 1
    2cbe:	8c e1       	ldi	r24, 0x1C	; 28
    2cc0:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_sendData(0x02, &errno);
    2cc4:	63 e9       	ldi	r22, 0x93	; 147
    2cc6:	71 e0       	ldi	r23, 0x01	; 1
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2cce:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN10atmega_twi8i2c_stopEv>
	
	//Ensure all analog channels are configured to their default states
	//and the working electrode is disconnected on startup.  Also
	//set initial resistance for TIA digital pot.
	i2c_disconnect_ce();
    2cd2:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_Z17i2c_disconnect_cev>
	i2c_load_cap_mask(as);
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z17i2c_load_cap_maskP8as_class>
	i2c_load_electrodes(as);
    2cdc:	ce 01       	movw	r24, r28
    2cde:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_Z19i2c_load_electrodesP8as_class>
	i2c_load_pot(as);
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_Z12i2c_load_potP8as_class>
}
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	08 95       	ret

00002cee <_Z9write_dacj>:

/****************************************************ADC and DAC Routines****************************************************/
//Write a 16-bit word of data to the DAC.
//This function is designed for a 12-bit DAC.
void write_dac(uint16_t data)
{
    2cee:	cf 93       	push	r28
    2cf0:	c8 2f       	mov	r28, r24
	prtDACS &= ~(1 << DACS);	//Select DAC.
    2cf2:	2a 98       	cbi	0x05, 2	; 5
	
	//Set control bits and send data.
	atmega_spi::spi_write(0x70 | (data >> 8));
    2cf4:	89 2f       	mov	r24, r25
    2cf6:	80 67       	ori	r24, 0x70	; 112
    2cf8:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(data);
    2cfc:	8c 2f       	mov	r24, r28
    2cfe:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN10atmega_spi9spi_writeEh>
	
	prtDACS |= (1 << DACS);	//Unselect DAC.
    2d02:	2a 9a       	sbi	0x05, 2	; 5
}
    2d04:	cf 91       	pop	r28
    2d06:	08 95       	ret

00002d08 <_Z8read_adcv>:

//Read a 16-bit word from the ADC.
//This function is designed for a 12-bit ADC.
uint16_t read_adc()
{
    2d08:	cf 93       	push	r28
	uint8_t lower_byte, upper_byte;
	uint16_t data;
	
	prtADCS &= ~(1 << ADCS);	//Select ADC.
    2d0a:	29 98       	cbi	0x05, 1	; 5
	
	upper_byte = atmega_spi::spi_read();
    2d0c:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN10atmega_spi8spi_readEv>
    2d10:	c8 2f       	mov	r28, r24
	lower_byte = atmega_spi::spi_read();
    2d12:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN10atmega_spi8spi_readEv>
	data = (upper_byte << 7);
    2d16:	90 e8       	ldi	r25, 0x80	; 128
    2d18:	c9 9f       	mul	r28, r25
    2d1a:	90 01       	movw	r18, r0
    2d1c:	11 24       	eor	r1, r1
	data |= (lower_byte >> 1);
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	95 95       	asr	r25
    2d22:	87 95       	ror	r24
    2d24:	82 2b       	or	r24, r18
    2d26:	93 2b       	or	r25, r19
	data &= 0x0FFF;
	
	prtADCS |= (1 << ADCS);	//Unselect ADC.
    2d28:	29 9a       	sbi	0x05, 1	; 5
	
	return data;
}
    2d2a:	9f 70       	andi	r25, 0x0F	; 15
    2d2c:	cf 91       	pop	r28
    2d2e:	08 95       	ret

00002d30 <_Z3lpfjP8as_class>:

/********************************************************DSP Routines********************************************************/
//DSP software low pass filter.
uint16_t lpf(uint16_t input, as_class *as)
{
    2d30:	cf 92       	push	r12
    2d32:	df 92       	push	r13
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	8b 01       	movw	r16, r22
	static double x[] = {ZERO_VOLT, ZERO_VOLT, ZERO_VOLT};
	static double y[] = {ZERO_VOLT, ZERO_VOLT};
	double output=0;
	
	//Shift x array to make room for new value.
	x[0] = x[1];
    2d42:	ec e0       	ldi	r30, 0x0C	; 12
    2d44:	f1 e0       	ldi	r31, 0x01	; 1
    2d46:	40 81       	ld	r20, Z
    2d48:	51 81       	ldd	r21, Z+1	; 0x01
    2d4a:	62 81       	ldd	r22, Z+2	; 0x02
    2d4c:	73 81       	ldd	r23, Z+3	; 0x03
    2d4e:	40 93 08 01 	sts	0x0108, r20
    2d52:	50 93 09 01 	sts	0x0109, r21
    2d56:	60 93 0a 01 	sts	0x010A, r22
    2d5a:	70 93 0b 01 	sts	0x010B, r23
	x[1] = x[2];
    2d5e:	c0 e1       	ldi	r28, 0x10	; 16
    2d60:	d1 e0       	ldi	r29, 0x01	; 1
    2d62:	48 81       	ld	r20, Y
    2d64:	59 81       	ldd	r21, Y+1	; 0x01
    2d66:	6a 81       	ldd	r22, Y+2	; 0x02
    2d68:	7b 81       	ldd	r23, Y+3	; 0x03
    2d6a:	40 83       	st	Z, r20
    2d6c:	51 83       	std	Z+1, r21	; 0x01
    2d6e:	62 83       	std	Z+2, r22	; 0x02
    2d70:	73 83       	std	Z+3, r23	; 0x03
	
	//Insert new value.
	x[2] = (double)input;
    2d72:	bc 01       	movw	r22, r24
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 ce 31 	call	0x639c	; 0x639c <__floatunsisf>
    2d7c:	68 83       	st	Y, r22
    2d7e:	79 83       	std	Y+1, r23	; 0x01
    2d80:	8a 83       	std	Y+2, r24	; 0x02
    2d82:	9b 83       	std	Y+3, r25	; 0x03
	
	switch (as->get_soft_sel())
    2d84:	c8 01       	movw	r24, r16
    2d86:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZN8as_class12get_soft_selEv>
    2d8a:	83 30       	cpi	r24, 0x03	; 3
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <_Z3lpfjP8as_class+0x60>
    2d8e:	de c0       	rjmp	.+444    	; 0x2f4c <_Z3lpfjP8as_class+0x21c>
    2d90:	30 f4       	brcc	.+12     	; 0x2d9e <_Z3lpfjP8as_class+0x6e>
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	69 f0       	breq	.+26     	; 0x2db0 <_Z3lpfjP8as_class+0x80>
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <_Z3lpfjP8as_class+0x6c>
    2d9a:	71 c0       	rjmp	.+226    	; 0x2e7e <_Z3lpfjP8as_class+0x14e>
    2d9c:	73 c2       	rjmp	.+1254   	; 0x3284 <_Z3lpfjP8as_class+0x554>
    2d9e:	85 30       	cpi	r24, 0x05	; 5
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <_Z3lpfjP8as_class+0x74>
    2da2:	a2 c1       	rjmp	.+836    	; 0x30e8 <_Z3lpfjP8as_class+0x3b8>
    2da4:	08 f4       	brcc	.+2      	; 0x2da8 <_Z3lpfjP8as_class+0x78>
    2da6:	39 c1       	rjmp	.+626    	; 0x301a <_Z3lpfjP8as_class+0x2ea>
    2da8:	86 30       	cpi	r24, 0x06	; 6
    2daa:	09 f4       	brne	.+2      	; 0x2dae <_Z3lpfjP8as_class+0x7e>
    2dac:	04 c2       	rjmp	.+1032   	; 0x31b6 <_Z3lpfjP8as_class+0x486>
    2dae:	6a c2       	rjmp	.+1236   	; 0x3284 <_Z3lpfjP8as_class+0x554>
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
    2db0:	21 e1       	ldi	r18, 0x11	; 17
    2db2:	3f e8       	ldi	r19, 0x8F	; 143
    2db4:	44 e2       	ldi	r20, 0x24	; 36
    2db6:	58 e3       	ldi	r21, 0x38	; 56
    2db8:	60 91 10 01 	lds	r22, 0x0110
    2dbc:	70 91 11 01 	lds	r23, 0x0111
    2dc0:	80 91 12 01 	lds	r24, 0x0112
    2dc4:	90 91 13 01 	lds	r25, 0x0113
    2dc8:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2dcc:	6b 01       	movw	r12, r22
    2dce:	7c 01       	movw	r14, r24
			0.0000784677768152497 * x[1] +
    2dd0:	21 e1       	ldi	r18, 0x11	; 17
    2dd2:	3f e8       	ldi	r19, 0x8F	; 143
    2dd4:	44 ea       	ldi	r20, 0xA4	; 164
    2dd6:	58 e3       	ldi	r21, 0x38	; 56
    2dd8:	60 91 0c 01 	lds	r22, 0x010C
    2ddc:	70 91 0d 01 	lds	r23, 0x010D
    2de0:	80 91 0e 01 	lds	r24, 0x010E
    2de4:	90 91 0f 01 	lds	r25, 0x010F
    2de8:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2dec:	9b 01       	movw	r18, r22
    2dee:	ac 01       	movw	r20, r24
	x[2] = (double)input;
	
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
    2df0:	c7 01       	movw	r24, r14
    2df2:	b6 01       	movw	r22, r12
    2df4:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2df8:	6b 01       	movw	r12, r22
    2dfa:	7c 01       	movw	r14, r24
			0.0000784677768152497 * x[1] +
			0.0000392338884076249 * x[0] +
    2dfc:	21 e1       	ldi	r18, 0x11	; 17
    2dfe:	3f e8       	ldi	r19, 0x8F	; 143
    2e00:	44 e2       	ldi	r20, 0x24	; 36
    2e02:	58 e3       	ldi	r21, 0x38	; 56
    2e04:	60 91 08 01 	lds	r22, 0x0108
    2e08:	70 91 09 01 	lds	r23, 0x0109
    2e0c:	80 91 0a 01 	lds	r24, 0x010A
    2e10:	90 91 0b 01 	lds	r25, 0x010B
    2e14:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2e18:	9b 01       	movw	r18, r22
    2e1a:	ac 01       	movw	r20, r24
	
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
			0.0000784677768152497 * x[1] +
    2e1c:	c7 01       	movw	r24, r14
    2e1e:	b6 01       	movw	r22, r12
    2e20:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2e24:	6b 01       	movw	r12, r22
    2e26:	7c 01       	movw	r14, r24
			0.0000392338884076249 * x[0] +
			1.982205298140594 * y[1] -
    2e28:	27 ee       	ldi	r18, 0xE7	; 231
    2e2a:	38 eb       	ldi	r19, 0xB8	; 184
    2e2c:	4d ef       	ldi	r20, 0xFD	; 253
    2e2e:	5f e3       	ldi	r21, 0x3F	; 63
    2e30:	60 91 04 01 	lds	r22, 0x0104
    2e34:	70 91 05 01 	lds	r23, 0x0105
    2e38:	80 91 06 01 	lds	r24, 0x0106
    2e3c:	90 91 07 01 	lds	r25, 0x0107
    2e40:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2e44:	9b 01       	movw	r18, r22
    2e46:	ac 01       	movw	r20, r24
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
			0.0000784677768152497 * x[1] +
			0.0000392338884076249 * x[0] +
    2e48:	c7 01       	movw	r24, r14
    2e4a:	b6 01       	movw	r22, r12
    2e4c:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2e50:	6b 01       	movw	r12, r22
    2e52:	7c 01       	movw	r14, r24
			1.982205298140594 * y[1] -
			0.982362233694224 * y[0];
    2e54:	27 e1       	ldi	r18, 0x17	; 23
    2e56:	3c e7       	ldi	r19, 0x7C	; 124
    2e58:	4b e7       	ldi	r20, 0x7B	; 123
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	60 91 00 01 	lds	r22, 0x0100
    2e60:	70 91 01 01 	lds	r23, 0x0101
    2e64:	80 91 02 01 	lds	r24, 0x0102
    2e68:	90 91 03 01 	lds	r25, 0x0103
    2e6c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2e70:	9b 01       	movw	r18, r22
    2e72:	ac 01       	movw	r20, r24
    2e74:	c7 01       	movw	r24, r14
    2e76:	b6 01       	movw	r22, r12
    2e78:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
		break;
    2e7c:	69 c2       	rjmp	.+1234   	; 0x3350 <_Z3lpfjP8as_class+0x620>
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
    2e7e:	2e e1       	ldi	r18, 0x1E	; 30
    2e80:	31 ec       	ldi	r19, 0xC1	; 193
    2e82:	4c e3       	ldi	r20, 0x3C	; 60
    2e84:	5a e3       	ldi	r21, 0x3A	; 58
    2e86:	60 91 10 01 	lds	r22, 0x0110
    2e8a:	70 91 11 01 	lds	r23, 0x0111
    2e8e:	80 91 12 01 	lds	r24, 0x0112
    2e92:	90 91 13 01 	lds	r25, 0x0113
    2e96:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2e9a:	6b 01       	movw	r12, r22
    2e9c:	7c 01       	movw	r14, r24
			0.001440081468920 * x[1] +
    2e9e:	2e e1       	ldi	r18, 0x1E	; 30
    2ea0:	31 ec       	ldi	r19, 0xC1	; 193
    2ea2:	4c eb       	ldi	r20, 0xBC	; 188
    2ea4:	5a e3       	ldi	r21, 0x3A	; 58
    2ea6:	60 91 0c 01 	lds	r22, 0x010C
    2eaa:	70 91 0d 01 	lds	r23, 0x010D
    2eae:	80 91 0e 01 	lds	r24, 0x010E
    2eb2:	90 91 0f 01 	lds	r25, 0x010F
    2eb6:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2eba:	9b 01       	movw	r18, r22
    2ebc:	ac 01       	movw	r20, r24
			1.982205298140594 * y[1] -
			0.982362233694224 * y[0];
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
    2ebe:	c7 01       	movw	r24, r14
    2ec0:	b6 01       	movw	r22, r12
    2ec2:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2ec6:	6b 01       	movw	r12, r22
    2ec8:	7c 01       	movw	r14, r24
			0.001440081468920 * x[1] +
			0.000720040734460 * x[0] +
    2eca:	2e e1       	ldi	r18, 0x1E	; 30
    2ecc:	31 ec       	ldi	r19, 0xC1	; 193
    2ece:	4c e3       	ldi	r20, 0x3C	; 60
    2ed0:	5a e3       	ldi	r21, 0x3A	; 58
    2ed2:	60 91 08 01 	lds	r22, 0x0108
    2ed6:	70 91 09 01 	lds	r23, 0x0109
    2eda:	80 91 0a 01 	lds	r24, 0x010A
    2ede:	90 91 0b 01 	lds	r25, 0x010B
    2ee2:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2ee6:	9b 01       	movw	r18, r22
    2ee8:	ac 01       	movw	r20, r24
			0.982362233694224 * y[0];
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
			0.001440081468920 * x[1] +
    2eea:	c7 01       	movw	r24, r14
    2eec:	b6 01       	movw	r22, r12
    2eee:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2ef2:	6b 01       	movw	r12, r22
    2ef4:	7c 01       	movw	r14, r24
			0.000720040734460 * x[0] +
			1.922676771251572 * y[1] -
    2ef6:	26 e4       	ldi	r18, 0x46	; 70
    2ef8:	3a e1       	ldi	r19, 0x1A	; 26
    2efa:	46 ef       	ldi	r20, 0xF6	; 246
    2efc:	5f e3       	ldi	r21, 0x3F	; 63
    2efe:	60 91 04 01 	lds	r22, 0x0104
    2f02:	70 91 05 01 	lds	r23, 0x0105
    2f06:	80 91 06 01 	lds	r24, 0x0106
    2f0a:	90 91 07 01 	lds	r25, 0x0107
    2f0e:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2f12:	9b 01       	movw	r18, r22
    2f14:	ac 01       	movw	r20, r24
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
			0.001440081468920 * x[1] +
			0.000720040734460 * x[0] +
    2f16:	c7 01       	movw	r24, r14
    2f18:	b6 01       	movw	r22, r12
    2f1a:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2f1e:	6b 01       	movw	r12, r22
    2f20:	7c 01       	movw	r14, r24
			1.922676771251572 * y[1] -
			0.925556934189412 * y[0];
    2f22:	2d e4       	ldi	r18, 0x4D	; 77
    2f24:	31 ef       	ldi	r19, 0xF1	; 241
    2f26:	4c e6       	ldi	r20, 0x6C	; 108
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	60 91 00 01 	lds	r22, 0x0100
    2f2e:	70 91 01 01 	lds	r23, 0x0101
    2f32:	80 91 02 01 	lds	r24, 0x0102
    2f36:	90 91 03 01 	lds	r25, 0x0103
    2f3a:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2f3e:	9b 01       	movw	r18, r22
    2f40:	ac 01       	movw	r20, r24
    2f42:	c7 01       	movw	r24, r14
    2f44:	b6 01       	movw	r22, r12
    2f46:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
		break;
    2f4a:	02 c2       	rjmp	.+1028   	; 0x3350 <_Z3lpfjP8as_class+0x620>
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
    2f4c:	28 ea       	ldi	r18, 0xA8	; 168
    2f4e:	36 e4       	ldi	r19, 0x46	; 70
    2f50:	47 e3       	ldi	r20, 0x37	; 55
    2f52:	5b e3       	ldi	r21, 0x3B	; 59
    2f54:	60 91 10 01 	lds	r22, 0x0110
    2f58:	70 91 11 01 	lds	r23, 0x0111
    2f5c:	80 91 12 01 	lds	r24, 0x0112
    2f60:	90 91 13 01 	lds	r25, 0x0113
    2f64:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2f68:	6b 01       	movw	r12, r22
    2f6a:	7c 01       	movw	r14, r24
			0.005593139818584 * x[1] +
    2f6c:	28 ea       	ldi	r18, 0xA8	; 168
    2f6e:	36 e4       	ldi	r19, 0x46	; 70
    2f70:	47 eb       	ldi	r20, 0xB7	; 183
    2f72:	5b e3       	ldi	r21, 0x3B	; 59
    2f74:	60 91 0c 01 	lds	r22, 0x010C
    2f78:	70 91 0d 01 	lds	r23, 0x010D
    2f7c:	80 91 0e 01 	lds	r24, 0x010E
    2f80:	90 91 0f 01 	lds	r25, 0x010F
    2f84:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2f88:	9b 01       	movw	r18, r22
    2f8a:	ac 01       	movw	r20, r24
			1.922676771251572 * y[1] -
			0.925556934189412 * y[0];
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
    2f8c:	c7 01       	movw	r24, r14
    2f8e:	b6 01       	movw	r22, r12
    2f90:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2f94:	6b 01       	movw	r12, r22
    2f96:	7c 01       	movw	r14, r24
			0.005593139818584 * x[1] +
			0.002796569909292 * x[0] +
    2f98:	28 ea       	ldi	r18, 0xA8	; 168
    2f9a:	36 e4       	ldi	r19, 0x46	; 70
    2f9c:	47 e3       	ldi	r20, 0x37	; 55
    2f9e:	5b e3       	ldi	r21, 0x3B	; 59
    2fa0:	60 91 08 01 	lds	r22, 0x0108
    2fa4:	70 91 09 01 	lds	r23, 0x0109
    2fa8:	80 91 0a 01 	lds	r24, 0x010A
    2fac:	90 91 0b 01 	lds	r25, 0x010B
    2fb0:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2fb4:	9b 01       	movw	r18, r22
    2fb6:	ac 01       	movw	r20, r24
			0.925556934189412 * y[0];
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
			0.005593139818584 * x[1] +
    2fb8:	c7 01       	movw	r24, r14
    2fba:	b6 01       	movw	r22, r12
    2fbc:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2fc0:	6b 01       	movw	r12, r22
    2fc2:	7c 01       	movw	r14, r24
			0.002796569909292 * x[0] +
			1.844936876367589 * y[1] -
    2fc4:	24 ee       	ldi	r18, 0xE4	; 228
    2fc6:	36 e2       	ldi	r19, 0x26	; 38
    2fc8:	4c ee       	ldi	r20, 0xEC	; 236
    2fca:	5f e3       	ldi	r21, 0x3F	; 63
    2fcc:	60 91 04 01 	lds	r22, 0x0104
    2fd0:	70 91 05 01 	lds	r23, 0x0105
    2fd4:	80 91 06 01 	lds	r24, 0x0106
    2fd8:	90 91 07 01 	lds	r25, 0x0107
    2fdc:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    2fe0:	9b 01       	movw	r18, r22
    2fe2:	ac 01       	movw	r20, r24
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
			0.005593139818584 * x[1] +
			0.002796569909292 * x[0] +
    2fe4:	c7 01       	movw	r24, r14
    2fe6:	b6 01       	movw	r22, r12
    2fe8:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    2fec:	6b 01       	movw	r12, r22
    2fee:	7c 01       	movw	r14, r24
			1.844936876367589 * y[1] -
			0.856123156004757 * y[0];
    2ff0:	23 ee       	ldi	r18, 0xE3	; 227
    2ff2:	3a e2       	ldi	r19, 0x2A	; 42
    2ff4:	4b e5       	ldi	r20, 0x5B	; 91
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	60 91 00 01 	lds	r22, 0x0100
    2ffc:	70 91 01 01 	lds	r23, 0x0101
    3000:	80 91 02 01 	lds	r24, 0x0102
    3004:	90 91 03 01 	lds	r25, 0x0103
    3008:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    300c:	9b 01       	movw	r18, r22
    300e:	ac 01       	movw	r20, r24
    3010:	c7 01       	movw	r24, r14
    3012:	b6 01       	movw	r22, r12
    3014:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
		break;
    3018:	9b c1       	rjmp	.+822    	; 0x3350 <_Z3lpfjP8as_class+0x620>
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
    301a:	2d e7       	ldi	r18, 0x7D	; 125
    301c:	38 e9       	ldi	r19, 0x98	; 152
    301e:	4d e7       	ldi	r20, 0x7D	; 125
    3020:	5d e3       	ldi	r21, 0x3D	; 61
    3022:	60 91 10 01 	lds	r22, 0x0110
    3026:	70 91 11 01 	lds	r23, 0x0111
    302a:	80 91 12 01 	lds	r24, 0x0112
    302e:	90 91 13 01 	lds	r25, 0x0113
    3032:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3036:	6b 01       	movw	r12, r22
    3038:	7c 01       	movw	r14, r24
			0.123826001401403 * x[1] +
    303a:	2d e7       	ldi	r18, 0x7D	; 125
    303c:	38 e9       	ldi	r19, 0x98	; 152
    303e:	4d ef       	ldi	r20, 0xFD	; 253
    3040:	5d e3       	ldi	r21, 0x3D	; 61
    3042:	60 91 0c 01 	lds	r22, 0x010C
    3046:	70 91 0d 01 	lds	r23, 0x010D
    304a:	80 91 0e 01 	lds	r24, 0x010E
    304e:	90 91 0f 01 	lds	r25, 0x010F
    3052:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3056:	9b 01       	movw	r18, r22
    3058:	ac 01       	movw	r20, r24
			1.844936876367589 * y[1] -
			0.856123156004757 * y[0];
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
    305a:	c7 01       	movw	r24, r14
    305c:	b6 01       	movw	r22, r12
    305e:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    3062:	6b 01       	movw	r12, r22
    3064:	7c 01       	movw	r14, r24
			0.123826001401403 * x[1] +
			0.061913000700701 * x[0] +
    3066:	2d e7       	ldi	r18, 0x7D	; 125
    3068:	38 e9       	ldi	r19, 0x98	; 152
    306a:	4d e7       	ldi	r20, 0x7D	; 125
    306c:	5d e3       	ldi	r21, 0x3D	; 61
    306e:	60 91 08 01 	lds	r22, 0x0108
    3072:	70 91 09 01 	lds	r23, 0x0109
    3076:	80 91 0a 01 	lds	r24, 0x010A
    307a:	90 91 0b 01 	lds	r25, 0x010B
    307e:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3082:	9b 01       	movw	r18, r22
    3084:	ac 01       	movw	r20, r24
			0.856123156004757 * y[0];
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
			0.123826001401403 * x[1] +
    3086:	c7 01       	movw	r24, r14
    3088:	b6 01       	movw	r22, r12
    308a:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    308e:	6b 01       	movw	r12, r22
    3090:	7c 01       	movw	r14, r24
			0.061913000700701 * x[0] +
			1.183374513189903 * y[1] -
    3092:	21 ed       	ldi	r18, 0xD1	; 209
    3094:	38 e7       	ldi	r19, 0x78	; 120
    3096:	47 e9       	ldi	r20, 0x97	; 151
    3098:	5f e3       	ldi	r21, 0x3F	; 63
    309a:	60 91 04 01 	lds	r22, 0x0104
    309e:	70 91 05 01 	lds	r23, 0x0105
    30a2:	80 91 06 01 	lds	r24, 0x0106
    30a6:	90 91 07 01 	lds	r25, 0x0107
    30aa:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    30ae:	9b 01       	movw	r18, r22
    30b0:	ac 01       	movw	r20, r24
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
			0.123826001401403 * x[1] +
			0.061913000700701 * x[0] +
    30b2:	c7 01       	movw	r24, r14
    30b4:	b6 01       	movw	r22, r12
    30b6:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    30ba:	6b 01       	movw	r12, r22
    30bc:	7c 01       	movw	r14, r24
			1.183374513189903 * y[1] -
			0.431026515992709 * y[0];
    30be:	22 e8       	ldi	r18, 0x82	; 130
    30c0:	3f ea       	ldi	r19, 0xAF	; 175
    30c2:	4c ed       	ldi	r20, 0xDC	; 220
    30c4:	5e e3       	ldi	r21, 0x3E	; 62
    30c6:	60 91 00 01 	lds	r22, 0x0100
    30ca:	70 91 01 01 	lds	r23, 0x0101
    30ce:	80 91 02 01 	lds	r24, 0x0102
    30d2:	90 91 03 01 	lds	r25, 0x0103
    30d6:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    30da:	9b 01       	movw	r18, r22
    30dc:	ac 01       	movw	r20, r24
    30de:	c7 01       	movw	r24, r14
    30e0:	b6 01       	movw	r22, r12
    30e2:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
		break;
    30e6:	34 c1       	rjmp	.+616    	; 0x3350 <_Z3lpfjP8as_class+0x620>
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
    30e8:	25 e1       	ldi	r18, 0x15	; 21
    30ea:	3a ea       	ldi	r19, 0xAA	; 170
    30ec:	49 e6       	ldi	r20, 0x69	; 105
    30ee:	5e e3       	ldi	r21, 0x3E	; 62
    30f0:	60 91 10 01 	lds	r22, 0x0110
    30f4:	70 91 11 01 	lds	r23, 0x0111
    30f8:	80 91 12 01 	lds	r24, 0x0112
    30fc:	90 91 13 01 	lds	r25, 0x0113
    3100:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3104:	6b 01       	movw	r12, r22
    3106:	7c 01       	movw	r14, r24
			0.456375736398963 * x[1] +
    3108:	25 e1       	ldi	r18, 0x15	; 21
    310a:	3a ea       	ldi	r19, 0xAA	; 170
    310c:	49 ee       	ldi	r20, 0xE9	; 233
    310e:	5e e3       	ldi	r21, 0x3E	; 62
    3110:	60 91 0c 01 	lds	r22, 0x010C
    3114:	70 91 0d 01 	lds	r23, 0x010D
    3118:	80 91 0e 01 	lds	r24, 0x010E
    311c:	90 91 0f 01 	lds	r25, 0x010F
    3120:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3124:	9b 01       	movw	r18, r22
    3126:	ac 01       	movw	r20, r24
			1.183374513189903 * y[1] -
			0.431026515992709 * y[0];
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
    3128:	c7 01       	movw	r24, r14
    312a:	b6 01       	movw	r22, r12
    312c:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    3130:	6b 01       	movw	r12, r22
    3132:	7c 01       	movw	r14, r24
			0.456375736398963 * x[1] +
			0.228187868199481 * x[0] +
    3134:	25 e1       	ldi	r18, 0x15	; 21
    3136:	3a ea       	ldi	r19, 0xAA	; 170
    3138:	49 e6       	ldi	r20, 0x69	; 105
    313a:	5e e3       	ldi	r21, 0x3E	; 62
    313c:	60 91 08 01 	lds	r22, 0x0108
    3140:	70 91 09 01 	lds	r23, 0x0109
    3144:	80 91 0a 01 	lds	r24, 0x010A
    3148:	90 91 0b 01 	lds	r25, 0x010B
    314c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3150:	9b 01       	movw	r18, r22
    3152:	ac 01       	movw	r20, r24
			0.431026515992709 * y[0];
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
			0.456375736398963 * x[1] +
    3154:	c7 01       	movw	r24, r14
    3156:	b6 01       	movw	r22, r12
    3158:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    315c:	6b 01       	movw	r12, r22
    315e:	7c 01       	movw	r14, r24
			0.228187868199481 * x[0] +
			0.271922988606727 * y[1] -
    3160:	2d e7       	ldi	r18, 0x7D	; 125
    3162:	39 e3       	ldi	r19, 0x39	; 57
    3164:	4b e8       	ldi	r20, 0x8B	; 139
    3166:	5e e3       	ldi	r21, 0x3E	; 62
    3168:	60 91 04 01 	lds	r22, 0x0104
    316c:	70 91 05 01 	lds	r23, 0x0105
    3170:	80 91 06 01 	lds	r24, 0x0106
    3174:	90 91 07 01 	lds	r25, 0x0107
    3178:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    317c:	9b 01       	movw	r18, r22
    317e:	ac 01       	movw	r20, r24
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
			0.456375736398963 * x[1] +
			0.228187868199481 * x[0] +
    3180:	c7 01       	movw	r24, r14
    3182:	b6 01       	movw	r22, r12
    3184:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    3188:	6b 01       	movw	r12, r22
    318a:	7c 01       	movw	r14, r24
			0.271922988606727 * y[1] -
			0.184674461404652 * y[0];
    318c:	2d e4       	ldi	r18, 0x4D	; 77
    318e:	3b e1       	ldi	r19, 0x1B	; 27
    3190:	4d e3       	ldi	r20, 0x3D	; 61
    3192:	5e e3       	ldi	r21, 0x3E	; 62
    3194:	60 91 00 01 	lds	r22, 0x0100
    3198:	70 91 01 01 	lds	r23, 0x0101
    319c:	80 91 02 01 	lds	r24, 0x0102
    31a0:	90 91 03 01 	lds	r25, 0x0103
    31a4:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    31a8:	9b 01       	movw	r18, r22
    31aa:	ac 01       	movw	r20, r24
    31ac:	c7 01       	movw	r24, r14
    31ae:	b6 01       	movw	r22, r12
    31b0:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
		break;
    31b4:	cd c0       	rjmp	.+410    	; 0x3350 <_Z3lpfjP8as_class+0x620>
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
    31b6:	28 eb       	ldi	r18, 0xB8	; 184
    31b8:	32 e7       	ldi	r19, 0x72	; 114
    31ba:	47 e8       	ldi	r20, 0x87	; 135
    31bc:	5e e3       	ldi	r21, 0x3E	; 62
    31be:	60 91 10 01 	lds	r22, 0x0110
    31c2:	70 91 11 01 	lds	r23, 0x0111
    31c6:	80 91 12 01 	lds	r24, 0x0112
    31ca:	90 91 13 01 	lds	r25, 0x0113
    31ce:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    31d2:	6b 01       	movw	r12, r22
    31d4:	7c 01       	movw	r14, r24
			0.529094226850682 * x[1] +
    31d6:	28 eb       	ldi	r18, 0xB8	; 184
    31d8:	32 e7       	ldi	r19, 0x72	; 114
    31da:	47 e0       	ldi	r20, 0x07	; 7
    31dc:	5f e3       	ldi	r21, 0x3F	; 63
    31de:	60 91 0c 01 	lds	r22, 0x010C
    31e2:	70 91 0d 01 	lds	r23, 0x010D
    31e6:	80 91 0e 01 	lds	r24, 0x010E
    31ea:	90 91 0f 01 	lds	r25, 0x010F
    31ee:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    31f2:	9b 01       	movw	r18, r22
    31f4:	ac 01       	movw	r20, r24
			0.271922988606727 * y[1] -
			0.184674461404652 * y[0];
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
    31f6:	c7 01       	movw	r24, r14
    31f8:	b6 01       	movw	r22, r12
    31fa:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    31fe:	6b 01       	movw	r12, r22
    3200:	7c 01       	movw	r14, r24
			0.529094226850682 * x[1] +
			0.264547113425341 * x[0] +
    3202:	28 eb       	ldi	r18, 0xB8	; 184
    3204:	32 e7       	ldi	r19, 0x72	; 114
    3206:	47 e8       	ldi	r20, 0x87	; 135
    3208:	5e e3       	ldi	r21, 0x3E	; 62
    320a:	60 91 08 01 	lds	r22, 0x0108
    320e:	70 91 09 01 	lds	r23, 0x0109
    3212:	80 91 0a 01 	lds	r24, 0x010A
    3216:	90 91 0b 01 	lds	r25, 0x010B
    321a:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    321e:	9b 01       	movw	r18, r22
    3220:	ac 01       	movw	r20, r24
			0.184674461404652 * y[0];
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
			0.529094226850682 * x[1] +
    3222:	c7 01       	movw	r24, r14
    3224:	b6 01       	movw	r22, r12
    3226:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    322a:	6b 01       	movw	r12, r22
    322c:	7c 01       	movw	r14, r24
			0.264547113425341 * x[0] +
			0.115754044922547 * y[1] -
    322e:	25 e7       	ldi	r18, 0x75	; 117
    3230:	30 e1       	ldi	r19, 0x10	; 16
    3232:	4d ee       	ldi	r20, 0xED	; 237
    3234:	5d e3       	ldi	r21, 0x3D	; 61
    3236:	60 91 04 01 	lds	r22, 0x0104
    323a:	70 91 05 01 	lds	r23, 0x0105
    323e:	80 91 06 01 	lds	r24, 0x0106
    3242:	90 91 07 01 	lds	r25, 0x0107
    3246:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    324a:	9b 01       	movw	r18, r22
    324c:	ac 01       	movw	r20, r24
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
			0.529094226850682 * x[1] +
			0.264547113425341 * x[0] +
    324e:	c7 01       	movw	r24, r14
    3250:	b6 01       	movw	r22, r12
    3252:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    3256:	6b 01       	movw	r12, r22
    3258:	7c 01       	movw	r14, r24
			0.115754044922547 * y[1] -
			0.173942498623910 * y[0];
    325a:	2b ef       	ldi	r18, 0xFB	; 251
    325c:	3d e1       	ldi	r19, 0x1D	; 29
    325e:	42 e3       	ldi	r20, 0x32	; 50
    3260:	5e e3       	ldi	r21, 0x3E	; 62
    3262:	60 91 00 01 	lds	r22, 0x0100
    3266:	70 91 01 01 	lds	r23, 0x0101
    326a:	80 91 02 01 	lds	r24, 0x0102
    326e:	90 91 03 01 	lds	r25, 0x0103
    3272:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3276:	9b 01       	movw	r18, r22
    3278:	ac 01       	movw	r20, r24
    327a:	c7 01       	movw	r24, r14
    327c:	b6 01       	movw	r22, r12
    327e:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
		break;
    3282:	66 c0       	rjmp	.+204    	; 0x3350 <_Z3lpfjP8as_class+0x620>
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
    3284:	2a e7       	ldi	r18, 0x7A	; 122
    3286:	32 e6       	ldi	r19, 0x62	; 98
    3288:	4b eb       	ldi	r20, 0xBB	; 187
    328a:	5e e3       	ldi	r21, 0x3E	; 62
    328c:	60 91 10 01 	lds	r22, 0x0110
    3290:	70 91 11 01 	lds	r23, 0x0111
    3294:	80 91 12 01 	lds	r24, 0x0112
    3298:	90 91 13 01 	lds	r25, 0x0113
    329c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    32a0:	6b 01       	movw	r12, r22
    32a2:	7c 01       	movw	r14, r24
			0.731971376485284 * x[1] +
    32a4:	2a e7       	ldi	r18, 0x7A	; 122
    32a6:	32 e6       	ldi	r19, 0x62	; 98
    32a8:	4b e3       	ldi	r20, 0x3B	; 59
    32aa:	5f e3       	ldi	r21, 0x3F	; 63
    32ac:	60 91 0c 01 	lds	r22, 0x010C
    32b0:	70 91 0d 01 	lds	r23, 0x010D
    32b4:	80 91 0e 01 	lds	r24, 0x010E
    32b8:	90 91 0f 01 	lds	r25, 0x010F
    32bc:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    32c0:	9b 01       	movw	r18, r22
    32c2:	ac 01       	movw	r20, r24
			0.115754044922547 * y[1] -
			0.173942498623910 * y[0];
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
    32c4:	c7 01       	movw	r24, r14
    32c6:	b6 01       	movw	r22, r12
    32c8:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    32cc:	6b 01       	movw	r12, r22
    32ce:	7c 01       	movw	r14, r24
			0.731971376485284 * x[1] +
			0.365985688242642 * x[0] -
    32d0:	2a e7       	ldi	r18, 0x7A	; 122
    32d2:	32 e6       	ldi	r19, 0x62	; 98
    32d4:	4b eb       	ldi	r20, 0xBB	; 187
    32d6:	5e e3       	ldi	r21, 0x3E	; 62
    32d8:	60 91 08 01 	lds	r22, 0x0108
    32dc:	70 91 09 01 	lds	r23, 0x0109
    32e0:	80 91 0a 01 	lds	r24, 0x010A
    32e4:	90 91 0b 01 	lds	r25, 0x010B
    32e8:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    32ec:	9b 01       	movw	r18, r22
    32ee:	ac 01       	movw	r20, r24
			0.173942498623910 * y[0];
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
			0.731971376485284 * x[1] +
    32f0:	c7 01       	movw	r24, r14
    32f2:	b6 01       	movw	r22, r12
    32f4:	0e 94 3e 31 	call	0x627c	; 0x627c <__addsf3>
    32f8:	6b 01       	movw	r12, r22
    32fa:	7c 01       	movw	r14, r24
			0.365985688242642 * x[0] -
			0.278614001640615 * y[1] -
    32fc:	2f e7       	ldi	r18, 0x7F	; 127
    32fe:	36 ea       	ldi	r19, 0xA6	; 166
    3300:	4e e8       	ldi	r20, 0x8E	; 142
    3302:	5e e3       	ldi	r21, 0x3E	; 62
    3304:	60 91 04 01 	lds	r22, 0x0104
    3308:	70 91 05 01 	lds	r23, 0x0105
    330c:	80 91 06 01 	lds	r24, 0x0106
    3310:	90 91 07 01 	lds	r25, 0x0107
    3314:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3318:	9b 01       	movw	r18, r22
    331a:	ac 01       	movw	r20, r24
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
			0.731971376485284 * x[1] +
			0.365985688242642 * x[0] -
    331c:	c7 01       	movw	r24, r14
    331e:	b6 01       	movw	r22, r12
    3320:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
    3324:	6b 01       	movw	r12, r22
    3326:	7c 01       	movw	r14, r24
			0.278614001640615 * y[1] -
			0.185328751329953 * y[0];
    3328:	22 ed       	ldi	r18, 0xD2	; 210
    332a:	36 ec       	ldi	r19, 0xC6	; 198
    332c:	4d e3       	ldi	r20, 0x3D	; 61
    332e:	5e e3       	ldi	r21, 0x3E	; 62
    3330:	60 91 00 01 	lds	r22, 0x0100
    3334:	70 91 01 01 	lds	r23, 0x0101
    3338:	80 91 02 01 	lds	r24, 0x0102
    333c:	90 91 03 01 	lds	r25, 0x0103
    3340:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <__mulsf3>
    3344:	9b 01       	movw	r18, r22
    3346:	ac 01       	movw	r20, r24
    3348:	c7 01       	movw	r24, r14
    334a:	b6 01       	movw	r22, r12
    334c:	0e 94 3d 31 	call	0x627a	; 0x627a <__subsf3>
		break;
	}
			 
	//Shift output to make room for new value.
	y[0] = y[1];
    3350:	e4 e0       	ldi	r30, 0x04	; 4
    3352:	f1 e0       	ldi	r31, 0x01	; 1
    3354:	00 81       	ld	r16, Z
    3356:	11 81       	ldd	r17, Z+1	; 0x01
    3358:	22 81       	ldd	r18, Z+2	; 0x02
    335a:	33 81       	ldd	r19, Z+3	; 0x03
    335c:	00 93 00 01 	sts	0x0100, r16
    3360:	10 93 01 01 	sts	0x0101, r17
    3364:	20 93 02 01 	sts	0x0102, r18
    3368:	30 93 03 01 	sts	0x0103, r19
	y[1] = output;
    336c:	60 83       	st	Z, r22
    336e:	71 83       	std	Z+1, r23	; 0x01
    3370:	82 83       	std	Z+2, r24	; 0x02
    3372:	93 83       	std	Z+3, r25	; 0x03
	
	//Send value back to calling function.
	return (uint16_t)output;
    3374:	0e 94 a2 31 	call	0x6344	; 0x6344 <__fixunssfsi>
}
    3378:	cb 01       	movw	r24, r22
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	ff 90       	pop	r15
    3384:	ef 90       	pop	r14
    3386:	df 90       	pop	r13
    3388:	cf 90       	pop	r12
    338a:	08 95       	ret

0000338c <_Z15tx_u16_to_asciij>:

/************************************************String Manipulation Routines************************************************/
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
    338c:	df 92       	push	r13
    338e:	ef 92       	push	r14
    3390:	ff 92       	push	r15
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	f8 2e       	mov	r15, r24
    339c:	e9 2e       	mov	r14, r25
    339e:	04 e0       	ldi	r16, 0x04	; 4
    33a0:	10 e0       	ldi	r17, 0x00	; 0
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
    33a2:	c0 e1       	ldi	r28, 0x10	; 16
    33a4:	d7 e2       	ldi	r29, 0x27	; 39

/************************************************String Manipulation Routines************************************************/
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
	bool number_started = false; //Indicate conversion has started.
    33a6:	40 e0       	ldi	r20, 0x00	; 0
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    33a8:	dd 24       	eor	r13, r13
    33aa:	d3 94       	inc	r13
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
    33ac:	8f 2d       	mov	r24, r15
    33ae:	9e 2d       	mov	r25, r14
    33b0:	be 01       	movw	r22, r28
    33b2:	0e 94 bf 32 	call	0x657e	; 0x657e <__udivmodhi4>
    33b6:	61 15       	cp	r22, r1
    33b8:	71 05       	cpc	r23, r1
    33ba:	11 f4       	brne	.+4      	; 0x33c0 <_Z15tx_u16_to_asciij+0x34>
    33bc:	44 23       	and	r20, r20
    33be:	61 f0       	breq	.+24     	; 0x33d8 <_Z15tx_u16_to_asciij+0x4c>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    33c0:	80 e3       	ldi	r24, 0x30	; 48
    33c2:	86 0f       	add	r24, r22
    33c4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    33c8:	8f 2d       	mov	r24, r15
    33ca:	9e 2d       	mov	r25, r14
    33cc:	be 01       	movw	r22, r28
    33ce:	0e 94 bf 32 	call	0x657e	; 0x657e <__udivmodhi4>
    33d2:	f8 2e       	mov	r15, r24
    33d4:	e9 2e       	mov	r14, r25
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    33d6:	4d 2d       	mov	r20, r13
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
    33d8:	9e 01       	movw	r18, r28
    33da:	ad ec       	ldi	r26, 0xCD	; 205
    33dc:	bc ec       	ldi	r27, 0xCC	; 204
    33de:	0e 94 1a 33 	call	0x6634	; 0x6634 <__umulhisi3>
    33e2:	ec 01       	movw	r28, r24
    33e4:	d6 95       	lsr	r29
    33e6:	c7 95       	ror	r28
    33e8:	d6 95       	lsr	r29
    33ea:	c7 95       	ror	r28
    33ec:	d6 95       	lsr	r29
    33ee:	c7 95       	ror	r28
    33f0:	01 50       	subi	r16, 0x01	; 1
    33f2:	11 09       	sbc	r17, r1
    33f4:	01 15       	cp	r16, r1
    33f6:	11 05       	cpc	r17, r1
    33f8:	c9 f6       	brne	.-78     	; 0x33ac <_Z15tx_u16_to_asciij+0x20>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    33fa:	80 e3       	ldi	r24, 0x30	; 48
    33fc:	8f 0d       	add	r24, r15
    33fe:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
}
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	0f 91       	pop	r16
    340a:	ff 90       	pop	r15
    340c:	ef 90       	pop	r14
    340e:	df 90       	pop	r13
    3410:	08 95       	ret

00003412 <_Z15tx_u32_to_asciim>:

//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
    3412:	4f 92       	push	r4
    3414:	5f 92       	push	r5
    3416:	6f 92       	push	r6
    3418:	7f 92       	push	r7
    341a:	8f 92       	push	r8
    341c:	9f 92       	push	r9
    341e:	af 92       	push	r10
    3420:	bf 92       	push	r11
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	16 2f       	mov	r17, r22
    3434:	67 2e       	mov	r6, r23
    3436:	78 2e       	mov	r7, r24
    3438:	09 2f       	mov	r16, r25
    343a:	c9 e0       	ldi	r28, 0x09	; 9
    343c:	d0 e0       	ldi	r29, 0x00	; 0
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    343e:	0f 2e       	mov	r0, r31
    3440:	c1 2c       	mov	r12, r1
    3442:	fa ec       	ldi	r31, 0xCA	; 202
    3444:	df 2e       	mov	r13, r31
    3446:	fa e9       	ldi	r31, 0x9A	; 154
    3448:	ef 2e       	mov	r14, r31
    344a:	fb e3       	ldi	r31, 0x3B	; 59
    344c:	ff 2e       	mov	r15, r31
    344e:	f0 2d       	mov	r31, r0
}

//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
    3450:	51 2c       	mov	r5, r1
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    3452:	44 24       	eor	r4, r4
    3454:	43 94       	inc	r4
//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    3456:	0f 2e       	mov	r0, r31
    3458:	fa e0       	ldi	r31, 0x0A	; 10
    345a:	8f 2e       	mov	r8, r31
    345c:	91 2c       	mov	r9, r1
    345e:	a1 2c       	mov	r10, r1
    3460:	b1 2c       	mov	r11, r1
    3462:	f0 2d       	mov	r31, r0
	{
		if(number / i || number_started)
    3464:	61 2f       	mov	r22, r17
    3466:	76 2d       	mov	r23, r6
    3468:	87 2d       	mov	r24, r7
    346a:	90 2f       	mov	r25, r16
    346c:	a7 01       	movw	r20, r14
    346e:	96 01       	movw	r18, r12
    3470:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    3474:	21 15       	cp	r18, r1
    3476:	31 05       	cpc	r19, r1
    3478:	41 05       	cpc	r20, r1
    347a:	51 05       	cpc	r21, r1
    347c:	11 f4       	brne	.+4      	; 0x3482 <_Z15tx_u32_to_asciim+0x70>
    347e:	55 20       	and	r5, r5
    3480:	89 f0       	breq	.+34     	; 0x34a4 <_Z15tx_u32_to_asciim+0x92>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    3482:	80 e3       	ldi	r24, 0x30	; 48
    3484:	82 0f       	add	r24, r18
    3486:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    348a:	61 2f       	mov	r22, r17
    348c:	76 2d       	mov	r23, r6
    348e:	87 2d       	mov	r24, r7
    3490:	90 2f       	mov	r25, r16
    3492:	a7 01       	movw	r20, r14
    3494:	96 01       	movw	r18, r12
    3496:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    349a:	16 2f       	mov	r17, r22
    349c:	67 2e       	mov	r6, r23
    349e:	78 2e       	mov	r7, r24
    34a0:	09 2f       	mov	r16, r25
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    34a2:	54 2c       	mov	r5, r4
//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    34a4:	c7 01       	movw	r24, r14
    34a6:	b6 01       	movw	r22, r12
    34a8:	a5 01       	movw	r20, r10
    34aa:	94 01       	movw	r18, r8
    34ac:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    34b0:	69 01       	movw	r12, r18
    34b2:	7a 01       	movw	r14, r20
    34b4:	21 97       	sbiw	r28, 0x01	; 1
    34b6:	20 97       	sbiw	r28, 0x00	; 0
    34b8:	a9 f6       	brne	.-86     	; 0x3464 <_Z15tx_u32_to_asciim+0x52>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    34ba:	80 e3       	ldi	r24, 0x30	; 48
    34bc:	81 0f       	add	r24, r17
    34be:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
}
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	df 90       	pop	r13
    34d0:	cf 90       	pop	r12
    34d2:	bf 90       	pop	r11
    34d4:	af 90       	pop	r10
    34d6:	9f 90       	pop	r9
    34d8:	8f 90       	pop	r8
    34da:	7f 90       	pop	r7
    34dc:	6f 90       	pop	r6
    34de:	5f 90       	pop	r5
    34e0:	4f 90       	pop	r4
    34e2:	08 95       	ret

000034e4 <_Z13calibrate_oscv>:
//register.  Once it can no longer detect Us on the serial port, it
//finds the midpoint of the oscillation calibration register values
//that Us were detected and uses this value as the final oscillator
//calibration value.  The processor then freezes until reset.
void calibrate_osc()
{
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
	uint8_t cal_start = 0, cal_stop = 0, rx_byte, cal_state = CALREADY;
	
	//Exit if calibration header is not in place.
	if(PIND & OCAL) return;
    34e8:	4a 99       	sbic	0x09, 2	; 9
    34ea:	49 c0       	rjmp	.+146    	; 0x357e <_Z13calibrate_oscv+0x9a>
	
	OSCCAL = 0;
    34ec:	10 92 66 00 	sts	0x0066, r1
//finds the midpoint of the oscillation calibration register values
//that Us were detected and uses this value as the final oscillator
//calibration value.  The processor then freezes until reset.
void calibrate_osc()
{
	uint8_t cal_start = 0, cal_stop = 0, rx_byte, cal_state = CALREADY;
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	40 e0       	ldi	r20, 0x00	; 0
	
	//Else go into calibration loop.
	while(1)
	{
		//Check if byte received.
		if(UCSR0A & flgRXC0)
    34f6:	a0 ec       	ldi	r26, 0xC0	; 192
    34f8:	b0 e0       	ldi	r27, 0x00	; 0
		{
			rx_byte = UDR0;
    34fa:	c6 ec       	ldi	r28, 0xC6	; 198
    34fc:	d0 e0       	ldi	r29, 0x00	; 0
				if(rx_byte == 'U')
				{
					cal_start = OSCCAL;
					cal_state = CALSTART;
				}
				OSCCAL++;
    34fe:	e6 e6       	ldi	r30, 0x66	; 102
    3500:	f0 e0       	ldi	r31, 0x00	; 0
				//Increment oscillation calibration register until 'U' is detected.
				case CALREADY:
				if(rx_byte == 'U')
				{
					cal_start = OSCCAL;
					cal_state = CALSTART;
    3502:	51 e0       	ldi	r21, 0x01	; 1
				}
				//Find OSCCAL range that allows the correct detection of U.
				else
				{
					cal_stop = OSCCAL - 1;
					cal_state = CALSTOP;
    3504:	32 e0       	ldi	r19, 0x02	; 2
	
	//Else go into calibration loop.
	while(1)
	{
		//Check if byte received.
		if(UCSR0A & flgRXC0)
    3506:	8c 91       	ld	r24, X
    3508:	88 23       	and	r24, r24
    350a:	ec f7       	brge	.-6      	; 0x3506 <_Z13calibrate_oscv+0x22>
		{
			rx_byte = UDR0;
    350c:	88 81       	ld	r24, Y
			
			switch(cal_state)
    350e:	99 23       	and	r25, r25
    3510:	19 f0       	breq	.+6      	; 0x3518 <_Z13calibrate_oscv+0x34>
    3512:	91 30       	cpi	r25, 0x01	; 1
    3514:	49 f0       	breq	.+18     	; 0x3528 <_Z13calibrate_oscv+0x44>
    3516:	12 c0       	rjmp	.+36     	; 0x353c <_Z13calibrate_oscv+0x58>
			{
				//Increment oscillation calibration register until 'U' is detected.
				case CALREADY:
				if(rx_byte == 'U')
    3518:	85 35       	cpi	r24, 0x55	; 85
    351a:	11 f4       	brne	.+4      	; 0x3520 <_Z13calibrate_oscv+0x3c>
				{
					cal_start = OSCCAL;
    351c:	40 81       	ld	r20, Z
					cal_state = CALSTART;
    351e:	95 2f       	mov	r25, r21
				}
				OSCCAL++;
    3520:	80 81       	ld	r24, Z
    3522:	8f 5f       	subi	r24, 0xFF	; 255
    3524:	80 83       	st	Z, r24
				break;
    3526:	ef cf       	rjmp	.-34     	; 0x3506 <_Z13calibrate_oscv+0x22>
				
				case CALSTART:
				//Increment OSCCAL until U is no longer detected.
				if(rx_byte == 'U')
    3528:	85 35       	cpi	r24, 0x55	; 85
    352a:	21 f4       	brne	.+8      	; 0x3534 <_Z13calibrate_oscv+0x50>
				{
					OSCCAL++;
    352c:	80 81       	ld	r24, Z
    352e:	8f 5f       	subi	r24, 0xFF	; 255
    3530:	80 83       	st	Z, r24
    3532:	e9 cf       	rjmp	.-46     	; 0x3506 <_Z13calibrate_oscv+0x22>
				}
				//Find OSCCAL range that allows the correct detection of U.
				else
				{
					cal_stop = OSCCAL - 1;
    3534:	20 81       	ld	r18, Z
    3536:	21 50       	subi	r18, 0x01	; 1
					cal_state = CALSTOP;
    3538:	93 2f       	mov	r25, r19
    353a:	e5 cf       	rjmp	.-54     	; 0x3506 <_Z13calibrate_oscv+0x22>
				
				//Calibration complete. Save value and spin lock the processor.
				case CALSTOP:
				default:
				//Calculate final OSCCAL value.
				OSCCAL = cal_start + (cal_stop - cal_start) / 2;
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	24 1b       	sub	r18, r20
    3540:	31 09       	sbc	r19, r1
    3542:	c9 01       	movw	r24, r18
    3544:	99 23       	and	r25, r25
    3546:	0c f4       	brge	.+2      	; 0x354a <_Z13calibrate_oscv+0x66>
    3548:	01 96       	adiw	r24, 0x01	; 1
    354a:	95 95       	asr	r25
    354c:	87 95       	ror	r24
    354e:	84 0f       	add	r24, r20
    3550:	c6 e6       	ldi	r28, 0x66	; 102
    3552:	d0 e0       	ldi	r29, 0x00	; 0
    3554:	88 83       	st	Y, r24
				
				//Indicate calibration complete.
				atmega_uart::tx_string_p(PSTR("OK. OSCCAL = "));
    3556:	8c ed       	ldi	r24, 0xDC	; 220
    3558:	9c e0       	ldi	r25, 0x0C	; 12
    355a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
				tx_u32_to_ascii(OSCCAL);
    355e:	68 81       	ld	r22, Y
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
				atmega_uart::tx_byte('\r');
    356a:	8d e0       	ldi	r24, 0x0D	; 13
    356c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				
				//Save oscillator calibration value.
				atmega_eeprom::write_byte((uint8_t *)OSC_ADDR, OSCCAL);
    3570:	68 81       	ld	r22, Y
    3572:	82 e0       	ldi	r24, 0x02	; 2
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_ZN13atmega_eeprom10write_byteEPhh>
				cli();	//Disable interrupts.
    357a:	f8 94       	cli
    357c:	ff cf       	rjmp	.-2      	; 0x357c <_Z13calibrate_oscv+0x98>
				while(1);	//Done. Spin lock processor.
				break;
			}
		}
	}
}
    357e:	df 91       	pop	r29
    3580:	cf 91       	pop	r28
    3582:	08 95       	ret

00003584 <_Z14init_processorP8as_class>:
bool bin_overflowed;

/*******************************************Initialization and Configuration Routines****************************************/
//Initialize the MCU.
void init_processor(as_class *as)
{
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	00 d0       	rcall	.+0      	; 0x358e <_Z14init_processorP8as_class+0xa>
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	8c 01       	movw	r16, r24
	//Wait for voltage to stabilize on sensor board.
	for(volatile int i = 0; i < 10000; i++);
    3594:	1a 82       	std	Y+2, r1	; 0x02
    3596:	19 82       	std	Y+1, r1	; 0x01
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	80 31       	cpi	r24, 0x10	; 16
    359e:	97 42       	sbci	r25, 0x27	; 39
    35a0:	5c f4       	brge	.+22     	; 0x35b8 <_Z14init_processorP8as_class+0x34>
    35a2:	29 81       	ldd	r18, Y+1	; 0x01
    35a4:	3a 81       	ldd	r19, Y+2	; 0x02
    35a6:	2f 5f       	subi	r18, 0xFF	; 255
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	3a 83       	std	Y+2, r19	; 0x02
    35ac:	29 83       	std	Y+1, r18	; 0x01
    35ae:	29 81       	ldd	r18, Y+1	; 0x01
    35b0:	3a 81       	ldd	r19, Y+2	; 0x02
    35b2:	20 31       	cpi	r18, 0x10	; 16
    35b4:	37 42       	sbci	r19, 0x27	; 39
    35b6:	ac f3       	brlt	.-22     	; 0x35a2 <_Z14init_processorP8as_class+0x1e>
	
	atmega_twi::twi_master_init();	//I2C init.
    35b8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <_ZN10atmega_twi15twi_master_initEv>
	atmega_spi::spi_master_init();	//SPI init.
    35bc:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN10atmega_spi15spi_master_initEv>
	atmega_uart::uart_init(UBRR);	//UART init.
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN11atmega_uart9uart_initEj>
	
	//Turn off unused hardware.
	PRR =  (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRADC);
    35c8:	81 e6       	ldi	r24, 0x61	; 97
    35ca:	80 93 64 00 	sts	0x0064, r24
	ACSR = (1  << ACD); //Turn off analog comparator.
    35ce:	80 e8       	ldi	r24, 0x80	; 128
    35d0:	80 bf       	out	0x30, r24	; 48
	
	//Pull up unused pins.
	PORTB |= 0xC0;
    35d2:	85 b1       	in	r24, 0x05	; 5
    35d4:	80 6c       	ori	r24, 0xC0	; 192
    35d6:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0xFF;
    35d8:	88 b1       	in	r24, 0x08	; 8
    35da:	8f ef       	ldi	r24, 0xFF	; 255
    35dc:	88 b9       	out	0x08, r24	; 8
	PORTD |= 0xFC;
    35de:	8b b1       	in	r24, 0x0b	; 11
    35e0:	8c 6f       	ori	r24, 0xFC	; 252
    35e2:	8b b9       	out	0x0b, r24	; 11
	
	//Set pins as outputs.
	ddrADCS |= (1 << ADCS);
    35e4:	21 9a       	sbi	0x04, 1	; 4
	ddrDACS |= (1 << DACS);
    35e6:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << PORTB0);
    35e8:	20 9a       	sbi	0x04, 0	; 4
	
	
	//Disable ADC and DAC.
	prtADCS |= (1 << ADCS);
    35ea:	29 9a       	sbi	0x05, 1	; 5
	prtDACS |= (1 << DACS);
    35ec:	2a 9a       	sbi	0x05, 2	; 5
	
	//Load TIMER1 configuration.
	TCCR1B = 0x09;					//No prescaling, CTC.
    35ee:	89 e0       	ldi	r24, 0x09	; 9
    35f0:	80 93 81 00 	sts	0x0081, r24
	OCR1A  = INT_TIME;				//Match counter every 1 ms.
    35f4:	8f e0       	ldi	r24, 0x0F	; 15
    35f6:	9d e1       	ldi	r25, 0x1D	; 29
    35f8:	90 93 89 00 	sts	0x0089, r25
    35fc:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02;					//Enable TIMER1_COMPA interrupt.
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	80 93 6f 00 	sts	0x006F, r24
	
	//Zero the DAC.
	write_dac(ZERO_VOLT);
    3606:	8f ef       	ldi	r24, 0xFF	; 255
    3608:	97 e0       	ldi	r25, 0x07	; 7
    360a:	0e 94 77 16 	call	0x2cee	; 0x2cee <_Z9write_dacj>
	
	//Set initial config for digital pot and analog switches.
	init_i2c_devices(as);
    360e:	c8 01       	movw	r24, r16
    3610:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_Z16init_i2c_devicesP8as_class>
	
	//Calibrate oscillator if necessary.
	calibrate_osc();
    3614:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_Z13calibrate_oscv>
	
	//Load oscillator calibration value.
	OSCCAL = atmega_eeprom::read_byte((uint8_t *)OSC_ADDR);
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN13atmega_eeprom9read_byteEPh>
    3620:	80 93 66 00 	sts	0x0066, r24
	
	sei(); //Enable global interrupts.
    3624:	78 94       	sei
}
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	1f 91       	pop	r17
    3630:	0f 91       	pop	r16
    3632:	08 95       	ret

00003634 <_Z15tx_int_to_asciil>:
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}

//Convert a 32-bit signed integer to an ASCII string and transmit it out the UART.
void tx_int_to_ascii(int32_t number)
{
    3634:	2f 92       	push	r2
    3636:	3f 92       	push	r3
    3638:	4f 92       	push	r4
    363a:	5f 92       	push	r5
    363c:	6f 92       	push	r6
    363e:	7f 92       	push	r7
    3640:	8f 92       	push	r8
    3642:	9f 92       	push	r9
    3644:	af 92       	push	r10
    3646:	bf 92       	push	r11
    3648:	cf 92       	push	r12
    364a:	df 92       	push	r13
    364c:	ef 92       	push	r14
    364e:	ff 92       	push	r15
    3650:	0f 93       	push	r16
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	00 d0       	rcall	.+0      	; 0x365a <_Z15tx_int_to_asciil+0x26>
    365a:	1f 92       	push	r1
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	6b 01       	movw	r12, r22
    3662:	7c 01       	movw	r14, r24
	bool number_started = false; //Indicate conversion has started.
	
	//Check if negative.
	if(number < 0)
    3664:	99 23       	and	r25, r25
    3666:	0c f0       	brlt	.+2      	; 0x366a <_Z15tx_int_to_asciil+0x36>
    3668:	41 c0       	rjmp	.+130    	; 0x36ec <_Z15tx_int_to_asciil+0xb8>
	{
		atmega_uart::tx_byte('-');
    366a:	8d e2       	ldi	r24, 0x2D	; 45
    366c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		number *= -1;
    3670:	f0 94       	com	r15
    3672:	e0 94       	com	r14
    3674:	d0 94       	com	r13
    3676:	c0 94       	com	r12
    3678:	c1 1c       	adc	r12, r1
    367a:	d1 1c       	adc	r13, r1
    367c:	e1 1c       	adc	r14, r1
    367e:	f1 1c       	adc	r15, r1
    3680:	35 c0       	rjmp	.+106    	; 0x36ec <_Z15tx_int_to_asciil+0xb8>
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
    3682:	0c 2d       	mov	r16, r12
    3684:	1d 2d       	mov	r17, r13
    3686:	eb 82       	std	Y+3, r14	; 0x03
    3688:	fa 82       	std	Y+2, r15	; 0x02
    368a:	c7 01       	movw	r24, r14
    368c:	b6 01       	movw	r22, r12
    368e:	a5 01       	movw	r20, r10
    3690:	94 01       	movw	r18, r8
    3692:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    3696:	21 15       	cp	r18, r1
    3698:	31 05       	cpc	r19, r1
    369a:	41 05       	cpc	r20, r1
    369c:	51 05       	cpc	r21, r1
    369e:	19 f4       	brne	.+6      	; 0x36a6 <_Z15tx_int_to_asciil+0x72>
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	88 23       	and	r24, r24
    36a4:	81 f0       	breq	.+32     	; 0x36c6 <_Z15tx_int_to_asciil+0x92>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    36a6:	80 e3       	ldi	r24, 0x30	; 48
    36a8:	82 0f       	add	r24, r18
    36aa:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    36ae:	60 2f       	mov	r22, r16
    36b0:	71 2f       	mov	r23, r17
    36b2:	8b 81       	ldd	r24, Y+3	; 0x03
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	a5 01       	movw	r20, r10
    36b8:	94 01       	movw	r18, r8
    36ba:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    36be:	6b 01       	movw	r12, r22
    36c0:	7c 01       	movw	r14, r24
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    36c2:	e1 e0       	ldi	r30, 0x01	; 1
    36c4:	e9 83       	std	Y+1, r30	; 0x01
	{
		atmega_uart::tx_byte('-');
		number *= -1;
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    36c6:	c5 01       	movw	r24, r10
    36c8:	b4 01       	movw	r22, r8
    36ca:	a3 01       	movw	r20, r6
    36cc:	92 01       	movw	r18, r4
    36ce:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    36d2:	49 01       	movw	r8, r18
    36d4:	5a 01       	movw	r10, r20
    36d6:	f1 e0       	ldi	r31, 0x01	; 1
    36d8:	2f 1a       	sub	r2, r31
    36da:	31 08       	sbc	r3, r1
    36dc:	21 14       	cp	r2, r1
    36de:	31 04       	cpc	r3, r1
    36e0:	81 f6       	brne	.-96     	; 0x3682 <_Z15tx_int_to_asciil+0x4e>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    36e2:	80 e3       	ldi	r24, 0x30	; 48
    36e4:	8c 0d       	add	r24, r12
    36e6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    36ea:	15 c0       	rjmp	.+42     	; 0x3716 <_Z15tx_int_to_asciil+0xe2>
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}

//Convert a 32-bit signed integer to an ASCII string and transmit it out the UART.
void tx_int_to_ascii(int32_t number)
{
    36ec:	09 e0       	ldi	r16, 0x09	; 9
    36ee:	10 e0       	ldi	r17, 0x00	; 0
    36f0:	0f 2e       	mov	r0, r31
    36f2:	81 2c       	mov	r8, r1
    36f4:	fa ec       	ldi	r31, 0xCA	; 202
    36f6:	9f 2e       	mov	r9, r31
    36f8:	fa e9       	ldi	r31, 0x9A	; 154
    36fa:	af 2e       	mov	r10, r31
    36fc:	fb e3       	ldi	r31, 0x3B	; 59
    36fe:	bf 2e       	mov	r11, r31
    3700:	f0 2d       	mov	r31, r0
    3702:	19 82       	std	Y+1, r1	; 0x01
	{
		atmega_uart::tx_byte('-');
		number *= -1;
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    3704:	0f 2e       	mov	r0, r31
    3706:	fa e0       	ldi	r31, 0x0A	; 10
    3708:	4f 2e       	mov	r4, r31
    370a:	51 2c       	mov	r5, r1
    370c:	61 2c       	mov	r6, r1
    370e:	71 2c       	mov	r7, r1
    3710:	f0 2d       	mov	r31, r0
    3712:	18 01       	movw	r2, r16
    3714:	b6 cf       	rjmp	.-148    	; 0x3682 <_Z15tx_int_to_asciil+0x4e>
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	1f 91       	pop	r17
    3722:	0f 91       	pop	r16
    3724:	ff 90       	pop	r15
    3726:	ef 90       	pop	r14
    3728:	df 90       	pop	r13
    372a:	cf 90       	pop	r12
    372c:	bf 90       	pop	r11
    372e:	af 90       	pop	r10
    3730:	9f 90       	pop	r9
    3732:	8f 90       	pop	r8
    3734:	7f 90       	pop	r7
    3736:	6f 90       	pop	r6
    3738:	5f 90       	pop	r5
    373a:	4f 90       	pop	r4
    373c:	3f 90       	pop	r3
    373e:	2f 90       	pop	r2
    3740:	08 95       	ret

00003742 <_Z13string_to_u32PKhPhh>:

//Converts a string into an unsigned integer.
//This function looks for user defined character to stop the conversion.
uint32_t string_to_u32(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
    3742:	2f 92       	push	r2
    3744:	3f 92       	push	r3
    3746:	4f 92       	push	r4
    3748:	5f 92       	push	r5
    374a:	6f 92       	push	r6
    374c:	7f 92       	push	r7
    374e:	8f 92       	push	r8
    3750:	9f 92       	push	r9
    3752:	af 92       	push	r10
    3754:	bf 92       	push	r11
    3756:	cf 92       	push	r12
    3758:	df 92       	push	r13
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	28 97       	sbiw	r28, 0x08	; 8
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
    377a:	7c 83       	std	Y+4, r23	; 0x04
    377c:	6b 83       	std	Y+3, r22	; 0x03
    377e:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    3780:	dc 01       	movw	r26, r24
    3782:	5c 91       	ld	r21, X
    3784:	54 17       	cp	r21, r20
    3786:	09 f4       	brne	.+2      	; 0x378a <_Z13string_to_u32PKhPhh+0x48>
    3788:	97 c0       	rjmp	.+302    	; 0x38b8 <_Z13string_to_u32PKhPhh+0x176>
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
    378a:	80 ed       	ldi	r24, 0xD0	; 208
    378c:	85 0f       	add	r24, r21
    378e:	8a 30       	cpi	r24, 0x0A	; 10
    3790:	08 f0       	brcs	.+2      	; 0x3794 <_Z13string_to_u32PKhPhh+0x52>
    3792:	6b c0       	rjmp	.+214    	; 0x386a <_Z13string_to_u32PKhPhh+0x128>
    3794:	4d 01       	movw	r8, r26
    3796:	bf ef       	ldi	r27, 0xFF	; 255
    3798:	8b 1a       	sub	r8, r27
    379a:	9b 0a       	sbc	r9, r27
    379c:	e1 e0       	ldi	r30, 0x01	; 1
    379e:	f0 e0       	ldi	r31, 0x00	; 0
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    37a0:	61 2c       	mov	r6, r1
    37a2:	71 2c       	mov	r7, r1
//Converts a string into an unsigned integer.
//This function looks for user defined character to stop the conversion.
uint32_t string_to_u32(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
	uint8_t index = 0;
	uint64_t number = 0;
    37a4:	d1 2c       	mov	r13, r1
    37a6:	e1 2c       	mov	r14, r1
    37a8:	f1 2c       	mov	r15, r1
    37aa:	00 e0       	ldi	r16, 0x00	; 0
    37ac:	b1 2c       	mov	r11, r1
    37ae:	c1 2c       	mov	r12, r1
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	0a c0       	rjmp	.+20     	; 0x37ca <_Z13string_to_u32PKhPhh+0x88>
    37b6:	9f 01       	movw	r18, r30
    37b8:	2f 5f       	subi	r18, 0xFF	; 255
    37ba:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
    37bc:	40 ed       	ldi	r20, 0xD0	; 208
    37be:	45 0f       	add	r20, r21
    37c0:	4a 30       	cpi	r20, 0x0A	; 10
    37c2:	08 f0       	brcs	.+2      	; 0x37c6 <_Z13string_to_u32PKhPhh+0x84>
    37c4:	52 c0       	rjmp	.+164    	; 0x386a <_Z13string_to_u32PKhPhh+0x128>
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    37c6:	3f 01       	movw	r6, r30
    37c8:	f9 01       	movw	r30, r18
    37ca:	55 24       	eor	r5, r5
    37cc:	5a 94       	dec	r5
    37ce:	5e 0e       	add	r5, r30
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
		{
			//Add character to number.
			number += (array[index] - '0');
    37d0:	a5 2f       	mov	r26, r21
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	d0 97       	sbiw	r26, 0x30	; 48
    37d6:	1b 2f       	mov	r17, r27
    37d8:	11 0f       	add	r17, r17
    37da:	11 0b       	sbc	r17, r17
    37dc:	2d 2d       	mov	r18, r13
    37de:	3e 2d       	mov	r19, r14
    37e0:	4f 2d       	mov	r20, r15
    37e2:	50 2f       	mov	r21, r16
    37e4:	6b 2d       	mov	r22, r11
    37e6:	7c 2d       	mov	r23, r12
    37e8:	aa 2e       	mov	r10, r26
    37ea:	bb 2e       	mov	r11, r27
    37ec:	c1 2e       	mov	r12, r17
    37ee:	d1 2e       	mov	r13, r17
    37f0:	e1 2e       	mov	r14, r17
    37f2:	f1 2e       	mov	r15, r17
    37f4:	01 2f       	mov	r16, r17
    37f6:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__adddi3>
    37fa:	19 2f       	mov	r17, r25
    37fc:	d2 2e       	mov	r13, r18
    37fe:	e3 2e       	mov	r14, r19
    3800:	f4 2e       	mov	r15, r20
    3802:	05 2f       	mov	r16, r21
    3804:	b6 2e       	mov	r11, r22
    3806:	c7 2e       	mov	r12, r23
    3808:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(array[index + 1] >= '0' && array[index + 1] <= '9')
    380a:	ad 81       	ldd	r26, Y+5	; 0x05
    380c:	be 81       	ldd	r27, Y+6	; 0x06
    380e:	a6 0d       	add	r26, r6
    3810:	b7 1d       	adc	r27, r7
    3812:	11 96       	adiw	r26, 0x01	; 1
    3814:	ac 91       	ld	r26, X
    3816:	a0 53       	subi	r26, 0x30	; 48
    3818:	aa 30       	cpi	r26, 0x0A	; 10
    381a:	80 f5       	brcc	.+96     	; 0x387c <_Z13string_to_u32PKhPhh+0x13a>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    381c:	01 e0       	ldi	r16, 0x01	; 1
    381e:	0e 94 3b 33 	call	0x6676	; 0x6676 <__ashldi3>
    3822:	22 2e       	mov	r2, r18
    3824:	33 2e       	mov	r3, r19
    3826:	44 2e       	mov	r4, r20
    3828:	65 2e       	mov	r6, r21
    382a:	76 2e       	mov	r7, r22
    382c:	a7 2f       	mov	r26, r23
    382e:	8f 83       	std	Y+7, r24	; 0x07
    3830:	b9 2f       	mov	r27, r25
    3832:	02 e0       	ldi	r16, 0x02	; 2
    3834:	0e 94 3b 33 	call	0x6676	; 0x6676 <__ashldi3>
    3838:	a2 2e       	mov	r10, r18
    383a:	b3 2e       	mov	r11, r19
    383c:	c4 2e       	mov	r12, r20
    383e:	d5 2e       	mov	r13, r21
    3840:	e6 2e       	mov	r14, r22
    3842:	f7 2e       	mov	r15, r23
    3844:	08 2f       	mov	r16, r24
    3846:	19 2f       	mov	r17, r25
    3848:	22 2d       	mov	r18, r2
    384a:	33 2d       	mov	r19, r3
    384c:	44 2d       	mov	r20, r4
    384e:	56 2d       	mov	r21, r6
    3850:	67 2d       	mov	r22, r7
    3852:	7a 2f       	mov	r23, r26
    3854:	8f 81       	ldd	r24, Y+7	; 0x07
    3856:	9b 2f       	mov	r25, r27
    3858:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__adddi3>
    385c:	d2 2e       	mov	r13, r18
    385e:	e3 2e       	mov	r14, r19
    3860:	f4 2e       	mov	r15, r20
    3862:	05 2f       	mov	r16, r21
    3864:	b6 2e       	mov	r11, r22
    3866:	c7 2e       	mov	r12, r23
    3868:	09 c0       	rjmp	.+18     	; 0x387c <_Z13string_to_u32PKhPhh+0x13a>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	eb 81       	ldd	r30, Y+3	; 0x03
    386e:	fc 81       	ldd	r31, Y+4	; 0x04
    3870:	80 83       	st	Z, r24
			return 0;
    3872:	60 e0       	ldi	r22, 0x00	; 0
    3874:	70 e0       	ldi	r23, 0x00	; 0
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	2e c0       	rjmp	.+92     	; 0x38d8 <_Z13string_to_u32PKhPhh+0x196>
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    387c:	d4 01       	movw	r26, r8
    387e:	5d 91       	ld	r21, X+
    3880:	4d 01       	movw	r8, r26
    3882:	ba 81       	ldd	r27, Y+2	; 0x02
    3884:	5b 17       	cp	r21, r27
    3886:	21 f0       	breq	.+8      	; 0x3890 <_Z13string_to_u32PKhPhh+0x14e>
    3888:	ea 30       	cpi	r30, 0x0A	; 10
    388a:	f1 05       	cpc	r31, r1
    388c:	09 f0       	breq	.+2      	; 0x3890 <_Z13string_to_u32PKhPhh+0x14e>
    388e:	93 cf       	rjmp	.-218    	; 0x37b6 <_Z13string_to_u32PKhPhh+0x74>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, number out of range or no digits at all.
	if((index > 10) || (number > U32_MAX) || (!index)) 
    3890:	26 ef       	ldi	r18, 0xF6	; 246
    3892:	25 0d       	add	r18, r5
    3894:	26 3f       	cpi	r18, 0xF6	; 246
    3896:	80 f0       	brcs	.+32     	; 0x38b8 <_Z13string_to_u32PKhPhh+0x176>
    3898:	2d 2d       	mov	r18, r13
    389a:	3e 2d       	mov	r19, r14
    389c:	4f 2d       	mov	r20, r15
    389e:	50 2f       	mov	r21, r16
    38a0:	6b 2d       	mov	r22, r11
    38a2:	7c 2d       	mov	r23, r12
    38a4:	2f 3f       	cpi	r18, 0xFF	; 255
    38a6:	3f 4f       	sbci	r19, 0xFF	; 255
    38a8:	4f 4f       	sbci	r20, 0xFF	; 255
    38aa:	5f 4f       	sbci	r21, 0xFF	; 255
    38ac:	61 05       	cpc	r22, r1
    38ae:	71 05       	cpc	r23, r1
    38b0:	81 05       	cpc	r24, r1
    38b2:	91 05       	cpc	r25, r1
    38b4:	51 f0       	breq	.+20     	; 0x38ca <_Z13string_to_u32PKhPhh+0x188>
    38b6:	48 f0       	brcs	.+18     	; 0x38ca <_Z13string_to_u32PKhPhh+0x188>
	{
		*errno = ER_ERROR;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	ab 81       	ldd	r26, Y+3	; 0x03
    38bc:	bc 81       	ldd	r27, Y+4	; 0x04
    38be:	8c 93       	st	X, r24
		return 0;
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	70 e0       	ldi	r23, 0x00	; 0
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	07 c0       	rjmp	.+14     	; 0x38d8 <_Z13string_to_u32PKhPhh+0x196>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    38ca:	eb 81       	ldd	r30, Y+3	; 0x03
    38cc:	fc 81       	ldd	r31, Y+4	; 0x04
    38ce:	10 82       	st	Z, r1
	return (uint32_t)number;
    38d0:	6d 2d       	mov	r22, r13
    38d2:	7e 2d       	mov	r23, r14
    38d4:	8f 2d       	mov	r24, r15
    38d6:	90 2f       	mov	r25, r16
}
    38d8:	28 96       	adiw	r28, 0x08	; 8
    38da:	0f b6       	in	r0, 0x3f	; 63
    38dc:	f8 94       	cli
    38de:	de bf       	out	0x3e, r29	; 62
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	cd bf       	out	0x3d, r28	; 61
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	8f 90       	pop	r8
    38fc:	7f 90       	pop	r7
    38fe:	6f 90       	pop	r6
    3900:	5f 90       	pop	r5
    3902:	4f 90       	pop	r4
    3904:	3f 90       	pop	r3
    3906:	2f 90       	pop	r2
    3908:	08 95       	ret

0000390a <_Z13string_to_intPKhPhh>:

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
int32_t string_to_int(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
    390a:	2f 92       	push	r2
    390c:	3f 92       	push	r3
    390e:	4f 92       	push	r4
    3910:	5f 92       	push	r5
    3912:	6f 92       	push	r6
    3914:	7f 92       	push	r7
    3916:	8f 92       	push	r8
    3918:	9f 92       	push	r9
    391a:	af 92       	push	r10
    391c:	bf 92       	push	r11
    391e:	cf 92       	push	r12
    3920:	df 92       	push	r13
    3922:	ef 92       	push	r14
    3924:	ff 92       	push	r15
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	29 97       	sbiw	r28, 0x09	; 9
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
    393e:	9f 83       	std	Y+7, r25	; 0x07
    3940:	8e 83       	std	Y+6, r24	; 0x06
    3942:	7c 83       	std	Y+4, r23	; 0x04
    3944:	6b 83       	std	Y+3, r22	; 0x03
    3946:	4a 83       	std	Y+2, r20	; 0x02
	
	//Switch to new array pointer to account for any negative sign.
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
    3948:	dc 01       	movw	r26, r24
    394a:	8c 91       	ld	r24, X
    394c:	8d 32       	cpi	r24, 0x2D	; 45
    394e:	31 f4       	brne	.+12     	; 0x395c <_Z13string_to_intPKhPhh+0x52>
	{
		is_neg = true;
		arr++;
    3950:	11 96       	adiw	r26, 0x01	; 1
    3952:	bf 83       	std	Y+7, r27	; 0x07
    3954:	ae 83       	std	Y+6, r26	; 0x06
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
	{
		is_neg = true;
    3956:	b1 e0       	ldi	r27, 0x01	; 1
    3958:	bd 83       	std	Y+5, r27	; 0x05
    395a:	01 c0       	rjmp	.+2      	; 0x395e <_Z13string_to_intPKhPhh+0x54>

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
int32_t string_to_int(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
	bool is_neg = false;
    395c:	1d 82       	std	Y+5, r1	; 0x05
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    395e:	ee 81       	ldd	r30, Y+6	; 0x06
    3960:	ff 81       	ldd	r31, Y+7	; 0x07
    3962:	50 81       	ld	r21, Z
    3964:	fa 81       	ldd	r31, Y+2	; 0x02
    3966:	5f 17       	cp	r21, r31
    3968:	09 f4       	brne	.+2      	; 0x396c <_Z13string_to_intPKhPhh+0x62>
    396a:	87 c0       	rjmp	.+270    	; 0x3a7a <_Z13string_to_intPKhPhh+0x170>
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    396c:	80 ed       	ldi	r24, 0xD0	; 208
    396e:	85 0f       	add	r24, r21
    3970:	8a 30       	cpi	r24, 0x0A	; 10
    3972:	08 f0       	brcs	.+2      	; 0x3976 <_Z13string_to_intPKhPhh+0x6c>
    3974:	6c c0       	rjmp	.+216    	; 0x3a4e <_Z13string_to_intPKhPhh+0x144>
    3976:	8e 80       	ldd	r8, Y+6	; 0x06
    3978:	9f 80       	ldd	r9, Y+7	; 0x07
    397a:	2f ef       	ldi	r18, 0xFF	; 255
    397c:	82 1a       	sub	r8, r18
    397e:	92 0a       	sbc	r9, r18
    3980:	e1 e0       	ldi	r30, 0x01	; 1
    3982:	f0 e0       	ldi	r31, 0x00	; 0
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3984:	61 2c       	mov	r6, r1
    3986:	71 2c       	mov	r7, r1
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    3988:	d1 2c       	mov	r13, r1
    398a:	e1 2c       	mov	r14, r1
    398c:	f1 2c       	mov	r15, r1
    398e:	00 e0       	ldi	r16, 0x00	; 0
    3990:	b1 2c       	mov	r11, r1
    3992:	c1 2c       	mov	r12, r1
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	0a c0       	rjmp	.+20     	; 0x39ae <_Z13string_to_intPKhPhh+0xa4>
    399a:	9f 01       	movw	r18, r30
    399c:	2f 5f       	subi	r18, 0xFF	; 255
    399e:	3f 4f       	sbci	r19, 0xFF	; 255
    39a0:	40 ed       	ldi	r20, 0xD0	; 208
    39a2:	45 0f       	add	r20, r21
    39a4:	4a 30       	cpi	r20, 0x0A	; 10
    39a6:	08 f0       	brcs	.+2      	; 0x39aa <_Z13string_to_intPKhPhh+0xa0>
    39a8:	52 c0       	rjmp	.+164    	; 0x3a4e <_Z13string_to_intPKhPhh+0x144>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    39aa:	3f 01       	movw	r6, r30
    39ac:	f9 01       	movw	r30, r18
    39ae:	55 24       	eor	r5, r5
    39b0:	5a 94       	dec	r5
    39b2:	5e 0e       	add	r5, r30
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
		{
			//Add character to number.
			number += (arr[index] - '0');
    39b4:	a5 2f       	mov	r26, r21
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	d0 97       	sbiw	r26, 0x30	; 48
    39ba:	1b 2f       	mov	r17, r27
    39bc:	11 0f       	add	r17, r17
    39be:	11 0b       	sbc	r17, r17
    39c0:	2d 2d       	mov	r18, r13
    39c2:	3e 2d       	mov	r19, r14
    39c4:	4f 2d       	mov	r20, r15
    39c6:	50 2f       	mov	r21, r16
    39c8:	6b 2d       	mov	r22, r11
    39ca:	7c 2d       	mov	r23, r12
    39cc:	aa 2e       	mov	r10, r26
    39ce:	bb 2e       	mov	r11, r27
    39d0:	c1 2e       	mov	r12, r17
    39d2:	d1 2e       	mov	r13, r17
    39d4:	e1 2e       	mov	r14, r17
    39d6:	f1 2e       	mov	r15, r17
    39d8:	01 2f       	mov	r16, r17
    39da:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__adddi3>
    39de:	19 2f       	mov	r17, r25
    39e0:	d2 2e       	mov	r13, r18
    39e2:	e3 2e       	mov	r14, r19
    39e4:	f4 2e       	mov	r15, r20
    39e6:	05 2f       	mov	r16, r21
    39e8:	b6 2e       	mov	r11, r22
    39ea:	c7 2e       	mov	r12, r23
    39ec:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(arr[index + 1] >= '0' && arr[index + 1] <= '9')
    39ee:	ae 81       	ldd	r26, Y+6	; 0x06
    39f0:	bf 81       	ldd	r27, Y+7	; 0x07
    39f2:	a6 0d       	add	r26, r6
    39f4:	b7 1d       	adc	r27, r7
    39f6:	11 96       	adiw	r26, 0x01	; 1
    39f8:	ac 91       	ld	r26, X
    39fa:	a0 53       	subi	r26, 0x30	; 48
    39fc:	aa 30       	cpi	r26, 0x0A	; 10
    39fe:	80 f5       	brcc	.+96     	; 0x3a60 <_Z13string_to_intPKhPhh+0x156>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    3a00:	01 e0       	ldi	r16, 0x01	; 1
    3a02:	0e 94 3b 33 	call	0x6676	; 0x6676 <__ashldi3>
    3a06:	22 2e       	mov	r2, r18
    3a08:	33 2e       	mov	r3, r19
    3a0a:	44 2e       	mov	r4, r20
    3a0c:	65 2e       	mov	r6, r21
    3a0e:	76 2e       	mov	r7, r22
    3a10:	a7 2f       	mov	r26, r23
    3a12:	88 87       	std	Y+8, r24	; 0x08
    3a14:	b9 2f       	mov	r27, r25
    3a16:	02 e0       	ldi	r16, 0x02	; 2
    3a18:	0e 94 3b 33 	call	0x6676	; 0x6676 <__ashldi3>
    3a1c:	a2 2e       	mov	r10, r18
    3a1e:	b3 2e       	mov	r11, r19
    3a20:	c4 2e       	mov	r12, r20
    3a22:	d5 2e       	mov	r13, r21
    3a24:	e6 2e       	mov	r14, r22
    3a26:	f7 2e       	mov	r15, r23
    3a28:	08 2f       	mov	r16, r24
    3a2a:	19 2f       	mov	r17, r25
    3a2c:	22 2d       	mov	r18, r2
    3a2e:	33 2d       	mov	r19, r3
    3a30:	44 2d       	mov	r20, r4
    3a32:	56 2d       	mov	r21, r6
    3a34:	67 2d       	mov	r22, r7
    3a36:	7a 2f       	mov	r23, r26
    3a38:	88 85       	ldd	r24, Y+8	; 0x08
    3a3a:	9b 2f       	mov	r25, r27
    3a3c:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__adddi3>
    3a40:	d2 2e       	mov	r13, r18
    3a42:	e3 2e       	mov	r14, r19
    3a44:	f4 2e       	mov	r15, r20
    3a46:	05 2f       	mov	r16, r21
    3a48:	b6 2e       	mov	r11, r22
    3a4a:	c7 2e       	mov	r12, r23
    3a4c:	09 c0       	rjmp	.+18     	; 0x3a60 <_Z13string_to_intPKhPhh+0x156>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	ab 81       	ldd	r26, Y+3	; 0x03
    3a52:	bc 81       	ldd	r27, Y+4	; 0x04
    3a54:	8c 93       	st	X, r24
			return 0;
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	64 c0       	rjmp	.+200    	; 0x3b28 <_Z13string_to_intPKhPhh+0x21e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3a60:	d4 01       	movw	r26, r8
    3a62:	5d 91       	ld	r21, X+
    3a64:	4d 01       	movw	r8, r26
    3a66:	ba 81       	ldd	r27, Y+2	; 0x02
    3a68:	5b 17       	cp	r21, r27
    3a6a:	21 f0       	breq	.+8      	; 0x3a74 <_Z13string_to_intPKhPhh+0x16a>
    3a6c:	ea 30       	cpi	r30, 0x0A	; 10
    3a6e:	f1 05       	cpc	r31, r1
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <_Z13string_to_intPKhPhh+0x16a>
    3a72:	93 cf       	rjmp	.-218    	; 0x399a <_Z13string_to_intPKhPhh+0x90>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, no digits at all.
	if((index > 10) || (!index))
    3a74:	e9 e0       	ldi	r30, 0x09	; 9
    3a76:	e5 15       	cp	r30, r5
    3a78:	48 f4       	brcc	.+18     	; 0x3a8c <_Z13string_to_intPKhPhh+0x182>
	{
		*errno = ER_ERROR;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	ab 81       	ldd	r26, Y+3	; 0x03
    3a7e:	bc 81       	ldd	r27, Y+4	; 0x04
    3a80:	8c 93       	st	X, r24
		return 0;
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	4e c0       	rjmp	.+156    	; 0x3b28 <_Z13string_to_intPKhPhh+0x21e>
	}
	
	//Check to see if number is too big.
	if(!is_neg && (number > INT_MAX))
    3a8c:	bd 81       	ldd	r27, Y+5	; 0x05
    3a8e:	b1 11       	cpse	r27, r1
    3a90:	19 c0       	rjmp	.+50     	; 0x3ac4 <_Z13string_to_intPKhPhh+0x1ba>
    3a92:	2d 2d       	mov	r18, r13
    3a94:	3e 2d       	mov	r19, r14
    3a96:	4f 2d       	mov	r20, r15
    3a98:	50 2f       	mov	r21, r16
    3a9a:	6b 2d       	mov	r22, r11
    3a9c:	7c 2d       	mov	r23, r12
    3a9e:	2f 3f       	cpi	r18, 0xFF	; 255
    3aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    3aa4:	5f 47       	sbci	r21, 0x7F	; 127
    3aa6:	61 05       	cpc	r22, r1
    3aa8:	71 05       	cpc	r23, r1
    3aaa:	81 05       	cpc	r24, r1
    3aac:	91 05       	cpc	r25, r1
    3aae:	b9 f1       	breq	.+110    	; 0x3b1e <_Z13string_to_intPKhPhh+0x214>
    3ab0:	b0 f1       	brcs	.+108    	; 0x3b1e <_Z13string_to_intPKhPhh+0x214>
	{
		*errno = ER_ERROR;
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	ab 81       	ldd	r26, Y+3	; 0x03
    3ab6:	bc 81       	ldd	r27, Y+4	; 0x04
    3ab8:	8c 93       	st	X, r24
		return 0;
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	32 c0       	rjmp	.+100    	; 0x3b28 <_Z13string_to_intPKhPhh+0x21e>
	}
	
	//Check if number is too small.
	if(is_neg && number > INT_MIN)
    3ac4:	2d 2d       	mov	r18, r13
    3ac6:	3e 2d       	mov	r19, r14
    3ac8:	4f 2d       	mov	r20, r15
    3aca:	50 2f       	mov	r21, r16
    3acc:	6b 2d       	mov	r22, r11
    3ace:	7c 2d       	mov	r23, r12
    3ad0:	21 15       	cp	r18, r1
    3ad2:	31 05       	cpc	r19, r1
    3ad4:	41 05       	cpc	r20, r1
    3ad6:	50 48       	sbci	r21, 0x80	; 128
    3ad8:	61 05       	cpc	r22, r1
    3ada:	71 05       	cpc	r23, r1
    3adc:	81 05       	cpc	r24, r1
    3ade:	91 05       	cpc	r25, r1
    3ae0:	91 f0       	breq	.+36     	; 0x3b06 <_Z13string_to_intPKhPhh+0x1fc>
    3ae2:	88 f0       	brcs	.+34     	; 0x3b06 <_Z13string_to_intPKhPhh+0x1fc>
	{
		*errno = ER_ERROR;
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ae8:	fc 81       	ldd	r31, Y+4	; 0x04
    3aea:	80 83       	st	Z, r24
		return 0;
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	19 c0       	rjmp	.+50     	; 0x3b28 <_Z13string_to_intPKhPhh+0x21e>
	{
		num *= -1;
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    3af6:	ab 81       	ldd	r26, Y+3	; 0x03
    3af8:	bc 81       	ldd	r27, Y+4	; 0x04
    3afa:	1c 92       	st	X, r1
	return num;
    3afc:	6c 2d       	mov	r22, r12
    3afe:	7d 2d       	mov	r23, r13
    3b00:	8e 2d       	mov	r24, r14
    3b02:	9f 2d       	mov	r25, r15
    3b04:	11 c0       	rjmp	.+34     	; 0x3b28 <_Z13string_to_intPKhPhh+0x21e>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3b06:	4d 2d       	mov	r20, r13
    3b08:	5e 2d       	mov	r21, r14
    3b0a:	6f 2d       	mov	r22, r15
    3b0c:	70 2f       	mov	r23, r16
	
	//Convert to a negative number, if necessary.
	if(is_neg)
	{
		num *= -1;
    3b0e:	cc 24       	eor	r12, r12
    3b10:	dd 24       	eor	r13, r13
    3b12:	76 01       	movw	r14, r12
    3b14:	c4 1a       	sub	r12, r20
    3b16:	d5 0a       	sbc	r13, r21
    3b18:	e6 0a       	sbc	r14, r22
    3b1a:	f7 0a       	sbc	r15, r23
    3b1c:	ec cf       	rjmp	.-40     	; 0x3af6 <_Z13string_to_intPKhPhh+0x1ec>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3b1e:	cd 2c       	mov	r12, r13
    3b20:	de 2c       	mov	r13, r14
    3b22:	ef 2c       	mov	r14, r15
    3b24:	f0 2e       	mov	r15, r16
    3b26:	e7 cf       	rjmp	.-50     	; 0x3af6 <_Z13string_to_intPKhPhh+0x1ec>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
	return num;
}
    3b28:	29 96       	adiw	r28, 0x09	; 9
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	df 90       	pop	r13
    3b42:	cf 90       	pop	r12
    3b44:	bf 90       	pop	r11
    3b46:	af 90       	pop	r10
    3b48:	9f 90       	pop	r9
    3b4a:	8f 90       	pop	r8
    3b4c:	7f 90       	pop	r7
    3b4e:	6f 90       	pop	r6
    3b50:	5f 90       	pop	r5
    3b52:	4f 90       	pop	r4
    3b54:	3f 90       	pop	r3
    3b56:	2f 90       	pop	r2
    3b58:	08 95       	ret

00003b5a <_Z15string_to_int_pPKhPhS1_h>:

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
//Also, it gives the index where the number was terminated.
int32_t string_to_int_p(const uint8_t *array, uint8_t *errno, uint8_t *pend, uint8_t term = '\r')
{
    3b5a:	2f 92       	push	r2
    3b5c:	3f 92       	push	r3
    3b5e:	4f 92       	push	r4
    3b60:	5f 92       	push	r5
    3b62:	6f 92       	push	r6
    3b64:	7f 92       	push	r7
    3b66:	8f 92       	push	r8
    3b68:	9f 92       	push	r9
    3b6a:	af 92       	push	r10
    3b6c:	bf 92       	push	r11
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	29 97       	sbiw	r28, 0x09	; 9
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	3c 01       	movw	r6, r24
    3b90:	7c 83       	std	Y+4, r23	; 0x04
    3b92:	6b 83       	std	Y+3, r22	; 0x03
    3b94:	5f 83       	std	Y+7, r21	; 0x07
    3b96:	4e 83       	std	Y+6, r20	; 0x06
    3b98:	92 2e       	mov	r9, r18
	
	//Switch to new array pointer to account for any negative sign.
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	8c 91       	ld	r24, X
    3b9e:	8d 32       	cpi	r24, 0x2D	; 45
    3ba0:	31 f4       	brne	.+12     	; 0x3bae <_Z15string_to_int_pPKhPhS1_h+0x54>
	{
		is_neg = true;
		arr++;
    3ba2:	bf ef       	ldi	r27, 0xFF	; 255
    3ba4:	6b 1a       	sub	r6, r27
    3ba6:	7b 0a       	sbc	r7, r27
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
	{
		is_neg = true;
    3ba8:	e1 e0       	ldi	r30, 0x01	; 1
    3baa:	ed 83       	std	Y+5, r30	; 0x05
    3bac:	01 c0       	rjmp	.+2      	; 0x3bb0 <_Z15string_to_int_pPKhPhS1_h+0x56>
//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
//Also, it gives the index where the number was terminated.
int32_t string_to_int_p(const uint8_t *array, uint8_t *errno, uint8_t *pend, uint8_t term = '\r')
{
	bool is_neg = false;
    3bae:	1d 82       	std	Y+5, r1	; 0x05
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3bb0:	f3 01       	movw	r30, r6
    3bb2:	a0 81       	ld	r26, Z
    3bb4:	a9 15       	cp	r26, r9
    3bb6:	09 f4       	brne	.+2      	; 0x3bba <_Z15string_to_int_pPKhPhS1_h+0x60>
    3bb8:	86 c0       	rjmp	.+268    	; 0x3cc6 <_Z15string_to_int_pPKhPhS1_h+0x16c>
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    3bba:	80 ed       	ldi	r24, 0xD0	; 208
    3bbc:	8a 0f       	add	r24, r26
    3bbe:	8a 30       	cpi	r24, 0x0A	; 10
    3bc0:	08 f0       	brcs	.+2      	; 0x3bc4 <_Z15string_to_int_pPKhPhS1_h+0x6a>
    3bc2:	6a c0       	rjmp	.+212    	; 0x3c98 <_Z15string_to_int_pPKhPhS1_h+0x13e>
    3bc4:	31 96       	adiw	r30, 0x01	; 1
    3bc6:	fa 83       	std	Y+2, r31	; 0x02
    3bc8:	e9 83       	std	Y+1, r30	; 0x01
    3bca:	e1 e0       	ldi	r30, 0x01	; 1
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3bce:	41 2c       	mov	r4, r1
    3bd0:	51 2c       	mov	r5, r1
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    3bd2:	f1 2c       	mov	r15, r1
    3bd4:	00 e0       	ldi	r16, 0x00	; 0
    3bd6:	a1 2c       	mov	r10, r1
    3bd8:	b1 2c       	mov	r11, r1
    3bda:	d1 2c       	mov	r13, r1
    3bdc:	e1 2c       	mov	r14, r1
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	5a 2f       	mov	r21, r26
    3be4:	0a c0       	rjmp	.+20     	; 0x3bfa <_Z15string_to_int_pPKhPhS1_h+0xa0>
    3be6:	9f 01       	movw	r18, r30
    3be8:	2f 5f       	subi	r18, 0xFF	; 255
    3bea:	3f 4f       	sbci	r19, 0xFF	; 255
    3bec:	40 ed       	ldi	r20, 0xD0	; 208
    3bee:	45 0f       	add	r20, r21
    3bf0:	4a 30       	cpi	r20, 0x0A	; 10
    3bf2:	08 f0       	brcs	.+2      	; 0x3bf6 <_Z15string_to_int_pPKhPhS1_h+0x9c>
    3bf4:	51 c0       	rjmp	.+162    	; 0x3c98 <_Z15string_to_int_pPKhPhS1_h+0x13e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3bf6:	2f 01       	movw	r4, r30
    3bf8:	f9 01       	movw	r30, r18
    3bfa:	88 24       	eor	r8, r8
    3bfc:	8a 94       	dec	r8
    3bfe:	8e 0e       	add	r8, r30
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
		{
			//Add character to number.
			number += (arr[index] - '0');
    3c00:	a5 2f       	mov	r26, r21
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	d0 97       	sbiw	r26, 0x30	; 48
    3c06:	1b 2f       	mov	r17, r27
    3c08:	11 0f       	add	r17, r17
    3c0a:	11 0b       	sbc	r17, r17
    3c0c:	2f 2d       	mov	r18, r15
    3c0e:	30 2f       	mov	r19, r16
    3c10:	4a 2d       	mov	r20, r10
    3c12:	5b 2d       	mov	r21, r11
    3c14:	6d 2d       	mov	r22, r13
    3c16:	7e 2d       	mov	r23, r14
    3c18:	aa 2e       	mov	r10, r26
    3c1a:	bb 2e       	mov	r11, r27
    3c1c:	c1 2e       	mov	r12, r17
    3c1e:	d1 2e       	mov	r13, r17
    3c20:	e1 2e       	mov	r14, r17
    3c22:	f1 2e       	mov	r15, r17
    3c24:	01 2f       	mov	r16, r17
    3c26:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__adddi3>
    3c2a:	19 2f       	mov	r17, r25
    3c2c:	f2 2e       	mov	r15, r18
    3c2e:	03 2f       	mov	r16, r19
    3c30:	a4 2e       	mov	r10, r20
    3c32:	b5 2e       	mov	r11, r21
    3c34:	d6 2e       	mov	r13, r22
    3c36:	e7 2e       	mov	r14, r23
    3c38:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(arr[index + 1] >= '0' && arr[index + 1] <= '9')
    3c3a:	d3 01       	movw	r26, r6
    3c3c:	a4 0d       	add	r26, r4
    3c3e:	b5 1d       	adc	r27, r5
    3c40:	11 96       	adiw	r26, 0x01	; 1
    3c42:	ac 91       	ld	r26, X
    3c44:	a0 53       	subi	r26, 0x30	; 48
    3c46:	aa 30       	cpi	r26, 0x0A	; 10
    3c48:	80 f5       	brcc	.+96     	; 0x3caa <_Z15string_to_int_pPKhPhS1_h+0x150>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    3c4a:	01 e0       	ldi	r16, 0x01	; 1
    3c4c:	0e 94 3b 33 	call	0x6676	; 0x6676 <__ashldi3>
    3c50:	22 2e       	mov	r2, r18
    3c52:	33 2e       	mov	r3, r19
    3c54:	44 2e       	mov	r4, r20
    3c56:	55 2e       	mov	r5, r21
    3c58:	69 87       	std	Y+9, r22	; 0x09
    3c5a:	78 87       	std	Y+8, r23	; 0x08
    3c5c:	b8 2f       	mov	r27, r24
    3c5e:	a9 2f       	mov	r26, r25
    3c60:	02 e0       	ldi	r16, 0x02	; 2
    3c62:	0e 94 3b 33 	call	0x6676	; 0x6676 <__ashldi3>
    3c66:	a2 2e       	mov	r10, r18
    3c68:	b3 2e       	mov	r11, r19
    3c6a:	c4 2e       	mov	r12, r20
    3c6c:	d5 2e       	mov	r13, r21
    3c6e:	e6 2e       	mov	r14, r22
    3c70:	f7 2e       	mov	r15, r23
    3c72:	08 2f       	mov	r16, r24
    3c74:	19 2f       	mov	r17, r25
    3c76:	22 2d       	mov	r18, r2
    3c78:	33 2d       	mov	r19, r3
    3c7a:	44 2d       	mov	r20, r4
    3c7c:	55 2d       	mov	r21, r5
    3c7e:	69 85       	ldd	r22, Y+9	; 0x09
    3c80:	78 85       	ldd	r23, Y+8	; 0x08
    3c82:	8b 2f       	mov	r24, r27
    3c84:	9a 2f       	mov	r25, r26
    3c86:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__adddi3>
    3c8a:	f2 2e       	mov	r15, r18
    3c8c:	03 2f       	mov	r16, r19
    3c8e:	a4 2e       	mov	r10, r20
    3c90:	b5 2e       	mov	r11, r21
    3c92:	d6 2e       	mov	r13, r22
    3c94:	e7 2e       	mov	r14, r23
    3c96:	09 c0       	rjmp	.+18     	; 0x3caa <_Z15string_to_int_pPKhPhS1_h+0x150>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	ab 81       	ldd	r26, Y+3	; 0x03
    3c9c:	bc 81       	ldd	r27, Y+4	; 0x04
    3c9e:	8c 93       	st	X, r24
			return 0;
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	70 e0       	ldi	r23, 0x00	; 0
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	6f c0       	rjmp	.+222    	; 0x3d88 <_Z15string_to_int_pPKhPhS1_h+0x22e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3caa:	a9 81       	ldd	r26, Y+1	; 0x01
    3cac:	ba 81       	ldd	r27, Y+2	; 0x02
    3cae:	5d 91       	ld	r21, X+
    3cb0:	ba 83       	std	Y+2, r27	; 0x02
    3cb2:	a9 83       	std	Y+1, r26	; 0x01
    3cb4:	59 15       	cp	r21, r9
    3cb6:	21 f0       	breq	.+8      	; 0x3cc0 <_Z15string_to_int_pPKhPhS1_h+0x166>
    3cb8:	ea 30       	cpi	r30, 0x0A	; 10
    3cba:	f1 05       	cpc	r31, r1
    3cbc:	09 f0       	breq	.+2      	; 0x3cc0 <_Z15string_to_int_pPKhPhS1_h+0x166>
    3cbe:	93 cf       	rjmp	.-218    	; 0x3be6 <_Z15string_to_int_pPKhPhS1_h+0x8c>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, no digits at all.
	if((index > 10) || (!index))
    3cc0:	b9 e0       	ldi	r27, 0x09	; 9
    3cc2:	b8 15       	cp	r27, r8
    3cc4:	48 f4       	brcc	.+18     	; 0x3cd8 <_Z15string_to_int_pPKhPhS1_h+0x17e>
	{
		*errno = ER_ERROR;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	eb 81       	ldd	r30, Y+3	; 0x03
    3cca:	fc 81       	ldd	r31, Y+4	; 0x04
    3ccc:	80 83       	st	Z, r24
		return 0;
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	70 e0       	ldi	r23, 0x00	; 0
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	58 c0       	rjmp	.+176    	; 0x3d88 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	}
	
	//Check to see if number is too big.
	if(!is_neg && (number > INT_MAX))
    3cd8:	fd 81       	ldd	r31, Y+5	; 0x05
    3cda:	f1 11       	cpse	r31, r1
    3cdc:	19 c0       	rjmp	.+50     	; 0x3d10 <_Z15string_to_int_pPKhPhS1_h+0x1b6>
    3cde:	2f 2d       	mov	r18, r15
    3ce0:	30 2f       	mov	r19, r16
    3ce2:	4a 2d       	mov	r20, r10
    3ce4:	5b 2d       	mov	r21, r11
    3ce6:	6d 2d       	mov	r22, r13
    3ce8:	7e 2d       	mov	r23, r14
    3cea:	2f 3f       	cpi	r18, 0xFF	; 255
    3cec:	3f 4f       	sbci	r19, 0xFF	; 255
    3cee:	4f 4f       	sbci	r20, 0xFF	; 255
    3cf0:	5f 47       	sbci	r21, 0x7F	; 127
    3cf2:	61 05       	cpc	r22, r1
    3cf4:	71 05       	cpc	r23, r1
    3cf6:	81 05       	cpc	r24, r1
    3cf8:	91 05       	cpc	r25, r1
    3cfa:	e1 f1       	breq	.+120    	; 0x3d74 <_Z15string_to_int_pPKhPhS1_h+0x21a>
    3cfc:	d8 f1       	brcs	.+118    	; 0x3d74 <_Z15string_to_int_pPKhPhS1_h+0x21a>
	{
		*errno = ER_ERROR;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	eb 81       	ldd	r30, Y+3	; 0x03
    3d02:	fc 81       	ldd	r31, Y+4	; 0x04
    3d04:	80 83       	st	Z, r24
		return 0;
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	3c c0       	rjmp	.+120    	; 0x3d88 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	}
	
	//Check if number is too small.
	if(is_neg && number > INT_MIN)
    3d10:	2f 2d       	mov	r18, r15
    3d12:	30 2f       	mov	r19, r16
    3d14:	4a 2d       	mov	r20, r10
    3d16:	5b 2d       	mov	r21, r11
    3d18:	6d 2d       	mov	r22, r13
    3d1a:	7e 2d       	mov	r23, r14
    3d1c:	21 15       	cp	r18, r1
    3d1e:	31 05       	cpc	r19, r1
    3d20:	41 05       	cpc	r20, r1
    3d22:	50 48       	sbci	r21, 0x80	; 128
    3d24:	61 05       	cpc	r22, r1
    3d26:	71 05       	cpc	r23, r1
    3d28:	81 05       	cpc	r24, r1
    3d2a:	91 05       	cpc	r25, r1
    3d2c:	91 f0       	breq	.+36     	; 0x3d52 <_Z15string_to_int_pPKhPhS1_h+0x1f8>
    3d2e:	88 f0       	brcs	.+34     	; 0x3d52 <_Z15string_to_int_pPKhPhS1_h+0x1f8>
	{
		*errno = ER_ERROR;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	ab 81       	ldd	r26, Y+3	; 0x03
    3d34:	bc 81       	ldd	r27, Y+4	; 0x04
    3d36:	8c 93       	st	X, r24
		return 0;
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	70 e0       	ldi	r23, 0x00	; 0
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	23 c0       	rjmp	.+70     	; 0x3d88 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	{
		(*pend)++;
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    3d42:	eb 81       	ldd	r30, Y+3	; 0x03
    3d44:	fc 81       	ldd	r31, Y+4	; 0x04
    3d46:	10 82       	st	Z, r1
	return num;
    3d48:	6c 2d       	mov	r22, r12
    3d4a:	7d 2d       	mov	r23, r13
    3d4c:	8e 2d       	mov	r24, r14
    3d4e:	9f 2d       	mov	r25, r15
    3d50:	1b c0       	rjmp	.+54     	; 0x3d88 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3d52:	4f 2d       	mov	r20, r15
    3d54:	50 2f       	mov	r21, r16
    3d56:	6a 2d       	mov	r22, r10
    3d58:	7b 2d       	mov	r23, r11
	
	//Convert to a negative number, if necessary.
	if(is_neg)
	{
		num *= -1;
    3d5a:	cc 24       	eor	r12, r12
    3d5c:	dd 24       	eor	r13, r13
    3d5e:	76 01       	movw	r14, r12
    3d60:	c4 1a       	sub	r12, r20
    3d62:	d5 0a       	sbc	r13, r21
    3d64:	e6 0a       	sbc	r14, r22
    3d66:	f7 0a       	sbc	r15, r23
	
	//Update the pointer to the end of the number.
	*pend = index + 1;
	if(is_neg)
	{
		(*pend)++;
    3d68:	83 e0       	ldi	r24, 0x03	; 3
    3d6a:	88 0d       	add	r24, r8
    3d6c:	ae 81       	ldd	r26, Y+6	; 0x06
    3d6e:	bf 81       	ldd	r27, Y+7	; 0x07
    3d70:	8c 93       	st	X, r24
    3d72:	e7 cf       	rjmp	.-50     	; 0x3d42 <_Z15string_to_int_pPKhPhS1_h+0x1e8>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3d74:	cf 2c       	mov	r12, r15
    3d76:	d0 2e       	mov	r13, r16
    3d78:	ea 2c       	mov	r14, r10
    3d7a:	fb 2c       	mov	r15, r11
	{
		num *= -1;
	}
	
	//Update the pointer to the end of the number.
	*pend = index + 1;
    3d7c:	83 94       	inc	r8
    3d7e:	83 94       	inc	r8
    3d80:	ee 81       	ldd	r30, Y+6	; 0x06
    3d82:	ff 81       	ldd	r31, Y+7	; 0x07
    3d84:	80 82       	st	Z, r8
    3d86:	dd cf       	rjmp	.-70     	; 0x3d42 <_Z15string_to_int_pPKhPhS1_h+0x1e8>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
	return num;
}
    3d88:	29 96       	adiw	r28, 0x09	; 9
    3d8a:	0f b6       	in	r0, 0x3f	; 63
    3d8c:	f8 94       	cli
    3d8e:	de bf       	out	0x3e, r29	; 62
    3d90:	0f be       	out	0x3f, r0	; 63
    3d92:	cd bf       	out	0x3d, r28	; 61
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	1f 91       	pop	r17
    3d9a:	0f 91       	pop	r16
    3d9c:	ff 90       	pop	r15
    3d9e:	ef 90       	pop	r14
    3da0:	df 90       	pop	r13
    3da2:	cf 90       	pop	r12
    3da4:	bf 90       	pop	r11
    3da6:	af 90       	pop	r10
    3da8:	9f 90       	pop	r9
    3daa:	8f 90       	pop	r8
    3dac:	7f 90       	pop	r7
    3dae:	6f 90       	pop	r6
    3db0:	5f 90       	pop	r5
    3db2:	4f 90       	pop	r4
    3db4:	3f 90       	pop	r3
    3db6:	2f 90       	pop	r2
    3db8:	08 95       	ret

00003dba <_Z8load_u32PKh>:
	return temp16;
}

//Takes a unit8_t array and takes the first 4 values and loads them into a uint32_t.
uint32_t load_u32(const uint8_t *array)
{
    3dba:	0f 93       	push	r16
    3dbc:	1f 93       	push	r17
    3dbe:	fc 01       	movw	r30, r24
	uint32_t temp32_1, temp32_2, temp32_3;
	
	temp32_1 = array[0];
    3dc0:	00 81       	ld	r16, Z
    3dc2:	10 e0       	ldi	r17, 0x00	; 0
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
	temp32_1 <<= 24;
	temp32_2 = array[1];
    3dc8:	41 81       	ldd	r20, Z+1	; 0x01
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	70 e0       	ldi	r23, 0x00	; 0
	temp32_2 <<= 16;
	temp32_3 = array[2];
    3dd0:	82 81       	ldd	r24, Z+2	; 0x02
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	a0 e0       	ldi	r26, 0x00	; 0
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
uint32_t load_u32(const uint8_t *array)
{
	uint32_t temp32_1, temp32_2, temp32_3;
	
	temp32_1 = array[0];
	temp32_1 <<= 24;
    3dd8:	30 2f       	mov	r19, r16
    3dda:	22 27       	eor	r18, r18
    3ddc:	11 27       	eor	r17, r17
    3dde:	00 27       	eor	r16, r16
	temp32_2 = array[1];
	temp32_2 <<= 16;
    3de0:	ba 01       	movw	r22, r20
    3de2:	55 27       	eor	r21, r21
    3de4:	44 27       	eor	r20, r20
	temp32_3 = array[2];
	temp32_3 <<= 8;
	return temp32_1 + temp32_2 + temp32_3 + array[3];
    3de6:	40 0f       	add	r20, r16
    3de8:	51 1f       	adc	r21, r17
    3dea:	62 1f       	adc	r22, r18
    3dec:	73 1f       	adc	r23, r19
    3dee:	23 81       	ldd	r18, Z+3	; 0x03
    3df0:	42 0f       	add	r20, r18
    3df2:	51 1d       	adc	r21, r1
    3df4:	61 1d       	adc	r22, r1
    3df6:	71 1d       	adc	r23, r1
	temp32_1 = array[0];
	temp32_1 <<= 24;
	temp32_2 = array[1];
	temp32_2 <<= 16;
	temp32_3 = array[2];
	temp32_3 <<= 8;
    3df8:	ba 2f       	mov	r27, r26
    3dfa:	a9 2f       	mov	r26, r25
    3dfc:	98 2f       	mov	r25, r24
    3dfe:	88 27       	eor	r24, r24
	return temp32_1 + temp32_2 + temp32_3 + array[3];
    3e00:	8a 01       	movw	r16, r20
    3e02:	9b 01       	movw	r18, r22
    3e04:	08 0f       	add	r16, r24
    3e06:	19 1f       	adc	r17, r25
    3e08:	2a 1f       	adc	r18, r26
    3e0a:	3b 1f       	adc	r19, r27
    3e0c:	c9 01       	movw	r24, r18
    3e0e:	b8 01       	movw	r22, r16
}
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	08 95       	ret

00003e16 <_Z11uart_yes_nob>:
}

//Write a Y or N character out the UART.
void uart_yes_no(bool yes_no)
{
	yes_no ? atmega_uart::tx_byte('Y') : atmega_uart::tx_byte('N');
    3e16:	88 23       	and	r24, r24
    3e18:	21 f0       	breq	.+8      	; 0x3e22 <_Z11uart_yes_nob+0xc>
    3e1a:	89 e5       	ldi	r24, 0x59	; 89
    3e1c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    3e20:	03 c0       	rjmp	.+6      	; 0x3e28 <_Z11uart_yes_nob+0x12>
    3e22:	8e e4       	ldi	r24, 0x4E	; 78
    3e24:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3e28:	8d e0       	ldi	r24, 0x0D	; 13
    3e2a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    3e2e:	08 95       	ret

00003e30 <_Z16uart_min_max_u32mm>:
}

//Write minimum and maximum unsigned range of value out the UART.
void uart_min_max_u32(uint32_t min, uint32_t max)
{
    3e30:	8f 92       	push	r8
    3e32:	9f 92       	push	r9
    3e34:	af 92       	push	r10
    3e36:	bf 92       	push	r11
    3e38:	cf 92       	push	r12
    3e3a:	df 92       	push	r13
    3e3c:	ef 92       	push	r14
    3e3e:	ff 92       	push	r15
    3e40:	4b 01       	movw	r8, r22
    3e42:	5c 01       	movw	r10, r24
    3e44:	69 01       	movw	r12, r18
    3e46:	7a 01       	movw	r14, r20
	atmega_uart::tx_string_p(PSTR(" ("));
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	9c e0       	ldi	r25, 0x0C	; 12
    3e4c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(min);
    3e50:	c5 01       	movw	r24, r10
    3e52:	b4 01       	movw	r22, r8
    3e54:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_string_p(PSTR(" to "));
    3e58:	8c ef       	ldi	r24, 0xFC	; 252
    3e5a:	9b e0       	ldi	r25, 0x0B	; 11
    3e5c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(max);
    3e60:	c7 01       	movw	r24, r14
    3e62:	b6 01       	movw	r22, r12
    3e64:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_string_p(PSTR("): "));
    3e68:	88 ef       	ldi	r24, 0xF8	; 248
    3e6a:	9b e0       	ldi	r25, 0x0B	; 11
    3e6c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
}
    3e70:	ff 90       	pop	r15
    3e72:	ef 90       	pop	r14
    3e74:	df 90       	pop	r13
    3e76:	cf 90       	pop	r12
    3e78:	bf 90       	pop	r11
    3e7a:	af 90       	pop	r10
    3e7c:	9f 90       	pop	r9
    3e7e:	8f 90       	pop	r8
    3e80:	08 95       	ret

00003e82 <_Z16uart_min_max_intii>:

//Write minimum and maximum signed range of value out the UART.
void uart_min_max_int(int min, int max)
{
    3e82:	0f 93       	push	r16
    3e84:	1f 93       	push	r17
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	8c 01       	movw	r16, r24
    3e8c:	eb 01       	movw	r28, r22
	atmega_uart::tx_string_p(PSTR(" ("));
    3e8e:	85 ef       	ldi	r24, 0xF5	; 245
    3e90:	9b e0       	ldi	r25, 0x0B	; 11
    3e92:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(min);
    3e96:	b8 01       	movw	r22, r16
    3e98:	88 27       	eor	r24, r24
    3e9a:	77 fd       	sbrc	r23, 7
    3e9c:	80 95       	com	r24
    3e9e:	98 2f       	mov	r25, r24
    3ea0:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
	atmega_uart::tx_string_p(PSTR(" to "));
    3ea4:	80 ef       	ldi	r24, 0xF0	; 240
    3ea6:	9b e0       	ldi	r25, 0x0B	; 11
    3ea8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(max);
    3eac:	be 01       	movw	r22, r28
    3eae:	88 27       	eor	r24, r24
    3eb0:	77 fd       	sbrc	r23, 7
    3eb2:	80 95       	com	r24
    3eb4:	98 2f       	mov	r25, r24
    3eb6:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
	atmega_uart::tx_string_p(PSTR("): "));
    3eba:	8c ee       	ldi	r24, 0xEC	; 236
    3ebc:	9b e0       	ldi	r25, 0x0B	; 11
    3ebe:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
}
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	08 95       	ret

00003ecc <_Z15uart_true_falseb>:

//Print "true" or "false" out the UART.
void uart_true_false(bool t_f)
{
	t_f ? atmega_uart::tx_string_p(PSTR("true")) : atmega_uart::tx_string_p(PSTR("false"));
    3ecc:	88 23       	and	r24, r24
    3ece:	29 f0       	breq	.+10     	; 0x3eda <_Z15uart_true_falseb+0xe>
    3ed0:	87 ee       	ldi	r24, 0xE7	; 231
    3ed2:	9b e0       	ldi	r25, 0x0B	; 11
    3ed4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    3ed8:	04 c0       	rjmp	.+8      	; 0x3ee2 <_Z15uart_true_falseb+0x16>
    3eda:	81 ee       	ldi	r24, 0xE1	; 225
    3edc:	9b e0       	ldi	r25, 0x0B	; 11
    3ede:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	atmega_uart::tx_byte(';');
    3ee2:	8b e3       	ldi	r24, 0x3B	; 59
    3ee4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3ee8:	8d e0       	ldi	r24, 0x0D	; 13
    3eea:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    3eee:	08 95       	ret

00003ef0 <_Z19uart_print_settingsP8as_class>:
}

/*****************************************************Menu Writing Rountines*************************************************/
//Print device settings.
void uart_print_settings(as_class *as)
{
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	ec 01       	movw	r28, r24
	uint8_t temp;
	uint16_t arb_num;
	bool t_f;
	
	arb_num = atmega_eeprom::read_word_no_cli((uint16_t *)ARB_NUM);
    3efa:	86 e0       	ldi	r24, 0x06	; 6
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN13atmega_eeprom16read_word_no_cliEPj>
    3f02:	8c 01       	movw	r16, r24
	
	atmega_uart::tx_string_p(PSTR("tx_m=\'"));
    3f04:	85 ed       	ldi	r24, 0xD5	; 213
    3f06:	9c e0       	ldi	r25, 0x0C	; 12
    3f08:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	temp = as->get_tx_mode();
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
	if(temp == TX_MODE_ASCII)
    3f12:	81 11       	cpse	r24, r1
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <_Z19uart_print_settingsP8as_class+0x2e>
	{
		atmega_uart::tx_byte('A');
    3f16:	81 e4       	ldi	r24, 0x41	; 65
    3f18:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    3f1c:	09 c0       	rjmp	.+18     	; 0x3f30 <_Z19uart_print_settingsP8as_class+0x40>
	}
	else if(temp == TX_MODE_MATLAB)
    3f1e:	81 30       	cpi	r24, 0x01	; 1
    3f20:	21 f4       	brne	.+8      	; 0x3f2a <_Z19uart_print_settingsP8as_class+0x3a>
	{
		atmega_uart::tx_byte('M');
    3f22:	8d e4       	ldi	r24, 0x4D	; 77
    3f24:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    3f28:	03 c0       	rjmp	.+6      	; 0x3f30 <_Z19uart_print_settingsP8as_class+0x40>
	}
	else
	{
		atmega_uart::tx_byte('B');
    3f2a:	82 e4       	ldi	r24, 0x42	; 66
    3f2c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	}
	atmega_uart::tx_string_p(PSTR("\';\r"));
    3f30:	81 ed       	ldi	r24, 0xD1	; 209
    3f32:	9c e0       	ldi	r25, 0x0C	; 12
    3f34:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	
	atmega_uart::tx_string_p(PSTR("num_e="));
    3f38:	8a ec       	ldi	r24, 0xCA	; 202
    3f3a:	9c e0       	ldi	r25, 0x0C	; 12
    3f3c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	temp = as->get_num_electrodes();
    3f40:	ce 01       	movw	r24, r28
    3f42:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN8as_class18get_num_electrodesEv>
	
	(temp == ELEC_2) ? atmega_uart::tx_byte('2') : atmega_uart::tx_byte('3');
    3f46:	81 11       	cpse	r24, r1
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <_Z19uart_print_settingsP8as_class+0x62>
    3f4a:	82 e3       	ldi	r24, 0x32	; 50
    3f4c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    3f50:	03 c0       	rjmp	.+6      	; 0x3f58 <_Z19uart_print_settingsP8as_class+0x68>
    3f52:	83 e3       	ldi	r24, 0x33	; 51
    3f54:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte(';');
    3f58:	8b e3       	ldi	r24, 0x3B	; 59
    3f5a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3f5e:	8d e0       	ldi	r24, 0x0D	; 13
    3f60:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("adc_r="));
    3f64:	83 ec       	ldi	r24, 0xC3	; 195
    3f66:	9c e0       	ldi	r25, 0x0C	; 12
    3f68:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_adc_rate());
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN8as_class12get_adc_rateEv>
    3f72:	bc 01       	movw	r22, r24
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    3f7c:	8b e3       	ldi	r24, 0x3B	; 59
    3f7e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3f82:	8d e0       	ldi	r24, 0x0D	; 13
    3f84:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("tia_rt="));
    3f88:	8b eb       	ldi	r24, 0xBB	; 187
    3f8a:	9c e0       	ldi	r25, 0x0C	; 12
    3f8c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_tia_res_tap());
    3f90:	ce 01       	movw	r24, r28
    3f92:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN8as_class15get_tia_res_tapEv>
    3f96:	bc 01       	movw	r22, r24
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    3fa0:	8b e3       	ldi	r24, 0x3B	; 59
    3fa2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3fa6:	8d e0       	ldi	r24, 0x0D	; 13
    3fa8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("tia_cm="));
    3fac:	83 eb       	ldi	r24, 0xB3	; 179
    3fae:	9c e0       	ldi	r25, 0x0C	; 12
    3fb0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_tia_cap_mask());
    3fb4:	ce 01       	movw	r24, r28
    3fb6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN8as_class16get_tia_cap_maskEv>
    3fba:	68 2f       	mov	r22, r24
    3fbc:	70 e0       	ldi	r23, 0x00	; 0
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    3fc6:	8b e3       	ldi	r24, 0x3B	; 59
    3fc8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3fcc:	8d e0       	ldi	r24, 0x0D	; 13
    3fce:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_e="));
    3fd2:	8c ea       	ldi	r24, 0xAC	; 172
    3fd4:	9c e0       	ldi	r25, 0x0C	; 12
    3fd6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_dep_enable();
    3fda:	ce 01       	movw	r24, r28
    3fdc:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN8as_class14get_dep_enableEv>
	uart_true_false(t_f);
    3fe0:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("dep_t="));
    3fe4:	85 ea       	ldi	r24, 0xA5	; 165
    3fe6:	9c e0       	ldi	r25, 0x0C	; 12
    3fe8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_dep_time());
    3fec:	ce 01       	movw	r24, r28
    3fee:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN8as_class12get_dep_timeEv>
    3ff2:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    3ff6:	8b e3       	ldi	r24, 0x3B	; 59
    3ff8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3ffc:	8d e0       	ldi	r24, 0x0D	; 13
    3ffe:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_v="));
    4002:	8e e9       	ldi	r24, 0x9E	; 158
    4004:	9c e0       	ldi	r25, 0x0C	; 12
    4006:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_dep_volt());
    400a:	ce 01       	movw	r24, r28
    400c:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN8as_class12get_dep_voltEv>
    4010:	bc 01       	movw	r22, r24
    4012:	88 27       	eor	r24, r24
    4014:	77 fd       	sbrc	r23, 7
    4016:	80 95       	com	r24
    4018:	98 2f       	mov	r25, r24
    401a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    401e:	8b e3       	ldi	r24, 0x3B	; 59
    4020:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4024:	8d e0       	ldi	r24, 0x0D	; 13
    4026:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("quiet_t="));
    402a:	85 e9       	ldi	r24, 0x95	; 149
    402c:	9c e0       	ldi	r25, 0x0C	; 12
    402e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_quiet_time());
    4032:	ce 01       	movw	r24, r28
    4034:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN8as_class14get_quiet_timeEv>
    4038:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    403c:	8b e3       	ldi	r24, 0x3B	; 59
    403e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4042:	8d e0       	ldi	r24, 0x0D	; 13
    4044:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_r="));
    4048:	8e e8       	ldi	r24, 0x8E	; 142
    404a:	9c e0       	ldi	r25, 0x0C	; 12
    404c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_dep_rec();
    4050:	ce 01       	movw	r24, r28
    4052:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
	uart_true_false(t_f);
    4056:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("sweep_vs="));
    405a:	84 e8       	ldi	r24, 0x84	; 132
    405c:	9c e0       	ldi	r25, 0x0C	; 12
    405e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_sweep_volt_start());
    4062:	ce 01       	movw	r24, r28
    4064:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN8as_class20get_sweep_volt_startEv>
    4068:	bc 01       	movw	r22, r24
    406a:	88 27       	eor	r24, r24
    406c:	77 fd       	sbrc	r23, 7
    406e:	80 95       	com	r24
    4070:	98 2f       	mov	r25, r24
    4072:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    4076:	8b e3       	ldi	r24, 0x3B	; 59
    4078:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    407c:	8d e0       	ldi	r24, 0x0D	; 13
    407e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_ve="));
    4082:	8a e7       	ldi	r24, 0x7A	; 122
    4084:	9c e0       	ldi	r25, 0x0C	; 12
    4086:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_sweep_volt_end());
    408a:	ce 01       	movw	r24, r28
    408c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN8as_class18get_sweep_volt_endEv>
    4090:	bc 01       	movw	r22, r24
    4092:	88 27       	eor	r24, r24
    4094:	77 fd       	sbrc	r23, 7
    4096:	80 95       	com	r24
    4098:	98 2f       	mov	r25, r24
    409a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    409e:	8b e3       	ldi	r24, 0x3B	; 59
    40a0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    40a4:	8d e0       	ldi	r24, 0x0D	; 13
    40a6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_r="));
    40aa:	81 e7       	ldi	r24, 0x71	; 113
    40ac:	9c e0       	ldi	r25, 0x0C	; 12
    40ae:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_sweep_rate());
    40b2:	ce 01       	movw	r24, r28
    40b4:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN8as_class14get_sweep_rateEv>
    40b8:	bc 01       	movw	r22, r24
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    40c2:	8b e3       	ldi	r24, 0x3B	; 59
    40c4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    40c8:	8d e0       	ldi	r24, 0x0D	; 13
    40ca:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_c="));
    40ce:	88 e6       	ldi	r24, 0x68	; 104
    40d0:	9c e0       	ldi	r25, 0x0C	; 12
    40d2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_sweep_cyclic();
    40d6:	ce 01       	movw	r24, r28
    40d8:	0e 94 95 13 	call	0x272a	; 0x272a <_ZN8as_class16get_sweep_cyclicEv>
	uart_true_false(t_f);
    40dc:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("sweep_cs="));
    40e0:	8e e5       	ldi	r24, 0x5E	; 94
    40e2:	9c e0       	ldi	r25, 0x0C	; 12
    40e4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_sweep_cycles());
    40e8:	ce 01       	movw	r24, r28
    40ea:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN8as_class16get_sweep_cyclesEv>
    40ee:	68 2f       	mov	r22, r24
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    40fa:	8b e3       	ldi	r24, 0x3B	; 59
    40fc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4100:	8d e0       	ldi	r24, 0x0D	; 13
    4102:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_vs="));
    4106:	83 e5       	ldi	r24, 0x53	; 83
    4108:	9c e0       	ldi	r25, 0x0C	; 12
    410a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_square_volt_start());
    410e:	ce 01       	movw	r24, r28
    4110:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    4114:	bc 01       	movw	r22, r24
    4116:	88 27       	eor	r24, r24
    4118:	77 fd       	sbrc	r23, 7
    411a:	80 95       	com	r24
    411c:	98 2f       	mov	r25, r24
    411e:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    4122:	8b e3       	ldi	r24, 0x3B	; 59
    4124:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4128:	8d e0       	ldi	r24, 0x0D	; 13
    412a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_ve="));
    412e:	88 e4       	ldi	r24, 0x48	; 72
    4130:	9c e0       	ldi	r25, 0x0C	; 12
    4132:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_square_volt_end());
    4136:	ce 01       	movw	r24, r28
    4138:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    413c:	bc 01       	movw	r22, r24
    413e:	88 27       	eor	r24, r24
    4140:	77 fd       	sbrc	r23, 7
    4142:	80 95       	com	r24
    4144:	98 2f       	mov	r25, r24
    4146:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    414a:	8b e3       	ldi	r24, 0x3B	; 59
    414c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4150:	8d e0       	ldi	r24, 0x0D	; 13
    4152:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_a="));
    4156:	8e e3       	ldi	r24, 0x3E	; 62
    4158:	9c e0       	ldi	r25, 0x0C	; 12
    415a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_square_amp());
    415e:	ce 01       	movw	r24, r28
    4160:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    4164:	bc 01       	movw	r22, r24
    4166:	80 e0       	ldi	r24, 0x00	; 0
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    416e:	8b e3       	ldi	r24, 0x3B	; 59
    4170:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4174:	8d e0       	ldi	r24, 0x0D	; 13
    4176:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_i="));
    417a:	84 e3       	ldi	r24, 0x34	; 52
    417c:	9c e0       	ldi	r25, 0x0C	; 12
    417e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_square_inc());
    4182:	ce 01       	movw	r24, r28
    4184:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN8as_class14get_square_incEv>
    4188:	bc 01       	movw	r22, r24
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4192:	8b e3       	ldi	r24, 0x3B	; 59
    4194:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4198:	8d e0       	ldi	r24, 0x0D	; 13
    419a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_p="));
    419e:	8a e2       	ldi	r24, 0x2A	; 42
    41a0:	9c e0       	ldi	r25, 0x0C	; 12
    41a2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_square_period());
    41a6:	ce 01       	movw	r24, r28
    41a8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN8as_class17get_square_periodEv>
    41ac:	bc 01       	movw	r22, r24
    41ae:	80 e0       	ldi	r24, 0x00	; 0
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    41b6:	8b e3       	ldi	r24, 0x3B	; 59
    41b8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    41bc:	8d e0       	ldi	r24, 0x0D	; 13
    41be:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("arb_n="));
    41c2:	83 e2       	ldi	r24, 0x23	; 35
    41c4:	9c e0       	ldi	r25, 0x0C	; 12
    41c6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(arb_num);
    41ca:	b8 01       	movw	r22, r16
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    41d4:	8b e3       	ldi	r24, 0x3B	; 59
    41d6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    41da:	8d e0       	ldi	r24, 0x0D	; 13
    41dc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("arb_c="));
    41e0:	8c e1       	ldi	r24, 0x1C	; 28
    41e2:	9c e0       	ldi	r25, 0x0C	; 12
    41e4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_arb_cyclic();
    41e8:	ce 01       	movw	r24, r28
    41ea:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN8as_class14get_arb_cyclicEv>
    41ee:	91 e0       	ldi	r25, 0x01	; 1
    41f0:	81 11       	cpse	r24, r1
    41f2:	01 c0       	rjmp	.+2      	; 0x41f6 <_Z19uart_print_settingsP8as_class+0x306>
    41f4:	90 e0       	ldi	r25, 0x00	; 0
	uart_true_false(t_f);
    41f6:	89 2f       	mov	r24, r25
    41f8:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("arb_cs="));
    41fc:	84 e1       	ldi	r24, 0x14	; 20
    41fe:	9c e0       	ldi	r25, 0x0C	; 12
    4200:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_arb_cycles());
    4204:	ce 01       	movw	r24, r28
    4206:	0e 94 16 14 	call	0x282c	; 0x282c <_ZN8as_class14get_arb_cyclesEv>
    420a:	68 2f       	mov	r22, r24
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4216:	8b e3       	ldi	r24, 0x3B	; 59
    4218:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    421c:	8d e0       	ldi	r24, 0x0D	; 13
    421e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("filt_e="));
    4222:	8c e0       	ldi	r24, 0x0C	; 12
    4224:	9c e0       	ldi	r25, 0x0C	; 12
    4226:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_soft_filt();
    422a:	ce 01       	movw	r24, r28
    422c:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN8as_class13get_soft_filtEv>
	uart_true_false(t_f);
    4230:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("filt_s="));
    4234:	84 e0       	ldi	r24, 0x04	; 4
    4236:	9c e0       	ldi	r25, 0x0C	; 12
    4238:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_soft_sel());
    423c:	ce 01       	movw	r24, r28
    423e:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZN8as_class12get_soft_selEv>
    4242:	68 2f       	mov	r22, r24
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    424e:	8b e3       	ldi	r24, 0x3B	; 59
    4250:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4254:	8d e0       	ldi	r24, 0x0D	; 13
    4256:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    425a:	8d e0       	ldi	r24, 0x0D	; 13
    425c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
}
    4260:	df 91       	pop	r29
    4262:	cf 91       	pop	r28
    4264:	1f 91       	pop	r17
    4266:	0f 91       	pop	r16
    4268:	08 95       	ret

0000426a <_Z17uart_print_spacesv>:
	atmega_uart::tx_byte('\r');
}

//Print 8 spaces out the UART for indenting.
void uart_print_spaces()
{
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	c8 e0       	ldi	r28, 0x08	; 8
    4270:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		atmega_uart::tx_byte(' ');
    4272:	80 e2       	ldi	r24, 0x20	; 32
    4274:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4278:	21 97       	sbiw	r28, 0x01	; 1
}

//Print 8 spaces out the UART for indenting.
void uart_print_spaces()
{
	for(int i = 0; i < 8; i++)
    427a:	20 97       	sbiw	r28, 0x00	; 0
    427c:	d1 f7       	brne	.-12     	; 0x4272 <_Z17uart_print_spacesv+0x8>
	{
		atmega_uart::tx_byte(' ');
	}
}
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	08 95       	ret

00004284 <_Z8uart_errv>:

//Write "ERR" in the terminal window.
void uart_err()
{
	atmega_uart::tx_string_p(PSTR("ERR\r"));
    4284:	8c ed       	ldi	r24, 0xDC	; 220
    4286:	9b e0       	ldi	r25, 0x0B	; 11
    4288:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    428c:	08 95       	ret

0000428e <_Z7uart_okv>:
}

//Write "OK" in the terminal window.
void uart_ok()
{
	atmega_uart::tx_string_p(PSTR("OK\r"));
    428e:	88 ed       	ldi	r24, 0xD8	; 216
    4290:	9b e0       	ldi	r25, 0x0B	; 11
    4292:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    4296:	08 95       	ret

00004298 <_Z10arb_appendPKh>:
	return;
}

//Append arbitrary waveform data to end of saved list.
uint8_t arb_append(const uint8_t *rx_array)
{
    4298:	2f 92       	push	r2
    429a:	3f 92       	push	r3
    429c:	4f 92       	push	r4
    429e:	5f 92       	push	r5
    42a0:	6f 92       	push	r6
    42a2:	7f 92       	push	r7
    42a4:	8f 92       	push	r8
    42a6:	9f 92       	push	r9
    42a8:	af 92       	push	r10
    42aa:	bf 92       	push	r11
    42ac:	cf 92       	push	r12
    42ae:	df 92       	push	r13
    42b0:	ef 92       	push	r14
    42b2:	ff 92       	push	r15
    42b4:	0f 93       	push	r16
    42b6:	1f 93       	push	r17
    42b8:	cf 93       	push	r28
    42ba:	df 93       	push	r29
    42bc:	00 d0       	rcall	.+0      	; 0x42be <_Z10arb_appendPKh+0x26>
    42be:	1f 92       	push	r1
    42c0:	cd b7       	in	r28, 0x3d	; 61
    42c2:	de b7       	in	r29, 0x3e	; 62
    42c4:	8c 01       	movw	r16, r24
	int16_t start_v, end_v;
	uint16_t rate, entries;
	uint8_t errno, pend1, pend2;
	
	//Get number of entries already in list.
	entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    42c6:	86 e0       	ldi	r24, 0x06	; 6
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    42ce:	1c 01       	movw	r2, r24
	
	//Error out if memory is already full.
	if(entries >= ARB_ENTRIES_MAX)
    42d0:	86 39       	cpi	r24, 0x96	; 150
    42d2:	91 05       	cpc	r25, r1
    42d4:	30 f0       	brcs	.+12     	; 0x42e2 <_Z10arb_appendPKh+0x4a>
	{
		atmega_uart::tx_string_p(PSTR("Memory Full\r"));
    42d6:	8c ea       	ldi	r24, 0xAC	; 172
    42d8:	94 e0       	ldi	r25, 0x04	; 4
    42da:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return ER_ERROR;
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	74 c0       	rjmp	.+232    	; 0x43ca <_Z10arb_appendPKh+0x132>
	}
	
	//Attempt to convert first user input to number.
	start_v = string_to_int_p(rx_array, &errno, &pend1, ' ');
    42e2:	20 e2       	ldi	r18, 0x20	; 32
    42e4:	ae 01       	movw	r20, r28
    42e6:	4e 5f       	subi	r20, 0xFE	; 254
    42e8:	5f 4f       	sbci	r21, 0xFF	; 255
    42ea:	be 01       	movw	r22, r28
    42ec:	6d 5f       	subi	r22, 0xFD	; 253
    42ee:	7f 4f       	sbci	r23, 0xFF	; 255
    42f0:	c8 01       	movw	r24, r16
    42f2:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z15string_to_int_pPKhPhS1_h>
    42f6:	6b 01       	movw	r12, r22
    42f8:	7c 01       	movw	r14, r24
	
	if(errno)
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	81 11       	cpse	r24, r1
    42fe:	5a c0       	rjmp	.+180    	; 0x43b4 <_Z10arb_appendPKh+0x11c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
    4300:	c6 01       	movw	r24, r12
    4302:	8e 58       	subi	r24, 0x8E	; 142
    4304:	99 4f       	sbci	r25, 0xF9	; 249
    4306:	85 3e       	cpi	r24, 0xE5	; 229
    4308:	9c 40       	sbci	r25, 0x0C	; 12
    430a:	08 f0       	brcs	.+2      	; 0x430e <_Z10arb_appendPKh+0x76>
    430c:	55 c0       	rjmp	.+170    	; 0x43b8 <_Z10arb_appendPKh+0x120>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert second user input to number.
	end_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
    430e:	8a 81       	ldd	r24, Y+2	; 0x02
    4310:	20 e2       	ldi	r18, 0x20	; 32
    4312:	ae 01       	movw	r20, r28
    4314:	4f 5f       	subi	r20, 0xFF	; 255
    4316:	5f 4f       	sbci	r21, 0xFF	; 255
    4318:	be 01       	movw	r22, r28
    431a:	6d 5f       	subi	r22, 0xFD	; 253
    431c:	7f 4f       	sbci	r23, 0xFF	; 255
    431e:	f8 01       	movw	r30, r16
    4320:	e8 0f       	add	r30, r24
    4322:	f1 1d       	adc	r31, r1
    4324:	cf 01       	movw	r24, r30
    4326:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z15string_to_int_pPKhPhS1_h>
    432a:	4b 01       	movw	r8, r22
    432c:	5c 01       	movw	r10, r24
	
	if(errno)
    432e:	8b 81       	ldd	r24, Y+3	; 0x03
    4330:	81 11       	cpse	r24, r1
    4332:	44 c0       	rjmp	.+136    	; 0x43bc <_Z10arb_appendPKh+0x124>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
    4334:	c4 01       	movw	r24, r8
    4336:	8e 58       	subi	r24, 0x8E	; 142
    4338:	99 4f       	sbci	r25, 0xF9	; 249
    433a:	85 3e       	cpi	r24, 0xE5	; 229
    433c:	9c 40       	sbci	r25, 0x0C	; 12
    433e:	08 f0       	brcs	.+2      	; 0x4342 <_Z10arb_appendPKh+0xaa>
    4340:	3f c0       	rjmp	.+126    	; 0x43c0 <_Z10arb_appendPKh+0x128>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert third user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend2, '\r');
    4342:	29 81       	ldd	r18, Y+1	; 0x01
    4344:	8a 81       	ldd	r24, Y+2	; 0x02
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	82 0f       	add	r24, r18
    434a:	91 1d       	adc	r25, r1
    434c:	2d e0       	ldi	r18, 0x0D	; 13
    434e:	ae 01       	movw	r20, r28
    4350:	4f 5f       	subi	r20, 0xFF	; 255
    4352:	5f 4f       	sbci	r21, 0xFF	; 255
    4354:	be 01       	movw	r22, r28
    4356:	6d 5f       	subi	r22, 0xFD	; 253
    4358:	7f 4f       	sbci	r23, 0xFF	; 255
    435a:	80 0f       	add	r24, r16
    435c:	91 1f       	adc	r25, r17
    435e:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z15string_to_int_pPKhPhS1_h>
    4362:	2b 01       	movw	r4, r22
    4364:	3c 01       	movw	r6, r24
	
	if(errno)
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
    4368:	81 11       	cpse	r24, r1
    436a:	2c c0       	rjmp	.+88     	; 0x43c4 <_Z10arb_appendPKh+0x12c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
    436c:	c2 01       	movw	r24, r4
    436e:	01 97       	sbiw	r24, 0x01	; 1
    4370:	80 3d       	cpi	r24, 0xD0	; 208
    4372:	97 40       	sbci	r25, 0x07	; 7
    4374:	48 f5       	brcc	.+82     	; 0x43c8 <_Z10arb_appendPKh+0x130>
	{
		return ER_ERROR;
	}
	
	//Save values in the EEPROM.
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * entries), start_v);
    4376:	81 01       	movw	r16, r2
    4378:	00 0f       	add	r16, r16
    437a:	11 1f       	adc	r17, r17
    437c:	02 0d       	add	r16, r2
    437e:	13 1d       	adc	r17, r3
    4380:	00 0f       	add	r16, r16
    4382:	11 1f       	adc	r17, r17
    4384:	b6 01       	movw	r22, r12
    4386:	c8 01       	movw	r24, r16
    4388:	08 96       	adiw	r24, 0x08	; 8
    438a:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * entries), end_v);
    438e:	b4 01       	movw	r22, r8
    4390:	c8 01       	movw	r24, r16
    4392:	0a 96       	adiw	r24, 0x0a	; 10
    4394:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * entries), rate);
    4398:	b2 01       	movw	r22, r4
    439a:	c8 01       	movw	r24, r16
    439c:	0c 96       	adiw	r24, 0x0c	; 12
    439e:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
	
	//Update number of entries stored.
	atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries + 1);
    43a2:	b1 01       	movw	r22, r2
    43a4:	6f 5f       	subi	r22, 0xFF	; 255
    43a6:	7f 4f       	sbci	r23, 0xFF	; 255
    43a8:	86 e0       	ldi	r24, 0x06	; 6
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
	
	return ER_NO_ERROR;
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	0b c0       	rjmp	.+22     	; 0x43ca <_Z10arb_appendPKh+0x132>
	//Attempt to convert first user input to number.
	start_v = string_to_int_p(rx_array, &errno, &pend1, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    43b4:	81 e0       	ldi	r24, 0x01	; 1
    43b6:	09 c0       	rjmp	.+18     	; 0x43ca <_Z10arb_appendPKh+0x132>
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	07 c0       	rjmp	.+14     	; 0x43ca <_Z10arb_appendPKh+0x132>
	//Attempt to convert second user input to number.
	end_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	05 c0       	rjmp	.+10     	; 0x43ca <_Z10arb_appendPKh+0x132>
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	03 c0       	rjmp	.+6      	; 0x43ca <_Z10arb_appendPKh+0x132>
	//Attempt to convert third user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend2, '\r');
	
	if(errno)
	{
		return ER_ERROR;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	01 c0       	rjmp	.+2      	; 0x43ca <_Z10arb_appendPKh+0x132>
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
	{
		return ER_ERROR;
    43c8:	81 e0       	ldi	r24, 0x01	; 1
	
	//Update number of entries stored.
	atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries + 1);
	
	return ER_NO_ERROR;
}
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	df 91       	pop	r29
    43d2:	cf 91       	pop	r28
    43d4:	1f 91       	pop	r17
    43d6:	0f 91       	pop	r16
    43d8:	ff 90       	pop	r15
    43da:	ef 90       	pop	r14
    43dc:	df 90       	pop	r13
    43de:	cf 90       	pop	r12
    43e0:	bf 90       	pop	r11
    43e2:	af 90       	pop	r10
    43e4:	9f 90       	pop	r9
    43e6:	8f 90       	pop	r8
    43e8:	7f 90       	pop	r7
    43ea:	6f 90       	pop	r6
    43ec:	5f 90       	pop	r5
    43ee:	4f 90       	pop	r4
    43f0:	3f 90       	pop	r3
    43f2:	2f 90       	pop	r2
    43f4:	08 95       	ret

000043f6 <_Z11arb_replacePKh>:

//Replace arbitrary waveform data at specified location.
uint8_t arb_replace(const uint8_t *rx_array)
{
    43f6:	4f 92       	push	r4
    43f8:	5f 92       	push	r5
    43fa:	6f 92       	push	r6
    43fc:	7f 92       	push	r7
    43fe:	8f 92       	push	r8
    4400:	9f 92       	push	r9
    4402:	af 92       	push	r10
    4404:	bf 92       	push	r11
    4406:	cf 92       	push	r12
    4408:	df 92       	push	r13
    440a:	ef 92       	push	r14
    440c:	ff 92       	push	r15
    440e:	0f 93       	push	r16
    4410:	1f 93       	push	r17
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    441a:	28 97       	sbiw	r28, 0x08	; 8
    441c:	0f b6       	in	r0, 0x3f	; 63
    441e:	f8 94       	cli
    4420:	de bf       	out	0x3e, r29	; 62
    4422:	0f be       	out	0x3f, r0	; 63
    4424:	cd bf       	out	0x3d, r28	; 61
    4426:	8c 01       	movw	r16, r24
	int16_t start_v, end_v;
	uint16_t ent, rate, entries;
	uint8_t errno, pend1, pend2, pend3;
	
	//Get number of entries already in list.
	entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    4428:	86 e0       	ldi	r24, 0x06	; 6
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    4430:	5c 01       	movw	r10, r24
	
	//Attempt to convert first user input to number.
	ent = string_to_int_p(rx_array, &errno, &pend1, ' ');
    4432:	20 e2       	ldi	r18, 0x20	; 32
    4434:	ae 01       	movw	r20, r28
    4436:	4d 5f       	subi	r20, 0xFD	; 253
    4438:	5f 4f       	sbci	r21, 0xFF	; 255
    443a:	be 01       	movw	r22, r28
    443c:	6c 5f       	subi	r22, 0xFC	; 252
    443e:	7f 4f       	sbci	r23, 0xFF	; 255
    4440:	c8 01       	movw	r24, r16
    4442:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z15string_to_int_pPKhPhS1_h>
    4446:	6b 01       	movw	r12, r22
    4448:	7c 01       	movw	r14, r24
	
	if(errno)
    444a:	8c 81       	ldd	r24, Y+4	; 0x04
    444c:	81 11       	cpse	r24, r1
    444e:	79 c0       	rjmp	.+242    	; 0x4542 <_Z11arb_replacePKh+0x14c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(ent > entries)
    4450:	ac 14       	cp	r10, r12
    4452:	bd 04       	cpc	r11, r13
    4454:	30 f4       	brcc	.+12     	; 0x4462 <_Z11arb_replacePKh+0x6c>
	{
		atmega_uart::tx_string_p(PSTR("Entry Out of Range\r"));
    4456:	88 e9       	ldi	r24, 0x98	; 152
    4458:	94 e0       	ldi	r25, 0x04	; 4
    445a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return ER_ERROR;
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	7d c0       	rjmp	.+250    	; 0x455c <_Z11arb_replacePKh+0x166>
	}
	
	//Attempt to convert second user input to number.
	start_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
    4462:	8b 81       	ldd	r24, Y+3	; 0x03
    4464:	20 e2       	ldi	r18, 0x20	; 32
    4466:	ae 01       	movw	r20, r28
    4468:	4e 5f       	subi	r20, 0xFE	; 254
    446a:	5f 4f       	sbci	r21, 0xFF	; 255
    446c:	be 01       	movw	r22, r28
    446e:	6c 5f       	subi	r22, 0xFC	; 252
    4470:	7f 4f       	sbci	r23, 0xFF	; 255
    4472:	f8 01       	movw	r30, r16
    4474:	e8 0f       	add	r30, r24
    4476:	f1 1d       	adc	r31, r1
    4478:	cf 01       	movw	r24, r30
    447a:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z15string_to_int_pPKhPhS1_h>
    447e:	4b 01       	movw	r8, r22
    4480:	5c 01       	movw	r10, r24
	
	if(errno)
    4482:	8c 81       	ldd	r24, Y+4	; 0x04
    4484:	81 11       	cpse	r24, r1
    4486:	5f c0       	rjmp	.+190    	; 0x4546 <_Z11arb_replacePKh+0x150>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
    4488:	c4 01       	movw	r24, r8
    448a:	8e 58       	subi	r24, 0x8E	; 142
    448c:	99 4f       	sbci	r25, 0xF9	; 249
    448e:	85 3e       	cpi	r24, 0xE5	; 229
    4490:	9c 40       	sbci	r25, 0x0C	; 12
    4492:	08 f0       	brcs	.+2      	; 0x4496 <_Z11arb_replacePKh+0xa0>
    4494:	5a c0       	rjmp	.+180    	; 0x454a <_Z11arb_replacePKh+0x154>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert third user input to number.
	end_v = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend3, ' ');
    4496:	2a 81       	ldd	r18, Y+2	; 0x02
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	82 0f       	add	r24, r18
    449e:	91 1d       	adc	r25, r1
    44a0:	20 e2       	ldi	r18, 0x20	; 32
    44a2:	ae 01       	movw	r20, r28
    44a4:	4f 5f       	subi	r20, 0xFF	; 255
    44a6:	5f 4f       	sbci	r21, 0xFF	; 255
    44a8:	be 01       	movw	r22, r28
    44aa:	6c 5f       	subi	r22, 0xFC	; 252
    44ac:	7f 4f       	sbci	r23, 0xFF	; 255
    44ae:	80 0f       	add	r24, r16
    44b0:	91 1f       	adc	r25, r17
    44b2:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z15string_to_int_pPKhPhS1_h>
    44b6:	2b 01       	movw	r4, r22
    44b8:	3c 01       	movw	r6, r24
	
	if(errno)
    44ba:	8c 81       	ldd	r24, Y+4	; 0x04
    44bc:	81 11       	cpse	r24, r1
    44be:	47 c0       	rjmp	.+142    	; 0x454e <_Z11arb_replacePKh+0x158>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
    44c0:	c2 01       	movw	r24, r4
    44c2:	8e 58       	subi	r24, 0x8E	; 142
    44c4:	99 4f       	sbci	r25, 0xF9	; 249
    44c6:	85 3e       	cpi	r24, 0xE5	; 229
    44c8:	9c 40       	sbci	r25, 0x0C	; 12
    44ca:	08 f0       	brcs	.+2      	; 0x44ce <_Z11arb_replacePKh+0xd8>
    44cc:	42 c0       	rjmp	.+132    	; 0x4552 <_Z11arb_replacePKh+0x15c>
		return ER_ERROR;
	}
	
	
	//Attempt to convert fourth user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2 + pend3, &errno, &pend2, '\r');
    44ce:	2a 81       	ldd	r18, Y+2	; 0x02
    44d0:	8b 81       	ldd	r24, Y+3	; 0x03
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	82 0f       	add	r24, r18
    44d6:	91 1d       	adc	r25, r1
    44d8:	29 81       	ldd	r18, Y+1	; 0x01
    44da:	82 0f       	add	r24, r18
    44dc:	91 1d       	adc	r25, r1
    44de:	2d e0       	ldi	r18, 0x0D	; 13
    44e0:	ae 01       	movw	r20, r28
    44e2:	4e 5f       	subi	r20, 0xFE	; 254
    44e4:	5f 4f       	sbci	r21, 0xFF	; 255
    44e6:	be 01       	movw	r22, r28
    44e8:	6c 5f       	subi	r22, 0xFC	; 252
    44ea:	7f 4f       	sbci	r23, 0xFF	; 255
    44ec:	80 0f       	add	r24, r16
    44ee:	91 1f       	adc	r25, r17
    44f0:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z15string_to_int_pPKhPhS1_h>
    44f4:	6d 83       	std	Y+5, r22	; 0x05
    44f6:	7e 83       	std	Y+6, r23	; 0x06
    44f8:	8f 83       	std	Y+7, r24	; 0x07
    44fa:	98 87       	std	Y+8, r25	; 0x08
	
	if(errno)
    44fc:	8c 81       	ldd	r24, Y+4	; 0x04
    44fe:	81 11       	cpse	r24, r1
    4500:	2a c0       	rjmp	.+84     	; 0x4556 <_Z11arb_replacePKh+0x160>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
    4502:	8d 81       	ldd	r24, Y+5	; 0x05
    4504:	9e 81       	ldd	r25, Y+6	; 0x06
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	80 3d       	cpi	r24, 0xD0	; 208
    450a:	97 40       	sbci	r25, 0x07	; 7
    450c:	30 f5       	brcc	.+76     	; 0x455a <_Z11arb_replacePKh+0x164>
	{
		return ER_ERROR;
	}
	
	//Save values in the EEPROM.
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * (ent - 1)), start_v);
    450e:	c6 01       	movw	r24, r12
    4510:	88 0f       	add	r24, r24
    4512:	99 1f       	adc	r25, r25
    4514:	c8 0e       	add	r12, r24
    4516:	d9 1e       	adc	r13, r25
    4518:	86 01       	movw	r16, r12
    451a:	00 0f       	add	r16, r16
    451c:	11 1f       	adc	r17, r17
    451e:	b4 01       	movw	r22, r8
    4520:	c8 01       	movw	r24, r16
    4522:	02 96       	adiw	r24, 0x02	; 2
    4524:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * (ent - 1)), end_v);
    4528:	b2 01       	movw	r22, r4
    452a:	c8 01       	movw	r24, r16
    452c:	04 96       	adiw	r24, 0x04	; 4
    452e:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * (ent - 1)), rate);
    4532:	6d 81       	ldd	r22, Y+5	; 0x05
    4534:	7e 81       	ldd	r23, Y+6	; 0x06
    4536:	c8 01       	movw	r24, r16
    4538:	06 96       	adiw	r24, 0x06	; 6
    453a:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
	
	return ER_NO_ERROR;
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	0d c0       	rjmp	.+26     	; 0x455c <_Z11arb_replacePKh+0x166>
	//Attempt to convert first user input to number.
	ent = string_to_int_p(rx_array, &errno, &pend1, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	0b c0       	rjmp	.+22     	; 0x455c <_Z11arb_replacePKh+0x166>
	//Attempt to convert second user input to number.
	start_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    4546:	81 e0       	ldi	r24, 0x01	; 1
    4548:	09 c0       	rjmp	.+18     	; 0x455c <_Z11arb_replacePKh+0x166>
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	07 c0       	rjmp	.+14     	; 0x455c <_Z11arb_replacePKh+0x166>
	//Attempt to convert third user input to number.
	end_v = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend3, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	05 c0       	rjmp	.+10     	; 0x455c <_Z11arb_replacePKh+0x166>
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	03 c0       	rjmp	.+6      	; 0x455c <_Z11arb_replacePKh+0x166>
	//Attempt to convert fourth user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2 + pend3, &errno, &pend2, '\r');
	
	if(errno)
	{
		return ER_ERROR;
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	01 c0       	rjmp	.+2      	; 0x455c <_Z11arb_replacePKh+0x166>
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
	{
		return ER_ERROR;
    455a:	81 e0       	ldi	r24, 0x01	; 1
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * (ent - 1)), start_v);
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * (ent - 1)), end_v);
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * (ent - 1)), rate);
	
	return ER_NO_ERROR;
}
    455c:	28 96       	adiw	r28, 0x08	; 8
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	f8 94       	cli
    4562:	de bf       	out	0x3e, r29	; 62
    4564:	0f be       	out	0x3f, r0	; 63
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	df 91       	pop	r29
    456a:	cf 91       	pop	r28
    456c:	1f 91       	pop	r17
    456e:	0f 91       	pop	r16
    4570:	ff 90       	pop	r15
    4572:	ef 90       	pop	r14
    4574:	df 90       	pop	r13
    4576:	cf 90       	pop	r12
    4578:	bf 90       	pop	r11
    457a:	af 90       	pop	r10
    457c:	9f 90       	pop	r9
    457e:	8f 90       	pop	r8
    4580:	7f 90       	pop	r7
    4582:	6f 90       	pop	r6
    4584:	5f 90       	pop	r5
    4586:	4f 90       	pop	r4
    4588:	08 95       	ret

0000458a <_Z8set_boolPKhP8as_classMS1_FhbE>:

//Set value in as_class object that is a bool value (ASCII).
uint8_t set_bool(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_tf)(bool))
{
    458a:	cf 92       	push	r12
    458c:	df 92       	push	r13
    458e:	ef 92       	push	r14
    4590:	ff 92       	push	r15
    4592:	0f 93       	push	r16
    4594:	1f 93       	push	r17
    4596:	cf 93       	push	r28
    4598:	df 93       	push	r29
    459a:	8c 01       	movw	r16, r24
    459c:	eb 01       	movw	r28, r22
    459e:	69 01       	movw	r12, r18
    45a0:	7a 01       	movw	r14, r20
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    45a2:	cb 01       	movw	r24, r22
    45a4:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    45a8:	82 30       	cpi	r24, 0x02	; 2
    45aa:	09 f0       	breq	.+2      	; 0x45ae <_Z8set_boolPKhP8as_classMS1_FhbE+0x24>
    45ac:	4f c0       	rjmp	.+158    	; 0x464c <_Z8set_boolPKhP8as_classMS1_FhbE+0xc2>
	{
		if(bin_index == 2)
    45ae:	80 91 79 01 	lds	r24, 0x0179
    45b2:	82 30       	cpi	r24, 0x02	; 2
    45b4:	09 f0       	breq	.+2      	; 0x45b8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x2e>
    45b6:	45 c0       	rjmp	.+138    	; 0x4642 <_Z8set_boolPKhP8as_classMS1_FhbE+0xb8>
		{
			if(arr.bin_rx[1] == 0x00)
    45b8:	80 91 7b 01 	lds	r24, 0x017B
    45bc:	81 11       	cpse	r24, r1
    45be:	1d c0       	rjmp	.+58     	; 0x45fa <_Z8set_boolPKhP8as_classMS1_FhbE+0x70>
			{
				(as->*func_tf)(false);
    45c0:	e0 fe       	sbrs	r14, 0
    45c2:	0e c0       	rjmp	.+28     	; 0x45e0 <_Z8set_boolPKhP8as_classMS1_FhbE+0x56>
    45c4:	f7 01       	movw	r30, r14
    45c6:	f5 95       	asr	r31
    45c8:	e7 95       	ror	r30
    45ca:	ec 0f       	add	r30, r28
    45cc:	fd 1f       	adc	r31, r29
    45ce:	01 90       	ld	r0, Z+
    45d0:	f0 81       	ld	r31, Z
    45d2:	e0 2d       	mov	r30, r0
    45d4:	ec 0d       	add	r30, r12
    45d6:	fd 1d       	adc	r31, r13
    45d8:	01 90       	ld	r0, Z+
    45da:	f0 81       	ld	r31, Z
    45dc:	e0 2d       	mov	r30, r0
    45de:	01 c0       	rjmp	.+2      	; 0x45e2 <_Z8set_boolPKhP8as_classMS1_FhbE+0x58>
    45e0:	f6 01       	movw	r30, r12
    45e2:	c7 01       	movw	r24, r14
    45e4:	95 95       	asr	r25
    45e6:	87 95       	ror	r24
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	8c 0f       	add	r24, r28
    45ec:	9d 1f       	adc	r25, r29
    45ee:	09 95       	icall
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    45f0:	80 e0       	ldi	r24, 0x00	; 0
    45f2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	6f c0       	rjmp	.+222    	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
			{
				(as->*func_tf)(false);
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
				
			}
			else if(arr.bin_rx[1] == 0x01)
    45fa:	81 30       	cpi	r24, 0x01	; 1
    45fc:	e9 f4       	brne	.+58     	; 0x4638 <_Z8set_boolPKhP8as_classMS1_FhbE+0xae>
			{
				(as->*func_tf)(true);
    45fe:	e0 fe       	sbrs	r14, 0
    4600:	0e c0       	rjmp	.+28     	; 0x461e <_Z8set_boolPKhP8as_classMS1_FhbE+0x94>
    4602:	f7 01       	movw	r30, r14
    4604:	f5 95       	asr	r31
    4606:	e7 95       	ror	r30
    4608:	ec 0f       	add	r30, r28
    460a:	fd 1f       	adc	r31, r29
    460c:	01 90       	ld	r0, Z+
    460e:	f0 81       	ld	r31, Z
    4610:	e0 2d       	mov	r30, r0
    4612:	ec 0d       	add	r30, r12
    4614:	fd 1d       	adc	r31, r13
    4616:	01 90       	ld	r0, Z+
    4618:	f0 81       	ld	r31, Z
    461a:	e0 2d       	mov	r30, r0
    461c:	01 c0       	rjmp	.+2      	; 0x4620 <_Z8set_boolPKhP8as_classMS1_FhbE+0x96>
    461e:	f6 01       	movw	r30, r12
    4620:	c7 01       	movw	r24, r14
    4622:	95 95       	asr	r25
    4624:	87 95       	ror	r24
    4626:	61 e0       	ldi	r22, 0x01	; 1
    4628:	8c 0f       	add	r24, r28
    462a:	9d 1f       	adc	r25, r29
    462c:	09 95       	icall
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	50 c0       	rjmp	.+160    	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
				(as->*func_tf)(true);
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
			}
			else
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4638:	83 e0       	ldi	r24, 0x03	; 3
    463a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	4b c0       	rjmp	.+150    	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
			}
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4642:	83 e0       	ldi	r24, 0x03	; 3
    4644:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		}
		return ER_NO_ERROR;
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	46 c0       	rjmp	.+140    	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
	}
	else//ASCII or MatLab mode.
	{
		if(rx_array[0] == 'Y' && rx_array[1] == '\r')
    464c:	f8 01       	movw	r30, r16
    464e:	80 81       	ld	r24, Z
    4650:	89 35       	cpi	r24, 0x59	; 89
    4652:	e9 f4       	brne	.+58     	; 0x468e <_Z8set_boolPKhP8as_classMS1_FhbE+0x104>
    4654:	81 81       	ldd	r24, Z+1	; 0x01
    4656:	8d 30       	cpi	r24, 0x0D	; 13
    4658:	d1 f5       	brne	.+116    	; 0x46ce <_Z8set_boolPKhP8as_classMS1_FhbE+0x144>
		{
			(as->*func_tf)(true);
    465a:	e0 fe       	sbrs	r14, 0
    465c:	0e c0       	rjmp	.+28     	; 0x467a <_Z8set_boolPKhP8as_classMS1_FhbE+0xf0>
    465e:	f7 01       	movw	r30, r14
    4660:	f5 95       	asr	r31
    4662:	e7 95       	ror	r30
    4664:	ec 0f       	add	r30, r28
    4666:	fd 1f       	adc	r31, r29
    4668:	01 90       	ld	r0, Z+
    466a:	f0 81       	ld	r31, Z
    466c:	e0 2d       	mov	r30, r0
    466e:	ec 0d       	add	r30, r12
    4670:	fd 1d       	adc	r31, r13
    4672:	01 90       	ld	r0, Z+
    4674:	f0 81       	ld	r31, Z
    4676:	e0 2d       	mov	r30, r0
    4678:	01 c0       	rjmp	.+2      	; 0x467c <_Z8set_boolPKhP8as_classMS1_FhbE+0xf2>
    467a:	f6 01       	movw	r30, r12
    467c:	c7 01       	movw	r24, r14
    467e:	95 95       	asr	r25
    4680:	87 95       	ror	r24
    4682:	61 e0       	ldi	r22, 0x01	; 1
    4684:	8c 0f       	add	r24, r28
    4686:	9d 1f       	adc	r25, r29
    4688:	09 95       	icall
			return ER_NO_ERROR;
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	25 c0       	rjmp	.+74     	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
		}
		
		if(rx_array[0] == 'N' && rx_array[1] == '\r')
    468e:	8e 34       	cpi	r24, 0x4E	; 78
    4690:	01 f5       	brne	.+64     	; 0x46d2 <_Z8set_boolPKhP8as_classMS1_FhbE+0x148>
    4692:	f8 01       	movw	r30, r16
    4694:	81 81       	ldd	r24, Z+1	; 0x01
    4696:	8d 30       	cpi	r24, 0x0D	; 13
    4698:	f1 f4       	brne	.+60     	; 0x46d6 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14c>
		{
			(as->*func_tf)(false);
    469a:	e0 fe       	sbrs	r14, 0
    469c:	0e c0       	rjmp	.+28     	; 0x46ba <_Z8set_boolPKhP8as_classMS1_FhbE+0x130>
    469e:	f7 01       	movw	r30, r14
    46a0:	f5 95       	asr	r31
    46a2:	e7 95       	ror	r30
    46a4:	ec 0f       	add	r30, r28
    46a6:	fd 1f       	adc	r31, r29
    46a8:	01 90       	ld	r0, Z+
    46aa:	f0 81       	ld	r31, Z
    46ac:	e0 2d       	mov	r30, r0
    46ae:	ec 0d       	add	r30, r12
    46b0:	fd 1d       	adc	r31, r13
    46b2:	01 90       	ld	r0, Z+
    46b4:	f0 81       	ld	r31, Z
    46b6:	e0 2d       	mov	r30, r0
    46b8:	01 c0       	rjmp	.+2      	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE+0x132>
    46ba:	f6 01       	movw	r30, r12
    46bc:	c7 01       	movw	r24, r14
    46be:	95 95       	asr	r25
    46c0:	87 95       	ror	r24
    46c2:	60 e0       	ldi	r22, 0x00	; 0
    46c4:	8c 0f       	add	r24, r28
    46c6:	9d 1f       	adc	r25, r29
    46c8:	09 95       	icall
			return ER_NO_ERROR;
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	05 c0       	rjmp	.+10     	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
		}
		
		return ER_ERROR;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	03 c0       	rjmp	.+6      	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	01 c0       	rjmp	.+2      	; 0x46d8 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
    46d6:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    46d8:	df 91       	pop	r29
    46da:	cf 91       	pop	r28
    46dc:	1f 91       	pop	r17
    46de:	0f 91       	pop	r16
    46e0:	ff 90       	pop	r15
    46e2:	ef 90       	pop	r14
    46e4:	df 90       	pop	r13
    46e6:	cf 90       	pop	r12
    46e8:	08 95       	ret

000046ea <_Z6set_u8PKhP8as_classMS1_FhhE>:

//Set value in as_class object that is an unsigned 8 bit value (ASCII).
uint8_t set_u8(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u8)(uint8_t))
{
    46ea:	af 92       	push	r10
    46ec:	bf 92       	push	r11
    46ee:	cf 92       	push	r12
    46f0:	df 92       	push	r13
    46f2:	ef 92       	push	r14
    46f4:	ff 92       	push	r15
    46f6:	0f 93       	push	r16
    46f8:	1f 93       	push	r17
    46fa:	cf 93       	push	r28
    46fc:	df 93       	push	r29
    46fe:	1f 92       	push	r1
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	5c 01       	movw	r10, r24
    4706:	8b 01       	movw	r16, r22
    4708:	69 01       	movw	r12, r18
    470a:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    470c:	cb 01       	movw	r24, r22
    470e:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    4712:	82 30       	cpi	r24, 0x02	; 2
    4714:	31 f5       	brne	.+76     	; 0x4762 <_Z6set_u8PKhP8as_classMS1_FhhE+0x78>
	{
		if(bin_index == 2)
    4716:	80 91 79 01 	lds	r24, 0x0179
    471a:	82 30       	cpi	r24, 0x02	; 2
    471c:	e9 f4       	brne	.+58     	; 0x4758 <_Z6set_u8PKhP8as_classMS1_FhhE+0x6e>
		{
			errno = (as->*func_u8)(arr.bin_rx[1]);
    471e:	e0 fe       	sbrs	r14, 0
    4720:	0e c0       	rjmp	.+28     	; 0x473e <_Z6set_u8PKhP8as_classMS1_FhhE+0x54>
    4722:	f7 01       	movw	r30, r14
    4724:	f5 95       	asr	r31
    4726:	e7 95       	ror	r30
    4728:	e0 0f       	add	r30, r16
    472a:	f1 1f       	adc	r31, r17
    472c:	01 90       	ld	r0, Z+
    472e:	f0 81       	ld	r31, Z
    4730:	e0 2d       	mov	r30, r0
    4732:	ec 0d       	add	r30, r12
    4734:	fd 1d       	adc	r31, r13
    4736:	01 90       	ld	r0, Z+
    4738:	f0 81       	ld	r31, Z
    473a:	e0 2d       	mov	r30, r0
    473c:	01 c0       	rjmp	.+2      	; 0x4740 <_Z6set_u8PKhP8as_classMS1_FhhE+0x56>
    473e:	f6 01       	movw	r30, r12
    4740:	c7 01       	movw	r24, r14
    4742:	95 95       	asr	r25
    4744:	87 95       	ror	r24
    4746:	60 91 7b 01 	lds	r22, 0x017B
    474a:	80 0f       	add	r24, r16
    474c:	91 1f       	adc	r25, r17
    474e:	09 95       	icall
    4750:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    4752:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4756:	03 c0       	rjmp	.+6      	; 0x475e <_Z6set_u8PKhP8as_classMS1_FhhE+0x74>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4758:	83 e0       	ldi	r24, 0x03	; 3
    475a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    475e:	99 81       	ldd	r25, Y+1	; 0x01
    4760:	27 c0       	rjmp	.+78     	; 0x47b0 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
	}
	else//ASCII or MatLab mode;
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    4762:	4d e0       	ldi	r20, 0x0D	; 13
    4764:	be 01       	movw	r22, r28
    4766:	6f 5f       	subi	r22, 0xFF	; 255
    4768:	7f 4f       	sbci	r23, 0xFF	; 255
    476a:	c5 01       	movw	r24, r10
    476c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    4770:	89 81       	ldd	r24, Y+1	; 0x01
    4772:	81 11       	cpse	r24, r1
    4774:	1c c0       	rjmp	.+56     	; 0x47ae <_Z6set_u8PKhP8as_classMS1_FhhE+0xc4>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_u8)(number);
    4776:	e0 fe       	sbrs	r14, 0
    4778:	0e c0       	rjmp	.+28     	; 0x4796 <_Z6set_u8PKhP8as_classMS1_FhhE+0xac>
    477a:	f7 01       	movw	r30, r14
    477c:	f5 95       	asr	r31
    477e:	e7 95       	ror	r30
    4780:	e0 0f       	add	r30, r16
    4782:	f1 1f       	adc	r31, r17
    4784:	01 90       	ld	r0, Z+
    4786:	f0 81       	ld	r31, Z
    4788:	e0 2d       	mov	r30, r0
    478a:	ec 0d       	add	r30, r12
    478c:	fd 1d       	adc	r31, r13
    478e:	01 90       	ld	r0, Z+
    4790:	f0 81       	ld	r31, Z
    4792:	e0 2d       	mov	r30, r0
    4794:	01 c0       	rjmp	.+2      	; 0x4798 <_Z6set_u8PKhP8as_classMS1_FhhE+0xae>
    4796:	f6 01       	movw	r30, r12
    4798:	c7 01       	movw	r24, r14
    479a:	95 95       	asr	r25
    479c:	87 95       	ror	r24
    479e:	80 0f       	add	r24, r16
    47a0:	91 1f       	adc	r25, r17
    47a2:	09 95       	icall
		
		if(errno)
    47a4:	91 e0       	ldi	r25, 0x01	; 1
    47a6:	81 11       	cpse	r24, r1
    47a8:	03 c0       	rjmp	.+6      	; 0x47b0 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	01 c0       	rjmp	.+2      	; 0x47b0 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
		{
			return ER_ERROR;
    47ae:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    47b0:	89 2f       	mov	r24, r25
    47b2:	0f 90       	pop	r0
    47b4:	df 91       	pop	r29
    47b6:	cf 91       	pop	r28
    47b8:	1f 91       	pop	r17
    47ba:	0f 91       	pop	r16
    47bc:	ff 90       	pop	r15
    47be:	ef 90       	pop	r14
    47c0:	df 90       	pop	r13
    47c2:	cf 90       	pop	r12
    47c4:	bf 90       	pop	r11
    47c6:	af 90       	pop	r10
    47c8:	08 95       	ret

000047ca <_Z9set_int16PKhP8as_classMS1_FhiE>:

//Set value in as_class object that is a signed 16 bit value (ASCII).
uint8_t set_int16(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_int16)(int16_t))
{
    47ca:	af 92       	push	r10
    47cc:	bf 92       	push	r11
    47ce:	cf 92       	push	r12
    47d0:	df 92       	push	r13
    47d2:	ef 92       	push	r14
    47d4:	ff 92       	push	r15
    47d6:	0f 93       	push	r16
    47d8:	1f 93       	push	r17
    47da:	cf 93       	push	r28
    47dc:	df 93       	push	r29
    47de:	1f 92       	push	r1
    47e0:	cd b7       	in	r28, 0x3d	; 61
    47e2:	de b7       	in	r29, 0x3e	; 62
    47e4:	5c 01       	movw	r10, r24
    47e6:	8b 01       	movw	r16, r22
    47e8:	69 01       	movw	r12, r18
    47ea:	7a 01       	movw	r14, r20
	uint8_t errno;
	int16_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    47ec:	cb 01       	movw	r24, r22
    47ee:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    47f2:	82 30       	cpi	r24, 0x02	; 2
    47f4:	81 f5       	brne	.+96     	; 0x4856 <_Z9set_int16PKhP8as_classMS1_FhiE+0x8c>
	{
		if(bin_index == 3)
    47f6:	80 91 79 01 	lds	r24, 0x0179
    47fa:	83 30       	cpi	r24, 0x03	; 3
    47fc:	39 f5       	brne	.+78     	; 0x484c <_Z9set_int16PKhP8as_classMS1_FhiE+0x82>
		{
			errno = (as->*func_int16)(load_u16(&(arr.bin_rx[1])));
    47fe:	e0 fe       	sbrs	r14, 0
    4800:	0e c0       	rjmp	.+28     	; 0x481e <_Z9set_int16PKhP8as_classMS1_FhiE+0x54>
    4802:	f7 01       	movw	r30, r14
    4804:	f5 95       	asr	r31
    4806:	e7 95       	ror	r30
    4808:	e0 0f       	add	r30, r16
    480a:	f1 1f       	adc	r31, r17
    480c:	01 90       	ld	r0, Z+
    480e:	f0 81       	ld	r31, Z
    4810:	e0 2d       	mov	r30, r0
    4812:	ec 0d       	add	r30, r12
    4814:	fd 1d       	adc	r31, r13
    4816:	01 90       	ld	r0, Z+
    4818:	f0 81       	ld	r31, Z
    481a:	e0 2d       	mov	r30, r0
    481c:	01 c0       	rjmp	.+2      	; 0x4820 <_Z9set_int16PKhP8as_classMS1_FhiE+0x56>
    481e:	f6 01       	movw	r30, r12
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    4820:	aa e7       	ldi	r26, 0x7A	; 122
    4822:	b1 e0       	ldi	r27, 0x01	; 1
    4824:	11 96       	adiw	r26, 0x01	; 1
    4826:	6c 91       	ld	r22, X
    4828:	11 97       	sbiw	r26, 0x01	; 1
    482a:	70 e0       	ldi	r23, 0x00	; 0
	temp16 <<= 8;
    482c:	76 2f       	mov	r23, r22
    482e:	66 27       	eor	r22, r22
	temp16 += array[1];
    4830:	12 96       	adiw	r26, 0x02	; 2
    4832:	8c 91       	ld	r24, X
    4834:	68 0f       	add	r22, r24
    4836:	71 1d       	adc	r23, r1
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
	{
		if(bin_index == 3)
		{
			errno = (as->*func_int16)(load_u16(&(arr.bin_rx[1])));
    4838:	c7 01       	movw	r24, r14
    483a:	95 95       	asr	r25
    483c:	87 95       	ror	r24
    483e:	80 0f       	add	r24, r16
    4840:	91 1f       	adc	r25, r17
    4842:	09 95       	icall
    4844:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    4846:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    484a:	03 c0       	rjmp	.+6      	; 0x4852 <_Z9set_int16PKhP8as_classMS1_FhiE+0x88>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    484c:	83 e0       	ldi	r24, 0x03	; 3
    484e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    4852:	99 81       	ldd	r25, Y+1	; 0x01
    4854:	28 c0       	rjmp	.+80     	; 0x48a6 <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_int(rx_array, &errno);
    4856:	4d e0       	ldi	r20, 0x0D	; 13
    4858:	be 01       	movw	r22, r28
    485a:	6f 5f       	subi	r22, 0xFF	; 255
    485c:	7f 4f       	sbci	r23, 0xFF	; 255
    485e:	c5 01       	movw	r24, r10
    4860:	0e 94 85 1c 	call	0x390a	; 0x390a <_Z13string_to_intPKhPhh>
		
		if(errno)	//Exit if invalid integer detected.
    4864:	29 81       	ldd	r18, Y+1	; 0x01
    4866:	21 11       	cpse	r18, r1
    4868:	1d c0       	rjmp	.+58     	; 0x48a4 <_Z9set_int16PKhP8as_classMS1_FhiE+0xda>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_int16)(number);
    486a:	e0 fe       	sbrs	r14, 0
    486c:	0e c0       	rjmp	.+28     	; 0x488a <_Z9set_int16PKhP8as_classMS1_FhiE+0xc0>
    486e:	f7 01       	movw	r30, r14
    4870:	f5 95       	asr	r31
    4872:	e7 95       	ror	r30
    4874:	e0 0f       	add	r30, r16
    4876:	f1 1f       	adc	r31, r17
    4878:	01 90       	ld	r0, Z+
    487a:	f0 81       	ld	r31, Z
    487c:	e0 2d       	mov	r30, r0
    487e:	ec 0d       	add	r30, r12
    4880:	fd 1d       	adc	r31, r13
    4882:	01 90       	ld	r0, Z+
    4884:	f0 81       	ld	r31, Z
    4886:	e0 2d       	mov	r30, r0
    4888:	01 c0       	rjmp	.+2      	; 0x488c <_Z9set_int16PKhP8as_classMS1_FhiE+0xc2>
    488a:	f6 01       	movw	r30, r12
    488c:	97 01       	movw	r18, r14
    488e:	35 95       	asr	r19
    4890:	27 95       	ror	r18
    4892:	c8 01       	movw	r24, r16
    4894:	82 0f       	add	r24, r18
    4896:	93 1f       	adc	r25, r19
    4898:	09 95       	icall
		
		if(errno)
    489a:	91 e0       	ldi	r25, 0x01	; 1
    489c:	81 11       	cpse	r24, r1
    489e:	03 c0       	rjmp	.+6      	; 0x48a6 <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	01 c0       	rjmp	.+2      	; 0x48a6 <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
		//Attempt to convert user input to number.
		number = string_to_int(rx_array, &errno);
		
		if(errno)	//Exit if invalid integer detected.
		{
			return ER_ERROR;
    48a4:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    48a6:	89 2f       	mov	r24, r25
    48a8:	0f 90       	pop	r0
    48aa:	df 91       	pop	r29
    48ac:	cf 91       	pop	r28
    48ae:	1f 91       	pop	r17
    48b0:	0f 91       	pop	r16
    48b2:	ff 90       	pop	r15
    48b4:	ef 90       	pop	r14
    48b6:	df 90       	pop	r13
    48b8:	cf 90       	pop	r12
    48ba:	bf 90       	pop	r11
    48bc:	af 90       	pop	r10
    48be:	08 95       	ret

000048c0 <_Z7set_u16PKhP8as_classMS1_FhjE>:

//Set value in as_class object that is an unsigned 16 bit value (ASCII).
uint8_t set_u16(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u16)(uint16_t))
{
    48c0:	af 92       	push	r10
    48c2:	bf 92       	push	r11
    48c4:	cf 92       	push	r12
    48c6:	df 92       	push	r13
    48c8:	ef 92       	push	r14
    48ca:	ff 92       	push	r15
    48cc:	0f 93       	push	r16
    48ce:	1f 93       	push	r17
    48d0:	cf 93       	push	r28
    48d2:	df 93       	push	r29
    48d4:	1f 92       	push	r1
    48d6:	cd b7       	in	r28, 0x3d	; 61
    48d8:	de b7       	in	r29, 0x3e	; 62
    48da:	5c 01       	movw	r10, r24
    48dc:	8b 01       	movw	r16, r22
    48de:	69 01       	movw	r12, r18
    48e0:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    48e2:	cb 01       	movw	r24, r22
    48e4:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    48e8:	82 30       	cpi	r24, 0x02	; 2
    48ea:	81 f5       	brne	.+96     	; 0x494c <_Z7set_u16PKhP8as_classMS1_FhjE+0x8c>
	{
		if(bin_index == 3)
    48ec:	80 91 79 01 	lds	r24, 0x0179
    48f0:	83 30       	cpi	r24, 0x03	; 3
    48f2:	39 f5       	brne	.+78     	; 0x4942 <_Z7set_u16PKhP8as_classMS1_FhjE+0x82>
		{
			errno = (as->*func_u16)(load_u16(&(arr.bin_rx[1])));
    48f4:	e0 fe       	sbrs	r14, 0
    48f6:	0e c0       	rjmp	.+28     	; 0x4914 <_Z7set_u16PKhP8as_classMS1_FhjE+0x54>
    48f8:	f7 01       	movw	r30, r14
    48fa:	f5 95       	asr	r31
    48fc:	e7 95       	ror	r30
    48fe:	e0 0f       	add	r30, r16
    4900:	f1 1f       	adc	r31, r17
    4902:	01 90       	ld	r0, Z+
    4904:	f0 81       	ld	r31, Z
    4906:	e0 2d       	mov	r30, r0
    4908:	ec 0d       	add	r30, r12
    490a:	fd 1d       	adc	r31, r13
    490c:	01 90       	ld	r0, Z+
    490e:	f0 81       	ld	r31, Z
    4910:	e0 2d       	mov	r30, r0
    4912:	01 c0       	rjmp	.+2      	; 0x4916 <_Z7set_u16PKhP8as_classMS1_FhjE+0x56>
    4914:	f6 01       	movw	r30, r12
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    4916:	aa e7       	ldi	r26, 0x7A	; 122
    4918:	b1 e0       	ldi	r27, 0x01	; 1
    491a:	11 96       	adiw	r26, 0x01	; 1
    491c:	6c 91       	ld	r22, X
    491e:	11 97       	sbiw	r26, 0x01	; 1
    4920:	70 e0       	ldi	r23, 0x00	; 0
	temp16 <<= 8;
    4922:	76 2f       	mov	r23, r22
    4924:	66 27       	eor	r22, r22
	temp16 += array[1];
    4926:	12 96       	adiw	r26, 0x02	; 2
    4928:	8c 91       	ld	r24, X
    492a:	68 0f       	add	r22, r24
    492c:	71 1d       	adc	r23, r1
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
	{
		if(bin_index == 3)
		{
			errno = (as->*func_u16)(load_u16(&(arr.bin_rx[1])));
    492e:	c7 01       	movw	r24, r14
    4930:	95 95       	asr	r25
    4932:	87 95       	ror	r24
    4934:	80 0f       	add	r24, r16
    4936:	91 1f       	adc	r25, r17
    4938:	09 95       	icall
    493a:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    493c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4940:	03 c0       	rjmp	.+6      	; 0x4948 <_Z7set_u16PKhP8as_classMS1_FhjE+0x88>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4942:	83 e0       	ldi	r24, 0x03	; 3
    4944:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    4948:	99 81       	ldd	r25, Y+1	; 0x01
    494a:	28 c0       	rjmp	.+80     	; 0x499c <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    494c:	4d e0       	ldi	r20, 0x0D	; 13
    494e:	be 01       	movw	r22, r28
    4950:	6f 5f       	subi	r22, 0xFF	; 255
    4952:	7f 4f       	sbci	r23, 0xFF	; 255
    4954:	c5 01       	movw	r24, r10
    4956:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    495a:	29 81       	ldd	r18, Y+1	; 0x01
    495c:	21 11       	cpse	r18, r1
    495e:	1d c0       	rjmp	.+58     	; 0x499a <_Z7set_u16PKhP8as_classMS1_FhjE+0xda>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_u16)(number);
    4960:	e0 fe       	sbrs	r14, 0
    4962:	0e c0       	rjmp	.+28     	; 0x4980 <_Z7set_u16PKhP8as_classMS1_FhjE+0xc0>
    4964:	f7 01       	movw	r30, r14
    4966:	f5 95       	asr	r31
    4968:	e7 95       	ror	r30
    496a:	e0 0f       	add	r30, r16
    496c:	f1 1f       	adc	r31, r17
    496e:	01 90       	ld	r0, Z+
    4970:	f0 81       	ld	r31, Z
    4972:	e0 2d       	mov	r30, r0
    4974:	ec 0d       	add	r30, r12
    4976:	fd 1d       	adc	r31, r13
    4978:	01 90       	ld	r0, Z+
    497a:	f0 81       	ld	r31, Z
    497c:	e0 2d       	mov	r30, r0
    497e:	01 c0       	rjmp	.+2      	; 0x4982 <_Z7set_u16PKhP8as_classMS1_FhjE+0xc2>
    4980:	f6 01       	movw	r30, r12
    4982:	97 01       	movw	r18, r14
    4984:	35 95       	asr	r19
    4986:	27 95       	ror	r18
    4988:	c8 01       	movw	r24, r16
    498a:	82 0f       	add	r24, r18
    498c:	93 1f       	adc	r25, r19
    498e:	09 95       	icall
		
		if(errno)
    4990:	91 e0       	ldi	r25, 0x01	; 1
    4992:	81 11       	cpse	r24, r1
    4994:	03 c0       	rjmp	.+6      	; 0x499c <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	01 c0       	rjmp	.+2      	; 0x499c <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
		{
			return ER_ERROR;
    499a:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    499c:	89 2f       	mov	r24, r25
    499e:	0f 90       	pop	r0
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	1f 91       	pop	r17
    49a6:	0f 91       	pop	r16
    49a8:	ff 90       	pop	r15
    49aa:	ef 90       	pop	r14
    49ac:	df 90       	pop	r13
    49ae:	cf 90       	pop	r12
    49b0:	bf 90       	pop	r11
    49b2:	af 90       	pop	r10
    49b4:	08 95       	ret

000049b6 <_Z7set_u32PKhP8as_classMS1_FhmE>:

//Set value in as_class object that is an unsigned 32 bit value (ASCII).
uint8_t set_u32(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u32)(uint32_t))
{
    49b6:	af 92       	push	r10
    49b8:	bf 92       	push	r11
    49ba:	cf 92       	push	r12
    49bc:	df 92       	push	r13
    49be:	ef 92       	push	r14
    49c0:	ff 92       	push	r15
    49c2:	0f 93       	push	r16
    49c4:	1f 93       	push	r17
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	1f 92       	push	r1
    49cc:	cd b7       	in	r28, 0x3d	; 61
    49ce:	de b7       	in	r29, 0x3e	; 62
    49d0:	5c 01       	movw	r10, r24
    49d2:	8b 01       	movw	r16, r22
    49d4:	69 01       	movw	r12, r18
    49d6:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    49d8:	cb 01       	movw	r24, r22
    49da:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    49de:	82 30       	cpi	r24, 0x02	; 2
    49e0:	51 f5       	brne	.+84     	; 0x4a36 <_Z7set_u32PKhP8as_classMS1_FhmE+0x80>
	{
		if(bin_index == 5)
    49e2:	80 91 79 01 	lds	r24, 0x0179
    49e6:	85 30       	cpi	r24, 0x05	; 5
    49e8:	09 f5       	brne	.+66     	; 0x4a2c <_Z7set_u32PKhP8as_classMS1_FhmE+0x76>
		{
			errno = (as->*func_u32)(load_u32(&(arr.bin_rx[1])));
    49ea:	e0 fe       	sbrs	r14, 0
    49ec:	0d c0       	rjmp	.+26     	; 0x4a08 <_Z7set_u32PKhP8as_classMS1_FhmE+0x52>
    49ee:	f7 01       	movw	r30, r14
    49f0:	f5 95       	asr	r31
    49f2:	e7 95       	ror	r30
    49f4:	e0 0f       	add	r30, r16
    49f6:	f1 1f       	adc	r31, r17
    49f8:	01 90       	ld	r0, Z+
    49fa:	f0 81       	ld	r31, Z
    49fc:	e0 2d       	mov	r30, r0
    49fe:	ec 0d       	add	r30, r12
    4a00:	fd 1d       	adc	r31, r13
    4a02:	a0 80       	ld	r10, Z
    4a04:	b1 80       	ldd	r11, Z+1	; 0x01
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <_Z7set_u32PKhP8as_classMS1_FhmE+0x54>
    4a08:	56 01       	movw	r10, r12
    4a0a:	8b e7       	ldi	r24, 0x7B	; 123
    4a0c:	91 e0       	ldi	r25, 0x01	; 1
    4a0e:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <_Z8load_u32PKh>
    4a12:	ab 01       	movw	r20, r22
    4a14:	bc 01       	movw	r22, r24
    4a16:	c7 01       	movw	r24, r14
    4a18:	95 95       	asr	r25
    4a1a:	87 95       	ror	r24
    4a1c:	80 0f       	add	r24, r16
    4a1e:	91 1f       	adc	r25, r17
    4a20:	f5 01       	movw	r30, r10
    4a22:	09 95       	icall
    4a24:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    4a26:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4a2a:	03 c0       	rjmp	.+6      	; 0x4a32 <_Z7set_u32PKhP8as_classMS1_FhmE+0x7c>
		}
		else//Transmit error.
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4a2c:	83 e0       	ldi	r24, 0x03	; 3
    4a2e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		return errno;
    4a32:	99 81       	ldd	r25, Y+1	; 0x01
    4a34:	2a c0       	rjmp	.+84     	; 0x4a8a <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    4a36:	4d e0       	ldi	r20, 0x0D	; 13
    4a38:	be 01       	movw	r22, r28
    4a3a:	6f 5f       	subi	r22, 0xFF	; 255
    4a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3e:	c5 01       	movw	r24, r10
    4a40:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    4a44:	29 81       	ldd	r18, Y+1	; 0x01
    4a46:	21 11       	cpse	r18, r1
    4a48:	1f c0       	rjmp	.+62     	; 0x4a88 <_Z7set_u32PKhP8as_classMS1_FhmE+0xd2>
			return ER_ERROR;
		
		//Update parameter.
		errno = (as->*func_u32)(number);
    4a4a:	e0 fe       	sbrs	r14, 0
    4a4c:	0e c0       	rjmp	.+28     	; 0x4a6a <_Z7set_u32PKhP8as_classMS1_FhmE+0xb4>
    4a4e:	f7 01       	movw	r30, r14
    4a50:	f5 95       	asr	r31
    4a52:	e7 95       	ror	r30
    4a54:	e0 0f       	add	r30, r16
    4a56:	f1 1f       	adc	r31, r17
    4a58:	01 90       	ld	r0, Z+
    4a5a:	f0 81       	ld	r31, Z
    4a5c:	e0 2d       	mov	r30, r0
    4a5e:	ec 0d       	add	r30, r12
    4a60:	fd 1d       	adc	r31, r13
    4a62:	01 90       	ld	r0, Z+
    4a64:	f0 81       	ld	r31, Z
    4a66:	e0 2d       	mov	r30, r0
    4a68:	01 c0       	rjmp	.+2      	; 0x4a6c <_Z7set_u32PKhP8as_classMS1_FhmE+0xb6>
    4a6a:	f6 01       	movw	r30, r12
    4a6c:	97 01       	movw	r18, r14
    4a6e:	35 95       	asr	r19
    4a70:	27 95       	ror	r18
    4a72:	ab 01       	movw	r20, r22
    4a74:	bc 01       	movw	r22, r24
    4a76:	c8 01       	movw	r24, r16
    4a78:	82 0f       	add	r24, r18
    4a7a:	93 1f       	adc	r25, r19
    4a7c:	09 95       	icall
		
		if(errno)
    4a7e:	91 e0       	ldi	r25, 0x01	; 1
    4a80:	81 11       	cpse	r24, r1
    4a82:	03 c0       	rjmp	.+6      	; 0x4a8a <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	01 c0       	rjmp	.+2      	; 0x4a8a <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
			return ER_ERROR;
    4a88:	91 e0       	ldi	r25, 0x01	; 1
		if(errno)
			return ER_ERROR;
		
		return ER_NO_ERROR;
	}
}
    4a8a:	89 2f       	mov	r24, r25
    4a8c:	0f 90       	pop	r0
    4a8e:	df 91       	pop	r29
    4a90:	cf 91       	pop	r28
    4a92:	1f 91       	pop	r17
    4a94:	0f 91       	pop	r16
    4a96:	ff 90       	pop	r15
    4a98:	ef 90       	pop	r14
    4a9a:	df 90       	pop	r13
    4a9c:	cf 90       	pop	r12
    4a9e:	bf 90       	pop	r11
    4aa0:	af 90       	pop	r10
    4aa2:	08 95       	ret

00004aa4 <_Z14uart_tokenizerhP8as_class>:
}

/**************************************************Update Menu Items Rountines***********************************************/
//Tokenize the user input.
void uart_tokenizer(uint8_t rx_byte, as_class *as)
{
    4aa4:	8f 92       	push	r8
    4aa6:	9f 92       	push	r9
    4aa8:	bf 92       	push	r11
    4aaa:	cf 92       	push	r12
    4aac:	df 92       	push	r13
    4aae:	ef 92       	push	r14
    4ab0:	ff 92       	push	r15
    4ab2:	0f 93       	push	r16
    4ab4:	1f 93       	push	r17
    4ab6:	cf 93       	push	r28
    4ab8:	df 93       	push	r29
    4aba:	1f 92       	push	r1
    4abc:	cd b7       	in	r28, 0x3d	; 61
    4abe:	de b7       	in	r29, 0x3e	; 62
    4ac0:	f8 2e       	mov	r15, r24
    4ac2:	8b 01       	movw	r16, r22
	uint8_t errno = ER_ERROR;
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	89 83       	std	Y+1, r24	; 0x01
	
	//Look for single byte commands. when input array is empty.
	if(!array_index && (rx_byte == 't' || rx_byte == 'T'))
    4ac8:	80 91 78 01 	lds	r24, 0x0178
    4acc:	81 11       	cpse	r24, r1
    4ace:	32 c0       	rjmp	.+100    	; 0x4b34 <_Z14uart_tokenizerhP8as_class+0x90>
    4ad0:	8f 2d       	mov	r24, r15
    4ad2:	8f 7d       	andi	r24, 0xDF	; 223
    4ad4:	84 35       	cpi	r24, 0x54	; 84
    4ad6:	69 f4       	brne	.+26     	; 0x4af2 <_Z14uart_tokenizerhP8as_class+0x4e>
	{
		//Send transmission type byte.
		if(as->get_tx_mode() == TX_MODE_ASCII)
    4ad8:	cb 01       	movw	r24, r22
    4ada:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    4ade:	81 11       	cpse	r24, r1
    4ae0:	04 c0       	rjmp	.+8      	; 0x4aea <_Z14uart_tokenizerhP8as_class+0x46>
			atmega_uart::tx_byte('A');
    4ae2:	81 e4       	ldi	r24, 0x41	; 65
    4ae4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4ae8:	7f c7       	rjmp	.+3838   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
		else
			atmega_uart::tx_byte('M');
    4aea:	8d e4       	ldi	r24, 0x4D	; 77
    4aec:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4af0:	7b c7       	rjmp	.+3830   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
		return;
	}
	
	//Start linear sweep test.
	else if(!array_index && (rx_byte == 'l' || rx_byte == 'L'))
    4af2:	8c 34       	cpi	r24, 0x4C	; 76
    4af4:	49 f4       	brne	.+18     	; 0x4b08 <_Z14uart_tokenizerhP8as_class+0x64>
	{
		as->set_test_type(TEST_LIN);
    4af6:	60 e0       	ldi	r22, 0x00	; 0
    4af8:	c8 01       	movw	r24, r16
    4afa:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    4afe:	61 e0       	ldi	r22, 0x01	; 1
    4b00:	c8 01       	movw	r24, r16
    4b02:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		return;
    4b06:	70 c7       	rjmp	.+3808   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Start square wave test.
	else if(!array_index && (rx_byte == 's' || rx_byte == 'S'))
    4b08:	83 35       	cpi	r24, 0x53	; 83
    4b0a:	49 f4       	brne	.+18     	; 0x4b1e <_Z14uart_tokenizerhP8as_class+0x7a>
	{
		as->set_test_type(TEST_SQR);
    4b0c:	61 e0       	ldi	r22, 0x01	; 1
    4b0e:	c8 01       	movw	r24, r16
    4b10:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    4b14:	61 e0       	ldi	r22, 0x01	; 1
    4b16:	c8 01       	movw	r24, r16
    4b18:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		return;
    4b1c:	65 c7       	rjmp	.+3786   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Start arbitrary waveform test.
	else if(!array_index && (rx_byte == 'a' || rx_byte == 'A'))
    4b1e:	81 34       	cpi	r24, 0x41	; 65
    4b20:	49 f4       	brne	.+18     	; 0x4b34 <_Z14uart_tokenizerhP8as_class+0x90>
	{
		as->set_test_type(TEST_ARB);
    4b22:	62 e0       	ldi	r22, 0x02	; 2
    4b24:	c8 01       	movw	r24, r16
    4b26:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    4b2a:	61 e0       	ldi	r22, 0x01	; 1
    4b2c:	c8 01       	movw	r24, r16
    4b2e:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
		return;
    4b32:	5a c7       	rjmp	.+3764   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Keep building input string.
	atmega_uart::tx_byte(rx_byte);//Echo byte.
    4b34:	8f 2d       	mov	r24, r15
    4b36:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
	
	//Save byte from UART.
	arr.rx_array[array_index++] = rx_byte;
    4b3a:	e0 91 78 01 	lds	r30, 0x0178
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	8e 0f       	add	r24, r30
    4b42:	80 93 78 01 	sts	0x0178, r24
    4b46:	f0 e0       	ldi	r31, 0x00	; 0
    4b48:	e6 58       	subi	r30, 0x86	; 134
    4b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b4c:	f0 82       	st	Z, r15
	
	//Check if array is going to overflow.
	if((array_index >= RX_ARRAY_LENGTH) && (arr.rx_array[RX_ARRAY_LENGTH - 1] != '\r'))
    4b4e:	89 31       	cpi	r24, 0x19	; 25
    4b50:	48 f0       	brcs	.+18     	; 0x4b64 <_Z14uart_tokenizerhP8as_class+0xc0>
    4b52:	90 91 92 01 	lds	r25, 0x0192
    4b56:	9d 30       	cpi	r25, 0x0D	; 13
    4b58:	29 f0       	breq	.+10     	; 0x4b64 <_Z14uart_tokenizerhP8as_class+0xc0>
	{
		array_index = 0;
    4b5a:	10 92 78 01 	sts	0x0178, r1
		uart_err();
    4b5e:	0e 94 42 21 	call	0x4284	; 0x4284 <_Z8uart_errv>
		return;
    4b62:	42 c7       	rjmp	.+3716   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Special case. empty array prints the menu.
	if(arr.rx_array[0] == '\r')
    4b64:	90 91 7a 01 	lds	r25, 0x017A
    4b68:	9d 30       	cpi	r25, 0x0D	; 13
    4b6a:	09 f0       	breq	.+2      	; 0x4b6e <_Z14uart_tokenizerhP8as_class+0xca>
    4b6c:	91 c0       	rjmp	.+290    	; 0x4c90 <_Z14uart_tokenizerhP8as_class+0x1ec>
	{
		array_index = 0;
    4b6e:	10 92 78 01 	sts	0x0178, r1
		
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---MAIN MENU---\r"));
    4b72:	87 ec       	ldi	r24, 0xC7	; 199
    4b74:	9b e0       	ldi	r25, 0x0B	; 11
    4b76:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Transmission mode.
		atmega_uart::tx_string_p(PSTR("1.  Transmission Mode (A)SCII, (M)atLab, (B)inary: "));
    4b7a:	83 e9       	ldi	r24, 0x93	; 147
    4b7c:	9b e0       	ldi	r25, 0x0B	; 11
    4b7e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		if(as->get_tx_mode() == TX_MODE_ASCII)
    4b82:	c8 01       	movw	r24, r16
    4b84:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    4b88:	81 11       	cpse	r24, r1
    4b8a:	04 c0       	rjmp	.+8      	; 0x4b94 <_Z14uart_tokenizerhP8as_class+0xf0>
			atmega_uart::tx_byte('A');
    4b8c:	81 e4       	ldi	r24, 0x41	; 65
    4b8e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4b92:	0c c0       	rjmp	.+24     	; 0x4bac <_Z14uart_tokenizerhP8as_class+0x108>
		else if(as->get_tx_mode() == TX_MODE_MATLAB)
    4b94:	c8 01       	movw	r24, r16
    4b96:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN8as_class11get_tx_modeEv>
    4b9a:	81 30       	cpi	r24, 0x01	; 1
    4b9c:	21 f4       	brne	.+8      	; 0x4ba6 <_Z14uart_tokenizerhP8as_class+0x102>
			atmega_uart::tx_byte('M');
    4b9e:	8d e4       	ldi	r24, 0x4D	; 77
    4ba0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4ba4:	03 c0       	rjmp	.+6      	; 0x4bac <_Z14uart_tokenizerhP8as_class+0x108>
		else
			atmega_uart::tx_byte('B');
    4ba6:	82 e4       	ldi	r24, 0x42	; 66
    4ba8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_byte('\r');
    4bac:	8d e0       	ldi	r24, 0x0D	; 13
    4bae:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Number of electrodes.
		atmega_uart::tx_string_p(PSTR("2.  Number of Electrodes (2 or 3): "));
    4bb2:	8f e6       	ldi	r24, 0x6F	; 111
    4bb4:	9b e0       	ldi	r25, 0x0B	; 11
    4bb6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		(as->get_num_electrodes() == ELEC_2) ? atmega_uart::tx_byte('2') : atmega_uart::tx_byte('3');
    4bba:	c8 01       	movw	r24, r16
    4bbc:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN8as_class18get_num_electrodesEv>
    4bc0:	81 11       	cpse	r24, r1
    4bc2:	04 c0       	rjmp	.+8      	; 0x4bcc <_Z14uart_tokenizerhP8as_class+0x128>
    4bc4:	82 e3       	ldi	r24, 0x32	; 50
    4bc6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4bca:	03 c0       	rjmp	.+6      	; 0x4bd2 <_Z14uart_tokenizerhP8as_class+0x12e>
    4bcc:	83 e3       	ldi	r24, 0x33	; 51
    4bce:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_byte('\r');
    4bd2:	8d e0       	ldi	r24, 0x0D	; 13
    4bd4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//ADC sample interval.
		atmega_uart::tx_string_p(PSTR("3.  ADC Sample Interval ms"));
    4bd8:	84 e5       	ldi	r24, 0x54	; 84
    4bda:	9b e0       	ldi	r25, 0x0B	; 11
    4bdc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(ADC_RATE_MIN, ADC_RATE_MAX);
    4be0:	28 ee       	ldi	r18, 0xE8	; 232
    4be2:	33 e0       	ldi	r19, 0x03	; 3
    4be4:	40 e0       	ldi	r20, 0x00	; 0
    4be6:	50 e0       	ldi	r21, 0x00	; 0
    4be8:	61 e0       	ldi	r22, 0x01	; 1
    4bea:	70 e0       	ldi	r23, 0x00	; 0
    4bec:	80 e0       	ldi	r24, 0x00	; 0
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_adc_rate());
    4bf4:	c8 01       	movw	r24, r16
    4bf6:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN8as_class12get_adc_rateEv>
    4bfa:	bc 01       	movw	r22, r24
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    4c04:	8d e0       	ldi	r24, 0x0D	; 13
    4c06:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Menus.
		atmega_uart::tx_string_p(PSTR("4.  Transimpedance Amplifier Menu\r"));
    4c0a:	81 e3       	ldi	r24, 0x31	; 49
    4c0c:	9b e0       	ldi	r25, 0x0B	; 11
    4c0e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("5.  Deposition Menu\r"));
    4c12:	8c e1       	ldi	r24, 0x1C	; 28
    4c14:	9b e0       	ldi	r25, 0x0B	; 11
    4c16:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("6.  Linear Sweep Menu\r"));
    4c1a:	85 e0       	ldi	r24, 0x05	; 5
    4c1c:	9b e0       	ldi	r25, 0x0B	; 11
    4c1e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("7.  Square Wave Menu\r"));
    4c22:	8f ee       	ldi	r24, 0xEF	; 239
    4c24:	9a e0       	ldi	r25, 0x0A	; 10
    4c26:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("8.  Arbitrary Waveform Menu\r"));
    4c2a:	82 ed       	ldi	r24, 0xD2	; 210
    4c2c:	9a e0       	ldi	r25, 0x0A	; 10
    4c2e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("9.  Low-pass Filter Menu\r"));
    4c32:	88 eb       	ldi	r24, 0xB8	; 184
    4c34:	9a e0       	ldi	r25, 0x0A	; 10
    4c36:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Get settings.
		atmega_uart::tx_string_p(PSTR("10. Get settings\r\r"));
    4c3a:	85 ea       	ldi	r24, 0xA5	; 165
    4c3c:	9a e0       	ldi	r25, 0x0A	; 10
    4c3e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Unique identifier info.
		atmega_uart::tx_string_p(PSTR("Firmware Revision: "));
    4c42:	81 e9       	ldi	r24, 0x91	; 145
    4c44:	9a e0       	ldi	r25, 0x0A	; 10
    4c46:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string(FIRMWARE);
    4c4a:	84 e1       	ldi	r24, 0x14	; 20
    4c4c:	91 e0       	ldi	r25, 0x01	; 1
    4c4e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN11atmega_uart9tx_stringEPKc>
		atmega_uart::tx_byte('\r');
    4c52:	8d e0       	ldi	r24, 0x0D	; 13
    4c54:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_string_p(PSTR("Product ID: "));
    4c58:	84 e8       	ldi	r24, 0x84	; 132
    4c5a:	9a e0       	ldi	r25, 0x0A	; 10
    4c5c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string(PRODUCT_ID);
    4c60:	8a e1       	ldi	r24, 0x1A	; 26
    4c62:	91 e0       	ldi	r25, 0x01	; 1
    4c64:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN11atmega_uart9tx_stringEPKc>
		atmega_uart::tx_byte('\r');
    4c68:	8d e0       	ldi	r24, 0x0D	; 13
    4c6a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Start and stop tests.
		atmega_uart::tx_string_p(PSTR("\rL Start Linear Sweep Test\r"));
    4c6e:	88 e6       	ldi	r24, 0x68	; 104
    4c70:	9a e0       	ldi	r25, 0x0A	; 10
    4c72:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("S Start Square Wave Test\r"));
    4c76:	8e e4       	ldi	r24, 0x4E	; 78
    4c78:	9a e0       	ldi	r25, 0x0A	; 10
    4c7a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("A Start Arbitrary Waveform Test\r"));
    4c7e:	8d e2       	ldi	r24, 0x2D	; 45
    4c80:	9a e0       	ldi	r25, 0x0A	; 10
    4c82:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("X Abort Test\r\r\r\r\r"));
    4c86:	8b e1       	ldi	r24, 0x1B	; 27
    4c88:	9a e0       	ldi	r25, 0x0A	; 10
    4c8a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    4c8e:	ac c6       	rjmp	.+3416   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//If enter not pressed, keep building array.
	if(arr.rx_array[array_index - 1] != '\r')
    4c90:	28 2f       	mov	r18, r24
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	f9 01       	movw	r30, r18
    4c96:	e7 58       	subi	r30, 0x87	; 135
    4c98:	fe 4f       	sbci	r31, 0xFE	; 254
    4c9a:	90 81       	ld	r25, Z
    4c9c:	9d 30       	cpi	r25, 0x0D	; 13
    4c9e:	09 f0       	breq	.+2      	; 0x4ca2 <_Z14uart_tokenizerhP8as_class+0x1fe>
    4ca0:	a3 c6       	rjmp	.+3398   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
		return;
	
	//At this point, enter has been pressed and array is ready for processing.
	//Convert array hex values to uppercase.
	for(int i = 0; i < array_index; i++)
    4ca2:	12 16       	cp	r1, r18
    4ca4:	13 06       	cpc	r1, r19
    4ca6:	84 f4       	brge	.+32     	; 0x4cc8 <_Z14uart_tokenizerhP8as_class+0x224>
    4ca8:	ea e7       	ldi	r30, 0x7A	; 122
    4caa:	f1 e0       	ldi	r31, 0x01	; 1
    4cac:	c9 01       	movw	r24, r18
    4cae:	86 58       	subi	r24, 0x86	; 134
    4cb0:	9e 4f       	sbci	r25, 0xFE	; 254
		if(arr.rx_array[i] >= 'a' && arr.rx_array[i] <= 'z')
    4cb2:	20 81       	ld	r18, Z
    4cb4:	3f e9       	ldi	r19, 0x9F	; 159
    4cb6:	32 0f       	add	r19, r18
    4cb8:	3a 31       	cpi	r19, 0x1A	; 26
    4cba:	10 f4       	brcc	.+4      	; 0x4cc0 <_Z14uart_tokenizerhP8as_class+0x21c>
			arr.rx_array[i] -= 0x20;
    4cbc:	20 52       	subi	r18, 0x20	; 32
    4cbe:	20 83       	st	Z, r18
    4cc0:	31 96       	adiw	r30, 0x01	; 1
	if(arr.rx_array[array_index - 1] != '\r')
		return;
	
	//At this point, enter has been pressed and array is ready for processing.
	//Convert array hex values to uppercase.
	for(int i = 0; i < array_index; i++)
    4cc2:	e8 17       	cp	r30, r24
    4cc4:	f9 07       	cpc	r31, r25
    4cc6:	a9 f7       	brne	.-22     	; 0x4cb2 <_Z14uart_tokenizerhP8as_class+0x20e>
		if(arr.rx_array[i] >= 'a' && arr.rx_array[i] <= 'z')
			arr.rx_array[i] -= 0x20;
	
	//Reset array index for next input string.
	array_index = 0;
    4cc8:	10 92 78 01 	sts	0x0178, r1
	
	//Get number selection from user input and call appropriate function.
	//Change tx mode.
	if(arr.rx_array[0] == '1' && arr.rx_array[1] == ' ')
    4ccc:	80 91 7a 01 	lds	r24, 0x017A
    4cd0:	81 33       	cpi	r24, 0x31	; 49
    4cd2:	69 f5       	brne	.+90     	; 0x4d2e <_Z14uart_tokenizerhP8as_class+0x28a>
    4cd4:	90 91 7b 01 	lds	r25, 0x017B
    4cd8:	90 32       	cpi	r25, 0x20	; 32
    4cda:	09 f0       	breq	.+2      	; 0x4cde <_Z14uart_tokenizerhP8as_class+0x23a>
    4cdc:	64 c0       	rjmp	.+200    	; 0x4da6 <_Z14uart_tokenizerhP8as_class+0x302>
	{		
		//Check if setting to ASCII mode.
		if(arr.rx_array[2] == 'A' && arr.rx_array[3] == '\r')
    4cde:	80 91 7c 01 	lds	r24, 0x017C
    4ce2:	81 34       	cpi	r24, 0x41	; 65
    4ce4:	51 f4       	brne	.+20     	; 0x4cfa <_Z14uart_tokenizerhP8as_class+0x256>
    4ce6:	80 91 7d 01 	lds	r24, 0x017D
    4cea:	8d 30       	cpi	r24, 0x0D	; 13
    4cec:	e9 f4       	brne	.+58     	; 0x4d28 <_Z14uart_tokenizerhP8as_class+0x284>
		{
			as->set_tx_mode(TX_MODE_ASCII);
    4cee:	60 e0       	ldi	r22, 0x00	; 0
    4cf0:	c8 01       	movw	r24, r16
    4cf2:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN8as_class11set_tx_modeE8tx_modes>
			errno = ER_NO_ERROR;
    4cf6:	19 82       	std	Y+1, r1	; 0x01
    4cf8:	75 c6       	rjmp	.+3306   	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		
		//Check if setting to MatLab mode.
		else if(arr.rx_array[2] == 'M' && arr.rx_array[3] == '\r')
    4cfa:	8d 34       	cpi	r24, 0x4D	; 77
    4cfc:	51 f4       	brne	.+20     	; 0x4d12 <_Z14uart_tokenizerhP8as_class+0x26e>
    4cfe:	80 91 7d 01 	lds	r24, 0x017D
    4d02:	8d 30       	cpi	r24, 0x0D	; 13
    4d04:	89 f4       	brne	.+34     	; 0x4d28 <_Z14uart_tokenizerhP8as_class+0x284>
		{
			as->set_tx_mode(TX_MODE_MATLAB);
    4d06:	61 e0       	ldi	r22, 0x01	; 1
    4d08:	c8 01       	movw	r24, r16
    4d0a:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN8as_class11set_tx_modeE8tx_modes>
			errno = ER_NO_ERROR;
    4d0e:	19 82       	std	Y+1, r1	; 0x01
    4d10:	69 c6       	rjmp	.+3282   	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		
		//Check if setting to binary mode.
		else if(arr.rx_array[2] == 'B' && arr.rx_array[3] == '\r')
    4d12:	82 34       	cpi	r24, 0x42	; 66
    4d14:	49 f4       	brne	.+18     	; 0x4d28 <_Z14uart_tokenizerhP8as_class+0x284>
    4d16:	80 91 7d 01 	lds	r24, 0x017D
    4d1a:	8d 30       	cpi	r24, 0x0D	; 13
    4d1c:	29 f4       	brne	.+10     	; 0x4d28 <_Z14uart_tokenizerhP8as_class+0x284>
		{
			as->set_tx_mode(TX_MODE_BIN);
    4d1e:	62 e0       	ldi	r22, 0x02	; 2
    4d20:	c8 01       	movw	r24, r16
    4d22:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN8as_class11set_tx_modeE8tx_modes>
			return; //Do not print "OK" if just switched to binary mode.
    4d26:	60 c6       	rjmp	.+3264   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
		}
		else errno = ER_ERROR;//Invalid input.
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	89 83       	std	Y+1, r24	; 0x01
    4d2c:	58 c6       	rjmp	.+3248   	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
	}
	
	//Change number of electrodes.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == ' ')
    4d2e:	82 33       	cpi	r24, 0x32	; 50
    4d30:	41 f5       	brne	.+80     	; 0x4d82 <_Z14uart_tokenizerhP8as_class+0x2de>
    4d32:	90 91 7b 01 	lds	r25, 0x017B
    4d36:	90 32       	cpi	r25, 0x20	; 32
    4d38:	09 f0       	breq	.+2      	; 0x4d3c <_Z14uart_tokenizerhP8as_class+0x298>
    4d3a:	c5 c0       	rjmp	.+394    	; 0x4ec6 <_Z14uart_tokenizerhP8as_class+0x422>
	{
		//errno = change_electrodes(&rx_array[2], as);
		//Check if changing to 2 electrode configuration.
		if(arr.rx_array[2] == '2' && arr.rx_array[3] == '\r')
    4d3c:	80 91 7c 01 	lds	r24, 0x017C
    4d40:	82 33       	cpi	r24, 0x32	; 50
    4d42:	69 f4       	brne	.+26     	; 0x4d5e <_Z14uart_tokenizerhP8as_class+0x2ba>
    4d44:	80 91 7d 01 	lds	r24, 0x017D
    4d48:	8d 30       	cpi	r24, 0x0D	; 13
    4d4a:	c1 f4       	brne	.+48     	; 0x4d7c <_Z14uart_tokenizerhP8as_class+0x2d8>
		{
			as->set_num_electrodes(ELEC_2);
    4d4c:	60 e0       	ldi	r22, 0x00	; 0
    4d4e:	c8 01       	movw	r24, r16
    4d50:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN8as_class18set_num_electrodesE9num_elecs>
			i2c_load_electrodes(as);
    4d54:	c8 01       	movw	r24, r16
    4d56:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_Z19i2c_load_electrodesP8as_class>
			errno = ER_NO_ERROR;
    4d5a:	19 82       	std	Y+1, r1	; 0x01
    4d5c:	43 c6       	rjmp	.+3206   	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		
		//Check if changing to 3 electrode configuration.
		else if(arr.rx_array[2] == '3' && arr.rx_array[3] == '\r')
    4d5e:	83 33       	cpi	r24, 0x33	; 51
    4d60:	69 f4       	brne	.+26     	; 0x4d7c <_Z14uart_tokenizerhP8as_class+0x2d8>
    4d62:	80 91 7d 01 	lds	r24, 0x017D
    4d66:	8d 30       	cpi	r24, 0x0D	; 13
    4d68:	49 f4       	brne	.+18     	; 0x4d7c <_Z14uart_tokenizerhP8as_class+0x2d8>
		{
			as->set_num_electrodes(ELEC_3);
    4d6a:	61 e0       	ldi	r22, 0x01	; 1
    4d6c:	c8 01       	movw	r24, r16
    4d6e:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN8as_class18set_num_electrodesE9num_elecs>
			i2c_load_electrodes(as);
    4d72:	c8 01       	movw	r24, r16
    4d74:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_Z19i2c_load_electrodesP8as_class>
			errno = ER_NO_ERROR;
    4d78:	19 82       	std	Y+1, r1	; 0x01
    4d7a:	34 c6       	rjmp	.+3176   	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		else errno = ER_ERROR;//Invalid input.
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	89 83       	std	Y+1, r24	; 0x01
    4d80:	2e c6       	rjmp	.+3164   	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
	}
	
	//Change ADC sample interval.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == ' ')
    4d82:	83 33       	cpi	r24, 0x33	; 51
    4d84:	81 f4       	brne	.+32     	; 0x4da6 <_Z14uart_tokenizerhP8as_class+0x302>
    4d86:	90 91 7b 01 	lds	r25, 0x017B
    4d8a:	90 32       	cpi	r25, 0x20	; 32
    4d8c:	09 f0       	breq	.+2      	; 0x4d90 <_Z14uart_tokenizerhP8as_class+0x2ec>
    4d8e:	00 c1       	rjmp	.+512    	; 0x4f90 <_Z14uart_tokenizerhP8as_class+0x4ec>
		errno = set_u16(&(arr.rx_array[2]), as, &as_class::set_adc_rate);
    4d90:	2a ea       	ldi	r18, 0xAA	; 170
    4d92:	32 e1       	ldi	r19, 0x12	; 18
    4d94:	40 e0       	ldi	r20, 0x00	; 0
    4d96:	50 e0       	ldi	r21, 0x00	; 0
    4d98:	b8 01       	movw	r22, r16
    4d9a:	8c e7       	ldi	r24, 0x7C	; 124
    4d9c:	91 e0       	ldi	r25, 0x01	; 1
    4d9e:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
    4da2:	89 83       	std	Y+1, r24	; 0x01
    4da4:	19 c6       	rjmp	.+3122   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Print TIA menu.
	else if(arr.rx_array[0] == '4' && arr.rx_array[1] == '\r')
    4da6:	84 33       	cpi	r24, 0x34	; 52
    4da8:	09 f0       	breq	.+2      	; 0x4dac <_Z14uart_tokenizerhP8as_class+0x308>
    4daa:	8d c0       	rjmp	.+282    	; 0x4ec6 <_Z14uart_tokenizerhP8as_class+0x422>
    4dac:	90 91 7b 01 	lds	r25, 0x017B
    4db0:	9d 30       	cpi	r25, 0x0D	; 13
    4db2:	09 f0       	breq	.+2      	; 0x4db6 <_Z14uart_tokenizerhP8as_class+0x312>
    4db4:	65 c1       	rjmp	.+714    	; 0x5080 <_Z14uart_tokenizerhP8as_class+0x5dc>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---TIA MENU---\r"));
    4db6:	8b e0       	ldi	r24, 0x0B	; 11
    4db8:	9a e0       	ldi	r25, 0x0A	; 10
    4dba:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Resistor tap.
		atmega_uart::tx_string_p(PSTR("11. TIA Resistor Tap"));
    4dbe:	86 ef       	ldi	r24, 0xF6	; 246
    4dc0:	99 e0       	ldi	r25, 0x09	; 9
    4dc2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(TAP_MIN, TAP_MAX);
    4dc6:	2f ef       	ldi	r18, 0xFF	; 255
    4dc8:	33 e0       	ldi	r19, 0x03	; 3
    4dca:	40 e0       	ldi	r20, 0x00	; 0
    4dcc:	50 e0       	ldi	r21, 0x00	; 0
    4dce:	61 e0       	ldi	r22, 0x01	; 1
    4dd0:	70 e0       	ldi	r23, 0x00	; 0
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_tia_res_tap());
    4dda:	c8 01       	movw	r24, r16
    4ddc:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN8as_class15get_tia_res_tapEv>
    4de0:	bc 01       	movw	r22, r24
    4de2:	80 e0       	ldi	r24, 0x00	; 0
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    4dea:	8d e0       	ldi	r24, 0x0D	; 13
    4dec:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		uart_print_spaces();
    4df0:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Resistance = "));
    4df4:	88 ee       	ldi	r24, 0xE8	; 232
    4df6:	99 e0       	ldi	r25, 0x09	; 9
    4df8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(as->get_tia_res_tap() * 100000L / 1023);
    4dfc:	c8 01       	movw	r24, r16
    4dfe:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN8as_class15get_tia_res_tapEv>
    4e02:	dc 01       	movw	r26, r24
    4e04:	20 ea       	ldi	r18, 0xA0	; 160
    4e06:	36 e8       	ldi	r19, 0x86	; 134
    4e08:	41 e0       	ldi	r20, 0x01	; 1
    4e0a:	50 e0       	ldi	r21, 0x00	; 0
    4e0c:	0e 94 30 33 	call	0x6660	; 0x6660 <__muluhisi3>
    4e10:	2f ef       	ldi	r18, 0xFF	; 255
    4e12:	33 e0       	ldi	r19, 0x03	; 3
    4e14:	40 e0       	ldi	r20, 0x00	; 0
    4e16:	50 e0       	ldi	r21, 0x00	; 0
    4e18:	0e 94 f5 32 	call	0x65ea	; 0x65ea <__divmodsi4>
    4e1c:	ca 01       	movw	r24, r20
    4e1e:	b9 01       	movw	r22, r18
    4e20:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR(" Ohms\r"));
    4e24:	81 ee       	ldi	r24, 0xE1	; 225
    4e26:	99 e0       	ldi	r25, 0x09	; 9
    4e28:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4e2c:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("R = Tap * 100000 / 1023 Ohms\r"));
    4e30:	83 ec       	ldi	r24, 0xC3	; 195
    4e32:	99 e0       	ldi	r25, 0x09	; 9
    4e34:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Capacitor mask.
		atmega_uart::tx_string_p(PSTR("12. TIA 6-bit Capacitor Mask (XXXXXX): "));
    4e38:	8b e9       	ldi	r24, 0x9B	; 155
    4e3a:	99 e0       	ldi	r25, 0x09	; 9
    4e3c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
    4e40:	0f 2e       	mov	r0, r31
    4e42:	f6 e0       	ldi	r31, 0x06	; 6
    4e44:	ef 2e       	mov	r14, r31
    4e46:	f1 2c       	mov	r15, r1
    4e48:	f0 2d       	mov	r31, r0
		
		//Display individual bits in the mask variable.
		for(uint8_t mask = 0x20; mask > 0; mask >>= 1)
    4e4a:	68 94       	set
    4e4c:	dd 24       	eor	r13, r13
    4e4e:	d5 f8       	bld	r13, 5
		{
			(as->get_tia_cap_mask() & mask) ? atmega_uart::tx_byte('1') : atmega_uart::tx_byte('0');
    4e50:	c8 01       	movw	r24, r16
    4e52:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN8as_class16get_tia_cap_maskEv>
    4e56:	8d 21       	and	r24, r13
    4e58:	21 f0       	breq	.+8      	; 0x4e62 <_Z14uart_tokenizerhP8as_class+0x3be>
    4e5a:	81 e3       	ldi	r24, 0x31	; 49
    4e5c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    4e60:	03 c0       	rjmp	.+6      	; 0x4e68 <_Z14uart_tokenizerhP8as_class+0x3c4>
    4e62:	80 e3       	ldi	r24, 0x30	; 48
    4e64:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Capacitor mask.
		atmega_uart::tx_string_p(PSTR("12. TIA 6-bit Capacitor Mask (XXXXXX): "));
		
		//Display individual bits in the mask variable.
		for(uint8_t mask = 0x20; mask > 0; mask >>= 1)
    4e68:	d6 94       	lsr	r13
    4e6a:	21 e0       	ldi	r18, 0x01	; 1
    4e6c:	e2 1a       	sub	r14, r18
    4e6e:	f1 08       	sbc	r15, r1
    4e70:	e1 14       	cp	r14, r1
    4e72:	f1 04       	cpc	r15, r1
    4e74:	69 f7       	brne	.-38     	; 0x4e50 <_Z14uart_tokenizerhP8as_class+0x3ac>
		{
			(as->get_tia_cap_mask() & mask) ? atmega_uart::tx_byte('1') : atmega_uart::tx_byte('0');
		}
		atmega_uart::tx_byte('\r');
    4e76:	8d e0       	ldi	r24, 0x0D	; 13
    4e78:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		uart_print_spaces();
    4e7c:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 5: 100pf\r"));
    4e80:	8d e8       	ldi	r24, 0x8D	; 141
    4e82:	99 e0       	ldi	r25, 0x09	; 9
    4e84:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4e88:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 4: 1000pf\r"));
    4e8c:	8e e7       	ldi	r24, 0x7E	; 126
    4e8e:	99 e0       	ldi	r25, 0x09	; 9
    4e90:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4e94:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 3: .01uf\r"));
    4e98:	80 e7       	ldi	r24, 0x70	; 112
    4e9a:	99 e0       	ldi	r25, 0x09	; 9
    4e9c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4ea0:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 2: .1uf\r"));
    4ea4:	83 e6       	ldi	r24, 0x63	; 99
    4ea6:	99 e0       	ldi	r25, 0x09	; 9
    4ea8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4eac:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 1: 1uf\r"));
    4eb0:	87 e5       	ldi	r24, 0x57	; 87
    4eb2:	99 e0       	ldi	r25, 0x09	; 9
    4eb4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4eb8:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 0: 10uf\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    4ebc:	8e e3       	ldi	r24, 0x3E	; 62
    4ebe:	99 e0       	ldi	r25, 0x09	; 9
    4ec0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    4ec4:	91 c5       	rjmp	.+2850   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print deposition menu.
	else if(arr.rx_array[0] == '5' && arr.rx_array[1] == '\r')
    4ec6:	85 33       	cpi	r24, 0x35	; 53
    4ec8:	09 f0       	breq	.+2      	; 0x4ecc <_Z14uart_tokenizerhP8as_class+0x428>
    4eca:	62 c0       	rjmp	.+196    	; 0x4f90 <_Z14uart_tokenizerhP8as_class+0x4ec>
    4ecc:	90 91 7b 01 	lds	r25, 0x017B
    4ed0:	9d 30       	cpi	r25, 0x0D	; 13
    4ed2:	09 f0       	breq	.+2      	; 0x4ed6 <_Z14uart_tokenizerhP8as_class+0x432>
    4ed4:	5a c1       	rjmp	.+692    	; 0x518a <_Z14uart_tokenizerhP8as_class+0x6e6>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---DEPOSITION MENU---\r"));
    4ed6:	87 e2       	ldi	r24, 0x27	; 39
    4ed8:	99 e0       	ldi	r25, 0x09	; 9
    4eda:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Enable deposition.
		atmega_uart::tx_string_p(PSTR("13. Enable Deposition (Y/N): "));
    4ede:	89 e0       	ldi	r24, 0x09	; 9
    4ee0:	99 e0       	ldi	r25, 0x09	; 9
    4ee2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_dep_enable());
    4ee6:	c8 01       	movw	r24, r16
    4ee8:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN8as_class14get_dep_enableEv>
    4eec:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_Z11uart_yes_nob>
		
		//Deposition time.
		atmega_uart::tx_string_p(PSTR("14. Deposition Time ms"));
    4ef0:	82 ef       	ldi	r24, 0xF2	; 242
    4ef2:	98 e0       	ldi	r25, 0x08	; 8
    4ef4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(DEP_TIME_MIN, DEP_TIME_MAX);
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
    4efa:	35 e3       	ldi	r19, 0x35	; 53
    4efc:	4c e0       	ldi	r20, 0x0C	; 12
    4efe:	50 e0       	ldi	r21, 0x00	; 0
    4f00:	61 e0       	ldi	r22, 0x01	; 1
    4f02:	70 e0       	ldi	r23, 0x00	; 0
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_dep_time());
    4f0c:	c8 01       	movw	r24, r16
    4f0e:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN8as_class12get_dep_timeEv>
    4f12:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    4f16:	8d e0       	ldi	r24, 0x0D	; 13
    4f18:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Deposition Voltage.
		atmega_uart::tx_string_p(PSTR("15. Deposition Voltage mV"));
    4f1c:	88 ed       	ldi	r24, 0xD8	; 216
    4f1e:	98 e0       	ldi	r25, 0x08	; 8
    4f20:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(DEP_VOLT_MIN, DEP_VOLT_MAX);
    4f24:	62 e7       	ldi	r22, 0x72	; 114
    4f26:	76 e0       	ldi	r23, 0x06	; 6
    4f28:	8e e8       	ldi	r24, 0x8E	; 142
    4f2a:	99 ef       	ldi	r25, 0xF9	; 249
    4f2c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_dep_volt());
    4f30:	c8 01       	movw	r24, r16
    4f32:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN8as_class12get_dep_voltEv>
    4f36:	bc 01       	movw	r22, r24
    4f38:	88 27       	eor	r24, r24
    4f3a:	77 fd       	sbrc	r23, 7
    4f3c:	80 95       	com	r24
    4f3e:	98 2f       	mov	r25, r24
    4f40:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    4f44:	8d e0       	ldi	r24, 0x0D	; 13
    4f46:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Quiet time.
		atmega_uart::tx_string_p(PSTR("16. Quiet Time ms"));
    4f4a:	86 ec       	ldi	r24, 0xC6	; 198
    4f4c:	98 e0       	ldi	r25, 0x08	; 8
    4f4e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(QUIET_TIME_MIN, QUIET_TIME_MAX);
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	35 e3       	ldi	r19, 0x35	; 53
    4f56:	4c e0       	ldi	r20, 0x0C	; 12
    4f58:	50 e0       	ldi	r21, 0x00	; 0
    4f5a:	60 e0       	ldi	r22, 0x00	; 0
    4f5c:	70 e0       	ldi	r23, 0x00	; 0
    4f5e:	cb 01       	movw	r24, r22
    4f60:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_quiet_time());
    4f64:	c8 01       	movw	r24, r16
    4f66:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN8as_class14get_quiet_timeEv>
    4f6a:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    4f6e:	8d e0       	ldi	r24, 0x0D	; 13
    4f70:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Record deposition sequence.
		atmega_uart::tx_string_p(PSTR("17. Record Deposition Sequence (Y/N): "));
    4f74:	8f e9       	ldi	r24, 0x9F	; 159
    4f76:	98 e0       	ldi	r25, 0x08	; 8
    4f78:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_dep_rec());
    4f7c:	c8 01       	movw	r24, r16
    4f7e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    4f82:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_Z11uart_yes_nob>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    4f86:	8d e8       	ldi	r24, 0x8D	; 141
    4f88:	98 e0       	ldi	r25, 0x08	; 8
    4f8a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    4f8e:	2c c5       	rjmp	.+2648   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print linear sweep menu.
	else if(arr.rx_array[0] == '6' && arr.rx_array[1] == '\r')
    4f90:	86 33       	cpi	r24, 0x36	; 54
    4f92:	09 f0       	breq	.+2      	; 0x4f96 <_Z14uart_tokenizerhP8as_class+0x4f2>
    4f94:	75 c0       	rjmp	.+234    	; 0x5080 <_Z14uart_tokenizerhP8as_class+0x5dc>
    4f96:	90 91 7b 01 	lds	r25, 0x017B
    4f9a:	9d 30       	cpi	r25, 0x0D	; 13
    4f9c:	09 f0       	breq	.+2      	; 0x4fa0 <_Z14uart_tokenizerhP8as_class+0x4fc>
    4f9e:	96 c1       	rjmp	.+812    	; 0x52cc <_Z14uart_tokenizerhP8as_class+0x828>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---LINEAR SWEEP MENU---\r"));
    4fa0:	84 e7       	ldi	r24, 0x74	; 116
    4fa2:	98 e0       	ldi	r25, 0x08	; 8
    4fa4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Start Voltage.
		atmega_uart::tx_string_p(PSTR("18. Start Voltage mV"));
    4fa8:	8f e5       	ldi	r24, 0x5F	; 95
    4faa:	98 e0       	ldi	r25, 0x08	; 8
    4fac:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SWEEP_VOLT_MIN, SWEEP_VOLT_MAX);
    4fb0:	62 e7       	ldi	r22, 0x72	; 114
    4fb2:	76 e0       	ldi	r23, 0x06	; 6
    4fb4:	8e e8       	ldi	r24, 0x8E	; 142
    4fb6:	99 ef       	ldi	r25, 0xF9	; 249
    4fb8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_sweep_volt_start());
    4fbc:	c8 01       	movw	r24, r16
    4fbe:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN8as_class20get_sweep_volt_startEv>
    4fc2:	bc 01       	movw	r22, r24
    4fc4:	88 27       	eor	r24, r24
    4fc6:	77 fd       	sbrc	r23, 7
    4fc8:	80 95       	com	r24
    4fca:	98 2f       	mov	r25, r24
    4fcc:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    4fd0:	8d e0       	ldi	r24, 0x0D	; 13
    4fd2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//End voltage.
		atmega_uart::tx_string_p(PSTR("19. End Voltage mV"));
    4fd6:	8c e4       	ldi	r24, 0x4C	; 76
    4fd8:	98 e0       	ldi	r25, 0x08	; 8
    4fda:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SWEEP_VOLT_MIN, SWEEP_VOLT_MAX);
    4fde:	62 e7       	ldi	r22, 0x72	; 114
    4fe0:	76 e0       	ldi	r23, 0x06	; 6
    4fe2:	8e e8       	ldi	r24, 0x8E	; 142
    4fe4:	99 ef       	ldi	r25, 0xF9	; 249
    4fe6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_sweep_volt_end());
    4fea:	c8 01       	movw	r24, r16
    4fec:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN8as_class18get_sweep_volt_endEv>
    4ff0:	bc 01       	movw	r22, r24
    4ff2:	88 27       	eor	r24, r24
    4ff4:	77 fd       	sbrc	r23, 7
    4ff6:	80 95       	com	r24
    4ff8:	98 2f       	mov	r25, r24
    4ffa:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    4ffe:	8d e0       	ldi	r24, 0x0D	; 13
    5000:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Sweep rate.
		atmega_uart::tx_string_p(PSTR("20. Sweep Rate mV/s"));
    5004:	88 e3       	ldi	r24, 0x38	; 56
    5006:	98 e0       	ldi	r25, 0x08	; 8
    5008:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SWEEP_RATE_MIN, SWEEP_RATE_MAX);
    500c:	20 ed       	ldi	r18, 0xD0	; 208
    500e:	37 e0       	ldi	r19, 0x07	; 7
    5010:	40 e0       	ldi	r20, 0x00	; 0
    5012:	50 e0       	ldi	r21, 0x00	; 0
    5014:	61 e0       	ldi	r22, 0x01	; 1
    5016:	70 e0       	ldi	r23, 0x00	; 0
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_sweep_rate());
    5020:	c8 01       	movw	r24, r16
    5022:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN8as_class14get_sweep_rateEv>
    5026:	bc 01       	movw	r22, r24
    5028:	80 e0       	ldi	r24, 0x00	; 0
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5030:	8d e0       	ldi	r24, 0x0D	; 13
    5032:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Cyclic.
		atmega_uart::tx_string_p(PSTR("21. Cyclic (Y/N): "));
    5036:	85 e2       	ldi	r24, 0x25	; 37
    5038:	98 e0       	ldi	r25, 0x08	; 8
    503a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_sweep_cyclic());
    503e:	c8 01       	movw	r24, r16
    5040:	0e 94 95 13 	call	0x272a	; 0x272a <_ZN8as_class16get_sweep_cyclicEv>
    5044:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_Z11uart_yes_nob>
		
		//Number of cycles.
		atmega_uart::tx_string_p(PSTR("22. Number of Cycles"));
    5048:	80 e1       	ldi	r24, 0x10	; 16
    504a:	98 e0       	ldi	r25, 0x08	; 8
    504c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SWEEP_CYCLES_MIN, SWEEP_CYCLES_MAX);
    5050:	24 e6       	ldi	r18, 0x64	; 100
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	40 e0       	ldi	r20, 0x00	; 0
    5056:	50 e0       	ldi	r21, 0x00	; 0
    5058:	61 e0       	ldi	r22, 0x01	; 1
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_sweep_cycles());
    5064:	c8 01       	movw	r24, r16
    5066:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN8as_class16get_sweep_cyclesEv>
    506a:	68 2f       	mov	r22, r24
    506c:	70 e0       	ldi	r23, 0x00	; 0
    506e:	80 e0       	ldi	r24, 0x00	; 0
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    5076:	8d ef       	ldi	r24, 0xFD	; 253
    5078:	97 e0       	ldi	r25, 0x07	; 7
    507a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    507e:	b4 c4       	rjmp	.+2408   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print square wave menu.
	else if(arr.rx_array[0] == '7' && arr.rx_array[1] == '\r')
    5080:	87 33       	cpi	r24, 0x37	; 55
    5082:	09 f0       	breq	.+2      	; 0x5086 <_Z14uart_tokenizerhP8as_class+0x5e2>
    5084:	82 c0       	rjmp	.+260    	; 0x518a <_Z14uart_tokenizerhP8as_class+0x6e6>
    5086:	90 91 7b 01 	lds	r25, 0x017B
    508a:	9d 30       	cpi	r25, 0x0D	; 13
    508c:	09 f0       	breq	.+2      	; 0x5090 <_Z14uart_tokenizerhP8as_class+0x5ec>
    508e:	7e c1       	rjmp	.+764    	; 0x538c <_Z14uart_tokenizerhP8as_class+0x8e8>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---SQUARE WAVE MENU---\r"));
    5090:	85 ee       	ldi	r24, 0xE5	; 229
    5092:	97 e0       	ldi	r25, 0x07	; 7
    5094:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Start voltage.
		atmega_uart::tx_string_p(PSTR("23. Start Voltage mV"));
    5098:	80 ed       	ldi	r24, 0xD0	; 208
    509a:	97 e0       	ldi	r25, 0x07	; 7
    509c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SQUARE_VOLT_MIN, SQUARE_VOLT_MAX);
    50a0:	62 e7       	ldi	r22, 0x72	; 114
    50a2:	76 e0       	ldi	r23, 0x06	; 6
    50a4:	8e e8       	ldi	r24, 0x8E	; 142
    50a6:	99 ef       	ldi	r25, 0xF9	; 249
    50a8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_square_volt_start());
    50ac:	c8 01       	movw	r24, r16
    50ae:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    50b2:	bc 01       	movw	r22, r24
    50b4:	88 27       	eor	r24, r24
    50b6:	77 fd       	sbrc	r23, 7
    50b8:	80 95       	com	r24
    50ba:	98 2f       	mov	r25, r24
    50bc:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    50c0:	8d e0       	ldi	r24, 0x0D	; 13
    50c2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//End voltage.
		atmega_uart::tx_string_p(PSTR("24. End Voltage mV"));
    50c6:	8d eb       	ldi	r24, 0xBD	; 189
    50c8:	97 e0       	ldi	r25, 0x07	; 7
    50ca:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SQUARE_VOLT_MIN, SQUARE_VOLT_MAX);
    50ce:	62 e7       	ldi	r22, 0x72	; 114
    50d0:	76 e0       	ldi	r23, 0x06	; 6
    50d2:	8e e8       	ldi	r24, 0x8E	; 142
    50d4:	99 ef       	ldi	r25, 0xF9	; 249
    50d6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_square_volt_end());
    50da:	c8 01       	movw	r24, r16
    50dc:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    50e0:	bc 01       	movw	r22, r24
    50e2:	88 27       	eor	r24, r24
    50e4:	77 fd       	sbrc	r23, 7
    50e6:	80 95       	com	r24
    50e8:	98 2f       	mov	r25, r24
    50ea:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    50ee:	8d e0       	ldi	r24, 0x0D	; 13
    50f0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Square wave amplitude.
		atmega_uart::tx_string_p(PSTR("25. Square Wave Amplitude mV"));
    50f4:	80 ea       	ldi	r24, 0xA0	; 160
    50f6:	97 e0       	ldi	r25, 0x07	; 7
    50f8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SQUARE_AMP_MIN, SQUARE_AMP_MAX);
    50fc:	22 e7       	ldi	r18, 0x72	; 114
    50fe:	36 e0       	ldi	r19, 0x06	; 6
    5100:	40 e0       	ldi	r20, 0x00	; 0
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	60 e0       	ldi	r22, 0x00	; 0
    5106:	70 e0       	ldi	r23, 0x00	; 0
    5108:	cb 01       	movw	r24, r22
    510a:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_square_amp());
    510e:	c8 01       	movw	r24, r16
    5110:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5114:	bc 01       	movw	r22, r24
    5116:	80 e0       	ldi	r24, 0x00	; 0
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    511e:	8d e0       	ldi	r24, 0x0D	; 13
    5120:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Square wave increment.
		atmega_uart::tx_string_p(PSTR("26. Square Wave Increment mV"));
    5124:	83 e8       	ldi	r24, 0x83	; 131
    5126:	97 e0       	ldi	r25, 0x07	; 7
    5128:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SQUARE_INC_MIN, SQUARE_INC_MAX);
    512c:	22 e7       	ldi	r18, 0x72	; 114
    512e:	36 e0       	ldi	r19, 0x06	; 6
    5130:	40 e0       	ldi	r20, 0x00	; 0
    5132:	50 e0       	ldi	r21, 0x00	; 0
    5134:	60 e0       	ldi	r22, 0x00	; 0
    5136:	70 e0       	ldi	r23, 0x00	; 0
    5138:	cb 01       	movw	r24, r22
    513a:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_square_inc());
    513e:	c8 01       	movw	r24, r16
    5140:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN8as_class14get_square_incEv>
    5144:	bc 01       	movw	r22, r24
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    514e:	8d e0       	ldi	r24, 0x0D	; 13
    5150:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Square wave period.
		atmega_uart::tx_string_p(PSTR("27. Square Wave Half Period ms"));
    5154:	84 e6       	ldi	r24, 0x64	; 100
    5156:	97 e0       	ldi	r25, 0x07	; 7
    5158:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SQUARE_PER_MIN, SQUARE_PER_MAX);
    515c:	20 e1       	ldi	r18, 0x10	; 16
    515e:	37 e2       	ldi	r19, 0x27	; 39
    5160:	40 e0       	ldi	r20, 0x00	; 0
    5162:	50 e0       	ldi	r21, 0x00	; 0
    5164:	61 e0       	ldi	r22, 0x01	; 1
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	80 e0       	ldi	r24, 0x00	; 0
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_square_period());
    5170:	c8 01       	movw	r24, r16
    5172:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN8as_class17get_square_periodEv>
    5176:	bc 01       	movw	r22, r24
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    5180:	81 e5       	ldi	r24, 0x51	; 81
    5182:	97 e0       	ldi	r25, 0x07	; 7
    5184:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    5188:	2f c4       	rjmp	.+2142   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print arbitrary waveform menu.
	else if(arr.rx_array[0] == '8' && arr.rx_array[1] == '\r')
    518a:	88 33       	cpi	r24, 0x38	; 56
    518c:	09 f0       	breq	.+2      	; 0x5190 <_Z14uart_tokenizerhP8as_class+0x6ec>
    518e:	9e c0       	rjmp	.+316    	; 0x52cc <_Z14uart_tokenizerhP8as_class+0x828>
    5190:	90 91 7b 01 	lds	r25, 0x017B
    5194:	9d 30       	cpi	r25, 0x0D	; 13
    5196:	09 f0       	breq	.+2      	; 0x519a <_Z14uart_tokenizerhP8as_class+0x6f6>
    5198:	ca c1       	rjmp	.+916    	; 0x552e <_Z14uart_tokenizerhP8as_class+0xa8a>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---ARBITRARY WAVEFORM MENU---\r"));
    519a:	82 e3       	ldi	r24, 0x32	; 50
    519c:	97 e0       	ldi	r25, 0x07	; 7
    519e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Append entry.
		atmega_uart::tx_string_p(PSTR("28. Append Entry (StartmV StopmV RatemV/s)\r"));
    51a2:	86 e0       	ldi	r24, 0x06	; 6
    51a4:	97 e0       	ldi	r25, 0x07	; 7
    51a6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Replace entry.
		atmega_uart::tx_string_p(PSTR("29. Replace Entry (Entry# StartmV StopmV RatemV/s)\r"));
    51aa:	82 ed       	ldi	r24, 0xD2	; 210
    51ac:	96 e0       	ldi	r25, 0x06	; 6
    51ae:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Delete last entry.
		atmega_uart::tx_string_p(PSTR("30. Delete Last Entry\r"));
    51b2:	8b eb       	ldi	r24, 0xBB	; 187
    51b4:	96 e0       	ldi	r25, 0x06	; 6
    51b6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Delete all entries.
		atmega_uart::tx_string_p(PSTR("31. Delete All Entries\r"));
    51ba:	83 ea       	ldi	r24, 0xA3	; 163
    51bc:	96 e0       	ldi	r25, 0x06	; 6
    51be:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Show stored values
		atmega_uart::tx_string_p(PSTR("32. Get Stored Values\r"));
    51c2:	8c e8       	ldi	r24, 0x8C	; 140
    51c4:	96 e0       	ldi	r25, 0x06	; 6
    51c6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Cyclic.
		atmega_uart::tx_string_p(PSTR("33. Cyclic (Y/N): "));
    51ca:	89 e7       	ldi	r24, 0x79	; 121
    51cc:	96 e0       	ldi	r25, 0x06	; 6
    51ce:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_arb_cyclic());
    51d2:	c8 01       	movw	r24, r16
    51d4:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN8as_class14get_arb_cyclicEv>
    51d8:	91 e0       	ldi	r25, 0x01	; 1
    51da:	81 11       	cpse	r24, r1
    51dc:	01 c0       	rjmp	.+2      	; 0x51e0 <_Z14uart_tokenizerhP8as_class+0x73c>
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	89 2f       	mov	r24, r25
    51e2:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_Z11uart_yes_nob>
		
		//Number of cycles.
		atmega_uart::tx_string_p(PSTR("34. Number of Cycles"));
    51e6:	84 e6       	ldi	r24, 0x64	; 100
    51e8:	96 e0       	ldi	r25, 0x06	; 6
    51ea:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(ARB_CYCLES_MIN, ARB_CYCLES_MAX);
    51ee:	24 e6       	ldi	r18, 0x64	; 100
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	40 e0       	ldi	r20, 0x00	; 0
    51f4:	50 e0       	ldi	r21, 0x00	; 0
    51f6:	61 e0       	ldi	r22, 0x01	; 1
    51f8:	70 e0       	ldi	r23, 0x00	; 0
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_arb_cycles());
    5202:	c8 01       	movw	r24, r16
    5204:	0e 94 16 14 	call	0x282c	; 0x282c <_ZN8as_class14get_arb_cyclesEv>
    5208:	68 2f       	mov	r22, r24
    520a:	70 e0       	ldi	r23, 0x00	; 0
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r"));
    5214:	81 e6       	ldi	r24, 0x61	; 97
    5216:	96 e0       	ldi	r25, 0x06	; 6
    5218:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Stored entries.
		atmega_uart::tx_string_p(PSTR("Number of Stored Entries (Up to "));
    521c:	80 e4       	ldi	r24, 0x40	; 64
    521e:	96 e0       	ldi	r25, 0x06	; 6
    5220:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_ENTRIES_MAX);
    5224:	66 e9       	ldi	r22, 0x96	; 150
    5226:	70 e0       	ldi	r23, 0x00	; 0
    5228:	80 e0       	ldi	r24, 0x00	; 0
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("): "));
    5230:	8c e3       	ldi	r24, 0x3C	; 60
    5232:	96 e0       	ldi	r25, 0x06	; 6
    5234:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(atmega_eeprom::read_word((uint16_t *)ARB_NUM));
    5238:	86 e0       	ldi	r24, 0x06	; 6
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    5240:	bc 01       	movw	r22, r24
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		
		//Arbitrary waveform value limits.
		atmega_uart::tx_string_p(PSTR("\r\rStartmV: "));
    524a:	80 e3       	ldi	r24, 0x30	; 48
    524c:	96 e0       	ldi	r25, 0x06	; 6
    524e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MIN);
    5252:	6e e8       	ldi	r22, 0x8E	; 142
    5254:	79 ef       	ldi	r23, 0xF9	; 249
    5256:	8f ef       	ldi	r24, 0xFF	; 255
    5258:	9f ef       	ldi	r25, 0xFF	; 255
    525a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR(" to "));
    525e:	8b e2       	ldi	r24, 0x2B	; 43
    5260:	96 e0       	ldi	r25, 0x06	; 6
    5262:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MAX);
    5266:	62 e7       	ldi	r22, 0x72	; 114
    5268:	76 e0       	ldi	r23, 0x06	; 6
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("\rEndmV:   "));
    5272:	80 e2       	ldi	r24, 0x20	; 32
    5274:	96 e0       	ldi	r25, 0x06	; 6
    5276:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MIN);
    527a:	6e e8       	ldi	r22, 0x8E	; 142
    527c:	79 ef       	ldi	r23, 0xF9	; 249
    527e:	8f ef       	ldi	r24, 0xFF	; 255
    5280:	9f ef       	ldi	r25, 0xFF	; 255
    5282:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR(" to "));
    5286:	8b e1       	ldi	r24, 0x1B	; 27
    5288:	96 e0       	ldi	r25, 0x06	; 6
    528a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MAX);
    528e:	62 e7       	ldi	r22, 0x72	; 114
    5290:	76 e0       	ldi	r23, 0x06	; 6
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("\rRatemV/s: "));
    529a:	8f e0       	ldi	r24, 0x0F	; 15
    529c:	96 e0       	ldi	r25, 0x06	; 6
    529e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(ARB_RATE_MIN);
    52a2:	61 e0       	ldi	r22, 0x01	; 1
    52a4:	70 e0       	ldi	r23, 0x00	; 0
    52a6:	80 e0       	ldi	r24, 0x00	; 0
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR(" to "));
    52ae:	8a e0       	ldi	r24, 0x0A	; 10
    52b0:	96 e0       	ldi	r25, 0x06	; 6
    52b2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(ARB_RATE_MAX);
    52b6:	60 ed       	ldi	r22, 0xD0	; 208
    52b8:	77 e0       	ldi	r23, 0x07	; 7
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r"));
    52c2:	8f ef       	ldi	r24, 0xFF	; 255
    52c4:	95 e0       	ldi	r25, 0x05	; 5
    52c6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    52ca:	8e c3       	rjmp	.+1820   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print low-pass filter menu.
	else if(arr.rx_array[0] == '9' && arr.rx_array[1] == '\r')
    52cc:	89 33       	cpi	r24, 0x39	; 57
    52ce:	09 f0       	breq	.+2      	; 0x52d2 <_Z14uart_tokenizerhP8as_class+0x82e>
    52d0:	5d c0       	rjmp	.+186    	; 0x538c <_Z14uart_tokenizerhP8as_class+0x8e8>
    52d2:	90 91 7b 01 	lds	r25, 0x017B
    52d6:	9d 30       	cpi	r25, 0x0D	; 13
    52d8:	09 f0       	breq	.+2      	; 0x52dc <_Z14uart_tokenizerhP8as_class+0x838>
    52da:	b9 c2       	rjmp	.+1394   	; 0x584e <_Z14uart_tokenizerhP8as_class+0xdaa>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---LOW-PASS FILTER MENU---\r"));
    52dc:	83 ee       	ldi	r24, 0xE3	; 227
    52de:	95 e0       	ldi	r25, 0x05	; 5
    52e0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Enable filter.
		atmega_uart::tx_string_p(PSTR("35. Enable Software Filter (Y/N): "));
    52e4:	80 ec       	ldi	r24, 0xC0	; 192
    52e6:	95 e0       	ldi	r25, 0x05	; 5
    52e8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_soft_filt());
    52ec:	c8 01       	movw	r24, r16
    52ee:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN8as_class13get_soft_filtEv>
    52f2:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_Z11uart_yes_nob>
		
		//Selected software filter.
		atmega_uart::tx_string_p(PSTR("36. Selected Filter"));
    52f6:	8c ea       	ldi	r24, 0xAC	; 172
    52f8:	95 e0       	ldi	r25, 0x05	; 5
    52fa:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(LPF_FILT_MIN, LPF_FILT_MAX);
    52fe:	27 e0       	ldi	r18, 0x07	; 7
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	61 e0       	ldi	r22, 0x01	; 1
    5308:	70 e0       	ldi	r23, 0x00	; 0
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_soft_sel());
    5312:	c8 01       	movw	r24, r16
    5314:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZN8as_class12get_soft_selEv>
    5318:	68 2f       	mov	r22, r24
    531a:	70 e0       	ldi	r23, 0x00	; 0
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5324:	8d e0       	ldi	r24, 0x0D	; 13
    5326:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		uart_print_spaces();
    532a:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("   Cutoff\r"));
    532e:	81 ea       	ldi	r24, 0xA1	; 161
    5330:	95 e0       	ldi	r25, 0x05	; 5
    5332:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5336:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("1:   1Hz\r"));
    533a:	87 e9       	ldi	r24, 0x97	; 151
    533c:	95 e0       	ldi	r25, 0x05	; 5
    533e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5342:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("2:   5Hz\r"));
    5346:	8d e8       	ldi	r24, 0x8D	; 141
    5348:	95 e0       	ldi	r25, 0x05	; 5
    534a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    534e:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("3:  10Hz\r"));
    5352:	83 e8       	ldi	r24, 0x83	; 131
    5354:	95 e0       	ldi	r25, 0x05	; 5
    5356:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    535a:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("4:  50Hz\r"));
    535e:	89 e7       	ldi	r24, 0x79	; 121
    5360:	95 e0       	ldi	r25, 0x05	; 5
    5362:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5366:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("5: 100Hz\r"));
    536a:	8f e6       	ldi	r24, 0x6F	; 111
    536c:	95 e0       	ldi	r25, 0x05	; 5
    536e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5372:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("6: 150Hz\r"));
    5376:	85 e6       	ldi	r24, 0x65	; 101
    5378:	95 e0       	ldi	r25, 0x05	; 5
    537a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    537e:	0e 94 35 21 	call	0x426a	; 0x426a <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("7: 200Hz\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    5382:	8f e4       	ldi	r24, 0x4F	; 79
    5384:	95 e0       	ldi	r25, 0x05	; 5
    5386:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    538a:	2e c3       	rjmp	.+1628   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print settings.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '0' && arr.rx_array[2] == '\r')
    538c:	81 33       	cpi	r24, 0x31	; 49
    538e:	09 f0       	breq	.+2      	; 0x5392 <_Z14uart_tokenizerhP8as_class+0x8ee>
    5390:	ce c0       	rjmp	.+412    	; 0x552e <_Z14uart_tokenizerhP8as_class+0xa8a>
    5392:	80 91 7b 01 	lds	r24, 0x017B
    5396:	80 33       	cpi	r24, 0x30	; 48
    5398:	41 f4       	brne	.+16     	; 0x53aa <_Z14uart_tokenizerhP8as_class+0x906>
    539a:	90 91 7c 01 	lds	r25, 0x017C
    539e:	9d 30       	cpi	r25, 0x0D	; 13
    53a0:	c9 f4       	brne	.+50     	; 0x53d4 <_Z14uart_tokenizerhP8as_class+0x930>
	{
		uart_print_settings(as);
    53a2:	c8 01       	movw	r24, r16
    53a4:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Z19uart_print_settingsP8as_class>
		return;
    53a8:	1f c3       	rjmp	.+1598   	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Change digital potentiometer wiper tap.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '1' && arr.rx_array[2] == ' ')
    53aa:	81 33       	cpi	r24, 0x31	; 49
    53ac:	99 f4       	brne	.+38     	; 0x53d4 <_Z14uart_tokenizerhP8as_class+0x930>
    53ae:	90 91 7c 01 	lds	r25, 0x017C
    53b2:	90 32       	cpi	r25, 0x20	; 32
    53b4:	09 f0       	breq	.+2      	; 0x53b8 <_Z14uart_tokenizerhP8as_class+0x914>
    53b6:	41 c0       	rjmp	.+130    	; 0x543a <_Z14uart_tokenizerhP8as_class+0x996>
	{
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_tia_res_tap);
    53b8:	2e eb       	ldi	r18, 0xBE	; 190
    53ba:	32 e1       	ldi	r19, 0x12	; 18
    53bc:	40 e0       	ldi	r20, 0x00	; 0
    53be:	50 e0       	ldi	r21, 0x00	; 0
    53c0:	b8 01       	movw	r22, r16
    53c2:	8d e7       	ldi	r24, 0x7D	; 125
    53c4:	91 e0       	ldi	r25, 0x01	; 1
    53c6:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
    53ca:	89 83       	std	Y+1, r24	; 0x01
		
		//Update digital potentiometer.
		i2c_load_pot(as);
    53cc:	c8 01       	movw	r24, r16
    53ce:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_Z12i2c_load_potP8as_class>
    53d2:	02 c3       	rjmp	.+1540   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	}
	
	//Change capacitor mask.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '2' && arr.rx_array[2] == ' ')
    53d4:	82 33       	cpi	r24, 0x32	; 50
    53d6:	89 f5       	brne	.+98     	; 0x543a <_Z14uart_tokenizerhP8as_class+0x996>
    53d8:	90 91 7c 01 	lds	r25, 0x017C
    53dc:	90 32       	cpi	r25, 0x20	; 32
    53de:	09 f0       	breq	.+2      	; 0x53e2 <_Z14uart_tokenizerhP8as_class+0x93e>
    53e0:	3d c0       	rjmp	.+122    	; 0x545c <_Z14uart_tokenizerhP8as_class+0x9b8>
	{
		uint8_t number = 0;
		errno = ER_NO_ERROR;
		
		//Check to make sure there is exactly 6 characters.
		if(arr.rx_array[9] != '\r')
    53e2:	80 91 83 01 	lds	r24, 0x0183
    53e6:	8d 30       	cpi	r24, 0x0D	; 13
    53e8:	19 f0       	breq	.+6      	; 0x53f0 <_Z14uart_tokenizerhP8as_class+0x94c>
			errno = ER_ERROR;
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	89 83       	std	Y+1, r24	; 0x01
    53ee:	21 c0       	rjmp	.+66     	; 0x5432 <_Z14uart_tokenizerhP8as_class+0x98e>
    53f0:	ed e7       	ldi	r30, 0x7D	; 125
    53f2:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t number = 0;
		errno = ER_NO_ERROR;
		
		//Check to make sure there is exactly 6 characters.
		if(arr.rx_array[9] != '\r')
    53f4:	85 e0       	ldi	r24, 0x05	; 5
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	70 e0       	ldi	r23, 0x00	; 0
    53fa:	60 e0       	ldi	r22, 0x00	; 0
				if(arr.rx_array[i] == '1')
					number |= (1 << (8 - i));	//Set bit.
				else if(arr.rx_array[i] == '0');
				//Do nothing.  Default bit is zero.
				else
					errno = ER_ERROR;
    53fc:	a1 e0       	ldi	r26, 0x01	; 1
		else
			//Loop through all 6 bits of the capacitor mask.
			for(int i = 3; i < 9; i++)
			{
				if(arr.rx_array[i] == '1')
					number |= (1 << (8 - i));	//Set bit.
    53fe:	21 e0       	ldi	r18, 0x01	; 1
    5400:	30 e0       	ldi	r19, 0x00	; 0
			errno = ER_ERROR;
		else
			//Loop through all 6 bits of the capacitor mask.
			for(int i = 3; i < 9; i++)
			{
				if(arr.rx_array[i] == '1')
    5402:	41 91       	ld	r20, Z+
    5404:	41 33       	cpi	r20, 0x31	; 49
    5406:	49 f4       	brne	.+18     	; 0x541a <_Z14uart_tokenizerhP8as_class+0x976>
					number |= (1 << (8 - i));	//Set bit.
    5408:	a9 01       	movw	r20, r18
    540a:	08 2e       	mov	r0, r24
    540c:	02 c0       	rjmp	.+4      	; 0x5412 <_Z14uart_tokenizerhP8as_class+0x96e>
    540e:	44 0f       	add	r20, r20
    5410:	55 1f       	adc	r21, r21
    5412:	0a 94       	dec	r0
    5414:	e2 f7       	brpl	.-8      	; 0x540e <_Z14uart_tokenizerhP8as_class+0x96a>
    5416:	64 2b       	or	r22, r20
    5418:	03 c0       	rjmp	.+6      	; 0x5420 <_Z14uart_tokenizerhP8as_class+0x97c>
				else if(arr.rx_array[i] == '0');
    541a:	40 33       	cpi	r20, 0x30	; 48
    541c:	09 f0       	breq	.+2      	; 0x5420 <_Z14uart_tokenizerhP8as_class+0x97c>
				//Do nothing.  Default bit is zero.
				else
					errno = ER_ERROR;
    541e:	7a 2f       	mov	r23, r26
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	78 f7       	brcc	.-34     	; 0x5402 <_Z14uart_tokenizerhP8as_class+0x95e>
    5424:	79 83       	std	Y+1, r23	; 0x01
			}
		
		//Save value.
		if(!errno)
    5426:	71 11       	cpse	r23, r1
    5428:	04 c0       	rjmp	.+8      	; 0x5432 <_Z14uart_tokenizerhP8as_class+0x98e>
			errno = as->set_tia_cap_mask(number);
    542a:	c8 01       	movw	r24, r16
    542c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN8as_class16set_tia_cap_maskEh>
    5430:	89 83       	std	Y+1, r24	; 0x01
		
		//Update analog switch.
		i2c_load_cap_mask(as);
    5432:	c8 01       	movw	r24, r16
    5434:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z17i2c_load_cap_maskP8as_class>
    5438:	cf c2       	rjmp	.+1438   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	}
	
	//Enable deposition sequence.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    543a:	83 33       	cpi	r24, 0x33	; 51
    543c:	79 f4       	brne	.+30     	; 0x545c <_Z14uart_tokenizerhP8as_class+0x9b8>
    543e:	90 91 7c 01 	lds	r25, 0x017C
    5442:	90 32       	cpi	r25, 0x20	; 32
    5444:	e1 f4       	brne	.+56     	; 0x547e <_Z14uart_tokenizerhP8as_class+0x9da>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_dep_enable);
    5446:	2d ef       	ldi	r18, 0xFD	; 253
    5448:	32 e1       	ldi	r19, 0x12	; 18
    544a:	40 e0       	ldi	r20, 0x00	; 0
    544c:	50 e0       	ldi	r21, 0x00	; 0
    544e:	b8 01       	movw	r22, r16
    5450:	8d e7       	ldi	r24, 0x7D	; 125
    5452:	91 e0       	ldi	r25, 0x01	; 1
    5454:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
    5458:	89 83       	std	Y+1, r24	; 0x01
    545a:	be c2       	rjmp	.+1404   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//change deposition time.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    545c:	84 33       	cpi	r24, 0x34	; 52
    545e:	79 f4       	brne	.+30     	; 0x547e <_Z14uart_tokenizerhP8as_class+0x9da>
    5460:	90 91 7c 01 	lds	r25, 0x017C
    5464:	90 32       	cpi	r25, 0x20	; 32
    5466:	e1 f4       	brne	.+56     	; 0x54a0 <_Z14uart_tokenizerhP8as_class+0x9fc>
		errno = set_u32(&(arr.rx_array[3]), as, &as_class::set_dep_time);
    5468:	24 e0       	ldi	r18, 0x04	; 4
    546a:	33 e1       	ldi	r19, 0x13	; 19
    546c:	40 e0       	ldi	r20, 0x00	; 0
    546e:	50 e0       	ldi	r21, 0x00	; 0
    5470:	b8 01       	movw	r22, r16
    5472:	8d e7       	ldi	r24, 0x7D	; 125
    5474:	91 e0       	ldi	r25, 0x01	; 1
    5476:	0e 94 db 24 	call	0x49b6	; 0x49b6 <_Z7set_u32PKhP8as_classMS1_FhmE>
    547a:	89 83       	std	Y+1, r24	; 0x01
    547c:	ad c2       	rjmp	.+1370   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change deposition voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    547e:	85 33       	cpi	r24, 0x35	; 53
    5480:	79 f4       	brne	.+30     	; 0x54a0 <_Z14uart_tokenizerhP8as_class+0x9fc>
    5482:	90 91 7c 01 	lds	r25, 0x017C
    5486:	90 32       	cpi	r25, 0x20	; 32
    5488:	e1 f4       	brne	.+56     	; 0x54c2 <_Z14uart_tokenizerhP8as_class+0xa1e>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_dep_volt);
    548a:	21 e2       	ldi	r18, 0x21	; 33
    548c:	33 e1       	ldi	r19, 0x13	; 19
    548e:	40 e0       	ldi	r20, 0x00	; 0
    5490:	50 e0       	ldi	r21, 0x00	; 0
    5492:	b8 01       	movw	r22, r16
    5494:	8d e7       	ldi	r24, 0x7D	; 125
    5496:	91 e0       	ldi	r25, 0x01	; 1
    5498:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z9set_int16PKhP8as_classMS1_FhiE>
    549c:	89 83       	std	Y+1, r24	; 0x01
    549e:	9c c2       	rjmp	.+1336   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change quiet time.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    54a0:	86 33       	cpi	r24, 0x36	; 54
    54a2:	79 f4       	brne	.+30     	; 0x54c2 <_Z14uart_tokenizerhP8as_class+0xa1e>
    54a4:	90 91 7c 01 	lds	r25, 0x017C
    54a8:	90 32       	cpi	r25, 0x20	; 32
    54aa:	e1 f4       	brne	.+56     	; 0x54e4 <_Z14uart_tokenizerhP8as_class+0xa40>
		errno = set_u32(&(arr.rx_array[3]), as, &as_class::set_quiet_time);
    54ac:	26 e3       	ldi	r18, 0x36	; 54
    54ae:	33 e1       	ldi	r19, 0x13	; 19
    54b0:	40 e0       	ldi	r20, 0x00	; 0
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	b8 01       	movw	r22, r16
    54b6:	8d e7       	ldi	r24, 0x7D	; 125
    54b8:	91 e0       	ldi	r25, 0x01	; 1
    54ba:	0e 94 db 24 	call	0x49b6	; 0x49b6 <_Z7set_u32PKhP8as_classMS1_FhmE>
    54be:	89 83       	std	Y+1, r24	; 0x01
    54c0:	8b c2       	rjmp	.+1302   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Record deposition sequence.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '7' && arr.rx_array[2] == ' ')
    54c2:	87 33       	cpi	r24, 0x37	; 55
    54c4:	79 f4       	brne	.+30     	; 0x54e4 <_Z14uart_tokenizerhP8as_class+0xa40>
    54c6:	90 91 7c 01 	lds	r25, 0x017C
    54ca:	90 32       	cpi	r25, 0x20	; 32
    54cc:	e9 f4       	brne	.+58     	; 0x5508 <_Z14uart_tokenizerhP8as_class+0xa64>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_dep_rec);
    54ce:	2c e4       	ldi	r18, 0x4C	; 76
    54d0:	33 e1       	ldi	r19, 0x13	; 19
    54d2:	40 e0       	ldi	r20, 0x00	; 0
    54d4:	50 e0       	ldi	r21, 0x00	; 0
    54d6:	b8 01       	movw	r22, r16
    54d8:	8d e7       	ldi	r24, 0x7D	; 125
    54da:	91 e0       	ldi	r25, 0x01	; 1
    54dc:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
    54e0:	89 83       	std	Y+1, r24	; 0x01
    54e2:	7a c2       	rjmp	.+1268   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change sweep start voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '8' && arr.rx_array[2] == ' ')
    54e4:	88 33       	cpi	r24, 0x38	; 56
    54e6:	81 f4       	brne	.+32     	; 0x5508 <_Z14uart_tokenizerhP8as_class+0xa64>
    54e8:	80 91 7c 01 	lds	r24, 0x017C
    54ec:	80 32       	cpi	r24, 0x20	; 32
    54ee:	09 f0       	breq	.+2      	; 0x54f2 <_Z14uart_tokenizerhP8as_class+0xa4e>
    54f0:	70 c2       	rjmp	.+1248   	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_sweep_volt_start);
    54f2:	23 e5       	ldi	r18, 0x53	; 83
    54f4:	33 e1       	ldi	r19, 0x13	; 19
    54f6:	40 e0       	ldi	r20, 0x00	; 0
    54f8:	50 e0       	ldi	r21, 0x00	; 0
    54fa:	b8 01       	movw	r22, r16
    54fc:	8d e7       	ldi	r24, 0x7D	; 125
    54fe:	91 e0       	ldi	r25, 0x01	; 1
    5500:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z9set_int16PKhP8as_classMS1_FhiE>
    5504:	89 83       	std	Y+1, r24	; 0x01
    5506:	68 c2       	rjmp	.+1232   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change sweep end voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '9' && arr.rx_array[2] == ' ')
    5508:	89 33       	cpi	r24, 0x39	; 57
    550a:	09 f0       	breq	.+2      	; 0x550e <_Z14uart_tokenizerhP8as_class+0xa6a>
    550c:	62 c2       	rjmp	.+1220   	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
    550e:	80 91 7c 01 	lds	r24, 0x017C
    5512:	80 32       	cpi	r24, 0x20	; 32
    5514:	09 f0       	breq	.+2      	; 0x5518 <_Z14uart_tokenizerhP8as_class+0xa74>
    5516:	5d c2       	rjmp	.+1210   	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_sweep_volt_end);
    5518:	28 e6       	ldi	r18, 0x68	; 104
    551a:	33 e1       	ldi	r19, 0x13	; 19
    551c:	40 e0       	ldi	r20, 0x00	; 0
    551e:	50 e0       	ldi	r21, 0x00	; 0
    5520:	b8 01       	movw	r22, r16
    5522:	8d e7       	ldi	r24, 0x7D	; 125
    5524:	91 e0       	ldi	r25, 0x01	; 1
    5526:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z9set_int16PKhP8as_classMS1_FhiE>
    552a:	89 83       	std	Y+1, r24	; 0x01
    552c:	55 c2       	rjmp	.+1194   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change sweep rate.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '0' && arr.rx_array[2] == ' ')
    552e:	82 33       	cpi	r24, 0x32	; 50
    5530:	09 f0       	breq	.+2      	; 0x5534 <_Z14uart_tokenizerhP8as_class+0xa90>
    5532:	8d c1       	rjmp	.+794    	; 0x584e <_Z14uart_tokenizerhP8as_class+0xdaa>
    5534:	80 91 7b 01 	lds	r24, 0x017B
    5538:	80 33       	cpi	r24, 0x30	; 48
    553a:	79 f4       	brne	.+30     	; 0x555a <_Z14uart_tokenizerhP8as_class+0xab6>
    553c:	90 91 7c 01 	lds	r25, 0x017C
    5540:	90 32       	cpi	r25, 0x20	; 32
    5542:	e1 f4       	brne	.+56     	; 0x557c <_Z14uart_tokenizerhP8as_class+0xad8>
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_sweep_rate);
    5544:	2d e7       	ldi	r18, 0x7D	; 125
    5546:	33 e1       	ldi	r19, 0x13	; 19
    5548:	40 e0       	ldi	r20, 0x00	; 0
    554a:	50 e0       	ldi	r21, 0x00	; 0
    554c:	b8 01       	movw	r22, r16
    554e:	8d e7       	ldi	r24, 0x7D	; 125
    5550:	91 e0       	ldi	r25, 0x01	; 1
    5552:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
    5556:	89 83       	std	Y+1, r24	; 0x01
    5558:	3f c2       	rjmp	.+1150   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change if sweep function is cyclic.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '1' && arr.rx_array[2] == ' ')
    555a:	81 33       	cpi	r24, 0x31	; 49
    555c:	79 f4       	brne	.+30     	; 0x557c <_Z14uart_tokenizerhP8as_class+0xad8>
    555e:	90 91 7c 01 	lds	r25, 0x017C
    5562:	90 32       	cpi	r25, 0x20	; 32
    5564:	e9 f4       	brne	.+58     	; 0x55a0 <_Z14uart_tokenizerhP8as_class+0xafc>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_sweep_cyclic);
    5566:	21 e9       	ldi	r18, 0x91	; 145
    5568:	33 e1       	ldi	r19, 0x13	; 19
    556a:	40 e0       	ldi	r20, 0x00	; 0
    556c:	50 e0       	ldi	r21, 0x00	; 0
    556e:	b8 01       	movw	r22, r16
    5570:	8d e7       	ldi	r24, 0x7D	; 125
    5572:	91 e0       	ldi	r25, 0x01	; 1
    5574:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
    5578:	89 83       	std	Y+1, r24	; 0x01
    557a:	2e c2       	rjmp	.+1116   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change number of sweep cycles.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '2' && arr.rx_array[2] == ' ')
    557c:	82 33       	cpi	r24, 0x32	; 50
    557e:	81 f4       	brne	.+32     	; 0x55a0 <_Z14uart_tokenizerhP8as_class+0xafc>
    5580:	90 91 7c 01 	lds	r25, 0x017C
    5584:	90 32       	cpi	r25, 0x20	; 32
    5586:	09 f0       	breq	.+2      	; 0x558a <_Z14uart_tokenizerhP8as_class+0xae6>
    5588:	5b c0       	rjmp	.+182    	; 0x5640 <_Z14uart_tokenizerhP8as_class+0xb9c>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_sweep_cycles);
    558a:	28 e9       	ldi	r18, 0x98	; 152
    558c:	33 e1       	ldi	r19, 0x13	; 19
    558e:	40 e0       	ldi	r20, 0x00	; 0
    5590:	50 e0       	ldi	r21, 0x00	; 0
    5592:	b8 01       	movw	r22, r16
    5594:	8d e7       	ldi	r24, 0x7D	; 125
    5596:	91 e0       	ldi	r25, 0x01	; 1
    5598:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z6set_u8PKhP8as_classMS1_FhhE>
    559c:	89 83       	std	Y+1, r24	; 0x01
    559e:	1c c2       	rjmp	.+1080   	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change square wave start voltage.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    55a0:	83 33       	cpi	r24, 0x33	; 51
    55a2:	09 f0       	breq	.+2      	; 0x55a6 <_Z14uart_tokenizerhP8as_class+0xb02>
    55a4:	4d c0       	rjmp	.+154    	; 0x5640 <_Z14uart_tokenizerhP8as_class+0xb9c>
    55a6:	90 91 7c 01 	lds	r25, 0x017C
    55aa:	90 32       	cpi	r25, 0x20	; 32
    55ac:	09 f0       	breq	.+2      	; 0x55b0 <_Z14uart_tokenizerhP8as_class+0xb0c>
    55ae:	98 c0       	rjmp	.+304    	; 0x56e0 <_Z14uart_tokenizerhP8as_class+0xc3c>
	{
		int32_t start_v;
		
		//Attempt to convert user input to number.
		start_v = string_to_int(&arr.rx_array[3], &errno);
    55b0:	4d e0       	ldi	r20, 0x0D	; 13
    55b2:	be 01       	movw	r22, r28
    55b4:	6f 5f       	subi	r22, 0xFF	; 255
    55b6:	7f 4f       	sbci	r23, 0xFF	; 255
    55b8:	8d e7       	ldi	r24, 0x7D	; 125
    55ba:	91 e0       	ldi	r25, 0x01	; 1
    55bc:	0e 94 85 1c 	call	0x390a	; 0x390a <_Z13string_to_intPKhPhh>
    55c0:	6b 01       	movw	r12, r22
    55c2:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    55c4:	89 81       	ldd	r24, Y+1	; 0x01
    55c6:	88 23       	and	r24, r24
    55c8:	19 f0       	breq	.+6      	; 0x55d0 <_Z14uart_tokenizerhP8as_class+0xb2c>
		{
			errno = ER_ERROR;	
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	89 83       	std	Y+1, r24	; 0x01
    55ce:	07 c2       	rjmp	.+1038   	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		//Check to make sure range is valid.
		else if(start_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    55d0:	c8 01       	movw	r24, r16
    55d2:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    55d6:	aa 27       	eor	r26, r26
    55d8:	97 fd       	sbrc	r25, 7
    55da:	a0 95       	com	r26
    55dc:	ba 2f       	mov	r27, r26
    55de:	8c 0d       	add	r24, r12
    55e0:	9d 1d       	adc	r25, r13
    55e2:	ae 1d       	adc	r26, r14
    55e4:	bf 1d       	adc	r27, r15
    55e6:	83 37       	cpi	r24, 0x73	; 115
    55e8:	96 40       	sbci	r25, 0x06	; 6
    55ea:	a1 05       	cpc	r26, r1
    55ec:	b1 05       	cpc	r27, r1
    55ee:	3c f0       	brlt	.+14     	; 0x55fe <_Z14uart_tokenizerhP8as_class+0xb5a>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp High "));
    55f0:	8f e3       	ldi	r24, 0x3F	; 63
    55f2:	95 e0       	ldi	r25, 0x05	; 5
    55f4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	89 83       	std	Y+1, r24	; 0x01
    55fc:	f0 c1       	rjmp	.+992    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(start_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    55fe:	c8 01       	movw	r24, r16
    5600:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5604:	aa 27       	eor	r26, r26
    5606:	97 fd       	sbrc	r25, 7
    5608:	a0 95       	com	r26
    560a:	ba 2f       	mov	r27, r26
    560c:	a7 01       	movw	r20, r14
    560e:	96 01       	movw	r18, r12
    5610:	28 1b       	sub	r18, r24
    5612:	39 0b       	sbc	r19, r25
    5614:	4a 0b       	sbc	r20, r26
    5616:	5b 0b       	sbc	r21, r27
    5618:	da 01       	movw	r26, r20
    561a:	c9 01       	movw	r24, r18
    561c:	8e 38       	cpi	r24, 0x8E	; 142
    561e:	99 4f       	sbci	r25, 0xF9	; 249
    5620:	af 4f       	sbci	r26, 0xFF	; 255
    5622:	bf 4f       	sbci	r27, 0xFF	; 255
    5624:	3c f4       	brge	.+14     	; 0x5634 <_Z14uart_tokenizerhP8as_class+0xb90>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp Low "));
    5626:	80 e3       	ldi	r24, 0x30	; 48
    5628:	95 e0       	ldi	r25, 0x05	; 5
    562a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	89 83       	std	Y+1, r24	; 0x01
    5632:	d5 c1       	rjmp	.+938    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else
		{
			errno = as->set_square_volt_start(start_v);
    5634:	b6 01       	movw	r22, r12
    5636:	c8 01       	movw	r24, r16
    5638:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN8as_class21set_square_volt_startEi>
    563c:	89 83       	std	Y+1, r24	; 0x01
    563e:	cc c1       	rjmp	.+920    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
		}
	}
	
	//Change square wave end voltage.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    5640:	84 33       	cpi	r24, 0x34	; 52
    5642:	09 f0       	breq	.+2      	; 0x5646 <_Z14uart_tokenizerhP8as_class+0xba2>
    5644:	4d c0       	rjmp	.+154    	; 0x56e0 <_Z14uart_tokenizerhP8as_class+0xc3c>
    5646:	90 91 7c 01 	lds	r25, 0x017C
    564a:	90 32       	cpi	r25, 0x20	; 32
    564c:	09 f0       	breq	.+2      	; 0x5650 <_Z14uart_tokenizerhP8as_class+0xbac>
    564e:	c2 c0       	rjmp	.+388    	; 0x57d4 <_Z14uart_tokenizerhP8as_class+0xd30>
	{
		int32_t end_v;
		
		//Attempt to convert user input to number.
		end_v = string_to_int(&arr.rx_array[3], &errno);
    5650:	4d e0       	ldi	r20, 0x0D	; 13
    5652:	be 01       	movw	r22, r28
    5654:	6f 5f       	subi	r22, 0xFF	; 255
    5656:	7f 4f       	sbci	r23, 0xFF	; 255
    5658:	8d e7       	ldi	r24, 0x7D	; 125
    565a:	91 e0       	ldi	r25, 0x01	; 1
    565c:	0e 94 85 1c 	call	0x390a	; 0x390a <_Z13string_to_intPKhPhh>
    5660:	6b 01       	movw	r12, r22
    5662:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    5664:	89 81       	ldd	r24, Y+1	; 0x01
    5666:	88 23       	and	r24, r24
    5668:	19 f0       	breq	.+6      	; 0x5670 <_Z14uart_tokenizerhP8as_class+0xbcc>
		{
			errno = ER_ERROR;
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	89 83       	std	Y+1, r24	; 0x01
    566e:	b7 c1       	rjmp	.+878    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		//Check to make sure range is valid.
		else if(end_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    5670:	c8 01       	movw	r24, r16
    5672:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5676:	aa 27       	eor	r26, r26
    5678:	97 fd       	sbrc	r25, 7
    567a:	a0 95       	com	r26
    567c:	ba 2f       	mov	r27, r26
    567e:	8c 0d       	add	r24, r12
    5680:	9d 1d       	adc	r25, r13
    5682:	ae 1d       	adc	r26, r14
    5684:	bf 1d       	adc	r27, r15
    5686:	83 37       	cpi	r24, 0x73	; 115
    5688:	96 40       	sbci	r25, 0x06	; 6
    568a:	a1 05       	cpc	r26, r1
    568c:	b1 05       	cpc	r27, r1
    568e:	3c f0       	brlt	.+14     	; 0x569e <_Z14uart_tokenizerhP8as_class+0xbfa>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp High "));
    5690:	82 e2       	ldi	r24, 0x22	; 34
    5692:	95 e0       	ldi	r25, 0x05	; 5
    5694:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	89 83       	std	Y+1, r24	; 0x01
    569c:	a0 c1       	rjmp	.+832    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(end_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    569e:	c8 01       	movw	r24, r16
    56a0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    56a4:	aa 27       	eor	r26, r26
    56a6:	97 fd       	sbrc	r25, 7
    56a8:	a0 95       	com	r26
    56aa:	ba 2f       	mov	r27, r26
    56ac:	a7 01       	movw	r20, r14
    56ae:	96 01       	movw	r18, r12
    56b0:	28 1b       	sub	r18, r24
    56b2:	39 0b       	sbc	r19, r25
    56b4:	4a 0b       	sbc	r20, r26
    56b6:	5b 0b       	sbc	r21, r27
    56b8:	da 01       	movw	r26, r20
    56ba:	c9 01       	movw	r24, r18
    56bc:	8e 38       	cpi	r24, 0x8E	; 142
    56be:	99 4f       	sbci	r25, 0xF9	; 249
    56c0:	af 4f       	sbci	r26, 0xFF	; 255
    56c2:	bf 4f       	sbci	r27, 0xFF	; 255
    56c4:	3c f4       	brge	.+14     	; 0x56d4 <_Z14uart_tokenizerhP8as_class+0xc30>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp Low "));
    56c6:	85 e1       	ldi	r24, 0x15	; 21
    56c8:	95 e0       	ldi	r25, 0x05	; 5
    56ca:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    56ce:	81 e0       	ldi	r24, 0x01	; 1
    56d0:	89 83       	std	Y+1, r24	; 0x01
    56d2:	85 c1       	rjmp	.+778    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else
		{
			errno = as->set_square_volt_end(end_v);
    56d4:	b6 01       	movw	r22, r12
    56d6:	c8 01       	movw	r24, r16
    56d8:	0e 94 bc 13 	call	0x2778	; 0x2778 <_ZN8as_class19set_square_volt_endEi>
    56dc:	89 83       	std	Y+1, r24	; 0x01
    56de:	7c c1       	rjmp	.+760    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
		}
	}
	
	//Change square wave amplitude.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    56e0:	85 33       	cpi	r24, 0x35	; 53
    56e2:	09 f0       	breq	.+2      	; 0x56e6 <_Z14uart_tokenizerhP8as_class+0xc42>
    56e4:	77 c0       	rjmp	.+238    	; 0x57d4 <_Z14uart_tokenizerhP8as_class+0xd30>
    56e6:	90 91 7c 01 	lds	r25, 0x017C
    56ea:	90 32       	cpi	r25, 0x20	; 32
    56ec:	09 f0       	breq	.+2      	; 0x56f0 <_Z14uart_tokenizerhP8as_class+0xc4c>
    56ee:	83 c0       	rjmp	.+262    	; 0x57f6 <_Z14uart_tokenizerhP8as_class+0xd52>
	{
		uint32_t amp;
		
		//Attempt to convert user input to number.
		amp = string_to_u32(&arr.rx_array[3], &errno);
    56f0:	4d e0       	ldi	r20, 0x0D	; 13
    56f2:	be 01       	movw	r22, r28
    56f4:	6f 5f       	subi	r22, 0xFF	; 255
    56f6:	7f 4f       	sbci	r23, 0xFF	; 255
    56f8:	8d e7       	ldi	r24, 0x7D	; 125
    56fa:	91 e0       	ldi	r25, 0x01	; 1
    56fc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z13string_to_u32PKhPhh>
    5700:	6b 01       	movw	r12, r22
    5702:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    5704:	89 81       	ldd	r24, Y+1	; 0x01
    5706:	88 23       	and	r24, r24
    5708:	19 f0       	breq	.+6      	; 0x5710 <_Z14uart_tokenizerhP8as_class+0xc6c>
		{
			errno = ER_ERROR;
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	89 83       	std	Y+1, r24	; 0x01
    570e:	67 c1       	rjmp	.+718    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		//Check to make sure range is valid.
		else if(as->get_square_volt_start() + (int32_t)amp > SQUARE_VOLT_MAX)
    5710:	c8 01       	movw	r24, r16
    5712:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    5716:	aa 27       	eor	r26, r26
    5718:	97 fd       	sbrc	r25, 7
    571a:	a0 95       	com	r26
    571c:	ba 2f       	mov	r27, r26
    571e:	8c 0d       	add	r24, r12
    5720:	9d 1d       	adc	r25, r13
    5722:	ae 1d       	adc	r26, r14
    5724:	bf 1d       	adc	r27, r15
    5726:	83 37       	cpi	r24, 0x73	; 115
    5728:	96 40       	sbci	r25, 0x06	; 6
    572a:	a1 05       	cpc	r26, r1
    572c:	b1 05       	cpc	r27, r1
    572e:	3c f0       	brlt	.+14     	; 0x573e <_Z14uart_tokenizerhP8as_class+0xc9a>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp High "));
    5730:	85 e0       	ldi	r24, 0x05	; 5
    5732:	95 e0       	ldi	r25, 0x05	; 5
    5734:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    5738:	81 e0       	ldi	r24, 0x01	; 1
    573a:	89 83       	std	Y+1, r24	; 0x01
    573c:	50 c1       	rjmp	.+672    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(as->get_square_volt_start() - (int32_t)amp < SQUARE_VOLT_MIN)
    573e:	c8 01       	movw	r24, r16
    5740:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    5744:	aa 27       	eor	r26, r26
    5746:	97 fd       	sbrc	r25, 7
    5748:	a0 95       	com	r26
    574a:	ba 2f       	mov	r27, r26
    574c:	8c 19       	sub	r24, r12
    574e:	9d 09       	sbc	r25, r13
    5750:	ae 09       	sbc	r26, r14
    5752:	bf 09       	sbc	r27, r15
    5754:	8e 38       	cpi	r24, 0x8E	; 142
    5756:	99 4f       	sbci	r25, 0xF9	; 249
    5758:	af 4f       	sbci	r26, 0xFF	; 255
    575a:	bf 4f       	sbci	r27, 0xFF	; 255
    575c:	3c f4       	brge	.+14     	; 0x576c <_Z14uart_tokenizerhP8as_class+0xcc8>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp Low "));
    575e:	86 ef       	ldi	r24, 0xF6	; 246
    5760:	94 e0       	ldi	r25, 0x04	; 4
    5762:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	89 83       	std	Y+1, r24	; 0x01
    576a:	39 c1       	rjmp	.+626    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(as->get_square_volt_end() + (int32_t)amp > SQUARE_VOLT_MAX)
    576c:	c8 01       	movw	r24, r16
    576e:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    5772:	aa 27       	eor	r26, r26
    5774:	97 fd       	sbrc	r25, 7
    5776:	a0 95       	com	r26
    5778:	ba 2f       	mov	r27, r26
    577a:	8c 0d       	add	r24, r12
    577c:	9d 1d       	adc	r25, r13
    577e:	ae 1d       	adc	r26, r14
    5780:	bf 1d       	adc	r27, r15
    5782:	83 37       	cpi	r24, 0x73	; 115
    5784:	96 40       	sbci	r25, 0x06	; 6
    5786:	a1 05       	cpc	r26, r1
    5788:	b1 05       	cpc	r27, r1
    578a:	3c f0       	brlt	.+14     	; 0x579a <_Z14uart_tokenizerhP8as_class+0xcf6>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp High "));
    578c:	88 ee       	ldi	r24, 0xE8	; 232
    578e:	94 e0       	ldi	r25, 0x04	; 4
    5790:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    5794:	81 e0       	ldi	r24, 0x01	; 1
    5796:	89 83       	std	Y+1, r24	; 0x01
    5798:	22 c1       	rjmp	.+580    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(as->get_square_volt_end() - (int32_t)amp < SQUARE_VOLT_MIN)
    579a:	c8 01       	movw	r24, r16
    579c:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    57a0:	aa 27       	eor	r26, r26
    57a2:	97 fd       	sbrc	r25, 7
    57a4:	a0 95       	com	r26
    57a6:	ba 2f       	mov	r27, r26
    57a8:	8c 19       	sub	r24, r12
    57aa:	9d 09       	sbc	r25, r13
    57ac:	ae 09       	sbc	r26, r14
    57ae:	bf 09       	sbc	r27, r15
    57b0:	8e 38       	cpi	r24, 0x8E	; 142
    57b2:	99 4f       	sbci	r25, 0xF9	; 249
    57b4:	af 4f       	sbci	r26, 0xFF	; 255
    57b6:	bf 4f       	sbci	r27, 0xFF	; 255
    57b8:	3c f4       	brge	.+14     	; 0x57c8 <_Z14uart_tokenizerhP8as_class+0xd24>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp Low "));
    57ba:	8b ed       	ldi	r24, 0xDB	; 219
    57bc:	94 e0       	ldi	r25, 0x04	; 4
    57be:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	89 83       	std	Y+1, r24	; 0x01
    57c6:	0b c1       	rjmp	.+534    	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else
		{
			errno = as->set_square_amp(amp);
    57c8:	b6 01       	movw	r22, r12
    57ca:	c8 01       	movw	r24, r16
    57cc:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN8as_class14set_square_ampEj>
    57d0:	89 83       	std	Y+1, r24	; 0x01
    57d2:	02 c1       	rjmp	.+516    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
		}
	}
	
	//Change square wave increment.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    57d4:	86 33       	cpi	r24, 0x36	; 54
    57d6:	79 f4       	brne	.+30     	; 0x57f6 <_Z14uart_tokenizerhP8as_class+0xd52>
    57d8:	90 91 7c 01 	lds	r25, 0x017C
    57dc:	90 32       	cpi	r25, 0x20	; 32
    57de:	e1 f4       	brne	.+56     	; 0x5818 <_Z14uart_tokenizerhP8as_class+0xd74>
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_square_inc);
    57e0:	20 ee       	ldi	r18, 0xE0	; 224
    57e2:	33 e1       	ldi	r19, 0x13	; 19
    57e4:	40 e0       	ldi	r20, 0x00	; 0
    57e6:	50 e0       	ldi	r21, 0x00	; 0
    57e8:	b8 01       	movw	r22, r16
    57ea:	8d e7       	ldi	r24, 0x7D	; 125
    57ec:	91 e0       	ldi	r25, 0x01	; 1
    57ee:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
    57f2:	89 83       	std	Y+1, r24	; 0x01
    57f4:	f1 c0       	rjmp	.+482    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>

	//Change square wave period.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '7' && arr.rx_array[2] == ' ')
    57f6:	87 33       	cpi	r24, 0x37	; 55
    57f8:	79 f4       	brne	.+30     	; 0x5818 <_Z14uart_tokenizerhP8as_class+0xd74>
    57fa:	90 91 7c 01 	lds	r25, 0x017C
    57fe:	90 32       	cpi	r25, 0x20	; 32
    5800:	c1 f4       	brne	.+48     	; 0x5832 <_Z14uart_tokenizerhP8as_class+0xd8e>
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_square_period);
    5802:	2f ee       	ldi	r18, 0xEF	; 239
    5804:	33 e1       	ldi	r19, 0x13	; 19
    5806:	40 e0       	ldi	r20, 0x00	; 0
    5808:	50 e0       	ldi	r21, 0x00	; 0
    580a:	b8 01       	movw	r22, r16
    580c:	8d e7       	ldi	r24, 0x7D	; 125
    580e:	91 e0       	ldi	r25, 0x01	; 1
    5810:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
    5814:	89 83       	std	Y+1, r24	; 0x01
    5816:	e0 c0       	rjmp	.+448    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Append arbitrary waveform data to end of saved list.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '8' && arr.rx_array[2] == ' ')
    5818:	88 33       	cpi	r24, 0x38	; 56
    581a:	59 f4       	brne	.+22     	; 0x5832 <_Z14uart_tokenizerhP8as_class+0xd8e>
    581c:	80 91 7c 01 	lds	r24, 0x017C
    5820:	80 32       	cpi	r24, 0x20	; 32
    5822:	09 f0       	breq	.+2      	; 0x5826 <_Z14uart_tokenizerhP8as_class+0xd82>
    5824:	d6 c0       	rjmp	.+428    	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = arb_append(&(arr.rx_array[3]));
    5826:	8d e7       	ldi	r24, 0x7D	; 125
    5828:	91 e0       	ldi	r25, 0x01	; 1
    582a:	0e 94 4c 21 	call	0x4298	; 0x4298 <_Z10arb_appendPKh>
    582e:	89 83       	std	Y+1, r24	; 0x01
    5830:	d3 c0       	rjmp	.+422    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Replace arbitrary waveform data at specified location.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '9' && arr.rx_array[2] == ' ')
    5832:	89 33       	cpi	r24, 0x39	; 57
    5834:	09 f0       	breq	.+2      	; 0x5838 <_Z14uart_tokenizerhP8as_class+0xd94>
    5836:	cd c0       	rjmp	.+410    	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
    5838:	80 91 7c 01 	lds	r24, 0x017C
    583c:	80 32       	cpi	r24, 0x20	; 32
    583e:	09 f0       	breq	.+2      	; 0x5842 <_Z14uart_tokenizerhP8as_class+0xd9e>
    5840:	c8 c0       	rjmp	.+400    	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = arb_replace(&(arr.rx_array[3]));
    5842:	8d e7       	ldi	r24, 0x7D	; 125
    5844:	91 e0       	ldi	r25, 0x01	; 1
    5846:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <_Z11arb_replacePKh>
    584a:	89 83       	std	Y+1, r24	; 0x01
    584c:	c5 c0       	rjmp	.+394    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Delete last entry in arbitrary waveform data list.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '0' && arr.rx_array[2] == '\r')
    584e:	83 33       	cpi	r24, 0x33	; 51
    5850:	09 f0       	breq	.+2      	; 0x5854 <_Z14uart_tokenizerhP8as_class+0xdb0>
    5852:	bf c0       	rjmp	.+382    	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
    5854:	80 91 7b 01 	lds	r24, 0x017B
    5858:	80 33       	cpi	r24, 0x30	; 48
    585a:	a1 f4       	brne	.+40     	; 0x5884 <_Z14uart_tokenizerhP8as_class+0xde0>
    585c:	90 91 7c 01 	lds	r25, 0x017C
    5860:	9d 30       	cpi	r25, 0x0D	; 13
    5862:	f9 f4       	brne	.+62     	; 0x58a2 <_Z14uart_tokenizerhP8as_class+0xdfe>
	{
		uint8_t entries;
		
		//Get number of entries already in list.
		entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    5864:	86 e0       	ldi	r24, 0x06	; 6
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
		
		if(entries)//decrement and save.
    586c:	88 23       	and	r24, r24
    586e:	41 f0       	breq	.+16     	; 0x5880 <_Z14uart_tokenizerhP8as_class+0xddc>
    5870:	99 27       	eor	r25, r25
			atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries - 1);
    5872:	bc 01       	movw	r22, r24
    5874:	61 50       	subi	r22, 0x01	; 1
    5876:	71 09       	sbc	r23, r1
    5878:	86 e0       	ldi	r24, 0x06	; 6
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
		
		errno = ER_NO_ERROR;
    5880:	19 82       	std	Y+1, r1	; 0x01
    5882:	b0 c0       	rjmp	.+352    	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xf40>
	}
	
	//Delete all stored arbitrary waveform data.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '1' && arr.rx_array[2] == '\r')
    5884:	81 33       	cpi	r24, 0x31	; 49
    5886:	69 f4       	brne	.+26     	; 0x58a2 <_Z14uart_tokenizerhP8as_class+0xdfe>
    5888:	90 91 7c 01 	lds	r25, 0x017C
    588c:	9d 30       	cpi	r25, 0x0D	; 13
    588e:	09 f0       	breq	.+2      	; 0x5892 <_Z14uart_tokenizerhP8as_class+0xdee>
    5890:	5c c0       	rjmp	.+184    	; 0x594a <_Z14uart_tokenizerhP8as_class+0xea6>
	{
		atmega_eeprom::write_word((uint16_t *)ARB_NUM, 0);
    5892:	60 e0       	ldi	r22, 0x00	; 0
    5894:	70 e0       	ldi	r23, 0x00	; 0
    5896:	86 e0       	ldi	r24, 0x06	; 6
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
		errno = ER_NO_ERROR;
    589e:	19 82       	std	Y+1, r1	; 0x01
    58a0:	a1 c0       	rjmp	.+322    	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xf40>
	}
	
	//Print all saved arbitrary waveform data.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '2' && arr.rx_array[2] == '\r')
    58a2:	82 33       	cpi	r24, 0x32	; 50
    58a4:	09 f0       	breq	.+2      	; 0x58a8 <_Z14uart_tokenizerhP8as_class+0xe04>
    58a6:	51 c0       	rjmp	.+162    	; 0x594a <_Z14uart_tokenizerhP8as_class+0xea6>
    58a8:	90 91 7c 01 	lds	r25, 0x017C
    58ac:	9d 30       	cpi	r25, 0x0D	; 13
    58ae:	09 f0       	breq	.+2      	; 0x58b2 <_Z14uart_tokenizerhP8as_class+0xe0e>
    58b0:	5d c0       	rjmp	.+186    	; 0x596c <_Z14uart_tokenizerhP8as_class+0xec8>
	{
		uint16_t entries;
		int16_t val1, val2;
		
		//Get number of entries already in list.
		entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    58b2:	86 e0       	ldi	r24, 0x06	; 6
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    58ba:	8c 01       	movw	r16, r24
		
		if(!entries)
    58bc:	00 97       	sbiw	r24, 0x00	; 0
    58be:	29 f4       	brne	.+10     	; 0x58ca <_Z14uart_tokenizerhP8as_class+0xe26>
		{
			atmega_uart::tx_string_p(PSTR("Memory Empty\r"));
    58c0:	8d ec       	ldi	r24, 0xCD	; 205
    58c2:	94 e0       	ldi	r25, 0x04	; 4
    58c4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
			return;
    58c8:	8f c0       	rjmp	.+286    	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
		}
		
		//Put header at top of data.
		atmega_uart::tx_string_p(PSTR("StartmV EndmV Rate\r"));
    58ca:	89 eb       	ldi	r24, 0xB9	; 185
    58cc:	94 e0       	ldi	r25, 0x04	; 4
    58ce:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Get values from memory.
		for (uint8_t i = 0; i < entries; i++)
    58d2:	b1 2c       	mov	r11, r1
		{
			val1 = atmega_eeprom::read_word((uint16_t *)(ARB_START + 6 * i));
    58d4:	8b 2d       	mov	r24, r11
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	9c 01       	movw	r18, r24
    58da:	22 0f       	add	r18, r18
    58dc:	33 1f       	adc	r19, r19
    58de:	82 0f       	add	r24, r18
    58e0:	93 1f       	adc	r25, r19
    58e2:	7c 01       	movw	r14, r24
    58e4:	ee 0c       	add	r14, r14
    58e6:	ff 1c       	adc	r15, r15
    58e8:	c7 01       	movw	r24, r14
    58ea:	08 96       	adiw	r24, 0x08	; 8
    58ec:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    58f0:	4c 01       	movw	r8, r24
			val2 = atmega_eeprom::read_word((uint16_t *)(ARB_START + 2 + 6 * i));
    58f2:	c7 01       	movw	r24, r14
    58f4:	0a 96       	adiw	r24, 0x0a	; 10
    58f6:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    58fa:	6c 01       	movw	r12, r24
			tx_int_to_ascii(val1);
    58fc:	b4 01       	movw	r22, r8
    58fe:	88 27       	eor	r24, r24
    5900:	77 fd       	sbrc	r23, 7
    5902:	80 95       	com	r24
    5904:	98 2f       	mov	r25, r24
    5906:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
			atmega_uart::tx_byte(' ');
    590a:	80 e2       	ldi	r24, 0x20	; 32
    590c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
			tx_int_to_ascii(val2);
    5910:	b6 01       	movw	r22, r12
    5912:	88 27       	eor	r24, r24
    5914:	77 fd       	sbrc	r23, 7
    5916:	80 95       	com	r24
    5918:	98 2f       	mov	r25, r24
    591a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_Z15tx_int_to_asciil>
			atmega_uart::tx_byte(' ');
    591e:	80 e2       	ldi	r24, 0x20	; 32
    5920:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
			tx_u32_to_ascii(atmega_eeprom::read_word((uint16_t *)(ARB_START + 4 + 6 * i)));
    5924:	c7 01       	movw	r24, r14
    5926:	0c 96       	adiw	r24, 0x0c	; 12
    5928:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    592c:	bc 01       	movw	r22, r24
    592e:	80 e0       	ldi	r24, 0x00	; 0
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	0e 94 09 1a 	call	0x3412	; 0x3412 <_Z15tx_u32_to_asciim>
			atmega_uart::tx_byte('\r');
    5936:	8d e0       	ldi	r24, 0x0D	; 13
    5938:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		
		//Put header at top of data.
		atmega_uart::tx_string_p(PSTR("StartmV EndmV Rate\r"));
		
		//Get values from memory.
		for (uint8_t i = 0; i < entries; i++)
    593c:	b3 94       	inc	r11
    593e:	8b 2d       	mov	r24, r11
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	80 17       	cp	r24, r16
    5944:	91 07       	cpc	r25, r17
    5946:	30 f2       	brcs	.-116    	; 0x58d4 <_Z14uart_tokenizerhP8as_class+0xe30>
    5948:	4f c0       	rjmp	.+158    	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
		}
		return;
	}
	
	//Set if arbitrary waveform test is cyclic or not.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    594a:	83 33       	cpi	r24, 0x33	; 51
    594c:	79 f4       	brne	.+30     	; 0x596c <_Z14uart_tokenizerhP8as_class+0xec8>
    594e:	90 91 7c 01 	lds	r25, 0x017C
    5952:	90 32       	cpi	r25, 0x20	; 32
    5954:	e1 f4       	brne	.+56     	; 0x598e <_Z14uart_tokenizerhP8as_class+0xeea>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_arb_cyclic);
    5956:	23 e0       	ldi	r18, 0x03	; 3
    5958:	34 e1       	ldi	r19, 0x14	; 20
    595a:	40 e0       	ldi	r20, 0x00	; 0
    595c:	50 e0       	ldi	r21, 0x00	; 0
    595e:	b8 01       	movw	r22, r16
    5960:	8d e7       	ldi	r24, 0x7D	; 125
    5962:	91 e0       	ldi	r25, 0x01	; 1
    5964:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
    5968:	89 83       	std	Y+1, r24	; 0x01
    596a:	36 c0       	rjmp	.+108    	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change number of arbitrary waveform cycles.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    596c:	84 33       	cpi	r24, 0x34	; 52
    596e:	79 f4       	brne	.+30     	; 0x598e <_Z14uart_tokenizerhP8as_class+0xeea>
    5970:	90 91 7c 01 	lds	r25, 0x017C
    5974:	90 32       	cpi	r25, 0x20	; 32
    5976:	e1 f4       	brne	.+56     	; 0x59b0 <_Z14uart_tokenizerhP8as_class+0xf0c>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_arb_cycles);
    5978:	2a e0       	ldi	r18, 0x0A	; 10
    597a:	34 e1       	ldi	r19, 0x14	; 20
    597c:	40 e0       	ldi	r20, 0x00	; 0
    597e:	50 e0       	ldi	r21, 0x00	; 0
    5980:	b8 01       	movw	r22, r16
    5982:	8d e7       	ldi	r24, 0x7D	; 125
    5984:	91 e0       	ldi	r25, 0x01	; 1
    5986:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z6set_u8PKhP8as_classMS1_FhhE>
    598a:	89 83       	std	Y+1, r24	; 0x01
    598c:	25 c0       	rjmp	.+74     	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Enable software filter.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    598e:	85 33       	cpi	r24, 0x35	; 53
    5990:	79 f4       	brne	.+30     	; 0x59b0 <_Z14uart_tokenizerhP8as_class+0xf0c>
    5992:	80 91 7c 01 	lds	r24, 0x017C
    5996:	80 32       	cpi	r24, 0x20	; 32
    5998:	e1 f4       	brne	.+56     	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_soft_filt);
    599a:	29 e1       	ldi	r18, 0x19	; 25
    599c:	34 e1       	ldi	r19, 0x14	; 20
    599e:	40 e0       	ldi	r20, 0x00	; 0
    59a0:	50 e0       	ldi	r21, 0x00	; 0
    59a2:	b8 01       	movw	r22, r16
    59a4:	8d e7       	ldi	r24, 0x7D	; 125
    59a6:	91 e0       	ldi	r25, 0x01	; 1
    59a8:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
    59ac:	89 83       	std	Y+1, r24	; 0x01
    59ae:	14 c0       	rjmp	.+40     	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Select which software filter to use.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    59b0:	86 33       	cpi	r24, 0x36	; 54
    59b2:	79 f4       	brne	.+30     	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
    59b4:	80 91 7c 01 	lds	r24, 0x017C
    59b8:	80 32       	cpi	r24, 0x20	; 32
    59ba:	59 f4       	brne	.+22     	; 0x59d2 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_soft_sel);
    59bc:	20 e2       	ldi	r18, 0x20	; 32
    59be:	34 e1       	ldi	r19, 0x14	; 20
    59c0:	40 e0       	ldi	r20, 0x00	; 0
    59c2:	50 e0       	ldi	r21, 0x00	; 0
    59c4:	b8 01       	movw	r22, r16
    59c6:	8d e7       	ldi	r24, 0x7D	; 125
    59c8:	91 e0       	ldi	r25, 0x01	; 1
    59ca:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z6set_u8PKhP8as_classMS1_FhhE>
    59ce:	89 83       	std	Y+1, r24	; 0x01
    59d0:	03 c0       	rjmp	.+6      	; 0x59d8 <_Z14uart_tokenizerhP8as_class+0xf34>
	
	else //Invalid selection.
		errno = ER_ERROR;
    59d2:	81 e0       	ldi	r24, 0x01	; 1
    59d4:	89 83       	std	Y+1, r24	; 0x01
    59d6:	03 c0       	rjmp	.+6      	; 0x59de <_Z14uart_tokenizerhP8as_class+0xf3a>
	
	if(errno)	//Error out if there was a problem.
    59d8:	89 81       	ldd	r24, Y+1	; 0x01
    59da:	88 23       	and	r24, r24
    59dc:	19 f0       	breq	.+6      	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xf40>
	{
		uart_err();
    59de:	0e 94 42 21 	call	0x4284	; 0x4284 <_Z8uart_errv>
		return;
    59e2:	02 c0       	rjmp	.+4      	; 0x59e8 <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	uart_ok();	
    59e4:	0e 94 47 21 	call	0x428e	; 0x428e <_Z7uart_okv>
	return;
}
    59e8:	0f 90       	pop	r0
    59ea:	df 91       	pop	r29
    59ec:	cf 91       	pop	r28
    59ee:	1f 91       	pop	r17
    59f0:	0f 91       	pop	r16
    59f2:	ff 90       	pop	r15
    59f4:	ef 90       	pop	r14
    59f6:	df 90       	pop	r13
    59f8:	cf 90       	pop	r12
    59fa:	bf 90       	pop	r11
    59fc:	9f 90       	pop	r9
    59fe:	8f 90       	pop	r8
    5a00:	08 95       	ret

00005a02 <_Z15bin_build_arrayh>:
//Update input array function(binary).
void bin_build_array(uint8_t rx_byte)
{
	//Exit if an overflow occurred.  The tokenizer needs to clear it
	//before any new data can be processed.
	if(bin_overflowed)
    5a02:	90 91 77 01 	lds	r25, 0x0177
    5a06:	91 11       	cpse	r25, r1
    5a08:	14 c0       	rjmp	.+40     	; 0x5a32 <_Z15bin_build_arrayh+0x30>
	{
		return;
	}
	
	//Add byte to array.
	arr.bin_rx[bin_index++] = rx_byte;
    5a0a:	e0 91 79 01 	lds	r30, 0x0179
    5a0e:	91 e0       	ldi	r25, 0x01	; 1
    5a10:	9e 0f       	add	r25, r30
    5a12:	90 93 79 01 	sts	0x0179, r25
    5a16:	f0 e0       	ldi	r31, 0x00	; 0
    5a18:	e6 58       	subi	r30, 0x86	; 134
    5a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a1c:	80 83       	st	Z, r24
	
	//Array overflow, error and reset array.
	if(bin_index >= BIN_RX_LENGTH)
    5a1e:	99 30       	cpi	r25, 0x09	; 9
    5a20:	40 f0       	brcs	.+16     	; 0x5a32 <_Z15bin_build_arrayh+0x30>
	{
		bin_index = 0;
    5a22:	10 92 79 01 	sts	0x0179, r1
		atmega_uart::tx_byte(ER_BIN_AR_OVERFLOW);
    5a26:	84 e0       	ldi	r24, 0x04	; 4
    5a28:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		bin_overflowed = true;
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	80 93 77 01 	sts	0x0177, r24
    5a32:	08 95       	ret

00005a34 <_Z12bin_tokenizeP8as_class>:
	}
}

//Tokenize binary array function.
void bin_tokenize(as_class *as)
{	
    5a34:	cf 92       	push	r12
    5a36:	df 92       	push	r13
    5a38:	ef 92       	push	r14
    5a3a:	ff 92       	push	r15
    5a3c:	0f 93       	push	r16
    5a3e:	1f 93       	push	r17
    5a40:	cf 93       	push	r28
    5a42:	df 93       	push	r29
    5a44:	ec 01       	movw	r28, r24
	int16_t start_v, end_v;
	uint16_t rate, entries, ent;
	
	//Reset overflow and exit. This prevents partial
	//strings from corrupting the settings.
	if(bin_overflowed)
    5a46:	80 91 77 01 	lds	r24, 0x0177
    5a4a:	88 23       	and	r24, r24
    5a4c:	19 f0       	breq	.+6      	; 0x5a54 <_Z12bin_tokenizeP8as_class+0x20>
	{
		bin_overflowed = false;
    5a4e:	10 92 77 01 	sts	0x0177, r1
		return;
    5a52:	0a c4       	rjmp	.+2068   	; 0x6268 <_Z12bin_tokenizeP8as_class+0x834>
	}
	
	//Get command byte and act accordingly.
	switch (arr.bin_rx[0])
    5a54:	40 91 7a 01 	lds	r20, 0x017A
    5a58:	50 e0       	ldi	r21, 0x00	; 0
    5a5a:	fa 01       	movw	r30, r20
    5a5c:	31 97       	sbiw	r30, 0x01	; 1
    5a5e:	e4 37       	cpi	r30, 0x74	; 116
    5a60:	f1 05       	cpc	r31, r1
    5a62:	08 f0       	brcs	.+2      	; 0x5a66 <_Z12bin_tokenizeP8as_class+0x32>
    5a64:	fc c3       	rjmp	.+2040   	; 0x625e <_Z12bin_tokenizeP8as_class+0x82a>
    5a66:	ea 5b       	subi	r30, 0xBA	; 186
    5a68:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6a:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__tablejump2__>
	{
		case BIN_GET_TX1://Transmit tx mode character.
		case BIN_GET_TX2:
			if(bin_index == 1)
    5a6e:	80 91 79 01 	lds	r24, 0x0179
    5a72:	81 30       	cpi	r24, 0x01	; 1
    5a74:	21 f4       	brne	.+8      	; 0x5a7e <_Z12bin_tokenizeP8as_class+0x4a>
				atmega_uart::tx_byte('B');
    5a76:	82 e4       	ldi	r24, 0x42	; 66
    5a78:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5a7c:	f3 c3       	rjmp	.+2022   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5a7e:	83 e0       	ldi	r24, 0x03	; 3
    5a80:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5a84:	ef c3       	rjmp	.+2014   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_STRT_LIN1://Start linear sweep test.
		case BIN_STRT_LIN2:
			if(bin_index == 1)
    5a86:	80 91 79 01 	lds	r24, 0x0179
    5a8a:	81 30       	cpi	r24, 0x01	; 1
    5a8c:	49 f4       	brne	.+18     	; 0x5aa0 <_Z12bin_tokenizeP8as_class+0x6c>
			{
				as->set_test_type(TEST_LIN);
    5a8e:	60 e0       	ldi	r22, 0x00	; 0
    5a90:	ce 01       	movw	r24, r28
    5a92:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    5a96:	61 e0       	ldi	r22, 0x01	; 1
    5a98:	ce 01       	movw	r24, r28
    5a9a:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    5a9e:	e2 c3       	rjmp	.+1988   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5aa0:	83 e0       	ldi	r24, 0x03	; 3
    5aa2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5aa6:	de c3       	rjmp	.+1980   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_STRT_SQR1://Start square wave test.
		case BIN_STRT_SQR2:
			if(bin_index == 1)
    5aa8:	80 91 79 01 	lds	r24, 0x0179
    5aac:	81 30       	cpi	r24, 0x01	; 1
    5aae:	49 f4       	brne	.+18     	; 0x5ac2 <_Z12bin_tokenizeP8as_class+0x8e>
			{
				as->set_test_type(TEST_SQR);
    5ab0:	61 e0       	ldi	r22, 0x01	; 1
    5ab2:	ce 01       	movw	r24, r28
    5ab4:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    5ab8:	61 e0       	ldi	r22, 0x01	; 1
    5aba:	ce 01       	movw	r24, r28
    5abc:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    5ac0:	d1 c3       	rjmp	.+1954   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5ac2:	83 e0       	ldi	r24, 0x03	; 3
    5ac4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5ac8:	cd c3       	rjmp	.+1946   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_STRT_ARB1://Start arbitrary waveform test.
		case BIN_STRT_ARB2:
			if(bin_index == 1)
    5aca:	80 91 79 01 	lds	r24, 0x0179
    5ace:	81 30       	cpi	r24, 0x01	; 1
    5ad0:	49 f4       	brne	.+18     	; 0x5ae4 <_Z12bin_tokenizeP8as_class+0xb0>
			{
				as->set_test_type(TEST_ARB);
    5ad2:	62 e0       	ldi	r22, 0x02	; 2
    5ad4:	ce 01       	movw	r24, r28
    5ad6:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    5ada:	61 e0       	ldi	r22, 0x01	; 1
    5adc:	ce 01       	movw	r24, r28
    5ade:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN8as_class14set_test_stateE11test_states>
    5ae2:	c0 c3       	rjmp	.+1920   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5ae4:	83 e0       	ldi	r24, 0x03	; 3
    5ae6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5aea:	bc c3       	rjmp	.+1912   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_TX://Change transmission mode.
			if(bin_index == 2)
    5aec:	80 91 79 01 	lds	r24, 0x0179
    5af0:	82 30       	cpi	r24, 0x02	; 2
    5af2:	41 f5       	brne	.+80     	; 0x5b44 <_Z12bin_tokenizeP8as_class+0x110>
				switch (arr.bin_rx[1])
    5af4:	80 91 7b 01 	lds	r24, 0x017B
    5af8:	8d 34       	cpi	r24, 0x4D	; 77
    5afa:	a1 f0       	breq	.+40     	; 0x5b24 <_Z12bin_tokenizeP8as_class+0xf0>
    5afc:	28 f4       	brcc	.+10     	; 0x5b08 <_Z12bin_tokenizeP8as_class+0xd4>
    5afe:	81 34       	cpi	r24, 0x41	; 65
    5b00:	49 f0       	breq	.+18     	; 0x5b14 <_Z12bin_tokenizeP8as_class+0xe0>
    5b02:	82 34       	cpi	r24, 0x42	; 66
    5b04:	b9 f0       	breq	.+46     	; 0x5b34 <_Z12bin_tokenizeP8as_class+0x100>
    5b06:	1a c0       	rjmp	.+52     	; 0x5b3c <_Z12bin_tokenizeP8as_class+0x108>
    5b08:	82 36       	cpi	r24, 0x62	; 98
    5b0a:	a1 f0       	breq	.+40     	; 0x5b34 <_Z12bin_tokenizeP8as_class+0x100>
    5b0c:	8d 36       	cpi	r24, 0x6D	; 109
    5b0e:	51 f0       	breq	.+20     	; 0x5b24 <_Z12bin_tokenizeP8as_class+0xf0>
    5b10:	81 36       	cpi	r24, 0x61	; 97
    5b12:	a1 f4       	brne	.+40     	; 0x5b3c <_Z12bin_tokenizeP8as_class+0x108>
				{
					case 'A'://Set to ASCII mode.
					case 'a':
						as->set_tx_mode(TX_MODE_ASCII);
    5b14:	60 e0       	ldi	r22, 0x00	; 0
    5b16:	ce 01       	movw	r24, r28
    5b18:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN8as_class11set_tx_modeE8tx_modes>
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5b1c:	80 e0       	ldi	r24, 0x00	; 0
    5b1e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5b22:	a0 c3       	rjmp	.+1856   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
					case 'M'://Set to MatLab mode.
					case 'm':
						as->set_tx_mode(TX_MODE_MATLAB);
    5b24:	61 e0       	ldi	r22, 0x01	; 1
    5b26:	ce 01       	movw	r24, r28
    5b28:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN8as_class11set_tx_modeE8tx_modes>
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5b2c:	80 e0       	ldi	r24, 0x00	; 0
    5b2e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5b32:	98 c3       	rjmp	.+1840   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
					case 'B'://Set to binary mode.
					case 'b':
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5b34:	80 e0       	ldi	r24, 0x00	; 0
    5b36:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5b3a:	94 c3       	rjmp	.+1832   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
					default:
						atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5b3c:	83 e0       	ldi	r24, 0x03	; 3
    5b3e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5b42:	90 c3       	rjmp	.+1824   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5b44:	83 e0       	ldi	r24, 0x03	; 3
    5b46:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5b4a:	8c c3       	rjmp	.+1816   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ELECS://Change number of electrodes.
			if(bin_index == 2)
    5b4c:	80 91 79 01 	lds	r24, 0x0179
    5b50:	82 30       	cpi	r24, 0x02	; 2
    5b52:	d1 f4       	brne	.+52     	; 0x5b88 <_Z12bin_tokenizeP8as_class+0x154>
			{
				if(arr.bin_rx[1] == 0x02)
    5b54:	80 91 7b 01 	lds	r24, 0x017B
    5b58:	82 30       	cpi	r24, 0x02	; 2
    5b5a:	41 f4       	brne	.+16     	; 0x5b6c <_Z12bin_tokenizeP8as_class+0x138>
				{
					as->set_num_electrodes(ELEC_2);
    5b5c:	60 e0       	ldi	r22, 0x00	; 0
    5b5e:	ce 01       	movw	r24, r28
    5b60:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN8as_class18set_num_electrodesE9num_elecs>
					void i2c_load_electrodes(as_class *as);
					atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5b6a:	7c c3       	rjmp	.+1784   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(arr.bin_rx[1] == 0x03)
    5b6c:	83 30       	cpi	r24, 0x03	; 3
    5b6e:	41 f4       	brne	.+16     	; 0x5b80 <_Z12bin_tokenizeP8as_class+0x14c>
				{
					as->set_num_electrodes(ELEC_3);
    5b70:	61 e0       	ldi	r22, 0x01	; 1
    5b72:	ce 01       	movw	r24, r28
    5b74:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN8as_class18set_num_electrodesE9num_elecs>
					void i2c_load_electrodes(as_class *as);
					atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5b78:	80 e0       	ldi	r24, 0x00	; 0
    5b7a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5b7e:	72 c3       	rjmp	.+1764   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else//Transmit error.
				{
					atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5b80:	83 e0       	ldi	r24, 0x03	; 3
    5b82:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5b86:	6e c3       	rjmp	.+1756   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5b88:	83 e0       	ldi	r24, 0x03	; 3
    5b8a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5b8e:	6a c3       	rjmp	.+1748   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ADC:
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_adc_rate);
    5b90:	2a ea       	ldi	r18, 0xAA	; 170
    5b92:	32 e1       	ldi	r19, 0x12	; 18
    5b94:	40 e0       	ldi	r20, 0x00	; 0
    5b96:	50 e0       	ldi	r21, 0x00	; 0
    5b98:	be 01       	movw	r22, r28
    5b9a:	8b e7       	ldi	r24, 0x7B	; 123
    5b9c:	91 e0       	ldi	r25, 0x01	; 1
    5b9e:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    5ba2:	60 c3       	rjmp	.+1728   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_SET://Transmit settings.
			if(bin_index == 1)
    5ba4:	80 91 79 01 	lds	r24, 0x0179
    5ba8:	81 30       	cpi	r24, 0x01	; 1
    5baa:	09 f0       	breq	.+2      	; 0x5bae <_Z12bin_tokenizeP8as_class+0x17a>
    5bac:	98 c0       	rjmp	.+304    	; 0x5cde <_Z12bin_tokenizeP8as_class+0x2aa>
			{
				atmega_uart::tx_byte(BIN_FIRM_HI);
    5bae:	80 e0       	ldi	r24, 0x00	; 0
    5bb0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_FIRM_LO);
    5bb4:	80 e1       	ldi	r24, 0x10	; 16
    5bb6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID1);
    5bba:	81 e4       	ldi	r24, 0x41	; 65
    5bbc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID2);
    5bc0:	81 e5       	ldi	r24, 0x51	; 81
    5bc2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID3);
    5bc6:	83 e5       	ldi	r24, 0x53	; 83
    5bc8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID4);
    5bcc:	81 e3       	ldi	r24, 0x31	; 49
    5bce:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				(as->get_num_electrodes() == ELEC_2) ? atmega_uart::tx_byte(0x02) : atmega_uart::tx_byte(0x03);
    5bd2:	ce 01       	movw	r24, r28
    5bd4:	0e 94 a7 12 	call	0x254e	; 0x254e <_ZN8as_class18get_num_electrodesEv>
    5bd8:	81 11       	cpse	r24, r1
    5bda:	04 c0       	rjmp	.+8      	; 0x5be4 <_Z12bin_tokenizeP8as_class+0x1b0>
    5bdc:	82 e0       	ldi	r24, 0x02	; 2
    5bde:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5be2:	03 c0       	rjmp	.+6      	; 0x5bea <_Z12bin_tokenizeP8as_class+0x1b6>
    5be4:	83 e0       	ldi	r24, 0x03	; 3
    5be6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_word(as->get_adc_rate());
    5bea:	ce 01       	movw	r24, r28
    5bec:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN8as_class12get_adc_rateEv>
    5bf0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_tia_res_tap());
    5bf4:	ce 01       	movw	r24, r28
    5bf6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN8as_class15get_tia_res_tapEv>
    5bfa:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_byte(as->get_tia_cap_mask());
    5bfe:	ce 01       	movw	r24, r28
    5c00:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN8as_class16get_tia_cap_maskEv>
    5c04:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_tf(as->get_dep_enable());
    5c08:	ce 01       	movw	r24, r28
    5c0a:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN8as_class14get_dep_enableEv>
    5c0e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_dword(as->get_dep_time());
    5c12:	ce 01       	movw	r24, r28
    5c14:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN8as_class12get_dep_timeEv>
    5c18:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZN11atmega_uart8tx_dwordEm>
				atmega_uart::tx_word(as->get_dep_volt());
    5c1c:	ce 01       	movw	r24, r28
    5c1e:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN8as_class12get_dep_voltEv>
    5c22:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_dword(as->get_quiet_time());
    5c26:	ce 01       	movw	r24, r28
    5c28:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN8as_class14get_quiet_timeEv>
    5c2c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZN11atmega_uart8tx_dwordEm>
				atmega_uart::tx_tf(as->get_dep_rec());
    5c30:	ce 01       	movw	r24, r28
    5c32:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN8as_class11get_dep_recEv>
    5c36:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_word(as->get_sweep_volt_start());
    5c3a:	ce 01       	movw	r24, r28
    5c3c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN8as_class20get_sweep_volt_startEv>
    5c40:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_sweep_volt_end());
    5c44:	ce 01       	movw	r24, r28
    5c46:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN8as_class18get_sweep_volt_endEv>
    5c4a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_sweep_rate());
    5c4e:	ce 01       	movw	r24, r28
    5c50:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN8as_class14get_sweep_rateEv>
    5c54:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_tf(as->get_sweep_cyclic());
    5c58:	ce 01       	movw	r24, r28
    5c5a:	0e 94 95 13 	call	0x272a	; 0x272a <_ZN8as_class16get_sweep_cyclicEv>
    5c5e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_byte(as->get_sweep_cycles());
    5c62:	ce 01       	movw	r24, r28
    5c64:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN8as_class16get_sweep_cyclesEv>
    5c68:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_word(as->get_square_volt_start());
    5c6c:	ce 01       	movw	r24, r28
    5c6e:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    5c72:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_volt_end());
    5c76:	ce 01       	movw	r24, r28
    5c78:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    5c7c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_amp());
    5c80:	ce 01       	movw	r24, r28
    5c82:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5c86:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_inc());
    5c8a:	ce 01       	movw	r24, r28
    5c8c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN8as_class14get_square_incEv>
    5c90:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_period());
    5c94:	ce 01       	movw	r24, r28
    5c96:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN8as_class17get_square_periodEv>
    5c9a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_tf(as->get_arb_cyclic());
    5c9e:	ce 01       	movw	r24, r28
    5ca0:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN8as_class14get_arb_cyclicEv>
    5ca4:	91 e0       	ldi	r25, 0x01	; 1
    5ca6:	81 11       	cpse	r24, r1
    5ca8:	01 c0       	rjmp	.+2      	; 0x5cac <_Z12bin_tokenizeP8as_class+0x278>
    5caa:	90 e0       	ldi	r25, 0x00	; 0
    5cac:	89 2f       	mov	r24, r25
    5cae:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_byte(as->get_arb_cycles());
    5cb2:	ce 01       	movw	r24, r28
    5cb4:	0e 94 16 14 	call	0x282c	; 0x282c <_ZN8as_class14get_arb_cyclesEv>
    5cb8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(atmega_eeprom::read_word((uint16_t *)ARB_NUM));
    5cbc:	86 e0       	ldi	r24, 0x06	; 6
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    5cc4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_tf(as->get_soft_filt());
    5cc8:	ce 01       	movw	r24, r28
    5cca:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN8as_class13get_soft_filtEv>
    5cce:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_byte(as->get_soft_sel());	
    5cd2:	ce 01       	movw	r24, r28
    5cd4:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZN8as_class12get_soft_selEv>
    5cd8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5cdc:	c3 c2       	rjmp	.+1414   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5cde:	83 e0       	ldi	r24, 0x03	; 3
    5ce0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5ce4:	bf c2       	rjmp	.+1406   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_TAP://Set resistor tap.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_tia_res_tap);
    5ce6:	2e eb       	ldi	r18, 0xBE	; 190
    5ce8:	32 e1       	ldi	r19, 0x12	; 18
    5cea:	40 e0       	ldi	r20, 0x00	; 0
    5cec:	50 e0       	ldi	r21, 0x00	; 0
    5cee:	be 01       	movw	r22, r28
    5cf0:	8b e7       	ldi	r24, 0x7B	; 123
    5cf2:	91 e0       	ldi	r25, 0x01	; 1
    5cf4:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
			i2c_load_pot(as);
    5cf8:	ce 01       	movw	r24, r28
    5cfa:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_Z12i2c_load_potP8as_class>
		break;
    5cfe:	b2 c2       	rjmp	.+1380   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_CAP://Set capacitor mask
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_sweep_cycles);
    5d00:	28 e9       	ldi	r18, 0x98	; 152
    5d02:	33 e1       	ldi	r19, 0x13	; 19
    5d04:	40 e0       	ldi	r20, 0x00	; 0
    5d06:	50 e0       	ldi	r21, 0x00	; 0
    5d08:	be 01       	movw	r22, r28
    5d0a:	8b e7       	ldi	r24, 0x7B	; 123
    5d0c:	91 e0       	ldi	r25, 0x01	; 1
    5d0e:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z6set_u8PKhP8as_classMS1_FhhE>
			i2c_load_cap_mask(as);
    5d12:	ce 01       	movw	r24, r28
    5d14:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z17i2c_load_cap_maskP8as_class>
		break;
    5d18:	a5 c2       	rjmp	.+1354   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_EN://Enable deposition sequence.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_dep_enable);
    5d1a:	2d ef       	ldi	r18, 0xFD	; 253
    5d1c:	32 e1       	ldi	r19, 0x12	; 18
    5d1e:	40 e0       	ldi	r20, 0x00	; 0
    5d20:	50 e0       	ldi	r21, 0x00	; 0
    5d22:	be 01       	movw	r22, r28
    5d24:	8b e7       	ldi	r24, 0x7B	; 123
    5d26:	91 e0       	ldi	r25, 0x01	; 1
    5d28:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    5d2c:	9b c2       	rjmp	.+1334   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_T://Change deposition time.
			set_u32(&(arr.bin_rx[1]), as, &as_class::set_dep_time);
    5d2e:	24 e0       	ldi	r18, 0x04	; 4
    5d30:	33 e1       	ldi	r19, 0x13	; 19
    5d32:	40 e0       	ldi	r20, 0x00	; 0
    5d34:	50 e0       	ldi	r21, 0x00	; 0
    5d36:	be 01       	movw	r22, r28
    5d38:	8b e7       	ldi	r24, 0x7B	; 123
    5d3a:	91 e0       	ldi	r25, 0x01	; 1
    5d3c:	0e 94 db 24 	call	0x49b6	; 0x49b6 <_Z7set_u32PKhP8as_classMS1_FhmE>
		break;
    5d40:	91 c2       	rjmp	.+1314   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_V://Set deposition voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_dep_volt);
    5d42:	21 e2       	ldi	r18, 0x21	; 33
    5d44:	33 e1       	ldi	r19, 0x13	; 19
    5d46:	40 e0       	ldi	r20, 0x00	; 0
    5d48:	50 e0       	ldi	r21, 0x00	; 0
    5d4a:	be 01       	movw	r22, r28
    5d4c:	8b e7       	ldi	r24, 0x7B	; 123
    5d4e:	91 e0       	ldi	r25, 0x01	; 1
    5d50:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    5d54:	87 c2       	rjmp	.+1294   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_QUIET_T://Set quiet time.
			set_u32(&(arr.bin_rx[1]), as, &as_class::set_quiet_time);
    5d56:	26 e3       	ldi	r18, 0x36	; 54
    5d58:	33 e1       	ldi	r19, 0x13	; 19
    5d5a:	40 e0       	ldi	r20, 0x00	; 0
    5d5c:	50 e0       	ldi	r21, 0x00	; 0
    5d5e:	be 01       	movw	r22, r28
    5d60:	8b e7       	ldi	r24, 0x7B	; 123
    5d62:	91 e0       	ldi	r25, 0x01	; 1
    5d64:	0e 94 db 24 	call	0x49b6	; 0x49b6 <_Z7set_u32PKhP8as_classMS1_FhmE>
		break;
    5d68:	7d c2       	rjmp	.+1274   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_REC://Enable deposition recording.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_dep_rec);
    5d6a:	2c e4       	ldi	r18, 0x4C	; 76
    5d6c:	33 e1       	ldi	r19, 0x13	; 19
    5d6e:	40 e0       	ldi	r20, 0x00	; 0
    5d70:	50 e0       	ldi	r21, 0x00	; 0
    5d72:	be 01       	movw	r22, r28
    5d74:	8b e7       	ldi	r24, 0x7B	; 123
    5d76:	91 e0       	ldi	r25, 0x01	; 1
    5d78:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    5d7c:	73 c2       	rjmp	.+1254   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_SV://Set linear sweep start voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_sweep_volt_start);
    5d7e:	23 e5       	ldi	r18, 0x53	; 83
    5d80:	33 e1       	ldi	r19, 0x13	; 19
    5d82:	40 e0       	ldi	r20, 0x00	; 0
    5d84:	50 e0       	ldi	r21, 0x00	; 0
    5d86:	be 01       	movw	r22, r28
    5d88:	8b e7       	ldi	r24, 0x7B	; 123
    5d8a:	91 e0       	ldi	r25, 0x01	; 1
    5d8c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    5d90:	69 c2       	rjmp	.+1234   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_EV://Set linear sweep end voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_sweep_volt_end);
    5d92:	28 e6       	ldi	r18, 0x68	; 104
    5d94:	33 e1       	ldi	r19, 0x13	; 19
    5d96:	40 e0       	ldi	r20, 0x00	; 0
    5d98:	50 e0       	ldi	r21, 0x00	; 0
    5d9a:	be 01       	movw	r22, r28
    5d9c:	8b e7       	ldi	r24, 0x7B	; 123
    5d9e:	91 e0       	ldi	r25, 0x01	; 1
    5da0:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    5da4:	5f c2       	rjmp	.+1214   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_SR://Set linear sweep rate.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_sweep_rate);
    5da6:	2d e7       	ldi	r18, 0x7D	; 125
    5da8:	33 e1       	ldi	r19, 0x13	; 19
    5daa:	40 e0       	ldi	r20, 0x00	; 0
    5dac:	50 e0       	ldi	r21, 0x00	; 0
    5dae:	be 01       	movw	r22, r28
    5db0:	8b e7       	ldi	r24, 0x7B	; 123
    5db2:	91 e0       	ldi	r25, 0x01	; 1
    5db4:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    5db8:	55 c2       	rjmp	.+1194   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_C://Enable linear sweep cyclic voltammetry.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_sweep_cyclic);
    5dba:	21 e9       	ldi	r18, 0x91	; 145
    5dbc:	33 e1       	ldi	r19, 0x13	; 19
    5dbe:	40 e0       	ldi	r20, 0x00	; 0
    5dc0:	50 e0       	ldi	r21, 0x00	; 0
    5dc2:	be 01       	movw	r22, r28
    5dc4:	8b e7       	ldi	r24, 0x7B	; 123
    5dc6:	91 e0       	ldi	r25, 0x01	; 1
    5dc8:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    5dcc:	4b c2       	rjmp	.+1174   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_CS://Set number of linear sweep cycles.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_sweep_cycles);
    5dce:	28 e9       	ldi	r18, 0x98	; 152
    5dd0:	33 e1       	ldi	r19, 0x13	; 19
    5dd2:	40 e0       	ldi	r20, 0x00	; 0
    5dd4:	50 e0       	ldi	r21, 0x00	; 0
    5dd6:	be 01       	movw	r22, r28
    5dd8:	8b e7       	ldi	r24, 0x7B	; 123
    5dda:	91 e0       	ldi	r25, 0x01	; 1
    5ddc:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    5de0:	41 c2       	rjmp	.+1154   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_SQR_SV://Set square wave start voltage.
			if(bin_index == 3)
    5de2:	80 91 79 01 	lds	r24, 0x0179
    5de6:	83 30       	cpi	r24, 0x03	; 3
    5de8:	61 f5       	brne	.+88     	; 0x5e42 <_Z12bin_tokenizeP8as_class+0x40e>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    5dea:	ea e7       	ldi	r30, 0x7A	; 122
    5dec:	f1 e0       	ldi	r31, 0x01	; 1
    5dee:	01 81       	ldd	r16, Z+1	; 0x01
    5df0:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    5df2:	10 2f       	mov	r17, r16
    5df4:	00 27       	eor	r16, r16
	temp16 += array[1];
    5df6:	82 81       	ldd	r24, Z+2	; 0x02
    5df8:	08 0f       	add	r16, r24
    5dfa:	11 1d       	adc	r17, r1
		case BIN_SQR_SV://Set square wave start voltage.
			if(bin_index == 3)
			{
				start_v = load_int16(&arr.bin_rx[1]);
				//Check to make sure range is valid.
				if(start_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    5dfc:	ce 01       	movw	r24, r28
    5dfe:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5e02:	80 0f       	add	r24, r16
    5e04:	91 1f       	adc	r25, r17
    5e06:	83 37       	cpi	r24, 0x73	; 115
    5e08:	96 40       	sbci	r25, 0x06	; 6
    5e0a:	24 f0       	brlt	.+8      	; 0x5e14 <_Z12bin_tokenizeP8as_class+0x3e0>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5e0c:	87 e0       	ldi	r24, 0x07	; 7
    5e0e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5e12:	28 c2       	rjmp	.+1104   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(start_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    5e14:	ce 01       	movw	r24, r28
    5e16:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5e1a:	98 01       	movw	r18, r16
    5e1c:	28 1b       	sub	r18, r24
    5e1e:	39 0b       	sbc	r19, r25
    5e20:	c9 01       	movw	r24, r18
    5e22:	8e 38       	cpi	r24, 0x8E	; 142
    5e24:	99 4f       	sbci	r25, 0xF9	; 249
    5e26:	24 f4       	brge	.+8      	; 0x5e30 <_Z12bin_tokenizeP8as_class+0x3fc>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5e28:	87 e0       	ldi	r24, 0x07	; 7
    5e2a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5e2e:	1a c2       	rjmp	.+1076   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else
				{
					errno = as->set_square_volt_start(start_v);
    5e30:	b8 01       	movw	r22, r16
    5e32:	ce 01       	movw	r24, r28
    5e34:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN8as_class21set_square_volt_startEi>
    5e38:	80 93 93 01 	sts	0x0193, r24
					atmega_uart::tx_byte(errno);
    5e3c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5e40:	11 c2       	rjmp	.+1058   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
			}
			else//Transmit error.
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5e42:	83 e0       	ldi	r24, 0x03	; 3
    5e44:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5e48:	0d c2       	rjmp	.+1050   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
		break;
		
		case BIN_SQR_EV://Set square wave end voltage.
			if(bin_index == 3)
    5e4a:	80 91 79 01 	lds	r24, 0x0179
    5e4e:	83 30       	cpi	r24, 0x03	; 3
    5e50:	61 f5       	brne	.+88     	; 0x5eaa <_Z12bin_tokenizeP8as_class+0x476>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    5e52:	ea e7       	ldi	r30, 0x7A	; 122
    5e54:	f1 e0       	ldi	r31, 0x01	; 1
    5e56:	01 81       	ldd	r16, Z+1	; 0x01
    5e58:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    5e5a:	10 2f       	mov	r17, r16
    5e5c:	00 27       	eor	r16, r16
	temp16 += array[1];
    5e5e:	82 81       	ldd	r24, Z+2	; 0x02
    5e60:	08 0f       	add	r16, r24
    5e62:	11 1d       	adc	r17, r1
		case BIN_SQR_EV://Set square wave end voltage.
			if(bin_index == 3)
			{
				end_v = load_int16(&arr.bin_rx[1]);
				//Check to make sure range is valid.
				if(end_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    5e64:	ce 01       	movw	r24, r28
    5e66:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5e6a:	80 0f       	add	r24, r16
    5e6c:	91 1f       	adc	r25, r17
    5e6e:	83 37       	cpi	r24, 0x73	; 115
    5e70:	96 40       	sbci	r25, 0x06	; 6
    5e72:	24 f0       	brlt	.+8      	; 0x5e7c <_Z12bin_tokenizeP8as_class+0x448>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5e74:	87 e0       	ldi	r24, 0x07	; 7
    5e76:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5e7a:	f4 c1       	rjmp	.+1000   	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(end_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    5e7c:	ce 01       	movw	r24, r28
    5e7e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN8as_class14get_square_ampEv>
    5e82:	98 01       	movw	r18, r16
    5e84:	28 1b       	sub	r18, r24
    5e86:	39 0b       	sbc	r19, r25
    5e88:	c9 01       	movw	r24, r18
    5e8a:	8e 38       	cpi	r24, 0x8E	; 142
    5e8c:	99 4f       	sbci	r25, 0xF9	; 249
    5e8e:	24 f4       	brge	.+8      	; 0x5e98 <_Z12bin_tokenizeP8as_class+0x464>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5e90:	87 e0       	ldi	r24, 0x07	; 7
    5e92:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5e96:	e6 c1       	rjmp	.+972    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else
				{
					errno = as->set_square_volt_start(end_v);
    5e98:	b8 01       	movw	r22, r16
    5e9a:	ce 01       	movw	r24, r28
    5e9c:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN8as_class21set_square_volt_startEi>
    5ea0:	80 93 93 01 	sts	0x0193, r24
					atmega_uart::tx_byte(errno);
    5ea4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5ea8:	dd c1       	rjmp	.+954    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
			}
			else//Transmit error.
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5eaa:	83 e0       	ldi	r24, 0x03	; 3
    5eac:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5eb0:	d9 c1       	rjmp	.+946    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
		break;
		
		case BIN_SQR_AMP://Set square wave amplitude.
			if(bin_index == 3)
    5eb2:	80 91 79 01 	lds	r24, 0x0179
    5eb6:	83 30       	cpi	r24, 0x03	; 3
    5eb8:	09 f0       	breq	.+2      	; 0x5ebc <_Z12bin_tokenizeP8as_class+0x488>
    5eba:	4a c0       	rjmp	.+148    	; 0x5f50 <_Z12bin_tokenizeP8as_class+0x51c>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    5ebc:	ea e7       	ldi	r30, 0x7A	; 122
    5ebe:	f1 e0       	ldi	r31, 0x01	; 1
    5ec0:	01 81       	ldd	r16, Z+1	; 0x01
    5ec2:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    5ec4:	10 2f       	mov	r17, r16
    5ec6:	00 27       	eor	r16, r16
	temp16 += array[1];
    5ec8:	82 81       	ldd	r24, Z+2	; 0x02
    5eca:	08 0f       	add	r16, r24
    5ecc:	11 1d       	adc	r17, r1
				if(rate < SQUARE_AMP_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > SQUARE_AMP_MAX)
    5ece:	03 37       	cpi	r16, 0x73	; 115
    5ed0:	86 e0       	ldi	r24, 0x06	; 6
    5ed2:	18 07       	cpc	r17, r24
    5ed4:	20 f0       	brcs	.+8      	; 0x5ede <_Z12bin_tokenizeP8as_class+0x4aa>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    5ed6:	82 e0       	ldi	r24, 0x02	; 2
    5ed8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5edc:	c3 c1       	rjmp	.+902    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_start() + (int16_t)rate > SQUARE_VOLT_MAX)
    5ede:	ce 01       	movw	r24, r28
    5ee0:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    5ee4:	80 0f       	add	r24, r16
    5ee6:	91 1f       	adc	r25, r17
    5ee8:	83 37       	cpi	r24, 0x73	; 115
    5eea:	96 40       	sbci	r25, 0x06	; 6
    5eec:	24 f0       	brlt	.+8      	; 0x5ef6 <_Z12bin_tokenizeP8as_class+0x4c2>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5eee:	87 e0       	ldi	r24, 0x07	; 7
    5ef0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5ef4:	b7 c1       	rjmp	.+878    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_start() - (int16_t)rate < SQUARE_VOLT_MIN)
    5ef6:	ce 01       	movw	r24, r28
    5ef8:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN8as_class21get_square_volt_startEv>
    5efc:	80 1b       	sub	r24, r16
    5efe:	91 0b       	sbc	r25, r17
    5f00:	8e 38       	cpi	r24, 0x8E	; 142
    5f02:	99 4f       	sbci	r25, 0xF9	; 249
    5f04:	24 f4       	brge	.+8      	; 0x5f0e <_Z12bin_tokenizeP8as_class+0x4da>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5f06:	87 e0       	ldi	r24, 0x07	; 7
    5f08:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5f0c:	ab c1       	rjmp	.+854    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_end() + (int16_t)rate > SQUARE_VOLT_MAX)
    5f0e:	ce 01       	movw	r24, r28
    5f10:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    5f14:	80 0f       	add	r24, r16
    5f16:	91 1f       	adc	r25, r17
    5f18:	83 37       	cpi	r24, 0x73	; 115
    5f1a:	96 40       	sbci	r25, 0x06	; 6
    5f1c:	24 f0       	brlt	.+8      	; 0x5f26 <_Z12bin_tokenizeP8as_class+0x4f2>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5f1e:	87 e0       	ldi	r24, 0x07	; 7
    5f20:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5f24:	9f c1       	rjmp	.+830    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_end() - (int16_t)rate < SQUARE_VOLT_MIN)
    5f26:	ce 01       	movw	r24, r28
    5f28:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN8as_class19get_square_volt_endEv>
    5f2c:	80 1b       	sub	r24, r16
    5f2e:	91 0b       	sbc	r25, r17
    5f30:	8e 38       	cpi	r24, 0x8E	; 142
    5f32:	99 4f       	sbci	r25, 0xF9	; 249
    5f34:	24 f4       	brge	.+8      	; 0x5f3e <_Z12bin_tokenizeP8as_class+0x50a>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5f36:	87 e0       	ldi	r24, 0x07	; 7
    5f38:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5f3c:	93 c1       	rjmp	.+806    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				errno = as->set_square_amp(rate);
    5f3e:	b8 01       	movw	r22, r16
    5f40:	ce 01       	movw	r24, r28
    5f42:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN8as_class14set_square_ampEj>
    5f46:	80 93 93 01 	sts	0x0193, r24
				atmega_uart::tx_byte(errno);
    5f4a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5f4e:	8a c1       	rjmp	.+788    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5f50:	83 e0       	ldi	r24, 0x03	; 3
    5f52:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    5f56:	86 c1       	rjmp	.+780    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
		break;
		
		case BIN_SQR_INC://Set square wave increment.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_square_inc);
    5f58:	20 ee       	ldi	r18, 0xE0	; 224
    5f5a:	33 e1       	ldi	r19, 0x13	; 19
    5f5c:	40 e0       	ldi	r20, 0x00	; 0
    5f5e:	50 e0       	ldi	r21, 0x00	; 0
    5f60:	be 01       	movw	r22, r28
    5f62:	8b e7       	ldi	r24, 0x7B	; 123
    5f64:	91 e0       	ldi	r25, 0x01	; 1
    5f66:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    5f6a:	7c c1       	rjmp	.+760    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_SQR_PER://Set square wave period.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_square_period);
    5f6c:	2f ee       	ldi	r18, 0xEF	; 239
    5f6e:	33 e1       	ldi	r19, 0x13	; 19
    5f70:	40 e0       	ldi	r20, 0x00	; 0
    5f72:	50 e0       	ldi	r21, 0x00	; 0
    5f74:	be 01       	movw	r22, r28
    5f76:	8b e7       	ldi	r24, 0x7B	; 123
    5f78:	91 e0       	ldi	r25, 0x01	; 1
    5f7a:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    5f7e:	72 c1       	rjmp	.+740    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_AE://Append arbitrary waveform entry
			
			if(bin_index == 7)
    5f80:	80 91 79 01 	lds	r24, 0x0179
    5f84:	87 30       	cpi	r24, 0x07	; 7
    5f86:	09 f0       	breq	.+2      	; 0x5f8a <_Z12bin_tokenizeP8as_class+0x556>
    5f88:	75 c0       	rjmp	.+234    	; 0x6074 <_Z12bin_tokenizeP8as_class+0x640>
			{
				//Get number of entries already in list.
				entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    5f8a:	86 e0       	ldi	r24, 0x06	; 6
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    5f92:	ec 01       	movw	r28, r24
				
				//Error out if memory is already full.
				if(entries >= ARB_ENTRIES_MAX)
    5f94:	86 39       	cpi	r24, 0x96	; 150
    5f96:	91 05       	cpc	r25, r1
    5f98:	20 f0       	brcs	.+8      	; 0x5fa2 <_Z12bin_tokenizeP8as_class+0x56e>
				{
					atmega_uart::tx_byte(ER_BIN_MEM_FULL);
    5f9a:	85 e0       	ldi	r24, 0x05	; 5
    5f9c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5fa0:	61 c1       	rjmp	.+706    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    5fa2:	ea e7       	ldi	r30, 0x7A	; 122
    5fa4:	f1 e0       	ldi	r31, 0x01	; 1
    5fa6:	21 81       	ldd	r18, Z+1	; 0x01
    5fa8:	30 e0       	ldi	r19, 0x00	; 0
	temp16 <<= 8;
    5faa:	32 2f       	mov	r19, r18
    5fac:	22 27       	eor	r18, r18
	temp16 += array[1];
    5fae:	82 81       	ldd	r24, Z+2	; 0x02
    5fb0:	b9 01       	movw	r22, r18
    5fb2:	68 0f       	add	r22, r24
    5fb4:	71 1d       	adc	r23, r1
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    5fb6:	c3 80       	ldd	r12, Z+3	; 0x03
	temp16 <<= 8;
	temp16 += array[1];
    5fb8:	94 81       	ldd	r25, Z+4	; 0x04
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    5fba:	e5 80       	ldd	r14, Z+5	; 0x05
	temp16 <<= 8;
	temp16 += array[1];
    5fbc:	86 81       	ldd	r24, Z+6	; 0x06
				start_v = load_int16(&arr.bin_rx[1]);
				end_v = load_int16(&arr.bin_rx[3]);
				rate = load_u16(&arr.bin_rx[5]);
				
				//Make sure the number falls within the proper range.
				if(start_v > ARB_VOLT_MAX)
    5fbe:	63 37       	cpi	r22, 0x73	; 115
    5fc0:	26 e0       	ldi	r18, 0x06	; 6
    5fc2:	72 07       	cpc	r23, r18
    5fc4:	24 f0       	brlt	.+8      	; 0x5fce <_Z12bin_tokenizeP8as_class+0x59a>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    5fc6:	82 e0       	ldi	r24, 0x02	; 2
    5fc8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5fcc:	4b c1       	rjmp	.+662    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(start_v < ARB_VOLT_MIN)
    5fce:	6e 38       	cpi	r22, 0x8E	; 142
    5fd0:	39 ef       	ldi	r19, 0xF9	; 249
    5fd2:	73 07       	cpc	r23, r19
    5fd4:	24 f4       	brge	.+8      	; 0x5fde <_Z12bin_tokenizeP8as_class+0x5aa>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5fdc:	43 c1       	rjmp	.+646    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    5fde:	d1 2c       	mov	r13, r1
	temp16 <<= 8;
    5fe0:	dc 2c       	mov	r13, r12
    5fe2:	cc 24       	eor	r12, r12
	temp16 += array[1];
    5fe4:	c9 0e       	add	r12, r25
    5fe6:	d1 1c       	adc	r13, r1
				else if(start_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(end_v > ARB_VOLT_MAX)
    5fe8:	93 e7       	ldi	r25, 0x73	; 115
    5fea:	c9 16       	cp	r12, r25
    5fec:	96 e0       	ldi	r25, 0x06	; 6
    5fee:	d9 06       	cpc	r13, r25
    5ff0:	24 f0       	brlt	.+8      	; 0x5ffa <_Z12bin_tokenizeP8as_class+0x5c6>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    5ff2:	82 e0       	ldi	r24, 0x02	; 2
    5ff4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    5ff8:	35 c1       	rjmp	.+618    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(end_v < ARB_VOLT_MIN)
    5ffa:	2e e8       	ldi	r18, 0x8E	; 142
    5ffc:	c2 16       	cp	r12, r18
    5ffe:	29 ef       	ldi	r18, 0xF9	; 249
    6000:	d2 06       	cpc	r13, r18
    6002:	24 f4       	brge	.+8      	; 0x600c <_Z12bin_tokenizeP8as_class+0x5d8>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6004:	81 e0       	ldi	r24, 0x01	; 1
    6006:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    600a:	2c c1       	rjmp	.+600    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    600c:	f1 2c       	mov	r15, r1
	temp16 <<= 8;
    600e:	fe 2c       	mov	r15, r14
    6010:	ee 24       	eor	r14, r14
	temp16 += array[1];
    6012:	e8 0e       	add	r14, r24
    6014:	f1 1c       	adc	r15, r1
				else if(end_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > ARB_RATE_MAX)
    6016:	31 ed       	ldi	r19, 0xD1	; 209
    6018:	e3 16       	cp	r14, r19
    601a:	37 e0       	ldi	r19, 0x07	; 7
    601c:	f3 06       	cpc	r15, r19
    601e:	20 f0       	brcs	.+8      	; 0x6028 <_Z12bin_tokenizeP8as_class+0x5f4>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    6020:	82 e0       	ldi	r24, 0x02	; 2
    6022:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    6026:	1e c1       	rjmp	.+572    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(rate < ARB_RATE_MIN)
    6028:	e1 14       	cp	r14, r1
    602a:	f1 04       	cpc	r15, r1
    602c:	21 f4       	brne	.+8      	; 0x6036 <_Z12bin_tokenizeP8as_class+0x602>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    602e:	81 e0       	ldi	r24, 0x01	; 1
    6030:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    6034:	17 c1       	rjmp	.+558    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				
				//Save values in the EEPROM.
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * entries), start_v);
    6036:	86 e0       	ldi	r24, 0x06	; 6
    6038:	8c 9f       	mul	r24, r28
    603a:	80 01       	movw	r16, r0
    603c:	8d 9f       	mul	r24, r29
    603e:	10 0d       	add	r17, r0
    6040:	11 24       	eor	r1, r1
    6042:	c8 01       	movw	r24, r16
    6044:	08 96       	adiw	r24, 0x08	; 8
    6046:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * entries), end_v);
    604a:	b6 01       	movw	r22, r12
    604c:	c8 01       	movw	r24, r16
    604e:	0a 96       	adiw	r24, 0x0a	; 10
    6050:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * entries), rate);
    6054:	b7 01       	movw	r22, r14
    6056:	c8 01       	movw	r24, r16
    6058:	0c 96       	adiw	r24, 0x0c	; 12
    605a:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
				
				//Update number of entries stored.
				atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries + 1);
    605e:	be 01       	movw	r22, r28
    6060:	6f 5f       	subi	r22, 0xFF	; 255
    6062:	7f 4f       	sbci	r23, 0xFF	; 255
    6064:	86 e0       	ldi	r24, 0x06	; 6
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
				
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    606c:	80 e0       	ldi	r24, 0x00	; 0
    606e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    6072:	f8 c0       	rjmp	.+496    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6074:	83 e0       	ldi	r24, 0x03	; 3
    6076:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    607a:	f4 c0       	rjmp	.+488    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ARB_RE://Replace arbitrary waveform entry.
			if(bin_index == 8)
    607c:	80 91 79 01 	lds	r24, 0x0179
    6080:	88 30       	cpi	r24, 0x08	; 8
    6082:	09 f0       	breq	.+2      	; 0x6086 <_Z12bin_tokenizeP8as_class+0x652>
    6084:	76 c0       	rjmp	.+236    	; 0x6172 <_Z12bin_tokenizeP8as_class+0x73e>
			{
				//Get number of entries already in list.
				entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    6086:	86 e0       	ldi	r24, 0x06	; 6
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
				
				//Get numbers out of the array.
				ent = arr.bin_rx[1];
    608e:	20 91 7b 01 	lds	r18, 0x017B
    6092:	30 e0       	ldi	r19, 0x00	; 0
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    6094:	ea e7       	ldi	r30, 0x7A	; 122
    6096:	f1 e0       	ldi	r31, 0x01	; 1
    6098:	42 81       	ldd	r20, Z+2	; 0x02
	temp16 <<= 8;
	temp16 += array[1];
    609a:	63 81       	ldd	r22, Z+3	; 0x03
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    609c:	e4 80       	ldd	r14, Z+4	; 0x04
	temp16 <<= 8;
	temp16 += array[1];
    609e:	a5 81       	ldd	r26, Z+5	; 0x05
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    60a0:	06 81       	ldd	r16, Z+6	; 0x06
	temp16 <<= 8;
	temp16 += array[1];
    60a2:	77 81       	ldd	r23, Z+7	; 0x07
				start_v = load_int16(&arr.bin_rx[2]);
				end_v = load_int16(&arr.bin_rx[4]);
				rate = load_u16(&arr.bin_rx[6]);
				
				//Make sure the number falls within the proper range.
				if(ent < 1)
    60a4:	21 15       	cp	r18, r1
    60a6:	31 05       	cpc	r19, r1
    60a8:	21 f4       	brne	.+8      	; 0x60b2 <_Z12bin_tokenizeP8as_class+0x67e>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    60aa:	81 e0       	ldi	r24, 0x01	; 1
    60ac:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    60b0:	d9 c0       	rjmp	.+434    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(ent > entries)
    60b2:	82 17       	cp	r24, r18
    60b4:	93 07       	cpc	r25, r19
    60b6:	20 f4       	brcc	.+8      	; 0x60c0 <_Z12bin_tokenizeP8as_class+0x68c>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    60b8:	82 e0       	ldi	r24, 0x02	; 2
    60ba:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    60be:	d2 c0       	rjmp	.+420    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    60c0:	50 e0       	ldi	r21, 0x00	; 0
	temp16 <<= 8;
    60c2:	54 2f       	mov	r21, r20
    60c4:	44 27       	eor	r20, r20
	temp16 += array[1];
    60c6:	46 0f       	add	r20, r22
    60c8:	51 1d       	adc	r21, r1
				if(ent > entries)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
					break;
				}
				if(start_v > ARB_VOLT_MAX)
    60ca:	43 37       	cpi	r20, 0x73	; 115
    60cc:	86 e0       	ldi	r24, 0x06	; 6
    60ce:	58 07       	cpc	r21, r24
    60d0:	24 f0       	brlt	.+8      	; 0x60da <_Z12bin_tokenizeP8as_class+0x6a6>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    60d2:	82 e0       	ldi	r24, 0x02	; 2
    60d4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    60d8:	c5 c0       	rjmp	.+394    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(start_v < ARB_VOLT_MIN)
    60da:	4e 38       	cpi	r20, 0x8E	; 142
    60dc:	99 ef       	ldi	r25, 0xF9	; 249
    60de:	59 07       	cpc	r21, r25
    60e0:	24 f4       	brge	.+8      	; 0x60ea <_Z12bin_tokenizeP8as_class+0x6b6>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    60e2:	81 e0       	ldi	r24, 0x01	; 1
    60e4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    60e8:	bd c0       	rjmp	.+378    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    60ea:	f1 2c       	mov	r15, r1
	temp16 <<= 8;
    60ec:	fe 2c       	mov	r15, r14
    60ee:	ee 24       	eor	r14, r14
	temp16 += array[1];
    60f0:	ea 0e       	add	r14, r26
    60f2:	f1 1c       	adc	r15, r1
				else if(start_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(end_v > ARB_VOLT_MAX)
    60f4:	83 e7       	ldi	r24, 0x73	; 115
    60f6:	e8 16       	cp	r14, r24
    60f8:	86 e0       	ldi	r24, 0x06	; 6
    60fa:	f8 06       	cpc	r15, r24
    60fc:	24 f0       	brlt	.+8      	; 0x6106 <_Z12bin_tokenizeP8as_class+0x6d2>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    60fe:	82 e0       	ldi	r24, 0x02	; 2
    6100:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    6104:	af c0       	rjmp	.+350    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(end_v < ARB_VOLT_MIN)
    6106:	9e e8       	ldi	r25, 0x8E	; 142
    6108:	e9 16       	cp	r14, r25
    610a:	99 ef       	ldi	r25, 0xF9	; 249
    610c:	f9 06       	cpc	r15, r25
    610e:	24 f4       	brge	.+8      	; 0x6118 <_Z12bin_tokenizeP8as_class+0x6e4>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    6116:	a6 c0       	rjmp	.+332    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    6118:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    611a:	10 2f       	mov	r17, r16
    611c:	00 27       	eor	r16, r16
	temp16 += array[1];
    611e:	07 0f       	add	r16, r23
    6120:	11 1d       	adc	r17, r1
				else if(end_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > ARB_RATE_MAX)
    6122:	01 3d       	cpi	r16, 0xD1	; 209
    6124:	87 e0       	ldi	r24, 0x07	; 7
    6126:	18 07       	cpc	r17, r24
    6128:	20 f0       	brcs	.+8      	; 0x6132 <_Z12bin_tokenizeP8as_class+0x6fe>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    612a:	82 e0       	ldi	r24, 0x02	; 2
    612c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    6130:	99 c0       	rjmp	.+306    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(rate < ARB_RATE_MIN)
    6132:	01 15       	cp	r16, r1
    6134:	11 05       	cpc	r17, r1
    6136:	21 f4       	brne	.+8      	; 0x6140 <_Z12bin_tokenizeP8as_class+0x70c>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6138:	81 e0       	ldi	r24, 0x01	; 1
    613a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
					break;
    613e:	92 c0       	rjmp	.+292    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				}
				
				//Save values in the EEPROM.
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * (ent - 1)), start_v);
    6140:	86 e0       	ldi	r24, 0x06	; 6
    6142:	82 9f       	mul	r24, r18
    6144:	e0 01       	movw	r28, r0
    6146:	83 9f       	mul	r24, r19
    6148:	d0 0d       	add	r29, r0
    614a:	11 24       	eor	r1, r1
    614c:	ba 01       	movw	r22, r20
    614e:	ce 01       	movw	r24, r28
    6150:	02 96       	adiw	r24, 0x02	; 2
    6152:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * (ent - 1)), end_v);
    6156:	b7 01       	movw	r22, r14
    6158:	ce 01       	movw	r24, r28
    615a:	04 96       	adiw	r24, 0x04	; 4
    615c:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * (ent - 1)), rate);
    6160:	b8 01       	movw	r22, r16
    6162:	ce 01       	movw	r24, r28
    6164:	06 96       	adiw	r24, 0x06	; 6
    6166:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
				
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    616a:	80 e0       	ldi	r24, 0x00	; 0
    616c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    6170:	79 c0       	rjmp	.+242    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6172:	83 e0       	ldi	r24, 0x03	; 3
    6174:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
    6178:	75 c0       	rjmp	.+234    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ARB_DLE://Delete last arbitrary waveform entry.
					
			//Get number of entries already in list.
			entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    617a:	86 e0       	ldi	r24, 0x06	; 6
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
			
			if(entries)//decrement and save.
    6182:	00 97       	sbiw	r24, 0x00	; 0
    6184:	39 f0       	breq	.+14     	; 0x6194 <_Z12bin_tokenizeP8as_class+0x760>
				atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries - 1);
    6186:	bc 01       	movw	r22, r24
    6188:	61 50       	subi	r22, 0x01	; 1
    618a:	71 09       	sbc	r23, r1
    618c:	86 e0       	ldi	r24, 0x06	; 6
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
			
			atmega_uart::tx_byte(ER_BIN_NO_ERR);
    6194:	80 e0       	ldi	r24, 0x00	; 0
    6196:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		break;
    619a:	64 c0       	rjmp	.+200    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_DAE://Delete all arbitrary waveform entries.
			atmega_eeprom::write_word((uint16_t *)ARB_NUM, 0);
    619c:	60 e0       	ldi	r22, 0x00	; 0
    619e:	70 e0       	ldi	r23, 0x00	; 0
    61a0:	86 e0       	ldi	r24, 0x06	; 6
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13atmega_eeprom10write_wordEPjj>
			atmega_uart::tx_byte(ER_BIN_NO_ERR);
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		break;
    61ae:	5a c0       	rjmp	.+180    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_SV://Get stored arbitrary waveform entries.
					
			//Get number of entries already in list.
			entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    61b0:	86 e0       	ldi	r24, 0x06	; 6
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    61b8:	8c 01       	movw	r16, r24
			
			if(!entries)//If no entries, exit.
    61ba:	00 97       	sbiw	r24, 0x00	; 0
    61bc:	21 f4       	brne	.+8      	; 0x61c6 <_Z12bin_tokenizeP8as_class+0x792>
			{
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    61be:	80 e0       	ldi	r24, 0x00	; 0
    61c0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
				break;
    61c4:	4f c0       	rjmp	.+158    	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		case BIN_ARB_SV://Get stored arbitrary waveform entries.
					
			//Get number of entries already in list.
			entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
			
			if(!entries)//If no entries, exit.
    61c6:	f1 2c       	mov	r15, r1
				break;
			}
			
			for (uint8_t i = 0; i < entries; i++)//Transmit stored contents.
			{
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 6 * i)));
    61c8:	2f 2d       	mov	r18, r15
    61ca:	30 e0       	ldi	r19, 0x00	; 0
    61cc:	e9 01       	movw	r28, r18
    61ce:	cc 0f       	add	r28, r28
    61d0:	dd 1f       	adc	r29, r29
    61d2:	2c 0f       	add	r18, r28
    61d4:	3d 1f       	adc	r19, r29
    61d6:	e9 01       	movw	r28, r18
    61d8:	cc 0f       	add	r28, r28
    61da:	dd 1f       	adc	r29, r29
    61dc:	ce 01       	movw	r24, r28
    61de:	08 96       	adiw	r24, 0x08	; 8
    61e0:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    61e4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 2 + 6 * i)));
    61e8:	ce 01       	movw	r24, r28
    61ea:	0a 96       	adiw	r24, 0x0a	; 10
    61ec:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    61f0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 4 + 6 * i)));
    61f4:	ce 01       	movw	r24, r28
    61f6:	0c 96       	adiw	r24, 0x0c	; 12
    61f8:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN13atmega_eeprom9read_wordEPj>
    61fc:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11atmega_uart7tx_wordEj>
			{
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
				break;
			}
			
			for (uint8_t i = 0; i < entries; i++)//Transmit stored contents.
    6200:	f3 94       	inc	r15
    6202:	2f 2d       	mov	r18, r15
    6204:	30 e0       	ldi	r19, 0x00	; 0
    6206:	20 17       	cp	r18, r16
    6208:	31 07       	cpc	r19, r17
    620a:	f0 f2       	brcs	.-68     	; 0x61c8 <_Z12bin_tokenizeP8as_class+0x794>
    620c:	2b c0       	rjmp	.+86     	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 4 + 6 * i)));
			}
		break;
		
		case BIN_ARB_C:///Enable cyclic arbitrary waveforms.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_arb_cyclic);
    620e:	23 e0       	ldi	r18, 0x03	; 3
    6210:	34 e1       	ldi	r19, 0x14	; 20
    6212:	40 e0       	ldi	r20, 0x00	; 0
    6214:	50 e0       	ldi	r21, 0x00	; 0
    6216:	be 01       	movw	r22, r28
    6218:	8b e7       	ldi	r24, 0x7B	; 123
    621a:	91 e0       	ldi	r25, 0x01	; 1
    621c:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    6220:	21 c0       	rjmp	.+66     	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_CS://Set number of arbitrary waveform cycles.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_arb_cycles);
    6222:	2a e0       	ldi	r18, 0x0A	; 10
    6224:	34 e1       	ldi	r19, 0x14	; 20
    6226:	40 e0       	ldi	r20, 0x00	; 0
    6228:	50 e0       	ldi	r21, 0x00	; 0
    622a:	be 01       	movw	r22, r28
    622c:	8b e7       	ldi	r24, 0x7B	; 123
    622e:	91 e0       	ldi	r25, 0x01	; 1
    6230:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    6234:	17 c0       	rjmp	.+46     	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LPF_EN://Enable low-pass filter.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_soft_filt);
    6236:	29 e1       	ldi	r18, 0x19	; 25
    6238:	34 e1       	ldi	r19, 0x14	; 20
    623a:	40 e0       	ldi	r20, 0x00	; 0
    623c:	50 e0       	ldi	r21, 0x00	; 0
    623e:	be 01       	movw	r22, r28
    6240:	8b e7       	ldi	r24, 0x7B	; 123
    6242:	91 e0       	ldi	r25, 0x01	; 1
    6244:	0e 94 c5 22 	call	0x458a	; 0x458a <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    6248:	0d c0       	rjmp	.+26     	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LPF_SF://Set low-pass filter selection.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_soft_sel);
    624a:	20 e2       	ldi	r18, 0x20	; 32
    624c:	34 e1       	ldi	r19, 0x14	; 20
    624e:	40 e0       	ldi	r20, 0x00	; 0
    6250:	50 e0       	ldi	r21, 0x00	; 0
    6252:	be 01       	movw	r22, r28
    6254:	8b e7       	ldi	r24, 0x7B	; 123
    6256:	91 e0       	ldi	r25, 0x01	; 1
    6258:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    625c:	03 c0       	rjmp	.+6      	; 0x6264 <_Z12bin_tokenizeP8as_class+0x830>
		
		default://Unrecognized command.
			atmega_uart::tx_byte(ER_BIN_INV_CMD);
    625e:	86 e0       	ldi	r24, 0x06	; 6
    6260:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN11atmega_uart7tx_byteEh>
		break;
	}
	
	//Reset index for next string.
	bin_index = 0;
    6264:	10 92 79 01 	sts	0x0179, r1
}
    6268:	df 91       	pop	r29
    626a:	cf 91       	pop	r28
    626c:	1f 91       	pop	r17
    626e:	0f 91       	pop	r16
    6270:	ff 90       	pop	r15
    6272:	ef 90       	pop	r14
    6274:	df 90       	pop	r13
    6276:	cf 90       	pop	r12
    6278:	08 95       	ret

0000627a <__subsf3>:
    627a:	50 58       	subi	r21, 0x80	; 128

0000627c <__addsf3>:
    627c:	bb 27       	eor	r27, r27
    627e:	aa 27       	eor	r26, r26
    6280:	0e d0       	rcall	.+28     	; 0x629e <__addsf3x>
    6282:	e0 c0       	rjmp	.+448    	; 0x6444 <__fp_round>
    6284:	d1 d0       	rcall	.+418    	; 0x6428 <__fp_pscA>
    6286:	30 f0       	brcs	.+12     	; 0x6294 <__addsf3+0x18>
    6288:	d6 d0       	rcall	.+428    	; 0x6436 <__fp_pscB>
    628a:	20 f0       	brcs	.+8      	; 0x6294 <__addsf3+0x18>
    628c:	31 f4       	brne	.+12     	; 0x629a <__addsf3+0x1e>
    628e:	9f 3f       	cpi	r25, 0xFF	; 255
    6290:	11 f4       	brne	.+4      	; 0x6296 <__addsf3+0x1a>
    6292:	1e f4       	brtc	.+6      	; 0x629a <__addsf3+0x1e>
    6294:	c6 c0       	rjmp	.+396    	; 0x6422 <__fp_nan>
    6296:	0e f4       	brtc	.+2      	; 0x629a <__addsf3+0x1e>
    6298:	e0 95       	com	r30
    629a:	e7 fb       	bst	r30, 7
    629c:	bc c0       	rjmp	.+376    	; 0x6416 <__fp_inf>

0000629e <__addsf3x>:
    629e:	e9 2f       	mov	r30, r25
    62a0:	e2 d0       	rcall	.+452    	; 0x6466 <__fp_split3>
    62a2:	80 f3       	brcs	.-32     	; 0x6284 <__addsf3+0x8>
    62a4:	ba 17       	cp	r27, r26
    62a6:	62 07       	cpc	r22, r18
    62a8:	73 07       	cpc	r23, r19
    62aa:	84 07       	cpc	r24, r20
    62ac:	95 07       	cpc	r25, r21
    62ae:	18 f0       	brcs	.+6      	; 0x62b6 <__addsf3x+0x18>
    62b0:	71 f4       	brne	.+28     	; 0x62ce <__addsf3x+0x30>
    62b2:	9e f5       	brtc	.+102    	; 0x631a <__addsf3x+0x7c>
    62b4:	fa c0       	rjmp	.+500    	; 0x64aa <__fp_zero>
    62b6:	0e f4       	brtc	.+2      	; 0x62ba <__addsf3x+0x1c>
    62b8:	e0 95       	com	r30
    62ba:	0b 2e       	mov	r0, r27
    62bc:	ba 2f       	mov	r27, r26
    62be:	a0 2d       	mov	r26, r0
    62c0:	0b 01       	movw	r0, r22
    62c2:	b9 01       	movw	r22, r18
    62c4:	90 01       	movw	r18, r0
    62c6:	0c 01       	movw	r0, r24
    62c8:	ca 01       	movw	r24, r20
    62ca:	a0 01       	movw	r20, r0
    62cc:	11 24       	eor	r1, r1
    62ce:	ff 27       	eor	r31, r31
    62d0:	59 1b       	sub	r21, r25
    62d2:	99 f0       	breq	.+38     	; 0x62fa <__addsf3x+0x5c>
    62d4:	59 3f       	cpi	r21, 0xF9	; 249
    62d6:	50 f4       	brcc	.+20     	; 0x62ec <__addsf3x+0x4e>
    62d8:	50 3e       	cpi	r21, 0xE0	; 224
    62da:	68 f1       	brcs	.+90     	; 0x6336 <__addsf3x+0x98>
    62dc:	1a 16       	cp	r1, r26
    62de:	f0 40       	sbci	r31, 0x00	; 0
    62e0:	a2 2f       	mov	r26, r18
    62e2:	23 2f       	mov	r18, r19
    62e4:	34 2f       	mov	r19, r20
    62e6:	44 27       	eor	r20, r20
    62e8:	58 5f       	subi	r21, 0xF8	; 248
    62ea:	f3 cf       	rjmp	.-26     	; 0x62d2 <__addsf3x+0x34>
    62ec:	46 95       	lsr	r20
    62ee:	37 95       	ror	r19
    62f0:	27 95       	ror	r18
    62f2:	a7 95       	ror	r26
    62f4:	f0 40       	sbci	r31, 0x00	; 0
    62f6:	53 95       	inc	r21
    62f8:	c9 f7       	brne	.-14     	; 0x62ec <__addsf3x+0x4e>
    62fa:	7e f4       	brtc	.+30     	; 0x631a <__addsf3x+0x7c>
    62fc:	1f 16       	cp	r1, r31
    62fe:	ba 0b       	sbc	r27, r26
    6300:	62 0b       	sbc	r22, r18
    6302:	73 0b       	sbc	r23, r19
    6304:	84 0b       	sbc	r24, r20
    6306:	ba f0       	brmi	.+46     	; 0x6336 <__addsf3x+0x98>
    6308:	91 50       	subi	r25, 0x01	; 1
    630a:	a1 f0       	breq	.+40     	; 0x6334 <__addsf3x+0x96>
    630c:	ff 0f       	add	r31, r31
    630e:	bb 1f       	adc	r27, r27
    6310:	66 1f       	adc	r22, r22
    6312:	77 1f       	adc	r23, r23
    6314:	88 1f       	adc	r24, r24
    6316:	c2 f7       	brpl	.-16     	; 0x6308 <__addsf3x+0x6a>
    6318:	0e c0       	rjmp	.+28     	; 0x6336 <__addsf3x+0x98>
    631a:	ba 0f       	add	r27, r26
    631c:	62 1f       	adc	r22, r18
    631e:	73 1f       	adc	r23, r19
    6320:	84 1f       	adc	r24, r20
    6322:	48 f4       	brcc	.+18     	; 0x6336 <__addsf3x+0x98>
    6324:	87 95       	ror	r24
    6326:	77 95       	ror	r23
    6328:	67 95       	ror	r22
    632a:	b7 95       	ror	r27
    632c:	f7 95       	ror	r31
    632e:	9e 3f       	cpi	r25, 0xFE	; 254
    6330:	08 f0       	brcs	.+2      	; 0x6334 <__addsf3x+0x96>
    6332:	b3 cf       	rjmp	.-154    	; 0x629a <__addsf3+0x1e>
    6334:	93 95       	inc	r25
    6336:	88 0f       	add	r24, r24
    6338:	08 f0       	brcs	.+2      	; 0x633c <__addsf3x+0x9e>
    633a:	99 27       	eor	r25, r25
    633c:	ee 0f       	add	r30, r30
    633e:	97 95       	ror	r25
    6340:	87 95       	ror	r24
    6342:	08 95       	ret

00006344 <__fixunssfsi>:
    6344:	98 d0       	rcall	.+304    	; 0x6476 <__fp_splitA>
    6346:	88 f0       	brcs	.+34     	; 0x636a <__fixunssfsi+0x26>
    6348:	9f 57       	subi	r25, 0x7F	; 127
    634a:	90 f0       	brcs	.+36     	; 0x6370 <__fixunssfsi+0x2c>
    634c:	b9 2f       	mov	r27, r25
    634e:	99 27       	eor	r25, r25
    6350:	b7 51       	subi	r27, 0x17	; 23
    6352:	a0 f0       	brcs	.+40     	; 0x637c <__fixunssfsi+0x38>
    6354:	d1 f0       	breq	.+52     	; 0x638a <__fixunssfsi+0x46>
    6356:	66 0f       	add	r22, r22
    6358:	77 1f       	adc	r23, r23
    635a:	88 1f       	adc	r24, r24
    635c:	99 1f       	adc	r25, r25
    635e:	1a f0       	brmi	.+6      	; 0x6366 <__fixunssfsi+0x22>
    6360:	ba 95       	dec	r27
    6362:	c9 f7       	brne	.-14     	; 0x6356 <__fixunssfsi+0x12>
    6364:	12 c0       	rjmp	.+36     	; 0x638a <__fixunssfsi+0x46>
    6366:	b1 30       	cpi	r27, 0x01	; 1
    6368:	81 f0       	breq	.+32     	; 0x638a <__fixunssfsi+0x46>
    636a:	9f d0       	rcall	.+318    	; 0x64aa <__fp_zero>
    636c:	b1 e0       	ldi	r27, 0x01	; 1
    636e:	08 95       	ret
    6370:	9c c0       	rjmp	.+312    	; 0x64aa <__fp_zero>
    6372:	67 2f       	mov	r22, r23
    6374:	78 2f       	mov	r23, r24
    6376:	88 27       	eor	r24, r24
    6378:	b8 5f       	subi	r27, 0xF8	; 248
    637a:	39 f0       	breq	.+14     	; 0x638a <__fixunssfsi+0x46>
    637c:	b9 3f       	cpi	r27, 0xF9	; 249
    637e:	cc f3       	brlt	.-14     	; 0x6372 <__fixunssfsi+0x2e>
    6380:	86 95       	lsr	r24
    6382:	77 95       	ror	r23
    6384:	67 95       	ror	r22
    6386:	b3 95       	inc	r27
    6388:	d9 f7       	brne	.-10     	; 0x6380 <__fixunssfsi+0x3c>
    638a:	3e f4       	brtc	.+14     	; 0x639a <__fixunssfsi+0x56>
    638c:	90 95       	com	r25
    638e:	80 95       	com	r24
    6390:	70 95       	com	r23
    6392:	61 95       	neg	r22
    6394:	7f 4f       	sbci	r23, 0xFF	; 255
    6396:	8f 4f       	sbci	r24, 0xFF	; 255
    6398:	9f 4f       	sbci	r25, 0xFF	; 255
    639a:	08 95       	ret

0000639c <__floatunsisf>:
    639c:	e8 94       	clt
    639e:	09 c0       	rjmp	.+18     	; 0x63b2 <__floatsisf+0x12>

000063a0 <__floatsisf>:
    63a0:	97 fb       	bst	r25, 7
    63a2:	3e f4       	brtc	.+14     	; 0x63b2 <__floatsisf+0x12>
    63a4:	90 95       	com	r25
    63a6:	80 95       	com	r24
    63a8:	70 95       	com	r23
    63aa:	61 95       	neg	r22
    63ac:	7f 4f       	sbci	r23, 0xFF	; 255
    63ae:	8f 4f       	sbci	r24, 0xFF	; 255
    63b0:	9f 4f       	sbci	r25, 0xFF	; 255
    63b2:	99 23       	and	r25, r25
    63b4:	a9 f0       	breq	.+42     	; 0x63e0 <__floatsisf+0x40>
    63b6:	f9 2f       	mov	r31, r25
    63b8:	96 e9       	ldi	r25, 0x96	; 150
    63ba:	bb 27       	eor	r27, r27
    63bc:	93 95       	inc	r25
    63be:	f6 95       	lsr	r31
    63c0:	87 95       	ror	r24
    63c2:	77 95       	ror	r23
    63c4:	67 95       	ror	r22
    63c6:	b7 95       	ror	r27
    63c8:	f1 11       	cpse	r31, r1
    63ca:	f8 cf       	rjmp	.-16     	; 0x63bc <__floatsisf+0x1c>
    63cc:	fa f4       	brpl	.+62     	; 0x640c <__floatsisf+0x6c>
    63ce:	bb 0f       	add	r27, r27
    63d0:	11 f4       	brne	.+4      	; 0x63d6 <__floatsisf+0x36>
    63d2:	60 ff       	sbrs	r22, 0
    63d4:	1b c0       	rjmp	.+54     	; 0x640c <__floatsisf+0x6c>
    63d6:	6f 5f       	subi	r22, 0xFF	; 255
    63d8:	7f 4f       	sbci	r23, 0xFF	; 255
    63da:	8f 4f       	sbci	r24, 0xFF	; 255
    63dc:	9f 4f       	sbci	r25, 0xFF	; 255
    63de:	16 c0       	rjmp	.+44     	; 0x640c <__floatsisf+0x6c>
    63e0:	88 23       	and	r24, r24
    63e2:	11 f0       	breq	.+4      	; 0x63e8 <__floatsisf+0x48>
    63e4:	96 e9       	ldi	r25, 0x96	; 150
    63e6:	11 c0       	rjmp	.+34     	; 0x640a <__floatsisf+0x6a>
    63e8:	77 23       	and	r23, r23
    63ea:	21 f0       	breq	.+8      	; 0x63f4 <__floatsisf+0x54>
    63ec:	9e e8       	ldi	r25, 0x8E	; 142
    63ee:	87 2f       	mov	r24, r23
    63f0:	76 2f       	mov	r23, r22
    63f2:	05 c0       	rjmp	.+10     	; 0x63fe <__floatsisf+0x5e>
    63f4:	66 23       	and	r22, r22
    63f6:	71 f0       	breq	.+28     	; 0x6414 <__floatsisf+0x74>
    63f8:	96 e8       	ldi	r25, 0x86	; 134
    63fa:	86 2f       	mov	r24, r22
    63fc:	70 e0       	ldi	r23, 0x00	; 0
    63fe:	60 e0       	ldi	r22, 0x00	; 0
    6400:	2a f0       	brmi	.+10     	; 0x640c <__floatsisf+0x6c>
    6402:	9a 95       	dec	r25
    6404:	66 0f       	add	r22, r22
    6406:	77 1f       	adc	r23, r23
    6408:	88 1f       	adc	r24, r24
    640a:	da f7       	brpl	.-10     	; 0x6402 <__floatsisf+0x62>
    640c:	88 0f       	add	r24, r24
    640e:	96 95       	lsr	r25
    6410:	87 95       	ror	r24
    6412:	97 f9       	bld	r25, 7
    6414:	08 95       	ret

00006416 <__fp_inf>:
    6416:	97 f9       	bld	r25, 7
    6418:	9f 67       	ori	r25, 0x7F	; 127
    641a:	80 e8       	ldi	r24, 0x80	; 128
    641c:	70 e0       	ldi	r23, 0x00	; 0
    641e:	60 e0       	ldi	r22, 0x00	; 0
    6420:	08 95       	ret

00006422 <__fp_nan>:
    6422:	9f ef       	ldi	r25, 0xFF	; 255
    6424:	80 ec       	ldi	r24, 0xC0	; 192
    6426:	08 95       	ret

00006428 <__fp_pscA>:
    6428:	00 24       	eor	r0, r0
    642a:	0a 94       	dec	r0
    642c:	16 16       	cp	r1, r22
    642e:	17 06       	cpc	r1, r23
    6430:	18 06       	cpc	r1, r24
    6432:	09 06       	cpc	r0, r25
    6434:	08 95       	ret

00006436 <__fp_pscB>:
    6436:	00 24       	eor	r0, r0
    6438:	0a 94       	dec	r0
    643a:	12 16       	cp	r1, r18
    643c:	13 06       	cpc	r1, r19
    643e:	14 06       	cpc	r1, r20
    6440:	05 06       	cpc	r0, r21
    6442:	08 95       	ret

00006444 <__fp_round>:
    6444:	09 2e       	mov	r0, r25
    6446:	03 94       	inc	r0
    6448:	00 0c       	add	r0, r0
    644a:	11 f4       	brne	.+4      	; 0x6450 <__fp_round+0xc>
    644c:	88 23       	and	r24, r24
    644e:	52 f0       	brmi	.+20     	; 0x6464 <__fp_round+0x20>
    6450:	bb 0f       	add	r27, r27
    6452:	40 f4       	brcc	.+16     	; 0x6464 <__fp_round+0x20>
    6454:	bf 2b       	or	r27, r31
    6456:	11 f4       	brne	.+4      	; 0x645c <__fp_round+0x18>
    6458:	60 ff       	sbrs	r22, 0
    645a:	04 c0       	rjmp	.+8      	; 0x6464 <__fp_round+0x20>
    645c:	6f 5f       	subi	r22, 0xFF	; 255
    645e:	7f 4f       	sbci	r23, 0xFF	; 255
    6460:	8f 4f       	sbci	r24, 0xFF	; 255
    6462:	9f 4f       	sbci	r25, 0xFF	; 255
    6464:	08 95       	ret

00006466 <__fp_split3>:
    6466:	57 fd       	sbrc	r21, 7
    6468:	90 58       	subi	r25, 0x80	; 128
    646a:	44 0f       	add	r20, r20
    646c:	55 1f       	adc	r21, r21
    646e:	59 f0       	breq	.+22     	; 0x6486 <__fp_splitA+0x10>
    6470:	5f 3f       	cpi	r21, 0xFF	; 255
    6472:	71 f0       	breq	.+28     	; 0x6490 <__fp_splitA+0x1a>
    6474:	47 95       	ror	r20

00006476 <__fp_splitA>:
    6476:	88 0f       	add	r24, r24
    6478:	97 fb       	bst	r25, 7
    647a:	99 1f       	adc	r25, r25
    647c:	61 f0       	breq	.+24     	; 0x6496 <__fp_splitA+0x20>
    647e:	9f 3f       	cpi	r25, 0xFF	; 255
    6480:	79 f0       	breq	.+30     	; 0x64a0 <__fp_splitA+0x2a>
    6482:	87 95       	ror	r24
    6484:	08 95       	ret
    6486:	12 16       	cp	r1, r18
    6488:	13 06       	cpc	r1, r19
    648a:	14 06       	cpc	r1, r20
    648c:	55 1f       	adc	r21, r21
    648e:	f2 cf       	rjmp	.-28     	; 0x6474 <__fp_split3+0xe>
    6490:	46 95       	lsr	r20
    6492:	f1 df       	rcall	.-30     	; 0x6476 <__fp_splitA>
    6494:	08 c0       	rjmp	.+16     	; 0x64a6 <__fp_splitA+0x30>
    6496:	16 16       	cp	r1, r22
    6498:	17 06       	cpc	r1, r23
    649a:	18 06       	cpc	r1, r24
    649c:	99 1f       	adc	r25, r25
    649e:	f1 cf       	rjmp	.-30     	; 0x6482 <__fp_splitA+0xc>
    64a0:	86 95       	lsr	r24
    64a2:	71 05       	cpc	r23, r1
    64a4:	61 05       	cpc	r22, r1
    64a6:	08 94       	sec
    64a8:	08 95       	ret

000064aa <__fp_zero>:
    64aa:	e8 94       	clt

000064ac <__fp_szero>:
    64ac:	bb 27       	eor	r27, r27
    64ae:	66 27       	eor	r22, r22
    64b0:	77 27       	eor	r23, r23
    64b2:	cb 01       	movw	r24, r22
    64b4:	97 f9       	bld	r25, 7
    64b6:	08 95       	ret

000064b8 <__mulsf3>:
    64b8:	0b d0       	rcall	.+22     	; 0x64d0 <__mulsf3x>
    64ba:	c4 cf       	rjmp	.-120    	; 0x6444 <__fp_round>
    64bc:	b5 df       	rcall	.-150    	; 0x6428 <__fp_pscA>
    64be:	28 f0       	brcs	.+10     	; 0x64ca <__mulsf3+0x12>
    64c0:	ba df       	rcall	.-140    	; 0x6436 <__fp_pscB>
    64c2:	18 f0       	brcs	.+6      	; 0x64ca <__mulsf3+0x12>
    64c4:	95 23       	and	r25, r21
    64c6:	09 f0       	breq	.+2      	; 0x64ca <__mulsf3+0x12>
    64c8:	a6 cf       	rjmp	.-180    	; 0x6416 <__fp_inf>
    64ca:	ab cf       	rjmp	.-170    	; 0x6422 <__fp_nan>
    64cc:	11 24       	eor	r1, r1
    64ce:	ee cf       	rjmp	.-36     	; 0x64ac <__fp_szero>

000064d0 <__mulsf3x>:
    64d0:	ca df       	rcall	.-108    	; 0x6466 <__fp_split3>
    64d2:	a0 f3       	brcs	.-24     	; 0x64bc <__mulsf3+0x4>

000064d4 <__mulsf3_pse>:
    64d4:	95 9f       	mul	r25, r21
    64d6:	d1 f3       	breq	.-12     	; 0x64cc <__mulsf3+0x14>
    64d8:	95 0f       	add	r25, r21
    64da:	50 e0       	ldi	r21, 0x00	; 0
    64dc:	55 1f       	adc	r21, r21
    64de:	62 9f       	mul	r22, r18
    64e0:	f0 01       	movw	r30, r0
    64e2:	72 9f       	mul	r23, r18
    64e4:	bb 27       	eor	r27, r27
    64e6:	f0 0d       	add	r31, r0
    64e8:	b1 1d       	adc	r27, r1
    64ea:	63 9f       	mul	r22, r19
    64ec:	aa 27       	eor	r26, r26
    64ee:	f0 0d       	add	r31, r0
    64f0:	b1 1d       	adc	r27, r1
    64f2:	aa 1f       	adc	r26, r26
    64f4:	64 9f       	mul	r22, r20
    64f6:	66 27       	eor	r22, r22
    64f8:	b0 0d       	add	r27, r0
    64fa:	a1 1d       	adc	r26, r1
    64fc:	66 1f       	adc	r22, r22
    64fe:	82 9f       	mul	r24, r18
    6500:	22 27       	eor	r18, r18
    6502:	b0 0d       	add	r27, r0
    6504:	a1 1d       	adc	r26, r1
    6506:	62 1f       	adc	r22, r18
    6508:	73 9f       	mul	r23, r19
    650a:	b0 0d       	add	r27, r0
    650c:	a1 1d       	adc	r26, r1
    650e:	62 1f       	adc	r22, r18
    6510:	83 9f       	mul	r24, r19
    6512:	a0 0d       	add	r26, r0
    6514:	61 1d       	adc	r22, r1
    6516:	22 1f       	adc	r18, r18
    6518:	74 9f       	mul	r23, r20
    651a:	33 27       	eor	r19, r19
    651c:	a0 0d       	add	r26, r0
    651e:	61 1d       	adc	r22, r1
    6520:	23 1f       	adc	r18, r19
    6522:	84 9f       	mul	r24, r20
    6524:	60 0d       	add	r22, r0
    6526:	21 1d       	adc	r18, r1
    6528:	82 2f       	mov	r24, r18
    652a:	76 2f       	mov	r23, r22
    652c:	6a 2f       	mov	r22, r26
    652e:	11 24       	eor	r1, r1
    6530:	9f 57       	subi	r25, 0x7F	; 127
    6532:	50 40       	sbci	r21, 0x00	; 0
    6534:	8a f0       	brmi	.+34     	; 0x6558 <__mulsf3_pse+0x84>
    6536:	e1 f0       	breq	.+56     	; 0x6570 <__mulsf3_pse+0x9c>
    6538:	88 23       	and	r24, r24
    653a:	4a f0       	brmi	.+18     	; 0x654e <__mulsf3_pse+0x7a>
    653c:	ee 0f       	add	r30, r30
    653e:	ff 1f       	adc	r31, r31
    6540:	bb 1f       	adc	r27, r27
    6542:	66 1f       	adc	r22, r22
    6544:	77 1f       	adc	r23, r23
    6546:	88 1f       	adc	r24, r24
    6548:	91 50       	subi	r25, 0x01	; 1
    654a:	50 40       	sbci	r21, 0x00	; 0
    654c:	a9 f7       	brne	.-22     	; 0x6538 <__mulsf3_pse+0x64>
    654e:	9e 3f       	cpi	r25, 0xFE	; 254
    6550:	51 05       	cpc	r21, r1
    6552:	70 f0       	brcs	.+28     	; 0x6570 <__mulsf3_pse+0x9c>
    6554:	60 cf       	rjmp	.-320    	; 0x6416 <__fp_inf>
    6556:	aa cf       	rjmp	.-172    	; 0x64ac <__fp_szero>
    6558:	5f 3f       	cpi	r21, 0xFF	; 255
    655a:	ec f3       	brlt	.-6      	; 0x6556 <__mulsf3_pse+0x82>
    655c:	98 3e       	cpi	r25, 0xE8	; 232
    655e:	dc f3       	brlt	.-10     	; 0x6556 <__mulsf3_pse+0x82>
    6560:	86 95       	lsr	r24
    6562:	77 95       	ror	r23
    6564:	67 95       	ror	r22
    6566:	b7 95       	ror	r27
    6568:	f7 95       	ror	r31
    656a:	e7 95       	ror	r30
    656c:	9f 5f       	subi	r25, 0xFF	; 255
    656e:	c1 f7       	brne	.-16     	; 0x6560 <__mulsf3_pse+0x8c>
    6570:	fe 2b       	or	r31, r30
    6572:	88 0f       	add	r24, r24
    6574:	91 1d       	adc	r25, r1
    6576:	96 95       	lsr	r25
    6578:	87 95       	ror	r24
    657a:	97 f9       	bld	r25, 7
    657c:	08 95       	ret

0000657e <__udivmodhi4>:
    657e:	aa 1b       	sub	r26, r26
    6580:	bb 1b       	sub	r27, r27
    6582:	51 e1       	ldi	r21, 0x11	; 17
    6584:	07 c0       	rjmp	.+14     	; 0x6594 <__udivmodhi4_ep>

00006586 <__udivmodhi4_loop>:
    6586:	aa 1f       	adc	r26, r26
    6588:	bb 1f       	adc	r27, r27
    658a:	a6 17       	cp	r26, r22
    658c:	b7 07       	cpc	r27, r23
    658e:	10 f0       	brcs	.+4      	; 0x6594 <__udivmodhi4_ep>
    6590:	a6 1b       	sub	r26, r22
    6592:	b7 0b       	sbc	r27, r23

00006594 <__udivmodhi4_ep>:
    6594:	88 1f       	adc	r24, r24
    6596:	99 1f       	adc	r25, r25
    6598:	5a 95       	dec	r21
    659a:	a9 f7       	brne	.-22     	; 0x6586 <__udivmodhi4_loop>
    659c:	80 95       	com	r24
    659e:	90 95       	com	r25
    65a0:	bc 01       	movw	r22, r24
    65a2:	cd 01       	movw	r24, r26
    65a4:	08 95       	ret

000065a6 <__udivmodsi4>:
    65a6:	a1 e2       	ldi	r26, 0x21	; 33
    65a8:	1a 2e       	mov	r1, r26
    65aa:	aa 1b       	sub	r26, r26
    65ac:	bb 1b       	sub	r27, r27
    65ae:	fd 01       	movw	r30, r26
    65b0:	0d c0       	rjmp	.+26     	; 0x65cc <__udivmodsi4_ep>

000065b2 <__udivmodsi4_loop>:
    65b2:	aa 1f       	adc	r26, r26
    65b4:	bb 1f       	adc	r27, r27
    65b6:	ee 1f       	adc	r30, r30
    65b8:	ff 1f       	adc	r31, r31
    65ba:	a2 17       	cp	r26, r18
    65bc:	b3 07       	cpc	r27, r19
    65be:	e4 07       	cpc	r30, r20
    65c0:	f5 07       	cpc	r31, r21
    65c2:	20 f0       	brcs	.+8      	; 0x65cc <__udivmodsi4_ep>
    65c4:	a2 1b       	sub	r26, r18
    65c6:	b3 0b       	sbc	r27, r19
    65c8:	e4 0b       	sbc	r30, r20
    65ca:	f5 0b       	sbc	r31, r21

000065cc <__udivmodsi4_ep>:
    65cc:	66 1f       	adc	r22, r22
    65ce:	77 1f       	adc	r23, r23
    65d0:	88 1f       	adc	r24, r24
    65d2:	99 1f       	adc	r25, r25
    65d4:	1a 94       	dec	r1
    65d6:	69 f7       	brne	.-38     	; 0x65b2 <__udivmodsi4_loop>
    65d8:	60 95       	com	r22
    65da:	70 95       	com	r23
    65dc:	80 95       	com	r24
    65de:	90 95       	com	r25
    65e0:	9b 01       	movw	r18, r22
    65e2:	ac 01       	movw	r20, r24
    65e4:	bd 01       	movw	r22, r26
    65e6:	cf 01       	movw	r24, r30
    65e8:	08 95       	ret

000065ea <__divmodsi4>:
    65ea:	05 2e       	mov	r0, r21
    65ec:	97 fb       	bst	r25, 7
    65ee:	1e f4       	brtc	.+6      	; 0x65f6 <__divmodsi4+0xc>
    65f0:	00 94       	com	r0
    65f2:	0e 94 0c 33 	call	0x6618	; 0x6618 <__negsi2>
    65f6:	57 fd       	sbrc	r21, 7
    65f8:	07 d0       	rcall	.+14     	; 0x6608 <__divmodsi4_neg2>
    65fa:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    65fe:	07 fc       	sbrc	r0, 7
    6600:	03 d0       	rcall	.+6      	; 0x6608 <__divmodsi4_neg2>
    6602:	4e f4       	brtc	.+18     	; 0x6616 <__divmodsi4_exit>
    6604:	0c 94 0c 33 	jmp	0x6618	; 0x6618 <__negsi2>

00006608 <__divmodsi4_neg2>:
    6608:	50 95       	com	r21
    660a:	40 95       	com	r20
    660c:	30 95       	com	r19
    660e:	21 95       	neg	r18
    6610:	3f 4f       	sbci	r19, 0xFF	; 255
    6612:	4f 4f       	sbci	r20, 0xFF	; 255
    6614:	5f 4f       	sbci	r21, 0xFF	; 255

00006616 <__divmodsi4_exit>:
    6616:	08 95       	ret

00006618 <__negsi2>:
    6618:	90 95       	com	r25
    661a:	80 95       	com	r24
    661c:	70 95       	com	r23
    661e:	61 95       	neg	r22
    6620:	7f 4f       	sbci	r23, 0xFF	; 255
    6622:	8f 4f       	sbci	r24, 0xFF	; 255
    6624:	9f 4f       	sbci	r25, 0xFF	; 255
    6626:	08 95       	ret

00006628 <__tablejump2__>:
    6628:	ee 0f       	add	r30, r30
    662a:	ff 1f       	adc	r31, r31

0000662c <__tablejump__>:
    662c:	05 90       	lpm	r0, Z+
    662e:	f4 91       	lpm	r31, Z
    6630:	e0 2d       	mov	r30, r0
    6632:	09 94       	ijmp

00006634 <__umulhisi3>:
    6634:	a2 9f       	mul	r26, r18
    6636:	b0 01       	movw	r22, r0
    6638:	b3 9f       	mul	r27, r19
    663a:	c0 01       	movw	r24, r0
    663c:	a3 9f       	mul	r26, r19
    663e:	70 0d       	add	r23, r0
    6640:	81 1d       	adc	r24, r1
    6642:	11 24       	eor	r1, r1
    6644:	91 1d       	adc	r25, r1
    6646:	b2 9f       	mul	r27, r18
    6648:	70 0d       	add	r23, r0
    664a:	81 1d       	adc	r24, r1
    664c:	11 24       	eor	r1, r1
    664e:	91 1d       	adc	r25, r1
    6650:	08 95       	ret

00006652 <__usmulhisi3>:
    6652:	0e 94 1a 33 	call	0x6634	; 0x6634 <__umulhisi3>

00006656 <__usmulhisi3_tail>:
    6656:	b7 ff       	sbrs	r27, 7
    6658:	08 95       	ret
    665a:	82 1b       	sub	r24, r18
    665c:	93 0b       	sbc	r25, r19
    665e:	08 95       	ret

00006660 <__muluhisi3>:
    6660:	0e 94 1a 33 	call	0x6634	; 0x6634 <__umulhisi3>
    6664:	a5 9f       	mul	r26, r21
    6666:	90 0d       	add	r25, r0
    6668:	b4 9f       	mul	r27, r20
    666a:	90 0d       	add	r25, r0
    666c:	a4 9f       	mul	r26, r20
    666e:	80 0d       	add	r24, r0
    6670:	91 1d       	adc	r25, r1
    6672:	11 24       	eor	r1, r1
    6674:	08 95       	ret

00006676 <__ashldi3>:
    6676:	0f 93       	push	r16
    6678:	08 30       	cpi	r16, 0x08	; 8
    667a:	90 f0       	brcs	.+36     	; 0x66a0 <__ashldi3+0x2a>
    667c:	98 2f       	mov	r25, r24
    667e:	87 2f       	mov	r24, r23
    6680:	76 2f       	mov	r23, r22
    6682:	65 2f       	mov	r22, r21
    6684:	54 2f       	mov	r21, r20
    6686:	43 2f       	mov	r20, r19
    6688:	32 2f       	mov	r19, r18
    668a:	22 27       	eor	r18, r18
    668c:	08 50       	subi	r16, 0x08	; 8
    668e:	f4 cf       	rjmp	.-24     	; 0x6678 <__ashldi3+0x2>
    6690:	22 0f       	add	r18, r18
    6692:	33 1f       	adc	r19, r19
    6694:	44 1f       	adc	r20, r20
    6696:	55 1f       	adc	r21, r21
    6698:	66 1f       	adc	r22, r22
    669a:	77 1f       	adc	r23, r23
    669c:	88 1f       	adc	r24, r24
    669e:	99 1f       	adc	r25, r25
    66a0:	0a 95       	dec	r16
    66a2:	b2 f7       	brpl	.-20     	; 0x6690 <__ashldi3+0x1a>
    66a4:	0f 91       	pop	r16
    66a6:	08 95       	ret

000066a8 <__adddi3>:
    66a8:	2a 0d       	add	r18, r10
    66aa:	3b 1d       	adc	r19, r11
    66ac:	4c 1d       	adc	r20, r12
    66ae:	5d 1d       	adc	r21, r13
    66b0:	6e 1d       	adc	r22, r14
    66b2:	7f 1d       	adc	r23, r15
    66b4:	80 1f       	adc	r24, r16
    66b6:	91 1f       	adc	r25, r17
    66b8:	08 95       	ret

000066ba <__eerd_byte_m328>:
    66ba:	f9 99       	sbic	0x1f, 1	; 31
    66bc:	fe cf       	rjmp	.-4      	; 0x66ba <__eerd_byte_m328>
    66be:	92 bd       	out	0x22, r25	; 34
    66c0:	81 bd       	out	0x21, r24	; 33
    66c2:	f8 9a       	sbi	0x1f, 0	; 31
    66c4:	99 27       	eor	r25, r25
    66c6:	80 b5       	in	r24, 0x20	; 32
    66c8:	08 95       	ret

000066ca <__eerd_word_m328>:
    66ca:	a8 e1       	ldi	r26, 0x18	; 24
    66cc:	b0 e0       	ldi	r27, 0x00	; 0
    66ce:	42 e0       	ldi	r20, 0x02	; 2
    66d0:	50 e0       	ldi	r21, 0x00	; 0
    66d2:	0c 94 80 33 	jmp	0x6700	; 0x6700 <__eerd_blraw_m328>

000066d6 <__eewr_byte_m328>:
    66d6:	26 2f       	mov	r18, r22

000066d8 <__eewr_r18_m328>:
    66d8:	f9 99       	sbic	0x1f, 1	; 31
    66da:	fe cf       	rjmp	.-4      	; 0x66d8 <__eewr_r18_m328>
    66dc:	1f ba       	out	0x1f, r1	; 31
    66de:	92 bd       	out	0x22, r25	; 34
    66e0:	81 bd       	out	0x21, r24	; 33
    66e2:	20 bd       	out	0x20, r18	; 32
    66e4:	0f b6       	in	r0, 0x3f	; 63
    66e6:	f8 94       	cli
    66e8:	fa 9a       	sbi	0x1f, 2	; 31
    66ea:	f9 9a       	sbi	0x1f, 1	; 31
    66ec:	0f be       	out	0x3f, r0	; 63
    66ee:	01 96       	adiw	r24, 0x01	; 1
    66f0:	08 95       	ret

000066f2 <__eewr_word_m328>:
    66f2:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <__eewr_byte_m328>
    66f6:	27 2f       	mov	r18, r23
    66f8:	0c 94 6c 33 	jmp	0x66d8	; 0x66d8 <__eewr_r18_m328>

000066fc <__eerd_block_m328>:
    66fc:	dc 01       	movw	r26, r24
    66fe:	cb 01       	movw	r24, r22

00006700 <__eerd_blraw_m328>:
    6700:	fc 01       	movw	r30, r24
    6702:	f9 99       	sbic	0x1f, 1	; 31
    6704:	fe cf       	rjmp	.-4      	; 0x6702 <__eerd_blraw_m328+0x2>
    6706:	06 c0       	rjmp	.+12     	; 0x6714 <__eerd_blraw_m328+0x14>
    6708:	f2 bd       	out	0x22, r31	; 34
    670a:	e1 bd       	out	0x21, r30	; 33
    670c:	f8 9a       	sbi	0x1f, 0	; 31
    670e:	31 96       	adiw	r30, 0x01	; 1
    6710:	00 b4       	in	r0, 0x20	; 32
    6712:	0d 92       	st	X+, r0
    6714:	41 50       	subi	r20, 0x01	; 1
    6716:	50 40       	sbci	r21, 0x00	; 0
    6718:	b8 f7       	brcc	.-18     	; 0x6708 <__eerd_blraw_m328+0x8>
    671a:	08 95       	ret

0000671c <_exit>:
    671c:	f8 94       	cli

0000671e <__stop_program>:
    671e:	ff cf       	rjmp	.-2      	; 0x671e <__stop_program>
