
AquaSift_V0011.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00006a16  00006aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800120  00800120  00006aca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006aca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000458  00000000  00000000  00006afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ad78  00000000  00000000  00006f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c4d  00000000  00000000  00011cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a6d  00000000  00000000  00012917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e08  00000000  00000000  00014384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001a05  00000000  00000000  0001518c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004cad  00000000  00000000  00016b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d8  00000000  00000000  0001b83e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 06 	jmp	0xcec	; 0xcec <__ctors_end>
       4:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
       8:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
       c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      10:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      14:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      18:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      1c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      20:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      24:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      28:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      2c:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_11>
      30:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      34:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      38:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      3c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      40:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      44:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      48:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_18>
      4c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      50:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      54:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      58:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      5c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      60:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      64:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__bad_interrupt>
      68:	2a 07       	cpc	r18, r26
      6a:	51 07       	cpc	r21, r17
      6c:	ed 07       	cpc	r30, r29
      6e:	a0 08       	sbc	r10, r0
      70:	f3 08       	sbc	r15, r3
      72:	3f 09       	sbc	r19, r15
      74:	f2 09       	sbc	r31, r2
      76:	36 0a       	sbc	r3, r22
      78:	18 0b       	sbc	r17, r24
      7a:	fa 0c       	add	r15, r10
      7c:	55 0d       	add	r21, r5
      7e:	3d 0e       	add	r3, r29
      80:	b5 10       	cpse	r11, r5
      82:	e1 10       	cpse	r14, r1
      84:	ed 10       	cpse	r14, r13
      86:	f7 10       	cpse	r15, r7
      88:	01 11       	cpse	r16, r1
      8a:	6b 12       	cpse	r6, r27
      8c:	0f 2e       	mov	r0, r31
      8e:	3f 2e       	mov	r3, r31
      90:	61 2e       	mov	r6, r17
      92:	c8 31       	cpi	r28, 0x18	; 24
      94:	c8 31       	cpi	r28, 0x18	; 24
      96:	c8 31       	cpi	r28, 0x18	; 24
      98:	c8 31       	cpi	r28, 0x18	; 24
      9a:	c8 31       	cpi	r28, 0x18	; 24
      9c:	c8 31       	cpi	r28, 0x18	; 24
      9e:	6b 2e       	mov	r6, r27
      a0:	0c 2f       	mov	r16, r28
      a2:	19 2f       	mov	r17, r25
      a4:	26 2f       	mov	r18, r22
      a6:	30 2f       	mov	r19, r16
      a8:	3a 2f       	mov	r19, r26
      aa:	44 2f       	mov	r20, r20
      ac:	4e 2f       	mov	r20, r30
      ae:	58 2f       	mov	r21, r24
      b0:	62 2f       	mov	r22, r18
      b2:	6c 2f       	mov	r22, r28
      b4:	76 2f       	mov	r23, r22
      b6:	80 2f       	mov	r24, r16
      b8:	8a 2f       	mov	r24, r26
      ba:	be 2f       	mov	r27, r30
      bc:	f2 2f       	mov	r31, r18
      be:	45 30       	cpi	r20, 0x05	; 5
      c0:	4f 30       	cpi	r20, 0x0F	; 15
      c2:	59 30       	cpi	r21, 0x09	; 9
      c4:	d7 30       	cpi	r29, 0x07	; 7
      c6:	56 31       	cpi	r21, 0x16	; 22
      c8:	67 31       	cpi	r22, 0x17	; 23
      ca:	71 31       	cpi	r23, 0x11	; 17
      cc:	a0 31       	cpi	r26, 0x10	; 16
      ce:	aa 31       	cpi	r26, 0x1A	; 26
      d0:	b4 31       	cpi	r27, 0x14	; 20
      d2:	be 31       	cpi	r27, 0x1E	; 30
      d4:	c8 31       	cpi	r28, 0x18	; 24
      d6:	c8 31       	cpi	r28, 0x18	; 24
      d8:	c8 31       	cpi	r28, 0x18	; 24
      da:	c8 31       	cpi	r28, 0x18	; 24
      dc:	c8 31       	cpi	r28, 0x18	; 24
      de:	c8 31       	cpi	r28, 0x18	; 24
      e0:	c8 31       	cpi	r28, 0x18	; 24
      e2:	c8 31       	cpi	r28, 0x18	; 24
      e4:	c8 31       	cpi	r28, 0x18	; 24
      e6:	c8 31       	cpi	r28, 0x18	; 24
      e8:	c8 31       	cpi	r28, 0x18	; 24
      ea:	c8 31       	cpi	r28, 0x18	; 24
      ec:	c8 31       	cpi	r28, 0x18	; 24
      ee:	c8 31       	cpi	r28, 0x18	; 24
      f0:	c8 31       	cpi	r28, 0x18	; 24
      f2:	c8 31       	cpi	r28, 0x18	; 24
      f4:	c8 31       	cpi	r28, 0x18	; 24
      f6:	c8 31       	cpi	r28, 0x18	; 24
      f8:	c8 31       	cpi	r28, 0x18	; 24
      fa:	c8 31       	cpi	r28, 0x18	; 24
      fc:	c8 31       	cpi	r28, 0x18	; 24
      fe:	c8 31       	cpi	r28, 0x18	; 24
     100:	c8 31       	cpi	r28, 0x18	; 24
     102:	c8 31       	cpi	r28, 0x18	; 24
     104:	c8 31       	cpi	r28, 0x18	; 24
     106:	c8 31       	cpi	r28, 0x18	; 24
     108:	c8 31       	cpi	r28, 0x18	; 24
     10a:	c8 31       	cpi	r28, 0x18	; 24
     10c:	fe 2d       	mov	r31, r14
     10e:	c8 31       	cpi	r28, 0x18	; 24
     110:	c8 31       	cpi	r28, 0x18	; 24
     112:	c8 31       	cpi	r28, 0x18	; 24
     114:	c8 31       	cpi	r28, 0x18	; 24
     116:	c8 31       	cpi	r28, 0x18	; 24
     118:	c8 31       	cpi	r28, 0x18	; 24
     11a:	c8 31       	cpi	r28, 0x18	; 24
     11c:	c8 31       	cpi	r28, 0x18	; 24
     11e:	c8 31       	cpi	r28, 0x18	; 24
     120:	c8 31       	cpi	r28, 0x18	; 24
     122:	dc 2d       	mov	r29, r12
     124:	c8 31       	cpi	r28, 0x18	; 24
     126:	c8 31       	cpi	r28, 0x18	; 24
     128:	c8 31       	cpi	r28, 0x18	; 24
     12a:	c8 31       	cpi	r28, 0x18	; 24
     12c:	c8 31       	cpi	r28, 0x18	; 24
     12e:	c8 31       	cpi	r28, 0x18	; 24
     130:	ed 2d       	mov	r30, r13
     132:	d0 2d       	mov	r29, r0
     134:	c8 31       	cpi	r28, 0x18	; 24
     136:	c8 31       	cpi	r28, 0x18	; 24
     138:	c8 31       	cpi	r28, 0x18	; 24
     13a:	c8 31       	cpi	r28, 0x18	; 24
     13c:	c8 31       	cpi	r28, 0x18	; 24
     13e:	c8 31       	cpi	r28, 0x18	; 24
     140:	c8 31       	cpi	r28, 0x18	; 24
     142:	c8 31       	cpi	r28, 0x18	; 24
     144:	c8 31       	cpi	r28, 0x18	; 24
     146:	c8 31       	cpi	r28, 0x18	; 24
     148:	c8 31       	cpi	r28, 0x18	; 24
     14a:	c8 31       	cpi	r28, 0x18	; 24
     14c:	fe 2d       	mov	r31, r14
     14e:	c8 31       	cpi	r28, 0x18	; 24
     150:	c8 31       	cpi	r28, 0x18	; 24
     152:	c8 31       	cpi	r28, 0x18	; 24
     154:	c8 31       	cpi	r28, 0x18	; 24
     156:	c8 31       	cpi	r28, 0x18	; 24
     158:	c8 31       	cpi	r28, 0x18	; 24
     15a:	c8 31       	cpi	r28, 0x18	; 24
     15c:	c8 31       	cpi	r28, 0x18	; 24
     15e:	c8 31       	cpi	r28, 0x18	; 24
     160:	c8 31       	cpi	r28, 0x18	; 24
     162:	dc 2d       	mov	r29, r12
     164:	c8 31       	cpi	r28, 0x18	; 24
     166:	c8 31       	cpi	r28, 0x18	; 24
     168:	c8 31       	cpi	r28, 0x18	; 24
     16a:	c8 31       	cpi	r28, 0x18	; 24
     16c:	c8 31       	cpi	r28, 0x18	; 24
     16e:	c8 31       	cpi	r28, 0x18	; 24
     170:	ed 2d       	mov	r30, r13
     172:	d0 2d       	mov	r29, r0

00000174 <__trampolines_end>:
     174:	54 65       	ori	r21, 0x54	; 84
     176:	73 74       	andi	r23, 0x43	; 67
     178:	20 41       	sbci	r18, 0x10	; 16
     17a:	62 6f       	ori	r22, 0xF2	; 242
     17c:	72 74       	andi	r23, 0x42	; 66
     17e:	65 64       	ori	r22, 0x45	; 69
     180:	0d 00       	.word	0x000d	; ????

00000182 <_ZZ11__vector_11E3__c_62>:
     182:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

0000018d <_ZZ11__vector_11E3__c_61>:
     18d:	27 29 0d 00                                         ')..

00000191 <_ZZ11__vector_11E3__c_60>:
     191:	43 79 63 6c 65 73 29 00                             Cycles).

00000199 <_ZZ11__vector_11E3__c_59>:
     199:	20 00                                                .

0000019b <_ZZ11__vector_11E3__c_58>:
     19b:	20 28 00                                             (.

0000019e <_ZZ11__vector_11E3__c_57>:
     19e:	53 71 75 61 72 65 20 57 61 76 65 00                 Square Wave.

000001aa <_ZZ11__vector_11E3__c_56>:
     1aa:	4c 69 6e 65 61 72 20 53 77 65 65 70 00              Linear Sweep.

000001b7 <_ZZ11__vector_11E3__c_55>:
     1b7:	43 79 63 6c 69 63 20 00                             Cyclic .

000001bf <_ZZ11__vector_11E3__c_54>:
     1bf:	74 69 74 6c 65 28 27 00                             title('.

000001c7 <_ZZ11__vector_11E3__c_53>:
     1c7:	78 6c 61 62 65 6c 28 27 56 6f 6c 74 73 28 56 29     xlabel('Volts(V)
     1d7:	27 29 3b 0d 00                                      ');..

000001dc <_ZZ11__vector_11E3__c_52>:
     1dc:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     1ec:	41 29 27 29 3b 0d 00                                A)');..

000001f3 <_ZZ11__vector_11E3__c_51>:
     1f3:	29 3b 0d 00                                         );..

000001f7 <_ZZ11__vector_11E3__c_50>:
     1f7:	2e 2e 2e 0d 00                                      .....

000001fc <_ZZ11__vector_11E3__c_49>:
     1fc:	73 5f 75 61 00                                      s_ua.

00000201 <_ZZ11__vector_11E3__c_48>:
     201:	70 6c 6f 74 28 00                                   plot(.

00000207 <_ZZ11__vector_11E3__c_47>:
     207:	66 69 67 75 72 65 28 33 29 3b 0d 00                 figure(3);..

00000213 <_ZZ11__vector_11E3__c_46>:
     213:	29 3b 0d 00                                         );..

00000217 <_ZZ11__vector_11E3__c_45>:
     217:	3d 66 6c 69 70 6c 72 28 73 5f 75 61 00              =fliplr(s_ua.

00000224 <_ZZ11__vector_11E3__c_44>:
     224:	73 5f 75 61 00                                      s_ua.

00000229 <_ZZ11__vector_11E3__c_43>:
     229:	29 29 3b 0d 00                                      ));..

0000022e <_ZZ11__vector_11E3__c_42>:
     22e:	2c 6c 65 6e 67 74 68 28 73 5f 75 61 00              ,length(s_ua.

0000023b <_ZZ11__vector_11E3__c_41>:
     23b:	73 77 65 65 70 5f 76 73 2f 31 30 30 30 2c 73 77     sweep_vs/1000,sw
     24b:	65 65 70 5f 76 65 2f 31 30 30 30 00                 eep_ve/1000.

00000257 <_ZZ11__vector_11E3__c_40>:
     257:	73 71 75 61 72 65 5f 76 73 2f 31 30 30 30 2c 73     square_vs/1000,s
     267:	71 75 61 72 65 5f 76 65 2f 31 30 30 30 00           quare_ve/1000.

00000275 <_ZZ11__vector_11E3__c_39>:
     275:	3d 6c 69 6e 73 70 61 63 65 28 00                    =linspace(.

00000280 <_ZZ11__vector_11E3__c_38>:
     280:	29 2a 28 33 2e 33 2f 34 30 39 36 29 2f 72 65 73     )*(3.3/4096)/res
     290:	29 3b 0d 00                                         );..

00000294 <_ZZ11__vector_11E3__c_37>:
     294:	2d 32 30 34 37 00                                   -2047.

0000029a <_ZZ11__vector_11E3__c_36>:
     29a:	3d 28 28 73 00                                      =((s.

0000029f <_ZZ11__vector_11E3__c_35>:
     29f:	73 5f 75 61 00                                      s_ua.

000002a4 <_ZZ11__vector_11E3__c_34>:
     2a4:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

000002af <_ZZ11__vector_11E3__c_33>:
     2af:	74 69 74 6c 65 28 27 51 75 69 65 74 20 54 69 6d     title('Quiet Tim
     2bf:	65 20 53 65 71 75 65 6e 63 65 27 29 3b 0d 00        e Sequence');..

000002ce <_ZZ11__vector_11E3__c_32>:
     2ce:	78 6c 61 62 65 6c 28 27 54 69 6d 65 20 28 73 29     xlabel('Time (s)
     2de:	27 29 3b 0d 00                                      ');..

000002e3 <_ZZ11__vector_11E3__c_31>:
     2e3:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     2f3:	41 29 27 29 3b 0d 00                                A)');..

000002fa <_ZZ11__vector_11E3__c_30>:
     2fa:	70 6c 6f 74 28 74 71 2c 71 5f 75 61 29 3b 0d 00     plot(tq,q_ua);..

0000030a <_ZZ11__vector_11E3__c_29>:
     30a:	66 69 67 75 72 65 28 32 29 3b 0d 00                 figure(2);..

00000316 <_ZZ11__vector_11E3__c_28>:
     316:	74 71 3d 6c 69 6e 73 70 61 63 65 28 31 2c 71 75     tq=linspace(1,qu
     326:	69 65 74 5f 74 2f 31 30 30 30 2c 6c 65 6e 67 74     iet_t/1000,lengt
     336:	68 28 71 5f 75 61 29 29 3b 0d 00                    h(q_ua));..

00000341 <_ZZ11__vector_11E3__c_27>:
     341:	71 5f 75 61 3d 28 28 71 2d 32 30 34 37 29 2a 28     q_ua=((q-2047)*(
     351:	33 2e 33 2f 34 30 39 36 29 2f 72 65 73 29 3b 0d     3.3/4096)/res);.
	...

00000362 <_ZZ11__vector_11E3__c_26>:
     362:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

0000036d <_ZZ11__vector_11E3__c_25>:
     36d:	74 69 74 6c 65 28 27 44 65 70 6f 73 69 74 69 6f     title('Depositio
     37d:	6e 20 53 65 71 75 65 6e 63 65 27 29 3b 0d 00        n Sequence');..

0000038c <_ZZ11__vector_11E3__c_24>:
     38c:	78 6c 61 62 65 6c 28 27 54 69 6d 65 20 28 73 29     xlabel('Time (s)
     39c:	27 29 3b 0d 00                                      ');..

000003a1 <_ZZ11__vector_11E3__c_23>:
     3a1:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     3b1:	41 29 27 29 3b 0d 00                                A)');..

000003b8 <_ZZ11__vector_11E3__c_22>:
     3b8:	70 6c 6f 74 28 74 64 2c 64 5f 75 61 29 3b 0d 00     plot(td,d_ua);..

000003c8 <_ZZ11__vector_11E3__c_21>:
     3c8:	66 69 67 75 72 65 28 31 29 3b 0d 00                 figure(1);..

000003d4 <_ZZ11__vector_11E3__c_20>:
     3d4:	74 64 3d 6c 69 6e 73 70 61 63 65 28 31 2c 64 65     td=linspace(1,de
     3e4:	70 5f 74 2f 31 30 30 30 2c 6c 65 6e 67 74 68 28     p_t/1000,length(
     3f4:	64 5f 75 61 29 29 3b 0d 00                          d_ua));..

000003fd <_ZZ11__vector_11E3__c_19>:
     3fd:	64 5f 75 61 3d 28 28 64 2d 32 30 34 37 29 2a 28     d_ua=((d-2047)*(
     40d:	33 2e 33 2f 34 30 39 36 29 2f 72 65 73 29 3b 0d     3.3/4096)/res);.
	...

0000041e <_ZZ11__vector_11E3__c_18>:
     41e:	72 65 73 3d 74 69 61 5f 72 74 2a 31 30 30 30 30     res=tia_rt*10000
     42e:	30 2f 31 30 32 33 3b 0d 00                          0/1023;..

00000437 <_ZZ11__vector_11E3__c_17>:
     437:	41 52 42 5f 53 54 4f 50 0d 00                       ARB_STOP..

00000441 <_ZZ11__vector_11E3__c_16>:
     441:	41 52 42 0d 00                                      ARB..

00000446 <_ZZ11__vector_11E3__c_15>:
     446:	41 52 42 5f 49 4e 49 54 0d 00                       ARB_INIT..

00000450 <_ZZ11__vector_11E3__c_14>:
     450:	5d 3b 0d 0d 00                                      ];...

00000455 <_ZZ11__vector_11E3__c_13>:
     455:	2e 2e 2e 0d 00                                      .....

0000045a <_ZZ11__vector_11E3__c_12>:
     45a:	2e 2e 2e 0d 00                                      .....

0000045f <_ZZ11__vector_11E3__c_11>:
     45f:	3d 5b 00                                            =[.

00000462 <_ZZ11__vector_11E3__c_10>:
     462:	3d 5b 00                                            =[.

00000465 <_ZZ11__vector_11E3__c_9>:
     465:	5d 3b 0d 0d 00                                      ];...

0000046a <_ZZ11__vector_11E3__c_8>:
     46a:	2e 2e 2e 0d 00                                      .....

0000046f <_ZZ11__vector_11E3__c_7>:
     46f:	5d 3b 0d 0d 00                                      ];...

00000474 <_ZZ11__vector_11E3__c_6>:
     474:	2e 2e 2e 0d 00                                      .....

00000479 <_ZZ11__vector_11E3__c_5>:
     479:	3d 5b 00                                            =[.

0000047c <_ZZ11__vector_11E3__c_4>:
     47c:	5d 3b 0d 0d 00                                      ];...

00000481 <_ZZ11__vector_11E3__c_3>:
     481:	2e 2e 2e 0d 00                                      .....

00000486 <_ZZ11__vector_11E3__c_2>:
     486:	71 3d 5b 00                                         q=[.

0000048a <_ZZ11__vector_11E3__c_1>:
     48a:	5d 3b 0d 0d 00                                      ];...

0000048f <_ZZ11__vector_11E3__c_0>:
     48f:	2e 2e 2e 0d 00                                      .....

00000494 <_ZZ11__vector_11E3__c>:
     494:	64 3d 5b 00                                         d=[.

00000498 <_ZZ11arb_replacePKhE3__c>:
     498:	45 6e 74 72 79 20 4f 75 74 20 6f 66 20 52 61 6e     Entry Out of Ran
     4a8:	67 65 0d 00                                         ge..

000004ac <_ZZ10arb_appendPKhE3__c>:
     4ac:	4d 65 6d 6f 72 79 20 46 75 6c 6c 0d 00              Memory Full..

000004b9 <_ZZ14uart_tokenizerhP8as_classE3__c_87>:
     4b9:	53 74 61 72 74 6d 56 20 45 6e 64 6d 56 20 52 61     StartmV EndmV Ra
     4c9:	74 65 0d 00                                         te..

000004cd <_ZZ14uart_tokenizerhP8as_classE3__c_86>:
     4cd:	4d 65 6d 6f 72 79 20 45 6d 70 74 79 0d 00           Memory Empty..

000004db <_ZZ14uart_tokenizerhP8as_classE3__c_85>:
     4db:	45 6e 64 2b 41 6d 70 20 4c 6f 77 20 00              End+Amp Low .

000004e8 <_ZZ14uart_tokenizerhP8as_classE3__c_84>:
     4e8:	45 6e 64 2b 41 6d 70 20 48 69 67 68 20 00           End+Amp High .

000004f6 <_ZZ14uart_tokenizerhP8as_classE3__c_83>:
     4f6:	53 74 61 72 74 2b 41 6d 70 20 4c 6f 77 20 00        Start+Amp Low .

00000505 <_ZZ14uart_tokenizerhP8as_classE3__c_82>:
     505:	53 74 61 72 74 2b 41 6d 70 20 48 69 67 68 20 00     Start+Amp High .

00000515 <_ZZ14uart_tokenizerhP8as_classE3__c_81>:
     515:	45 6e 64 2b 41 6d 70 20 4c 6f 77 20 00              End+Amp Low .

00000522 <_ZZ14uart_tokenizerhP8as_classE3__c_80>:
     522:	45 6e 64 2b 41 6d 70 20 48 69 67 68 20 00           End+Amp High .

00000530 <_ZZ14uart_tokenizerhP8as_classE3__c_79>:
     530:	53 74 61 72 74 2b 41 6d 70 20 4c 6f 77 20 00        Start+Amp Low .

0000053f <_ZZ14uart_tokenizerhP8as_classE3__c_78>:
     53f:	53 74 61 72 74 2b 41 6d 70 20 48 69 67 68 20 00     Start+Amp High .

0000054f <_ZZ14uart_tokenizerhP8as_classE3__c_77>:
     54f:	37 3a 20 32 30 30 48 7a 0d 0d 0d 0d 0d 0d 0d 0d     7: 200Hz........
     55f:	0d 0d 0d 0d 0d 00                                   ......

00000565 <_ZZ14uart_tokenizerhP8as_classE3__c_76>:
     565:	36 3a 20 31 35 30 48 7a 0d 00                       6: 150Hz..

0000056f <_ZZ14uart_tokenizerhP8as_classE3__c_75>:
     56f:	35 3a 20 31 30 30 48 7a 0d 00                       5: 100Hz..

00000579 <_ZZ14uart_tokenizerhP8as_classE3__c_74>:
     579:	34 3a 20 20 35 30 48 7a 0d 00                       4:  50Hz..

00000583 <_ZZ14uart_tokenizerhP8as_classE3__c_73>:
     583:	33 3a 20 20 31 30 48 7a 0d 00                       3:  10Hz..

0000058d <_ZZ14uart_tokenizerhP8as_classE3__c_72>:
     58d:	32 3a 20 20 20 35 48 7a 0d 00                       2:   5Hz..

00000597 <_ZZ14uart_tokenizerhP8as_classE3__c_71>:
     597:	31 3a 20 20 20 31 48 7a 0d 00                       1:   1Hz..

000005a1 <_ZZ14uart_tokenizerhP8as_classE3__c_70>:
     5a1:	20 20 20 43 75 74 6f 66 66 0d 00                       Cutoff..

000005ac <_ZZ14uart_tokenizerhP8as_classE3__c_69>:
     5ac:	33 36 2e 20 53 65 6c 65 63 74 65 64 20 46 69 6c     36. Selected Fil
     5bc:	74 65 72 00                                         ter.

000005c0 <_ZZ14uart_tokenizerhP8as_classE3__c_68>:
     5c0:	33 35 2e 20 45 6e 61 62 6c 65 20 53 6f 66 74 77     35. Enable Softw
     5d0:	61 72 65 20 46 69 6c 74 65 72 20 28 59 2f 4e 29     are Filter (Y/N)
     5e0:	3a 20 00                                            : .

000005e3 <_ZZ14uart_tokenizerhP8as_classE3__c_67>:
     5e3:	2d 2d 2d 4c 4f 57 2d 50 41 53 53 20 46 49 4c 54     ---LOW-PASS FILT
     5f3:	45 52 20 4d 45 4e 55 2d 2d 2d 0d 00                 ER MENU---..

000005ff <_ZZ14uart_tokenizerhP8as_classE3__c_66>:
     5ff:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 00                    ...........

0000060a <_ZZ14uart_tokenizerhP8as_classE3__c_65>:
     60a:	20 74 6f 20 00                                       to .

0000060f <_ZZ14uart_tokenizerhP8as_classE3__c_64>:
     60f:	0d 52 61 74 65 6d 56 2f 73 3a 20 00                 .RatemV/s: .

0000061b <_ZZ14uart_tokenizerhP8as_classE3__c_63>:
     61b:	20 74 6f 20 00                                       to .

00000620 <_ZZ14uart_tokenizerhP8as_classE3__c_62>:
     620:	0d 45 6e 64 6d 56 3a 20 20 20 00                    .EndmV:   .

0000062b <_ZZ14uart_tokenizerhP8as_classE3__c_61>:
     62b:	20 74 6f 20 00                                       to .

00000630 <_ZZ14uart_tokenizerhP8as_classE3__c_60>:
     630:	0d 0d 53 74 61 72 74 6d 56 3a 20 00                 ..StartmV: .

0000063c <_ZZ14uart_tokenizerhP8as_classE3__c_59>:
     63c:	29 3a 20 00                                         ): .

00000640 <_ZZ14uart_tokenizerhP8as_classE3__c_58>:
     640:	4e 75 6d 62 65 72 20 6f 66 20 53 74 6f 72 65 64     Number of Stored
     650:	20 45 6e 74 72 69 65 73 20 28 55 70 20 74 6f 20      Entries (Up to 
	...

00000661 <_ZZ14uart_tokenizerhP8as_classE3__c_57>:
     661:	0d 0d 00                                            ...

00000664 <_ZZ14uart_tokenizerhP8as_classE3__c_56>:
     664:	33 34 2e 20 4e 75 6d 62 65 72 20 6f 66 20 43 79     34. Number of Cy
     674:	63 6c 65 73 00                                      cles.

00000679 <_ZZ14uart_tokenizerhP8as_classE3__c_55>:
     679:	33 33 2e 20 43 79 63 6c 69 63 20 28 59 2f 4e 29     33. Cyclic (Y/N)
     689:	3a 20 00                                            : .

0000068c <_ZZ14uart_tokenizerhP8as_classE3__c_54>:
     68c:	33 32 2e 20 47 65 74 20 53 74 6f 72 65 64 20 56     32. Get Stored V
     69c:	61 6c 75 65 73 0d 00                                alues..

000006a3 <_ZZ14uart_tokenizerhP8as_classE3__c_53>:
     6a3:	33 31 2e 20 44 65 6c 65 74 65 20 41 6c 6c 20 45     31. Delete All E
     6b3:	6e 74 72 69 65 73 0d 00                             ntries..

000006bb <_ZZ14uart_tokenizerhP8as_classE3__c_52>:
     6bb:	33 30 2e 20 44 65 6c 65 74 65 20 4c 61 73 74 20     30. Delete Last 
     6cb:	45 6e 74 72 79 0d 00                                Entry..

000006d2 <_ZZ14uart_tokenizerhP8as_classE3__c_51>:
     6d2:	32 39 2e 20 52 65 70 6c 61 63 65 20 45 6e 74 72     29. Replace Entr
     6e2:	79 20 28 45 6e 74 72 79 23 20 53 74 61 72 74 6d     y (Entry# Startm
     6f2:	56 20 53 74 6f 70 6d 56 20 52 61 74 65 6d 56 2f     V StopmV RatemV/
     702:	73 29 0d 00                                         s)..

00000706 <_ZZ14uart_tokenizerhP8as_classE3__c_50>:
     706:	32 38 2e 20 41 70 70 65 6e 64 20 45 6e 74 72 79     28. Append Entry
     716:	20 28 53 74 61 72 74 6d 56 20 53 74 6f 70 6d 56      (StartmV StopmV
     726:	20 52 61 74 65 6d 56 2f 73 29 0d 00                  RatemV/s)..

00000732 <_ZZ14uart_tokenizerhP8as_classE3__c_49>:
     732:	2d 2d 2d 41 52 42 49 54 52 41 52 59 20 57 41 56     ---ARBITRARY WAV
     742:	45 46 4f 52 4d 20 4d 45 4e 55 2d 2d 2d 0d 00        EFORM MENU---..

00000751 <_ZZ14uart_tokenizerhP8as_classE3__c_48>:
     751:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     761:	0d 0d 00                                            ...

00000764 <_ZZ14uart_tokenizerhP8as_classE3__c_47>:
     764:	32 37 2e 20 53 71 75 61 72 65 20 57 61 76 65 20     27. Square Wave 
     774:	48 61 6c 66 20 50 65 72 69 6f 64 20 6d 73 00        Half Period ms.

00000783 <_ZZ14uart_tokenizerhP8as_classE3__c_46>:
     783:	32 36 2e 20 53 71 75 61 72 65 20 57 61 76 65 20     26. Square Wave 
     793:	49 6e 63 72 65 6d 65 6e 74 20 6d 56 00              Increment mV.

000007a0 <_ZZ14uart_tokenizerhP8as_classE3__c_45>:
     7a0:	32 35 2e 20 53 71 75 61 72 65 20 57 61 76 65 20     25. Square Wave 
     7b0:	41 6d 70 6c 69 74 75 64 65 20 6d 56 00              Amplitude mV.

000007bd <_ZZ14uart_tokenizerhP8as_classE3__c_44>:
     7bd:	32 34 2e 20 45 6e 64 20 56 6f 6c 74 61 67 65 20     24. End Voltage 
     7cd:	6d 56 00                                            mV.

000007d0 <_ZZ14uart_tokenizerhP8as_classE3__c_43>:
     7d0:	32 33 2e 20 53 74 61 72 74 20 56 6f 6c 74 61 67     23. Start Voltag
     7e0:	65 20 6d 56 00                                      e mV.

000007e5 <_ZZ14uart_tokenizerhP8as_classE3__c_42>:
     7e5:	2d 2d 2d 53 51 55 41 52 45 20 57 41 56 45 20 4d     ---SQUARE WAVE M
     7f5:	45 4e 55 2d 2d 2d 0d 00                             ENU---..

000007fd <_ZZ14uart_tokenizerhP8as_classE3__c_41>:
     7fd:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     80d:	0d 0d 00                                            ...

00000810 <_ZZ14uart_tokenizerhP8as_classE3__c_40>:
     810:	32 32 2e 20 4e 75 6d 62 65 72 20 6f 66 20 43 79     22. Number of Cy
     820:	63 6c 65 73 00                                      cles.

00000825 <_ZZ14uart_tokenizerhP8as_classE3__c_39>:
     825:	32 31 2e 20 43 79 63 6c 69 63 20 28 59 2f 4e 29     21. Cyclic (Y/N)
     835:	3a 20 00                                            : .

00000838 <_ZZ14uart_tokenizerhP8as_classE3__c_38>:
     838:	32 30 2e 20 53 77 65 65 70 20 52 61 74 65 20 6d     20. Sweep Rate m
     848:	56 2f 73 00                                         V/s.

0000084c <_ZZ14uart_tokenizerhP8as_classE3__c_37>:
     84c:	31 39 2e 20 45 6e 64 20 56 6f 6c 74 61 67 65 20     19. End Voltage 
     85c:	6d 56 00                                            mV.

0000085f <_ZZ14uart_tokenizerhP8as_classE3__c_36>:
     85f:	31 38 2e 20 53 74 61 72 74 20 56 6f 6c 74 61 67     18. Start Voltag
     86f:	65 20 6d 56 00                                      e mV.

00000874 <_ZZ14uart_tokenizerhP8as_classE3__c_35>:
     874:	2d 2d 2d 4c 49 4e 45 41 52 20 53 57 45 45 50 20     ---LINEAR SWEEP 
     884:	4d 45 4e 55 2d 2d 2d 0d 00                          MENU---..

0000088d <_ZZ14uart_tokenizerhP8as_classE3__c_34>:
     88d:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     89d:	0d 00                                               ..

0000089f <_ZZ14uart_tokenizerhP8as_classE3__c_33>:
     89f:	31 37 2e 20 52 65 63 6f 72 64 20 44 65 70 6f 73     17. Record Depos
     8af:	69 74 69 6f 6e 20 53 65 71 75 65 6e 63 65 20 28     ition Sequence (
     8bf:	59 2f 4e 29 3a 20 00                                Y/N): .

000008c6 <_ZZ14uart_tokenizerhP8as_classE3__c_32>:
     8c6:	31 36 2e 20 51 75 69 65 74 20 54 69 6d 65 20 6d     16. Quiet Time m
     8d6:	73 00                                               s.

000008d8 <_ZZ14uart_tokenizerhP8as_classE3__c_31>:
     8d8:	31 35 2e 20 44 65 70 6f 73 69 74 69 6f 6e 20 56     15. Deposition V
     8e8:	6f 6c 74 61 67 65 20 6d 56 00                       oltage mV.

000008f2 <_ZZ14uart_tokenizerhP8as_classE3__c_30>:
     8f2:	31 34 2e 20 44 65 70 6f 73 69 74 69 6f 6e 20 54     14. Deposition T
     902:	69 6d 65 20 6d 73 00                                ime ms.

00000909 <_ZZ14uart_tokenizerhP8as_classE3__c_29>:
     909:	31 33 2e 20 45 6e 61 62 6c 65 20 44 65 70 6f 73     13. Enable Depos
     919:	69 74 69 6f 6e 20 28 59 2f 4e 29 3a 20 00           ition (Y/N): .

00000927 <_ZZ14uart_tokenizerhP8as_classE3__c_28>:
     927:	2d 2d 2d 44 45 50 4f 53 49 54 49 4f 4e 20 4d 45     ---DEPOSITION ME
     937:	4e 55 2d 2d 2d 0d 00                                NU---..

0000093e <_ZZ14uart_tokenizerhP8as_classE3__c_27>:
     93e:	42 69 74 20 30 3a 20 31 30 75 66 0d 0d 0d 0d 0d     Bit 0: 10uf.....
     94e:	0d 0d 0d 0d 0d 0d 0d 0d 00                          .........

00000957 <_ZZ14uart_tokenizerhP8as_classE3__c_26>:
     957:	42 69 74 20 31 3a 20 31 75 66 0d 00                 Bit 1: 1uf..

00000963 <_ZZ14uart_tokenizerhP8as_classE3__c_25>:
     963:	42 69 74 20 32 3a 20 2e 31 75 66 0d 00              Bit 2: .1uf..

00000970 <_ZZ14uart_tokenizerhP8as_classE3__c_24>:
     970:	42 69 74 20 33 3a 20 2e 30 31 75 66 0d 00           Bit 3: .01uf..

0000097e <_ZZ14uart_tokenizerhP8as_classE3__c_23>:
     97e:	42 69 74 20 34 3a 20 31 30 30 30 70 66 0d 00        Bit 4: 1000pf..

0000098d <_ZZ14uart_tokenizerhP8as_classE3__c_22>:
     98d:	42 69 74 20 35 3a 20 31 30 30 70 66 0d 00           Bit 5: 100pf..

0000099b <_ZZ14uart_tokenizerhP8as_classE3__c_21>:
     99b:	31 32 2e 20 54 49 41 20 36 2d 62 69 74 20 43 61     12. TIA 6-bit Ca
     9ab:	70 61 63 69 74 6f 72 20 4d 61 73 6b 20 28 58 58     pacitor Mask (XX
     9bb:	58 58 58 58 29 3a 20 00                             XXXX): .

000009c3 <_ZZ14uart_tokenizerhP8as_classE3__c_20>:
     9c3:	52 20 3d 20 54 61 70 20 2a 20 31 30 30 30 30 30     R = Tap * 100000
     9d3:	20 2f 20 31 30 32 33 20 4f 68 6d 73 0d 00            / 1023 Ohms..

000009e1 <_ZZ14uart_tokenizerhP8as_classE3__c_19>:
     9e1:	20 4f 68 6d 73 0d 00                                 Ohms..

000009e8 <_ZZ14uart_tokenizerhP8as_classE3__c_18>:
     9e8:	52 65 73 69 73 74 61 6e 63 65 20 3d 20 00           Resistance = .

000009f6 <_ZZ14uart_tokenizerhP8as_classE3__c_17>:
     9f6:	31 31 2e 20 54 49 41 20 52 65 73 69 73 74 6f 72     11. TIA Resistor
     a06:	20 54 61 70 00                                       Tap.

00000a0b <_ZZ14uart_tokenizerhP8as_classE3__c_16>:
     a0b:	2d 2d 2d 54 49 41 20 4d 45 4e 55 2d 2d 2d 0d 00     ---TIA MENU---..

00000a1b <_ZZ14uart_tokenizerhP8as_classE3__c_15>:
     a1b:	58 20 41 62 6f 72 74 20 54 65 73 74 0d 0d 0d 0d     X Abort Test....
     a2b:	0d 00                                               ..

00000a2d <_ZZ14uart_tokenizerhP8as_classE3__c_14>:
     a2d:	41 20 53 74 61 72 74 20 41 72 62 69 74 72 61 72     A Start Arbitrar
     a3d:	79 20 57 61 76 65 66 6f 72 6d 20 54 65 73 74 0d     y Waveform Test.
	...

00000a4e <_ZZ14uart_tokenizerhP8as_classE3__c_13>:
     a4e:	53 20 53 74 61 72 74 20 53 71 75 61 72 65 20 57     S Start Square W
     a5e:	61 76 65 20 54 65 73 74 0d 00                       ave Test..

00000a68 <_ZZ14uart_tokenizerhP8as_classE3__c_12>:
     a68:	0d 4c 20 53 74 61 72 74 20 4c 69 6e 65 61 72 20     .L Start Linear 
     a78:	53 77 65 65 70 20 54 65 73 74 0d 00                 Sweep Test..

00000a84 <_ZZ14uart_tokenizerhP8as_classE3__c_11>:
     a84:	50 72 6f 64 75 63 74 20 49 44 3a 20 00              Product ID: .

00000a91 <_ZZ14uart_tokenizerhP8as_classE3__c_10>:
     a91:	46 69 72 6d 77 61 72 65 20 52 65 76 69 73 69 6f     Firmware Revisio
     aa1:	6e 3a 20 00                                         n: .

00000aa5 <_ZZ14uart_tokenizerhP8as_classE3__c_9>:
     aa5:	31 30 2e 20 47 65 74 20 73 65 74 74 69 6e 67 73     10. Get settings
     ab5:	0d 0d 00                                            ...

00000ab8 <_ZZ14uart_tokenizerhP8as_classE3__c_8>:
     ab8:	39 2e 20 20 4c 6f 77 2d 70 61 73 73 20 46 69 6c     9.  Low-pass Fil
     ac8:	74 65 72 20 4d 65 6e 75 0d 00                       ter Menu..

00000ad2 <_ZZ14uart_tokenizerhP8as_classE3__c_7>:
     ad2:	38 2e 20 20 41 72 62 69 74 72 61 72 79 20 57 61     8.  Arbitrary Wa
     ae2:	76 65 66 6f 72 6d 20 4d 65 6e 75 0d 00              veform Menu..

00000aef <_ZZ14uart_tokenizerhP8as_classE3__c_6>:
     aef:	37 2e 20 20 53 71 75 61 72 65 20 57 61 76 65 20     7.  Square Wave 
     aff:	4d 65 6e 75 0d 00                                   Menu..

00000b05 <_ZZ14uart_tokenizerhP8as_classE3__c_5>:
     b05:	36 2e 20 20 4c 69 6e 65 61 72 20 53 77 65 65 70     6.  Linear Sweep
     b15:	20 4d 65 6e 75 0d 00                                 Menu..

00000b1c <_ZZ14uart_tokenizerhP8as_classE3__c_4>:
     b1c:	35 2e 20 20 44 65 70 6f 73 69 74 69 6f 6e 20 4d     5.  Deposition M
     b2c:	65 6e 75 0d 00                                      enu..

00000b31 <_ZZ14uart_tokenizerhP8as_classE3__c_3>:
     b31:	34 2e 20 20 54 72 61 6e 73 69 6d 70 65 64 61 6e     4.  Transimpedan
     b41:	63 65 20 41 6d 70 6c 69 66 69 65 72 20 4d 65 6e     ce Amplifier Men
     b51:	75 0d 00                                            u..

00000b54 <_ZZ14uart_tokenizerhP8as_classE3__c_2>:
     b54:	33 2e 20 20 41 44 43 20 53 61 6d 70 6c 65 20 49     3.  ADC Sample I
     b64:	6e 74 65 72 76 61 6c 20 6d 73 00                    nterval ms.

00000b6f <_ZZ14uart_tokenizerhP8as_classE3__c_1>:
     b6f:	32 2e 20 20 4e 75 6d 62 65 72 20 6f 66 20 45 6c     2.  Number of El
     b7f:	65 63 74 72 6f 64 65 73 20 28 32 20 6f 72 20 33     ectrodes (2 or 3
     b8f:	29 3a 20 00                                         ): .

00000b93 <_ZZ14uart_tokenizerhP8as_classE3__c_0>:
     b93:	31 2e 20 20 54 72 61 6e 73 6d 69 73 73 69 6f 6e     1.  Transmission
     ba3:	20 4d 6f 64 65 20 28 41 29 53 43 49 49 2c 20 28      Mode (A)SCII, (
     bb3:	4d 29 61 74 4c 61 62 2c 20 28 42 29 69 6e 61 72     M)atLab, (B)inar
     bc3:	79 3a 20 00                                         y: .

00000bc7 <_ZZ14uart_tokenizerhP8as_classE3__c>:
     bc7:	2d 2d 2d 4d 41 49 4e 20 4d 45 4e 55 2d 2d 2d 0d     ---MAIN MENU---.
	...

00000bd8 <_ZZ7uart_okvE3__c>:
     bd8:	4f 4b 0d 00                                         OK..

00000bdc <_ZZ8uart_errvE3__c>:
     bdc:	45 52 52 0d 00                                      ERR..

00000be1 <_ZZ15uart_true_falsebE3__c_0>:
     be1:	66 61 6c 73 65 00                                   false.

00000be7 <_ZZ15uart_true_falsebE3__c>:
     be7:	74 72 75 65 00                                      true.

00000bec <_ZZ16uart_min_max_intiiE3__c_1>:
     bec:	29 3a 20 00                                         ): .

00000bf0 <_ZZ16uart_min_max_intiiE3__c_0>:
     bf0:	20 74 6f 20 00                                       to .

00000bf5 <_ZZ16uart_min_max_intiiE3__c>:
     bf5:	20 28 00                                             (.

00000bf8 <_ZZ16uart_min_max_u32mmE3__c_1>:
     bf8:	29 3a 20 00                                         ): .

00000bfc <_ZZ16uart_min_max_u32mmE3__c_0>:
     bfc:	20 74 6f 20 00                                       to .

00000c01 <_ZZ16uart_min_max_u32mmE3__c>:
     c01:	20 28 00                                             (.

00000c04 <_ZZ19uart_print_settingsP8as_classE3__c_24>:
     c04:	66 69 6c 74 5f 73 3d 00                             filt_s=.

00000c0c <_ZZ19uart_print_settingsP8as_classE3__c_23>:
     c0c:	66 69 6c 74 5f 65 3d 00                             filt_e=.

00000c14 <_ZZ19uart_print_settingsP8as_classE3__c_22>:
     c14:	61 72 62 5f 63 73 3d 00                             arb_cs=.

00000c1c <_ZZ19uart_print_settingsP8as_classE3__c_21>:
     c1c:	61 72 62 5f 63 3d 00                                arb_c=.

00000c23 <_ZZ19uart_print_settingsP8as_classE3__c_20>:
     c23:	61 72 62 5f 6e 3d 00                                arb_n=.

00000c2a <_ZZ19uart_print_settingsP8as_classE3__c_19>:
     c2a:	73 71 75 61 72 65 5f 70 3d 00                       square_p=.

00000c34 <_ZZ19uart_print_settingsP8as_classE3__c_18>:
     c34:	73 71 75 61 72 65 5f 69 3d 00                       square_i=.

00000c3e <_ZZ19uart_print_settingsP8as_classE3__c_17>:
     c3e:	73 71 75 61 72 65 5f 61 3d 00                       square_a=.

00000c48 <_ZZ19uart_print_settingsP8as_classE3__c_16>:
     c48:	73 71 75 61 72 65 5f 76 65 3d 00                    square_ve=.

00000c53 <_ZZ19uart_print_settingsP8as_classE3__c_15>:
     c53:	73 71 75 61 72 65 5f 76 73 3d 00                    square_vs=.

00000c5e <_ZZ19uart_print_settingsP8as_classE3__c_14>:
     c5e:	73 77 65 65 70 5f 63 73 3d 00                       sweep_cs=.

00000c68 <_ZZ19uart_print_settingsP8as_classE3__c_13>:
     c68:	73 77 65 65 70 5f 63 3d 00                          sweep_c=.

00000c71 <_ZZ19uart_print_settingsP8as_classE3__c_12>:
     c71:	73 77 65 65 70 5f 72 3d 00                          sweep_r=.

00000c7a <_ZZ19uart_print_settingsP8as_classE3__c_11>:
     c7a:	73 77 65 65 70 5f 76 65 3d 00                       sweep_ve=.

00000c84 <_ZZ19uart_print_settingsP8as_classE3__c_10>:
     c84:	73 77 65 65 70 5f 76 73 3d 00                       sweep_vs=.

00000c8e <_ZZ19uart_print_settingsP8as_classE3__c_9>:
     c8e:	64 65 70 5f 72 3d 00                                dep_r=.

00000c95 <_ZZ19uart_print_settingsP8as_classE3__c_8>:
     c95:	71 75 69 65 74 5f 74 3d 00                          quiet_t=.

00000c9e <_ZZ19uart_print_settingsP8as_classE3__c_7>:
     c9e:	64 65 70 5f 76 3d 00                                dep_v=.

00000ca5 <_ZZ19uart_print_settingsP8as_classE3__c_6>:
     ca5:	64 65 70 5f 74 3d 00                                dep_t=.

00000cac <_ZZ19uart_print_settingsP8as_classE3__c_5>:
     cac:	64 65 70 5f 65 3d 00                                dep_e=.

00000cb3 <_ZZ19uart_print_settingsP8as_classE3__c_4>:
     cb3:	74 69 61 5f 63 6d 3d 00                             tia_cm=.

00000cbb <_ZZ19uart_print_settingsP8as_classE3__c_3>:
     cbb:	74 69 61 5f 72 74 3d 00                             tia_rt=.

00000cc3 <_ZZ19uart_print_settingsP8as_classE3__c_2>:
     cc3:	61 64 63 5f 72 3d 00                                adc_r=.

00000cca <_ZZ19uart_print_settingsP8as_classE3__c_1>:
     cca:	6e 75 6d 5f 65 3d 00                                num_e=.

00000cd1 <_ZZ19uart_print_settingsP8as_classE3__c_0>:
     cd1:	27 3b 0d 00                                         ';..

00000cd5 <_ZZ19uart_print_settingsP8as_classE3__c>:
     cd5:	74 78 5f 6d 3d 27 00                                tx_m='.

00000cdc <_ZZ13calibrate_oscvE3__c>:
     cdc:	4f 4b 2e 20 4f 53 43 43 41 4c 20 3d 20 00           OK. OSCCAL = .

00000cea <__ctors_start>:
     cea:	f4 12       	cpse	r15, r20

00000cec <__ctors_end>:
     cec:	11 24       	eor	r1, r1
     cee:	1f be       	out	0x3f, r1	; 63
     cf0:	cf ef       	ldi	r28, 0xFF	; 255
     cf2:	d8 e0       	ldi	r29, 0x08	; 8
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	cd bf       	out	0x3d, r28	; 61

00000cf8 <__do_copy_data>:
     cf8:	11 e0       	ldi	r17, 0x01	; 1
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	b1 e0       	ldi	r27, 0x01	; 1
     cfe:	e6 e1       	ldi	r30, 0x16	; 22
     d00:	fa e6       	ldi	r31, 0x6A	; 106
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <__do_copy_data+0x10>
     d04:	05 90       	lpm	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	a0 32       	cpi	r26, 0x20	; 32
     d0a:	b1 07       	cpc	r27, r17
     d0c:	d9 f7       	brne	.-10     	; 0xd04 <__do_copy_data+0xc>

00000d0e <__do_clear_bss>:
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	a0 e2       	ldi	r26, 0x20	; 32
     d12:	b1 e0       	ldi	r27, 0x01	; 1
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <.do_clear_bss_start>

00000d16 <.do_clear_bss_loop>:
     d16:	1d 92       	st	X+, r1

00000d18 <.do_clear_bss_start>:
     d18:	a6 39       	cpi	r26, 0x96	; 150
     d1a:	b2 07       	cpc	r27, r18
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <.do_clear_bss_loop>

00000d1e <__do_global_ctors>:
     d1e:	1c e0       	ldi	r17, 0x0C	; 12
     d20:	cc ee       	ldi	r28, 0xEC	; 236
     d22:	dc e0       	ldi	r29, 0x0C	; 12
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__do_global_ctors+0x10>
     d26:	22 97       	sbiw	r28, 0x02	; 2
     d28:	fe 01       	movw	r30, r28
     d2a:	0e 94 91 34 	call	0x6922	; 0x6922 <__tablejump__>
     d2e:	ca 3e       	cpi	r28, 0xEA	; 234
     d30:	d1 07       	cpc	r29, r17
     d32:	c9 f7       	brne	.-14     	; 0xd26 <__do_global_ctors+0x8>
     d34:	0e 94 a0 06 	call	0xd40	; 0xd40 <main>
     d38:	0c 94 09 35 	jmp	0x6a12	; 0x6a12 <_exit>

00000d3c <__bad_interrupt>:
     d3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d40 <main>:
as_class as;

int main(void)
{	
	//Setup processor.
	init_processor(&as);
     d40:	89 e4       	ldi	r24, 0x49	; 73
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_Z14init_processorP8as_class>
	
	//Set initial value of tia resistor.
	i2c_load_pot(&as);
     d48:	89 e4       	ldi	r24, 0x49	; 73
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_Z12i2c_load_potP8as_class>
     d50:	ff cf       	rjmp	.-2      	; 0xd50 <main+0x10>

00000d52 <__vector_18>:
	while(1);
}

//Interrupt based UART RX function.
ISR(USART_RX_vect)
{
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	cf 93       	push	r28
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
	uint8_t rx_byte;
	
	rx_byte = UDR0;	//Get RX byte.
     d76:	c0 91 c6 00 	lds	r28, 0x00C6
	
	//Check if in binary mode.
	if (as.get_tx_mode() == TX_MODE_BIN)
     d7a:	89 e4       	ldi	r24, 0x49	; 73
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	b1 f4       	brne	.+44     	; 0xdb2 <__vector_18+0x60>
	{
		//Build input array when idle.
		if(as.get_test_state() == IDLE)
     d86:	89 e4       	ldi	r24, 0x49	; 73
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN8as_class14get_test_stateEv>
     d8e:	81 11       	cpse	r24, r1
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <__vector_18+0x4e>
		{
			//Start timeout timer.
			bin_timeout = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 74 01 	sts	0x0174, r24
			
			//Add byte to array.
			bin_build_array(rx_byte);
     d98:	8c 2f       	mov	r24, r28
     d9a:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <_Z15bin_build_arrayh>
     d9e:	1d c0       	rjmp	.+58     	; 0xdda <__vector_18+0x88>
		}
		//If not idle and 'x' is received, abort test.
		else if(rx_byte == 'x' || rx_byte == 'X')
     da0:	cf 7d       	andi	r28, 0xDF	; 223
     da2:	c8 35       	cpi	r28, 0x58	; 88
     da4:	d1 f4       	brne	.+52     	; 0xdda <__vector_18+0x88>
		{
			as.set_test_state(ABORT);
     da6:	61 e1       	ldi	r22, 0x11	; 17
     da8:	89 e4       	ldi	r24, 0x49	; 73
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
     db0:	14 c0       	rjmp	.+40     	; 0xdda <__vector_18+0x88>
		}
	}
	else//Must be in ASCII or MatLab mode.
	{		
		//Go to tokenizer when idle.
		if(as.get_test_state() == IDLE)
     db2:	89 e4       	ldi	r24, 0x49	; 73
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN8as_class14get_test_stateEv>
     dba:	81 11       	cpse	r24, r1
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <__vector_18+0x78>
		{
			//Pass byte to tokenizer.
			uart_tokenizer(rx_byte, &as);
     dbe:	69 e4       	ldi	r22, 0x49	; 73
     dc0:	71 e0       	ldi	r23, 0x01	; 1
     dc2:	8c 2f       	mov	r24, r28
     dc4:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <_Z14uart_tokenizerhP8as_class>
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <__vector_18+0x88>
		}
		//If not idle and 'x' is pressed, abort test.
		else if(rx_byte == 'x' || rx_byte == 'X')
     dca:	cf 7d       	andi	r28, 0xDF	; 223
     dcc:	c8 35       	cpi	r28, 0x58	; 88
     dce:	29 f4       	brne	.+10     	; 0xdda <__vector_18+0x88>
		{
			as.set_test_state(ABORT);
     dd0:	61 e1       	ldi	r22, 0x11	; 17
     dd2:	89 e4       	ldi	r24, 0x49	; 73
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		}
	}
}
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	cf 91       	pop	r28
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <__vector_11>:

//16-bit timer used for 1 ms system timing.
ISR(TIMER1_COMPA_vect)
{
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
	static double sv, ev, rate, this_offset, sq_amp;
	static uint32_t samp_count;
	static uint16_t output, temp_adc;
	static uint8_t this_cyc, tot_cyc, slope, graph_cycles, square_half;
	
	PORTB |= (1 << PORTB0);
     e34:	28 9a       	sbi	0x05, 0	; 5
	
	switch (as.get_test_state())
     e36:	89 e4       	ldi	r24, 0x49	; 73
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN8as_class14get_test_stateEv>
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	82 31       	cpi	r24, 0x12	; 18
     e42:	91 05       	cpc	r25, r1
     e44:	10 f0       	brcs	.+4      	; 0xe4a <__vector_11+0x4c>
     e46:	0c 94 85 12 	jmp	0x250a	; 0x250a <__vector_11+0x170c>
     e4a:	fc 01       	movw	r30, r24
     e4c:	ec 5c       	subi	r30, 0xCC	; 204
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	0c 94 8f 34 	jmp	0x691e	; 0x691e <__tablejump2__>
	{
		case IDLE://Maintenance stuff that happens every millisecond.
			ms_counter = 0;
     e54:	10 92 75 01 	sts	0x0175, r1
     e58:	10 92 76 01 	sts	0x0176, r1
     e5c:	10 92 77 01 	sts	0x0177, r1
     e60:	10 92 78 01 	sts	0x0178, r1
			samp_count = 0;
     e64:	10 92 45 01 	sts	0x0145, r1
     e68:	10 92 46 01 	sts	0x0146, r1
     e6c:	10 92 47 01 	sts	0x0147, r1
     e70:	10 92 48 01 	sts	0x0148, r1
			//Binary transmission timeout handling stuff.
			//Binary transmissions have to rely on a timeout function to
			//determine when to evaluate an array because the array can
			//have any combination of characters so a terminating character
			//is not possible as in the ASCII transmission mode.
			if(bin_timeout > 0 && bin_timeout <= BIN_TIME_MAX)
     e74:	80 91 74 01 	lds	r24, 0x0174
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	98 0f       	add	r25, r24
     e7c:	96 30       	cpi	r25, 0x06	; 6
     e7e:	18 f4       	brcc	.+6      	; 0xe86 <__vector_11+0x88>
			{
				bin_timeout++;
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	80 93 74 01 	sts	0x0174, r24
			}
			
			//If timeout occurs, evaluate input array.
			if(bin_timeout >= BIN_TIME_MAX)
     e86:	80 91 74 01 	lds	r24, 0x0174
     e8a:	86 30       	cpi	r24, 0x06	; 6
     e8c:	10 f4       	brcc	.+4      	; 0xe92 <__vector_11+0x94>
     e8e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			{
				bin_timeout = 0;
     e92:	10 92 74 01 	sts	0x0174, r1
				bin_tokenize(&as);
     e96:	89 e4       	ldi	r24, 0x49	; 73
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <_Z12bin_tokenizeP8as_class>
     e9e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
		break;
		
		case DEP_INIT:
			i2c_connect_ce();//Always connect counter electrode.
     ea2:	0e 94 67 16 	call	0x2cce	; 0x2cce <_Z14i2c_connect_cev>
			
			//Zero out sample counter.
			samp_count = 0;
     ea6:	10 92 45 01 	sts	0x0145, r1
     eaa:	10 92 46 01 	sts	0x0146, r1
     eae:	10 92 47 01 	sts	0x0147, r1
     eb2:	10 92 48 01 	sts	0x0148, r1
			
			//Always print header if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
     eb6:	89 e4       	ldi	r24, 0x49	; 73
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	21 f4       	brne	.+8      	; 0xeca <__vector_11+0xcc>
			{
				//send all parameters in MatLab format.
				uart_print_settings(&as);
     ec2:	89 e4       	ldi	r24, 0x49	; 73
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 11 20 	call	0x4022	; 0x4022 <_Z19uart_print_settingsP8as_class>
			}
			
			if(as.get_dep_enable())//Prep for deposition.
     eca:	89 e4       	ldi	r24, 0x49	; 73
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN8as_class14get_dep_enableEv>
     ed2:	88 23       	and	r24, r24
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__vector_11+0xda>
     ed6:	60 c0       	rjmp	.+192    	; 0xf98 <__vector_11+0x19a>
			{
				
				//Create MatLab array for deposition currents if they are to be streamed.
				if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_MATLAB)
     ed8:	89 e4       	ldi	r24, 0x49	; 73
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
     ee0:	88 23       	and	r24, r24
     ee2:	59 f0       	breq	.+22     	; 0xefa <__vector_11+0xfc>
     ee4:	89 e4       	ldi	r24, 0x49	; 73
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	29 f4       	brne	.+10     	; 0xefa <__vector_11+0xfc>
				{
					atmega_uart::tx_string_p(PSTR("d=["));
     ef0:	84 e9       	ldi	r24, 0x94	; 148
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
     ef8:	24 c0       	rjmp	.+72     	; 0xf42 <__vector_11+0x144>
				}
				//Send ASCII deposition data word.
				else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_ASCII)
     efa:	89 e4       	ldi	r24, 0x49	; 73
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
     f02:	88 23       	and	r24, r24
     f04:	71 f0       	breq	.+28     	; 0xf22 <__vector_11+0x124>
     f06:	89 e4       	ldi	r24, 0x49	; 73
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
     f0e:	81 11       	cpse	r24, r1
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <__vector_11+0x124>
				{
					tx_u16_to_ascii(DEP_DATA);
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e8       	ldi	r25, 0x80	; 128
     f16:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
     f1a:	8c e2       	ldi	r24, 0x2C	; 44
     f1c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
     f20:	10 c0       	rjmp	.+32     	; 0xf42 <__vector_11+0x144>
				}
				//send binary deposition word.
				else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_BIN)
     f22:	89 e4       	ldi	r24, 0x49	; 73
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
     f2a:	88 23       	and	r24, r24
     f2c:	51 f0       	breq	.+20     	; 0xf42 <__vector_11+0x144>
     f2e:	89 e4       	ldi	r24, 0x49	; 73
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	21 f4       	brne	.+8      	; 0xf42 <__vector_11+0x144>
				{
					atmega_uart::tx_word(DEP_DATA);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e8       	ldi	r25, 0x80	; 128
     f3e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				}
				
				//Set deposition voltage.
				voltage = ZERO_VOLT + (1000L * as.get_dep_volt() / V_PER_COUNT);
     f42:	89 e4       	ldi	r24, 0x49	; 73
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN8as_class12get_dep_voltEv>
     f4a:	28 ee       	ldi	r18, 0xE8	; 232
     f4c:	33 e0       	ldi	r19, 0x03	; 3
     f4e:	dc 01       	movw	r26, r24
     f50:	0e 94 a4 34 	call	0x6948	; 0x6948 <__usmulhisi3>
     f54:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
     f58:	2f e7       	ldi	r18, 0x7F	; 127
     f5a:	3a e6       	ldi	r19, 0x6A	; 106
     f5c:	49 e4       	ldi	r20, 0x49	; 73
     f5e:	54 e4       	ldi	r21, 0x44	; 68
     f60:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 ee       	ldi	r19, 0xE0	; 224
     f68:	4f ef       	ldi	r20, 0xFF	; 255
     f6a:	54 e4       	ldi	r21, 0x44	; 68
     f6c:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
     f70:	0e 94 a7 32 	call	0x654e	; 0x654e <__fixsfsi>
     f74:	60 93 41 01 	sts	0x0141, r22
     f78:	70 93 42 01 	sts	0x0142, r23
     f7c:	80 93 43 01 	sts	0x0143, r24
     f80:	90 93 44 01 	sts	0x0144, r25
				write_dac(voltage);
     f84:	cb 01       	movw	r24, r22
     f86:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
				
				//move to next state.
				as.set_test_state(DEPOSIT);
     f8a:	62 e0       	ldi	r22, 0x02	; 2
     f8c:	89 e4       	ldi	r24, 0x49	; 73
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
     f94:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else//Skip deposition and quiet time.
			{
				if(as.get_test_type() == TEST_LIN)
     f98:	89 e4       	ldi	r24, 0x49	; 73
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
     fa0:	81 11       	cpse	r24, r1
     fa2:	07 c0       	rjmp	.+14     	; 0xfb2 <__vector_11+0x1b4>
				{
					as.set_test_state(RAMP_INIT);//Start linear sweep test.
     fa4:	67 e0       	ldi	r22, 0x07	; 7
     fa6:	89 e4       	ldi	r24, 0x49	; 73
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
     fae:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
				}
				else if(as.get_test_type() == TEST_SQR)
     fb2:	89 e4       	ldi	r24, 0x49	; 73
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	39 f4       	brne	.+14     	; 0xfcc <__vector_11+0x1ce>
				{
					as.set_test_state(SQUARE_INIT);//Start square wave test.
     fbe:	6a e0       	ldi	r22, 0x0A	; 10
     fc0:	89 e4       	ldi	r24, 0x49	; 73
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
     fc8:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
				}
				else
				{
					as.set_test_state(ARB_INIT);//Start arbitrary waveform test.
     fcc:	6d e0       	ldi	r22, 0x0D	; 13
     fce:	89 e4       	ldi	r24, 0x49	; 73
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
     fd6:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
				}
			}	
		break;
		 
		case DEPOSIT:
			if(ms_counter < as.get_dep_time())
     fda:	89 e4       	ldi	r24, 0x49	; 73
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN8as_class12get_dep_timeEv>
     fe2:	c0 90 75 01 	lds	r12, 0x0175
     fe6:	d0 90 76 01 	lds	r13, 0x0176
     fea:	e0 90 77 01 	lds	r14, 0x0177
     fee:	f0 90 78 01 	lds	r15, 0x0178
     ff2:	c6 16       	cp	r12, r22
     ff4:	d7 06       	cpc	r13, r23
     ff6:	e8 06       	cpc	r14, r24
     ff8:	f9 06       	cpc	r15, r25
     ffa:	08 f0       	brcs	.+2      	; 0xffe <__vector_11+0x200>
     ffc:	9a c0       	rjmp	.+308    	; 0x1132 <__vector_11+0x334>
			{
				if(as.get_soft_filt())//Use filter.
     ffe:	89 e4       	ldi	r24, 0x49	; 73
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 b6 14 	call	0x296c	; 0x296c <_ZN8as_class13get_soft_filtEv>
    1006:	88 23       	and	r24, r24
    1008:	59 f0       	breq	.+22     	; 0x1020 <__vector_11+0x222>
				{
					output = lpf(read_adc(), &as);
    100a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    100e:	69 e4       	ldi	r22, 0x49	; 73
    1010:	71 e0       	ldi	r23, 0x01	; 1
    1012:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_Z3lpfjP8as_class>
    1016:	90 93 40 01 	sts	0x0140, r25
    101a:	80 93 3f 01 	sts	0x013F, r24
    101e:	06 c0       	rjmp	.+12     	; 0x102c <__vector_11+0x22e>
				}
				else//Do not use software filter.
				{
					output = read_adc();
    1020:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    1024:	90 93 40 01 	sts	0x0140, r25
    1028:	80 93 3f 01 	sts	0x013F, r24
				}
				
				//Check if time to transmit another sample.
				if((!(ms_counter % as.get_adc_rate())) && as.get_dep_rec())
    102c:	c0 90 75 01 	lds	r12, 0x0175
    1030:	d0 90 76 01 	lds	r13, 0x0176
    1034:	e0 90 77 01 	lds	r14, 0x0177
    1038:	f0 90 78 01 	lds	r15, 0x0178
    103c:	89 e4       	ldi	r24, 0x49	; 73
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN8as_class12get_adc_rateEv>
    1044:	9c 01       	movw	r18, r24
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	c7 01       	movw	r24, r14
    104c:	b6 01       	movw	r22, r12
    104e:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    1052:	67 2b       	or	r22, r23
    1054:	68 2b       	or	r22, r24
    1056:	69 2b       	or	r22, r25
    1058:	09 f0       	breq	.+2      	; 0x105c <__vector_11+0x25e>
    105a:	56 c0       	rjmp	.+172    	; 0x1108 <__vector_11+0x30a>
    105c:	89 e4       	ldi	r24, 0x49	; 73
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <__vector_11+0x26c>
    1068:	4f c0       	rjmp	.+158    	; 0x1108 <__vector_11+0x30a>
				{
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    106a:	89 e4       	ldi	r24, 0x49	; 73
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	99 f5       	brne	.+102    	; 0x10dc <__vector_11+0x2de>
					{
						tx_u16_to_ascii(output);
    1076:	80 91 3f 01 	lds	r24, 0x013F
    107a:	90 91 40 01 	lds	r25, 0x0140
    107e:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1082:	8c e2       	ldi	r24, 0x2C	; 44
    1084:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
						
						//Indicate a new sample has been sent.
						samp_count++;
    1088:	80 91 45 01 	lds	r24, 0x0145
    108c:	90 91 46 01 	lds	r25, 0x0146
    1090:	a0 91 47 01 	lds	r26, 0x0147
    1094:	b0 91 48 01 	lds	r27, 0x0148
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	6f 5f       	subi	r22, 0xFF	; 255
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	60 93 45 01 	sts	0x0145, r22
    10a8:	70 93 46 01 	sts	0x0146, r23
    10ac:	80 93 47 01 	sts	0x0147, r24
    10b0:	90 93 48 01 	sts	0x0148, r25
						
						//Start newline if 10 or more samples on this line.
						if(samp_count && !(samp_count % 10))
    10b4:	61 15       	cp	r22, r1
    10b6:	71 05       	cpc	r23, r1
    10b8:	81 05       	cpc	r24, r1
    10ba:	91 05       	cpc	r25, r1
    10bc:	29 f1       	breq	.+74     	; 0x1108 <__vector_11+0x30a>
    10be:	2a e0       	ldi	r18, 0x0A	; 10
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    10ca:	67 2b       	or	r22, r23
    10cc:	68 2b       	or	r22, r24
    10ce:	69 2b       	or	r22, r25
    10d0:	d9 f4       	brne	.+54     	; 0x1108 <__vector_11+0x30a>
						{
							atmega_uart::tx_string_p(PSTR("...\r"));
    10d2:	8f e8       	ldi	r24, 0x8F	; 143
    10d4:	94 e0       	ldi	r25, 0x04	; 4
    10d6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    10da:	16 c0       	rjmp	.+44     	; 0x1108 <__vector_11+0x30a>
						}
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    10dc:	89 e4       	ldi	r24, 0x49	; 73
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    10e4:	81 11       	cpse	r24, r1
    10e6:	0a c0       	rjmp	.+20     	; 0x10fc <__vector_11+0x2fe>
					{
						tx_u16_to_ascii(output);
    10e8:	80 91 3f 01 	lds	r24, 0x013F
    10ec:	90 91 40 01 	lds	r25, 0x0140
    10f0:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    10f4:	8c e2       	ldi	r24, 0x2C	; 44
    10f6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__vector_11+0x30a>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(output);
    10fc:	80 91 3f 01 	lds	r24, 0x013F
    1100:	90 91 40 01 	lds	r25, 0x0140
    1104:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
					}
				}
				
				ms_counter++;//Always increment counter.
    1108:	80 91 75 01 	lds	r24, 0x0175
    110c:	90 91 76 01 	lds	r25, 0x0176
    1110:	a0 91 77 01 	lds	r26, 0x0177
    1114:	b0 91 78 01 	lds	r27, 0x0178
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	a1 1d       	adc	r26, r1
    111c:	b1 1d       	adc	r27, r1
    111e:	80 93 75 01 	sts	0x0175, r24
    1122:	90 93 76 01 	sts	0x0176, r25
    1126:	a0 93 77 01 	sts	0x0177, r26
    112a:	b0 93 78 01 	sts	0x0178, r27
    112e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else
			{
				as.set_test_state(DEP_STOP);//Stop deposition.
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	89 e4       	ldi	r24, 0x49	; 73
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    113c:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
		break;
		
		case DEP_STOP:
			//Print end character if deposition is being recorded.
			if(as.get_dep_rec())
    1140:	89 e4       	ldi	r24, 0x49	; 73
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    1148:	88 23       	and	r24, r24
    114a:	e9 f0       	breq	.+58     	; 0x1186 <__vector_11+0x388>
			{
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    114c:	89 e4       	ldi	r24, 0x49	; 73
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	29 f4       	brne	.+10     	; 0x1162 <__vector_11+0x364>
				{
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    1158:	8a e8       	ldi	r24, 0x8A	; 138
    115a:	94 e0       	ldi	r25, 0x04	; 4
    115c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1160:	12 c0       	rjmp	.+36     	; 0x1186 <__vector_11+0x388>
				}
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    1162:	89 e4       	ldi	r24, 0x49	; 73
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    116a:	81 11       	cpse	r24, r1
    116c:	08 c0       	rjmp	.+16     	; 0x117e <__vector_11+0x380>
				{
					tx_u16_to_ascii(END_BLOCK);
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	9f ef       	ldi	r25, 0xFF	; 255
    1172:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    1176:	8c e2       	ldi	r24, 0x2C	; 44
    1178:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <__vector_11+0x388>
				}
				//Print binary data.
				else
				{
					atmega_uart::tx_word(END_BLOCK);
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				}
			}
			
			if(as.get_quiet_time())
    1186:	89 e4       	ldi	r24, 0x49	; 73
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN8as_class14get_quiet_timeEv>
    118e:	67 2b       	or	r22, r23
    1190:	68 2b       	or	r22, r24
    1192:	69 2b       	or	r22, r25
    1194:	39 f0       	breq	.+14     	; 0x11a4 <__vector_11+0x3a6>
			{
				//Start quiet time.
				as.set_test_state(QUIET_INIT);
    1196:	64 e0       	ldi	r22, 0x04	; 4
    1198:	89 e4       	ldi	r24, 0x49	; 73
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    11a0:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else if(as.get_test_type() == TEST_LIN)
    11a4:	89 e4       	ldi	r24, 0x49	; 73
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
    11ac:	81 11       	cpse	r24, r1
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <__vector_11+0x3c0>
			{
				//Start linear sweep.
				as.set_test_state(RAMP_INIT);
    11b0:	67 e0       	ldi	r22, 0x07	; 7
    11b2:	89 e4       	ldi	r24, 0x49	; 73
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    11ba:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else if(as.get_test_type() == TEST_SQR)
    11be:	89 e4       	ldi	r24, 0x49	; 73
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	39 f4       	brne	.+14     	; 0x11d8 <__vector_11+0x3da>
			{
				//Start square wave.
				as.set_test_state(SQUARE_INIT);
    11ca:	6a e0       	ldi	r22, 0x0A	; 10
    11cc:	89 e4       	ldi	r24, 0x49	; 73
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    11d4:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else
			{
				//Start arbitrary waveform.
				as.set_test_state(ARB_INIT);
    11d8:	6d e0       	ldi	r22, 0x0D	; 13
    11da:	89 e4       	ldi	r24, 0x49	; 73
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    11e2:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}	
		break;
		
		case QUIET_INIT:
			//Zero out sample counter.
			samp_count = 0;
    11e6:	10 92 45 01 	sts	0x0145, r1
    11ea:	10 92 46 01 	sts	0x0146, r1
    11ee:	10 92 47 01 	sts	0x0147, r1
    11f2:	10 92 48 01 	sts	0x0148, r1
			
			//Zero out ms counter.
			ms_counter = 0;
    11f6:	10 92 75 01 	sts	0x0175, r1
    11fa:	10 92 76 01 	sts	0x0176, r1
    11fe:	10 92 77 01 	sts	0x0177, r1
    1202:	10 92 78 01 	sts	0x0178, r1
			
			//Create MatLab array for quiet time currents if they are to be streamed.
			if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_MATLAB)
    1206:	89 e4       	ldi	r24, 0x49	; 73
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    120e:	88 23       	and	r24, r24
    1210:	59 f0       	breq	.+22     	; 0x1228 <__vector_11+0x42a>
    1212:	89 e4       	ldi	r24, 0x49	; 73
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	29 f4       	brne	.+10     	; 0x1228 <__vector_11+0x42a>
			{
				atmega_uart::tx_string_p(PSTR("q=["));
    121e:	86 e8       	ldi	r24, 0x86	; 134
    1220:	94 e0       	ldi	r25, 0x04	; 4
    1222:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1226:	24 c0       	rjmp	.+72     	; 0x1270 <__vector_11+0x472>
			}
			//Send ASCII deposition data word.
			else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_ASCII)
    1228:	89 e4       	ldi	r24, 0x49	; 73
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    1230:	88 23       	and	r24, r24
    1232:	71 f0       	breq	.+28     	; 0x1250 <__vector_11+0x452>
    1234:	89 e4       	ldi	r24, 0x49	; 73
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    123c:	81 11       	cpse	r24, r1
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <__vector_11+0x452>
			{
				tx_u16_to_ascii(QUIET_DATA);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	91 e8       	ldi	r25, 0x81	; 129
    1244:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1248:	8c e2       	ldi	r24, 0x2C	; 44
    124a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    124e:	10 c0       	rjmp	.+32     	; 0x1270 <__vector_11+0x472>
			}
			//send binary deposition word.
			else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_BIN)
    1250:	89 e4       	ldi	r24, 0x49	; 73
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    1258:	88 23       	and	r24, r24
    125a:	51 f0       	breq	.+20     	; 0x1270 <__vector_11+0x472>
    125c:	89 e4       	ldi	r24, 0x49	; 73
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	21 f4       	brne	.+8      	; 0x1270 <__vector_11+0x472>
			{
				atmega_uart::tx_word(QUIET_DATA);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	91 e8       	ldi	r25, 0x81	; 129
    126c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
			}
			
			//move to next state.
			as.set_test_state(QUIET);
    1270:	65 e0       	ldi	r22, 0x05	; 5
    1272:	89 e4       	ldi	r24, 0x49	; 73
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    127a:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
		
		case QUIET:
			if(ms_counter < as.get_quiet_time())
    127e:	89 e4       	ldi	r24, 0x49	; 73
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN8as_class14get_quiet_timeEv>
    1286:	c0 90 75 01 	lds	r12, 0x0175
    128a:	d0 90 76 01 	lds	r13, 0x0176
    128e:	e0 90 77 01 	lds	r14, 0x0177
    1292:	f0 90 78 01 	lds	r15, 0x0178
    1296:	c6 16       	cp	r12, r22
    1298:	d7 06       	cpc	r13, r23
    129a:	e8 06       	cpc	r14, r24
    129c:	f9 06       	cpc	r15, r25
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__vector_11+0x4a4>
    12a0:	9a c0       	rjmp	.+308    	; 0x13d6 <__vector_11+0x5d8>
			{
				if(as.get_soft_filt())//Use filter.
    12a2:	89 e4       	ldi	r24, 0x49	; 73
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 b6 14 	call	0x296c	; 0x296c <_ZN8as_class13get_soft_filtEv>
    12aa:	88 23       	and	r24, r24
    12ac:	59 f0       	breq	.+22     	; 0x12c4 <__vector_11+0x4c6>
				{
					output = lpf(read_adc(), &as);
    12ae:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    12b2:	69 e4       	ldi	r22, 0x49	; 73
    12b4:	71 e0       	ldi	r23, 0x01	; 1
    12b6:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_Z3lpfjP8as_class>
    12ba:	90 93 40 01 	sts	0x0140, r25
    12be:	80 93 3f 01 	sts	0x013F, r24
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <__vector_11+0x4d2>
				}
				else//Do not use software filter.
				{
					output = read_adc();
    12c4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    12c8:	90 93 40 01 	sts	0x0140, r25
    12cc:	80 93 3f 01 	sts	0x013F, r24
				}
				
				//Check if time to transmit another sample.
				if((!(ms_counter % as.get_adc_rate())) && as.get_dep_rec())
    12d0:	c0 90 75 01 	lds	r12, 0x0175
    12d4:	d0 90 76 01 	lds	r13, 0x0176
    12d8:	e0 90 77 01 	lds	r14, 0x0177
    12dc:	f0 90 78 01 	lds	r15, 0x0178
    12e0:	89 e4       	ldi	r24, 0x49	; 73
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN8as_class12get_adc_rateEv>
    12e8:	9c 01       	movw	r18, r24
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	c7 01       	movw	r24, r14
    12f0:	b6 01       	movw	r22, r12
    12f2:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    12f6:	67 2b       	or	r22, r23
    12f8:	68 2b       	or	r22, r24
    12fa:	69 2b       	or	r22, r25
    12fc:	09 f0       	breq	.+2      	; 0x1300 <__vector_11+0x502>
    12fe:	56 c0       	rjmp	.+172    	; 0x13ac <__vector_11+0x5ae>
    1300:	89 e4       	ldi	r24, 0x49	; 73
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <__vector_11+0x510>
    130c:	4f c0       	rjmp	.+158    	; 0x13ac <__vector_11+0x5ae>
				{
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    130e:	89 e4       	ldi	r24, 0x49	; 73
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	99 f5       	brne	.+102    	; 0x1380 <__vector_11+0x582>
					{
						tx_u16_to_ascii(output);
    131a:	80 91 3f 01 	lds	r24, 0x013F
    131e:	90 91 40 01 	lds	r25, 0x0140
    1322:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1326:	8c e2       	ldi	r24, 0x2C	; 44
    1328:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
						
						//Indicate a new sample has been sent.
						samp_count++;
    132c:	80 91 45 01 	lds	r24, 0x0145
    1330:	90 91 46 01 	lds	r25, 0x0146
    1334:	a0 91 47 01 	lds	r26, 0x0147
    1338:	b0 91 48 01 	lds	r27, 0x0148
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	6f 5f       	subi	r22, 0xFF	; 255
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	60 93 45 01 	sts	0x0145, r22
    134c:	70 93 46 01 	sts	0x0146, r23
    1350:	80 93 47 01 	sts	0x0147, r24
    1354:	90 93 48 01 	sts	0x0148, r25
						
						//Start newline if 10 or more samples on this line.
						if(samp_count && !(samp_count % 10))
    1358:	61 15       	cp	r22, r1
    135a:	71 05       	cpc	r23, r1
    135c:	81 05       	cpc	r24, r1
    135e:	91 05       	cpc	r25, r1
    1360:	29 f1       	breq	.+74     	; 0x13ac <__vector_11+0x5ae>
    1362:	2a e0       	ldi	r18, 0x0A	; 10
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    136e:	67 2b       	or	r22, r23
    1370:	68 2b       	or	r22, r24
    1372:	69 2b       	or	r22, r25
    1374:	d9 f4       	brne	.+54     	; 0x13ac <__vector_11+0x5ae>
						{
							atmega_uart::tx_string_p(PSTR("...\r"));
    1376:	81 e8       	ldi	r24, 0x81	; 129
    1378:	94 e0       	ldi	r25, 0x04	; 4
    137a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    137e:	16 c0       	rjmp	.+44     	; 0x13ac <__vector_11+0x5ae>
						}
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    1380:	89 e4       	ldi	r24, 0x49	; 73
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1388:	81 11       	cpse	r24, r1
    138a:	0a c0       	rjmp	.+20     	; 0x13a0 <__vector_11+0x5a2>
					{
						tx_u16_to_ascii(output);
    138c:	80 91 3f 01 	lds	r24, 0x013F
    1390:	90 91 40 01 	lds	r25, 0x0140
    1394:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1398:	8c e2       	ldi	r24, 0x2C	; 44
    139a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <__vector_11+0x5ae>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(output);
    13a0:	80 91 3f 01 	lds	r24, 0x013F
    13a4:	90 91 40 01 	lds	r25, 0x0140
    13a8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
					}
				}
				
				ms_counter++;//Always increment counter.
    13ac:	80 91 75 01 	lds	r24, 0x0175
    13b0:	90 91 76 01 	lds	r25, 0x0176
    13b4:	a0 91 77 01 	lds	r26, 0x0177
    13b8:	b0 91 78 01 	lds	r27, 0x0178
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	a1 1d       	adc	r26, r1
    13c0:	b1 1d       	adc	r27, r1
    13c2:	80 93 75 01 	sts	0x0175, r24
    13c6:	90 93 76 01 	sts	0x0176, r25
    13ca:	a0 93 77 01 	sts	0x0177, r26
    13ce:	b0 93 78 01 	sts	0x0178, r27
    13d2:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else
			{
				as.set_test_state(QUIET_STOP);//Stop quiet time.
    13d6:	66 e0       	ldi	r22, 0x06	; 6
    13d8:	89 e4       	ldi	r24, 0x49	; 73
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    13e0:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
		break;
		
		case QUIET_STOP:
			//Print end character if quiet time is being recorded.
			if(as.get_dep_rec())
    13e4:	89 e4       	ldi	r24, 0x49	; 73
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    13ec:	88 23       	and	r24, r24
    13ee:	e9 f0       	breq	.+58     	; 0x142a <__vector_11+0x62c>
			{
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    13f0:	89 e4       	ldi	r24, 0x49	; 73
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	29 f4       	brne	.+10     	; 0x1406 <__vector_11+0x608>
				{
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    13fc:	8c e7       	ldi	r24, 0x7C	; 124
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1404:	12 c0       	rjmp	.+36     	; 0x142a <__vector_11+0x62c>
				}
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    1406:	89 e4       	ldi	r24, 0x49	; 73
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    140e:	81 11       	cpse	r24, r1
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <__vector_11+0x624>
				{
					tx_u16_to_ascii(END_BLOCK);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	9f ef       	ldi	r25, 0xFF	; 255
    1416:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    141a:	8c e2       	ldi	r24, 0x2C	; 44
    141c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    1420:	04 c0       	rjmp	.+8      	; 0x142a <__vector_11+0x62c>
				}
				//Print binary data.
				else
				{
					atmega_uart::tx_word(END_BLOCK);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	9f ef       	ldi	r25, 0xFF	; 255
    1426:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				}
			}
			
			if(as.get_test_type() == TEST_LIN)
    142a:	89 e4       	ldi	r24, 0x49	; 73
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
    1432:	81 11       	cpse	r24, r1
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <__vector_11+0x646>
			{
				//Start linear sweep.
				as.set_test_state(RAMP_INIT);
    1436:	67 e0       	ldi	r22, 0x07	; 7
    1438:	89 e4       	ldi	r24, 0x49	; 73
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    1440:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else if(as.get_test_type() == TEST_SQR)
    1444:	89 e4       	ldi	r24, 0x49	; 73
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	39 f4       	brne	.+14     	; 0x145e <__vector_11+0x660>
			{
				//Start square wave.
				as.set_test_state(SQUARE_INIT);
    1450:	6a e0       	ldi	r22, 0x0A	; 10
    1452:	89 e4       	ldi	r24, 0x49	; 73
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    145a:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
			else
			{
				//Start arbitrary waveform.
				as.set_test_state(ARB_INIT);
    145e:	6d e0       	ldi	r22, 0x0D	; 13
    1460:	89 e4       	ldi	r24, 0x49	; 73
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    1468:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_11+0x1722>
			}
		break;
		
		case RAMP_INIT:
			//Initialize variables.
			this_cyc = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 3e 01 	sts	0x013E, r24
			samp_count = 0;
    1472:	10 92 45 01 	sts	0x0145, r1
    1476:	10 92 46 01 	sts	0x0146, r1
    147a:	10 92 47 01 	sts	0x0147, r1
    147e:	10 92 48 01 	sts	0x0148, r1
			tot_cyc = as.get_sweep_cycles() * 2;
    1482:	89 e4       	ldi	r24, 0x49	; 73
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN8as_class16get_sweep_cyclesEv>
    148a:	88 0f       	add	r24, r24
    148c:	80 93 3d 01 	sts	0x013D, r24
			sv = ZERO_VOLT + (1000.0 * (double)as.get_sweep_volt_start() / V_PER_COUNT);
    1490:	89 e4       	ldi	r24, 0x49	; 73
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN8as_class20get_sweep_volt_startEv>
    1498:	bc 01       	movw	r22, r24
    149a:	88 27       	eor	r24, r24
    149c:	77 fd       	sbrc	r23, 7
    149e:	80 95       	com	r24
    14a0:	98 2f       	mov	r25, r24
    14a2:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a e7       	ldi	r20, 0x7A	; 122
    14ac:	54 e4       	ldi	r21, 0x44	; 68
    14ae:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    14b2:	2f e7       	ldi	r18, 0x7F	; 127
    14b4:	3a e6       	ldi	r19, 0x6A	; 106
    14b6:	49 e4       	ldi	r20, 0x49	; 73
    14b8:	54 e4       	ldi	r21, 0x44	; 68
    14ba:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 ee       	ldi	r19, 0xE0	; 224
    14c2:	4f ef       	ldi	r20, 0xFF	; 255
    14c4:	54 e4       	ldi	r21, 0x44	; 68
    14c6:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    14ca:	60 93 39 01 	sts	0x0139, r22
    14ce:	70 93 3a 01 	sts	0x013A, r23
    14d2:	80 93 3b 01 	sts	0x013B, r24
    14d6:	90 93 3c 01 	sts	0x013C, r25
			ev = ZERO_VOLT + (1000.0 * (double)as.get_sweep_volt_end() / V_PER_COUNT);
    14da:	89 e4       	ldi	r24, 0x49	; 73
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN8as_class18get_sweep_volt_endEv>
    14e2:	bc 01       	movw	r22, r24
    14e4:	88 27       	eor	r24, r24
    14e6:	77 fd       	sbrc	r23, 7
    14e8:	80 95       	com	r24
    14ea:	98 2f       	mov	r25, r24
    14ec:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a e7       	ldi	r20, 0x7A	; 122
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    14fc:	2f e7       	ldi	r18, 0x7F	; 127
    14fe:	3a e6       	ldi	r19, 0x6A	; 106
    1500:	49 e4       	ldi	r20, 0x49	; 73
    1502:	54 e4       	ldi	r21, 0x44	; 68
    1504:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 ee       	ldi	r19, 0xE0	; 224
    150c:	4f ef       	ldi	r20, 0xFF	; 255
    150e:	54 e4       	ldi	r21, 0x44	; 68
    1510:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1514:	60 93 35 01 	sts	0x0135, r22
    1518:	70 93 36 01 	sts	0x0136, r23
    151c:	80 93 37 01 	sts	0x0137, r24
    1520:	90 93 38 01 	sts	0x0138, r25
			rate = (double)as.get_sweep_rate();	
    1524:	89 e4       	ldi	r24, 0x49	; 73
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN8as_class14get_sweep_rateEv>
    152c:	bc 01       	movw	r22, r24
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <__floatunsisf>
    1536:	60 93 31 01 	sts	0x0131, r22
    153a:	70 93 32 01 	sts	0x0132, r23
    153e:	80 93 33 01 	sts	0x0133, r24
    1542:	90 93 34 01 	sts	0x0134, r25
			ms_counter = 0;	
    1546:	10 92 75 01 	sts	0x0175, r1
    154a:	10 92 76 01 	sts	0x0176, r1
    154e:	10 92 77 01 	sts	0x0177, r1
    1552:	10 92 78 01 	sts	0x0178, r1
			
			//Determine initial slope.
			if(sv < ev)
    1556:	20 91 35 01 	lds	r18, 0x0135
    155a:	30 91 36 01 	lds	r19, 0x0136
    155e:	40 91 37 01 	lds	r20, 0x0137
    1562:	50 91 38 01 	lds	r21, 0x0138
    1566:	60 91 39 01 	lds	r22, 0x0139
    156a:	70 91 3a 01 	lds	r23, 0x013A
    156e:	80 91 3b 01 	lds	r24, 0x013B
    1572:	90 91 3c 01 	lds	r25, 0x013C
    1576:	0e 94 3b 32 	call	0x6476	; 0x6476 <__cmpsf2>
    157a:	88 23       	and	r24, r24
    157c:	24 f4       	brge	.+8      	; 0x1586 <__vector_11+0x788>
			{
				slope = POS_SLOPE;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 30 01 	sts	0x0130, r24
    1584:	02 c0       	rjmp	.+4      	; 0x158a <__vector_11+0x78c>
			}
			else
			{
				slope = NEG_SLOPE;
    1586:	10 92 30 01 	sts	0x0130, r1
			}
			
			//Print initial stream data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    158a:	89 e4       	ldi	r24, 0x49	; 73
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	69 f4       	brne	.+26     	; 0x15b0 <__vector_11+0x7b2>
			{
				atmega_uart::tx_byte('s');
    1596:	83 e7       	ldi	r24, 0x73	; 115
    1598:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(this_cyc);
    159c:	80 91 3e 01 	lds	r24, 0x013E
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
				atmega_uart::tx_string_p(PSTR("=["));
    15a6:	89 e7       	ldi	r24, 0x79	; 121
    15a8:	94 e0       	ldi	r25, 0x04	; 4
    15aa:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    15ae:	16 c0       	rjmp	.+44     	; 0x15dc <__vector_11+0x7de>
			}
			else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    15b0:	89 e4       	ldi	r24, 0x49	; 73
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    15b8:	81 11       	cpse	r24, r1
    15ba:	0a c0       	rjmp	.+20     	; 0x15d0 <__vector_11+0x7d2>
			{
				tx_u16_to_ascii(LIN_DATA + this_cyc);
    15bc:	80 91 3e 01 	lds	r24, 0x013E
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9e 57       	subi	r25, 0x7E	; 126
    15c4:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    15c8:	8c e2       	ldi	r24, 0x2C	; 44
    15ca:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <__vector_11+0x7de>
			}
			else//Print binary data.
			{
				atmega_uart::tx_word(LIN_DATA + this_cyc);
    15d0:	80 91 3e 01 	lds	r24, 0x013E
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9e 57       	subi	r25, 0x7E	; 126
    15d8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
			}
			
			write_dac((uint16_t)round(sv));//Write initial DAC value.
    15dc:	60 91 39 01 	lds	r22, 0x0139
    15e0:	70 91 3a 01 	lds	r23, 0x013A
    15e4:	80 91 3b 01 	lds	r24, 0x013B
    15e8:	90 91 3c 01 	lds	r25, 0x013C
    15ec:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <round>
    15f0:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    15f4:	cb 01       	movw	r24, r22
    15f6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
			i2c_connect_ce();//Always connect counter electrode.
    15fa:	0e 94 67 16 	call	0x2cce	; 0x2cce <_Z14i2c_connect_cev>
			ms_counter++;//Always increment counter.
    15fe:	80 91 75 01 	lds	r24, 0x0175
    1602:	90 91 76 01 	lds	r25, 0x0176
    1606:	a0 91 77 01 	lds	r26, 0x0177
    160a:	b0 91 78 01 	lds	r27, 0x0178
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	a1 1d       	adc	r26, r1
    1612:	b1 1d       	adc	r27, r1
    1614:	80 93 75 01 	sts	0x0175, r24
    1618:	90 93 76 01 	sts	0x0176, r25
    161c:	a0 93 77 01 	sts	0x0177, r26
    1620:	b0 93 78 01 	sts	0x0178, r27
			as.set_test_state(RAMP);
    1624:	68 e0       	ldi	r22, 0x08	; 8
    1626:	89 e4       	ldi	r24, 0x49	; 73
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    162e:	78 c7       	rjmp	.+3824   	; 0x2520 <__vector_11+0x1722>
		
		case RAMP:
			//Calculate current offset for the DAC.
			this_offset = rate * (double)ms_counter / V_PER_COUNT;
    1630:	60 91 75 01 	lds	r22, 0x0175
    1634:	70 91 76 01 	lds	r23, 0x0176
    1638:	80 91 77 01 	lds	r24, 0x0177
    163c:	90 91 78 01 	lds	r25, 0x0178
    1640:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <__floatunsisf>
    1644:	20 91 31 01 	lds	r18, 0x0131
    1648:	30 91 32 01 	lds	r19, 0x0132
    164c:	40 91 33 01 	lds	r20, 0x0133
    1650:	50 91 34 01 	lds	r21, 0x0134
    1654:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    1658:	2f e7       	ldi	r18, 0x7F	; 127
    165a:	3a e6       	ldi	r19, 0x6A	; 106
    165c:	49 e4       	ldi	r20, 0x49	; 73
    165e:	54 e4       	ldi	r21, 0x44	; 68
    1660:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    1664:	60 93 2c 01 	sts	0x012C, r22
    1668:	70 93 2d 01 	sts	0x012D, r23
    166c:	80 93 2e 01 	sts	0x012E, r24
    1670:	90 93 2f 01 	sts	0x012F, r25
			
			if(slope == POS_SLOPE)//Positive slope.
    1674:	20 91 30 01 	lds	r18, 0x0130
    1678:	21 30       	cpi	r18, 0x01	; 1
    167a:	09 f0       	breq	.+2      	; 0x167e <__vector_11+0x880>
    167c:	d3 c0       	rjmp	.+422    	; 0x1824 <__vector_11+0xa26>
			{
				if(sv + this_offset < ev)//More to go.
    167e:	20 91 39 01 	lds	r18, 0x0139
    1682:	30 91 3a 01 	lds	r19, 0x013A
    1686:	40 91 3b 01 	lds	r20, 0x013B
    168a:	50 91 3c 01 	lds	r21, 0x013C
    168e:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1692:	20 91 35 01 	lds	r18, 0x0135
    1696:	30 91 36 01 	lds	r19, 0x0136
    169a:	40 91 37 01 	lds	r20, 0x0137
    169e:	50 91 38 01 	lds	r21, 0x0138
    16a2:	0e 94 3b 32 	call	0x6476	; 0x6476 <__cmpsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	0c f0       	brlt	.+2      	; 0x16ac <__vector_11+0x8ae>
    16aa:	80 c0       	rjmp	.+256    	; 0x17ac <__vector_11+0x9ae>
				{
					if(as.get_soft_filt())//Use filter.
    16ac:	89 e4       	ldi	r24, 0x49	; 73
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	0e 94 b6 14 	call	0x296c	; 0x296c <_ZN8as_class13get_soft_filtEv>
    16b4:	88 23       	and	r24, r24
    16b6:	59 f0       	breq	.+22     	; 0x16ce <__vector_11+0x8d0>
					{
						output = lpf(read_adc(), &as);
    16b8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    16bc:	69 e4       	ldi	r22, 0x49	; 73
    16be:	71 e0       	ldi	r23, 0x01	; 1
    16c0:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_Z3lpfjP8as_class>
    16c4:	90 93 40 01 	sts	0x0140, r25
    16c8:	80 93 3f 01 	sts	0x013F, r24
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <__vector_11+0x8dc>
					}
					else//Do not use software filter.
					{
						output = read_adc();
    16ce:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    16d2:	90 93 40 01 	sts	0x0140, r25
    16d6:	80 93 3f 01 	sts	0x013F, r24
					}
					
					//Check if time to transmit another sample.
					if(!(ms_counter % as.get_adc_rate()))
    16da:	c0 90 75 01 	lds	r12, 0x0175
    16de:	d0 90 76 01 	lds	r13, 0x0176
    16e2:	e0 90 77 01 	lds	r14, 0x0177
    16e6:	f0 90 78 01 	lds	r15, 0x0178
    16ea:	89 e4       	ldi	r24, 0x49	; 73
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN8as_class12get_adc_rateEv>
    16f2:	9c 01       	movw	r18, r24
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	c7 01       	movw	r24, r14
    16fa:	b6 01       	movw	r22, r12
    16fc:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    1700:	67 2b       	or	r22, r23
    1702:	68 2b       	or	r22, r24
    1704:	69 2b       	or	r22, r25
    1706:	09 f0       	breq	.+2      	; 0x170a <__vector_11+0x90c>
    1708:	73 c0       	rjmp	.+230    	; 0x17f0 <__vector_11+0x9f2>
					{
						//Print MatLab data.
						if(as.get_tx_mode() == TX_MODE_MATLAB)
    170a:	89 e4       	ldi	r24, 0x49	; 73
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	a1 f5       	brne	.+104    	; 0x177e <__vector_11+0x980>
						{
							tx_u16_to_ascii(output);
    1716:	80 91 3f 01 	lds	r24, 0x013F
    171a:	90 91 40 01 	lds	r25, 0x0140
    171e:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    1722:	8c e2       	ldi	r24, 0x2C	; 44
    1724:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
							
							//Indicate a new sample has been sent.
							samp_count++;
    1728:	80 91 45 01 	lds	r24, 0x0145
    172c:	90 91 46 01 	lds	r25, 0x0146
    1730:	a0 91 47 01 	lds	r26, 0x0147
    1734:	b0 91 48 01 	lds	r27, 0x0148
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	6f 5f       	subi	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	8f 4f       	sbci	r24, 0xFF	; 255
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	60 93 45 01 	sts	0x0145, r22
    1748:	70 93 46 01 	sts	0x0146, r23
    174c:	80 93 47 01 	sts	0x0147, r24
    1750:	90 93 48 01 	sts	0x0148, r25
							
							//Start newline if 10 or more samples on this line.
							if(samp_count && !(samp_count % 10))
    1754:	61 15       	cp	r22, r1
    1756:	71 05       	cpc	r23, r1
    1758:	81 05       	cpc	r24, r1
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <__vector_11+0x962>
    175e:	48 c0       	rjmp	.+144    	; 0x17f0 <__vector_11+0x9f2>
    1760:	2a e0       	ldi	r18, 0x0A	; 10
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    176c:	67 2b       	or	r22, r23
    176e:	68 2b       	or	r22, r24
    1770:	69 2b       	or	r22, r25
    1772:	f1 f5       	brne	.+124    	; 0x17f0 <__vector_11+0x9f2>
							{
								atmega_uart::tx_string_p(PSTR("...\r"));
    1774:	84 e7       	ldi	r24, 0x74	; 116
    1776:	94 e0       	ldi	r25, 0x04	; 4
    1778:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    177c:	39 c0       	rjmp	.+114    	; 0x17f0 <__vector_11+0x9f2>
							}
						}
						//Print ASCII data.
						else if(as.get_tx_mode() == TX_MODE_ASCII)
    177e:	89 e4       	ldi	r24, 0x49	; 73
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1786:	81 11       	cpse	r24, r1
    1788:	0a c0       	rjmp	.+20     	; 0x179e <__vector_11+0x9a0>
						{
							tx_u16_to_ascii(output);
    178a:	80 91 3f 01 	lds	r24, 0x013F
    178e:	90 91 40 01 	lds	r25, 0x0140
    1792:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    1796:	8c e2       	ldi	r24, 0x2C	; 44
    1798:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    179c:	29 c0       	rjmp	.+82     	; 0x17f0 <__vector_11+0x9f2>
						}
						//Print binary data.
						else
						{
							atmega_uart::tx_word(output);
    179e:	80 91 3f 01 	lds	r24, 0x013F
    17a2:	90 91 40 01 	lds	r25, 0x0140
    17a6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
    17aa:	22 c0       	rjmp	.+68     	; 0x17f0 <__vector_11+0x9f2>
						}
				    }
				}
				else//Done.
				{
					as.set_test_state(RAMP_STOP);
    17ac:	69 e0       	ldi	r22, 0x09	; 9
    17ae:	89 e4       	ldi	r24, 0x49	; 73
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
					
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    17b6:	89 e4       	ldi	r24, 0x49	; 73
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	29 f4       	brne	.+10     	; 0x17cc <__vector_11+0x9ce>
					{
						atmega_uart::tx_string_p(PSTR("];\r\r"));
    17c2:	8f e6       	ldi	r24, 0x6F	; 111
    17c4:	94 e0       	ldi	r25, 0x04	; 4
    17c6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    17ca:	12 c0       	rjmp	.+36     	; 0x17f0 <__vector_11+0x9f2>
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    17cc:	89 e4       	ldi	r24, 0x49	; 73
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    17d4:	81 11       	cpse	r24, r1
    17d6:	08 c0       	rjmp	.+16     	; 0x17e8 <__vector_11+0x9ea>
					{
						tx_u16_to_ascii(END_BLOCK);
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    17e0:	8c e2       	ldi	r24, 0x2C	; 44
    17e2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <__vector_11+0x9f2>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(END_BLOCK);
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
					}
				}
				write_dac((uint16_t)round(sv + this_offset)); //Load value into the DAC.
    17f0:	20 91 2c 01 	lds	r18, 0x012C
    17f4:	30 91 2d 01 	lds	r19, 0x012D
    17f8:	40 91 2e 01 	lds	r20, 0x012E
    17fc:	50 91 2f 01 	lds	r21, 0x012F
    1800:	60 91 39 01 	lds	r22, 0x0139
    1804:	70 91 3a 01 	lds	r23, 0x013A
    1808:	80 91 3b 01 	lds	r24, 0x013B
    180c:	90 91 3c 01 	lds	r25, 0x013C
    1810:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1814:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <round>
    1818:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    181c:	cb 01       	movw	r24, r22
    181e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
    1822:	d4 c0       	rjmp	.+424    	; 0x19cc <__vector_11+0xbce>
			}
			
			else//Negative slope.
			{				
				if(sv - this_offset > ev)//More to go.
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	60 91 39 01 	lds	r22, 0x0139
    182c:	70 91 3a 01 	lds	r23, 0x013A
    1830:	80 91 3b 01 	lds	r24, 0x013B
    1834:	90 91 3c 01 	lds	r25, 0x013C
    1838:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    183c:	20 91 35 01 	lds	r18, 0x0135
    1840:	30 91 36 01 	lds	r19, 0x0136
    1844:	40 91 37 01 	lds	r20, 0x0137
    1848:	50 91 38 01 	lds	r21, 0x0138
    184c:	0e 94 8a 33 	call	0x6714	; 0x6714 <__gesf2>
    1850:	18 16       	cp	r1, r24
    1852:	0c f0       	brlt	.+2      	; 0x1856 <__vector_11+0xa58>
    1854:	80 c0       	rjmp	.+256    	; 0x1956 <__vector_11+0xb58>
				{
					if(as.get_soft_filt())//Use filter.
    1856:	89 e4       	ldi	r24, 0x49	; 73
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	0e 94 b6 14 	call	0x296c	; 0x296c <_ZN8as_class13get_soft_filtEv>
    185e:	88 23       	and	r24, r24
    1860:	59 f0       	breq	.+22     	; 0x1878 <__vector_11+0xa7a>
					{
						output = lpf(read_adc(), &as);
    1862:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    1866:	69 e4       	ldi	r22, 0x49	; 73
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_Z3lpfjP8as_class>
    186e:	90 93 40 01 	sts	0x0140, r25
    1872:	80 93 3f 01 	sts	0x013F, r24
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <__vector_11+0xa86>
					}
					else//Do not use software filter.
					{
						output = read_adc();
    1878:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    187c:	90 93 40 01 	sts	0x0140, r25
    1880:	80 93 3f 01 	sts	0x013F, r24
					}
					
					//Check if time to transmit another sample.
					if(!(ms_counter % as.get_adc_rate()))
    1884:	c0 90 75 01 	lds	r12, 0x0175
    1888:	d0 90 76 01 	lds	r13, 0x0176
    188c:	e0 90 77 01 	lds	r14, 0x0177
    1890:	f0 90 78 01 	lds	r15, 0x0178
    1894:	89 e4       	ldi	r24, 0x49	; 73
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN8as_class12get_adc_rateEv>
    189c:	9c 01       	movw	r18, r24
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	c7 01       	movw	r24, r14
    18a4:	b6 01       	movw	r22, r12
    18a6:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    18aa:	67 2b       	or	r22, r23
    18ac:	68 2b       	or	r22, r24
    18ae:	69 2b       	or	r22, r25
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <__vector_11+0xab6>
    18b2:	73 c0       	rjmp	.+230    	; 0x199a <__vector_11+0xb9c>
					{
						//Print MatLab data.
						if(as.get_tx_mode() == TX_MODE_MATLAB)
    18b4:	89 e4       	ldi	r24, 0x49	; 73
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	a1 f5       	brne	.+104    	; 0x1928 <__vector_11+0xb2a>
						{
							tx_u16_to_ascii(output);
    18c0:	80 91 3f 01 	lds	r24, 0x013F
    18c4:	90 91 40 01 	lds	r25, 0x0140
    18c8:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    18cc:	8c e2       	ldi	r24, 0x2C	; 44
    18ce:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
							
							//Indicate a new sample has been sent.
							samp_count++;
    18d2:	80 91 45 01 	lds	r24, 0x0145
    18d6:	90 91 46 01 	lds	r25, 0x0146
    18da:	a0 91 47 01 	lds	r26, 0x0147
    18de:	b0 91 48 01 	lds	r27, 0x0148
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	6f 5f       	subi	r22, 0xFF	; 255
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	60 93 45 01 	sts	0x0145, r22
    18f2:	70 93 46 01 	sts	0x0146, r23
    18f6:	80 93 47 01 	sts	0x0147, r24
    18fa:	90 93 48 01 	sts	0x0148, r25
							
							//Start newline if 10 or more samples on this line.
							if(samp_count && !(samp_count % 10))
    18fe:	61 15       	cp	r22, r1
    1900:	71 05       	cpc	r23, r1
    1902:	81 05       	cpc	r24, r1
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <__vector_11+0xb0c>
    1908:	48 c0       	rjmp	.+144    	; 0x199a <__vector_11+0xb9c>
    190a:	2a e0       	ldi	r18, 0x0A	; 10
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    1916:	67 2b       	or	r22, r23
    1918:	68 2b       	or	r22, r24
    191a:	69 2b       	or	r22, r25
    191c:	f1 f5       	brne	.+124    	; 0x199a <__vector_11+0xb9c>
							{
								atmega_uart::tx_string_p(PSTR("...\r"));
    191e:	8a e6       	ldi	r24, 0x6A	; 106
    1920:	94 e0       	ldi	r25, 0x04	; 4
    1922:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1926:	39 c0       	rjmp	.+114    	; 0x199a <__vector_11+0xb9c>
							}
						}
						//Print ASCII data.
						else if(as.get_tx_mode() == TX_MODE_ASCII)
    1928:	89 e4       	ldi	r24, 0x49	; 73
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1930:	81 11       	cpse	r24, r1
    1932:	0a c0       	rjmp	.+20     	; 0x1948 <__vector_11+0xb4a>
						{
							tx_u16_to_ascii(output);
    1934:	80 91 3f 01 	lds	r24, 0x013F
    1938:	90 91 40 01 	lds	r25, 0x0140
    193c:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    1940:	8c e2       	ldi	r24, 0x2C	; 44
    1942:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    1946:	29 c0       	rjmp	.+82     	; 0x199a <__vector_11+0xb9c>
						}
						//Print binary data.
						else
						{
							atmega_uart::tx_word(output);
    1948:	80 91 3f 01 	lds	r24, 0x013F
    194c:	90 91 40 01 	lds	r25, 0x0140
    1950:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
    1954:	22 c0       	rjmp	.+68     	; 0x199a <__vector_11+0xb9c>
					}
				}
				
				else//Done.
				{
					as.set_test_state(RAMP_STOP);
    1956:	69 e0       	ldi	r22, 0x09	; 9
    1958:	89 e4       	ldi	r24, 0x49	; 73
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
					
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    1960:	89 e4       	ldi	r24, 0x49	; 73
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	29 f4       	brne	.+10     	; 0x1976 <__vector_11+0xb78>
					{
						atmega_uart::tx_string_p(PSTR("];\r\r"));
    196c:	85 e6       	ldi	r24, 0x65	; 101
    196e:	94 e0       	ldi	r25, 0x04	; 4
    1970:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1974:	12 c0       	rjmp	.+36     	; 0x199a <__vector_11+0xb9c>
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    1976:	89 e4       	ldi	r24, 0x49	; 73
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    197e:	81 11       	cpse	r24, r1
    1980:	08 c0       	rjmp	.+16     	; 0x1992 <__vector_11+0xb94>
					{
						tx_u16_to_ascii(END_BLOCK);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    198a:	8c e2       	ldi	r24, 0x2C	; 44
    198c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    1990:	04 c0       	rjmp	.+8      	; 0x199a <__vector_11+0xb9c>
					}
					//Print binary data.
					else
					{
						atmega_uart::tx_word(END_BLOCK);
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	9f ef       	ldi	r25, 0xFF	; 255
    1996:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
					}
				}
				
				write_dac((uint16_t)round(sv - this_offset)); //Load value into the DAC.
    199a:	20 91 2c 01 	lds	r18, 0x012C
    199e:	30 91 2d 01 	lds	r19, 0x012D
    19a2:	40 91 2e 01 	lds	r20, 0x012E
    19a6:	50 91 2f 01 	lds	r21, 0x012F
    19aa:	60 91 39 01 	lds	r22, 0x0139
    19ae:	70 91 3a 01 	lds	r23, 0x013A
    19b2:	80 91 3b 01 	lds	r24, 0x013B
    19b6:	90 91 3c 01 	lds	r25, 0x013C
    19ba:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    19be:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <round>
    19c2:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    19c6:	cb 01       	movw	r24, r22
    19c8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
			}
			
			ms_counter++;//Always increment counter.
    19cc:	80 91 75 01 	lds	r24, 0x0175
    19d0:	90 91 76 01 	lds	r25, 0x0176
    19d4:	a0 91 77 01 	lds	r26, 0x0177
    19d8:	b0 91 78 01 	lds	r27, 0x0178
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	a1 1d       	adc	r26, r1
    19e0:	b1 1d       	adc	r27, r1
    19e2:	80 93 75 01 	sts	0x0175, r24
    19e6:	90 93 76 01 	sts	0x0176, r25
    19ea:	a0 93 77 01 	sts	0x0177, r26
    19ee:	b0 93 78 01 	sts	0x0178, r27
		break;
    19f2:	96 c5       	rjmp	.+2860   	; 0x2520 <__vector_11+0x1722>
		
		case RAMP_STOP:
			//Reset counter and sample counter.
			ms_counter = 0;
    19f4:	10 92 75 01 	sts	0x0175, r1
    19f8:	10 92 76 01 	sts	0x0176, r1
    19fc:	10 92 77 01 	sts	0x0177, r1
    1a00:	10 92 78 01 	sts	0x0178, r1
			samp_count = 0;
    1a04:	10 92 45 01 	sts	0x0145, r1
    1a08:	10 92 46 01 	sts	0x0146, r1
    1a0c:	10 92 47 01 	sts	0x0147, r1
    1a10:	10 92 48 01 	sts	0x0148, r1
			
			//Next cycle.
			this_cyc++;
    1a14:	80 91 3e 01 	lds	r24, 0x013E
    1a18:	8f 5f       	subi	r24, 0xFF	; 255
    1a1a:	80 93 3e 01 	sts	0x013E, r24
			
			if(as.get_sweep_cyclic() && (this_cyc <= tot_cyc))
    1a1e:	89 e4       	ldi	r24, 0x49	; 73
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8as_class16get_sweep_cyclicEv>
    1a26:	88 23       	and	r24, r24
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__vector_11+0xc2e>
    1a2a:	7c c5       	rjmp	.+2808   	; 0x2524 <__vector_11+0x1726>
    1a2c:	90 91 3e 01 	lds	r25, 0x013E
    1a30:	80 91 3d 01 	lds	r24, 0x013D
    1a34:	89 17       	cp	r24, r25
    1a36:	08 f0       	brcs	.+2      	; 0x1a3a <__vector_11+0xc3c>
    1a38:	82 c5       	rjmp	.+2820   	; 0x253e <__vector_11+0x1740>
    1a3a:	74 c5       	rjmp	.+2792   	; 0x2524 <__vector_11+0x1726>
				ev = temp;
				
				//Print initial stream data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
				{
					atmega_uart::tx_byte('s');
    1a3c:	83 e7       	ldi	r24, 0x73	; 115
    1a3e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(this_cyc);
    1a42:	80 91 3e 01 	lds	r24, 0x013E
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=["));
    1a4c:	82 e6       	ldi	r24, 0x62	; 98
    1a4e:	94 e0       	ldi	r25, 0x04	; 4
    1a50:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1a54:	16 c0       	rjmp	.+44     	; 0x1a82 <__vector_11+0xc84>
				}
				else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    1a56:	89 e4       	ldi	r24, 0x49	; 73
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	0a c0       	rjmp	.+20     	; 0x1a76 <__vector_11+0xc78>
				{
					tx_u16_to_ascii(LIN_DATA + this_cyc);
    1a62:	80 91 3e 01 	lds	r24, 0x013E
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9e 57       	subi	r25, 0x7E	; 126
    1a6a:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    1a6e:	8c e2       	ldi	r24, 0x2C	; 44
    1a70:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <__vector_11+0xc84>
				}
				else//Print binary data.
				{
					atmega_uart::tx_word(LIN_DATA + this_cyc);
    1a76:	80 91 3e 01 	lds	r24, 0x013E
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9e 57       	subi	r25, 0x7E	; 126
    1a7e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				}
				
				as.set_test_state(RAMP);
    1a82:	68 e0       	ldi	r22, 0x08	; 8
    1a84:	89 e4       	ldi	r24, 0x49	; 73
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    1a8c:	49 c5       	rjmp	.+2706   	; 0x2520 <__vector_11+0x1722>
				write_dac(ZERO_VOLT);
				
				//Determine how many cycles need to be graphed.
				if(as.get_sweep_cyclic())
				{
					graph_cycles = tot_cyc;
    1a8e:	80 91 3d 01 	lds	r24, 0x013D
    1a92:	80 93 27 01 	sts	0x0127, r24
    1a96:	03 c0       	rjmp	.+6      	; 0x1a9e <__vector_11+0xca0>
				}
				else
				{
					graph_cycles = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 27 01 	sts	0x0127, r24
				}
				
				as.set_test_state(FOOTER);//Done.
    1a9e:	60 e1       	ldi	r22, 0x10	; 16
    1aa0:	89 e4       	ldi	r24, 0x49	; 73
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    1aa8:	3b c5       	rjmp	.+2678   	; 0x2520 <__vector_11+0x1722>
			}	
		break;
			
		case SQUARE_INIT:
			//Initialize variables.
			samp_count = 0;
    1aaa:	10 92 45 01 	sts	0x0145, r1
    1aae:	10 92 46 01 	sts	0x0146, r1
    1ab2:	10 92 47 01 	sts	0x0147, r1
    1ab6:	10 92 48 01 	sts	0x0148, r1
			ms_counter = 0;
    1aba:	10 92 75 01 	sts	0x0175, r1
    1abe:	10 92 76 01 	sts	0x0176, r1
    1ac2:	10 92 77 01 	sts	0x0177, r1
    1ac6:	10 92 78 01 	sts	0x0178, r1
			tot_cyc = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 3d 01 	sts	0x013D, r24
			square_half = POS_HALF;
    1ad0:	10 92 26 01 	sts	0x0126, r1
			this_offset = 0;
    1ad4:	10 92 2c 01 	sts	0x012C, r1
    1ad8:	10 92 2d 01 	sts	0x012D, r1
    1adc:	10 92 2e 01 	sts	0x012E, r1
    1ae0:	10 92 2f 01 	sts	0x012F, r1
			sv = ZERO_VOLT + (1000.0 * (double)as.get_square_volt_start() / V_PER_COUNT);
    1ae4:	89 e4       	ldi	r24, 0x49	; 73
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    1aec:	bc 01       	movw	r22, r24
    1aee:	88 27       	eor	r24, r24
    1af0:	77 fd       	sbrc	r23, 7
    1af2:	80 95       	com	r24
    1af4:	98 2f       	mov	r25, r24
    1af6:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a e7       	ldi	r20, 0x7A	; 122
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    1b06:	2f e7       	ldi	r18, 0x7F	; 127
    1b08:	3a e6       	ldi	r19, 0x6A	; 106
    1b0a:	49 e4       	ldi	r20, 0x49	; 73
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 ee       	ldi	r19, 0xE0	; 224
    1b16:	4f ef       	ldi	r20, 0xFF	; 255
    1b18:	54 e4       	ldi	r21, 0x44	; 68
    1b1a:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1b1e:	60 93 39 01 	sts	0x0139, r22
    1b22:	70 93 3a 01 	sts	0x013A, r23
    1b26:	80 93 3b 01 	sts	0x013B, r24
    1b2a:	90 93 3c 01 	sts	0x013C, r25
			ev = ZERO_VOLT + (1000.0 * (double)as.get_square_volt_end() / V_PER_COUNT);
    1b2e:	89 e4       	ldi	r24, 0x49	; 73
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    1b36:	bc 01       	movw	r22, r24
    1b38:	88 27       	eor	r24, r24
    1b3a:	77 fd       	sbrc	r23, 7
    1b3c:	80 95       	com	r24
    1b3e:	98 2f       	mov	r25, r24
    1b40:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    1b50:	2f e7       	ldi	r18, 0x7F	; 127
    1b52:	3a e6       	ldi	r19, 0x6A	; 106
    1b54:	49 e4       	ldi	r20, 0x49	; 73
    1b56:	54 e4       	ldi	r21, 0x44	; 68
    1b58:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 ee       	ldi	r19, 0xE0	; 224
    1b60:	4f ef       	ldi	r20, 0xFF	; 255
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1b68:	60 93 35 01 	sts	0x0135, r22
    1b6c:	70 93 36 01 	sts	0x0136, r23
    1b70:	80 93 37 01 	sts	0x0137, r24
    1b74:	90 93 38 01 	sts	0x0138, r25
			sq_amp = 1000.0 * (double)as.get_square_amp() / V_PER_COUNT;
    1b78:	89 e4       	ldi	r24, 0x49	; 73
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    1b80:	bc 01       	movw	r22, r24
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <__floatunsisf>
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4a e7       	ldi	r20, 0x7A	; 122
    1b90:	54 e4       	ldi	r21, 0x44	; 68
    1b92:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    1b96:	2f e7       	ldi	r18, 0x7F	; 127
    1b98:	3a e6       	ldi	r19, 0x6A	; 106
    1b9a:	49 e4       	ldi	r20, 0x49	; 73
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    1ba2:	60 93 22 01 	sts	0x0122, r22
    1ba6:	70 93 23 01 	sts	0x0123, r23
    1baa:	80 93 24 01 	sts	0x0124, r24
    1bae:	90 93 25 01 	sts	0x0125, r25
			
			//Determine initial slope.
			if(sv < ev)
    1bb2:	20 91 35 01 	lds	r18, 0x0135
    1bb6:	30 91 36 01 	lds	r19, 0x0136
    1bba:	40 91 37 01 	lds	r20, 0x0137
    1bbe:	50 91 38 01 	lds	r21, 0x0138
    1bc2:	60 91 39 01 	lds	r22, 0x0139
    1bc6:	70 91 3a 01 	lds	r23, 0x013A
    1bca:	80 91 3b 01 	lds	r24, 0x013B
    1bce:	90 91 3c 01 	lds	r25, 0x013C
    1bd2:	0e 94 3b 32 	call	0x6476	; 0x6476 <__cmpsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	24 f4       	brge	.+8      	; 0x1be2 <__vector_11+0xde4>
			{
				slope = POS_SLOPE;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	80 93 30 01 	sts	0x0130, r24
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <__vector_11+0xde8>
			}
			else
			{
				slope = NEG_SLOPE;
    1be2:	10 92 30 01 	sts	0x0130, r1
			}
		
			//Print initial stream data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    1be6:	89 e4       	ldi	r24, 0x49	; 73
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	69 f4       	brne	.+26     	; 0x1c0c <__vector_11+0xe0e>
			{
				atmega_uart::tx_byte('s');
    1bf2:	83 e7       	ldi	r24, 0x73	; 115
    1bf4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(tot_cyc);
    1bf8:	80 91 3d 01 	lds	r24, 0x013D
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
				atmega_uart::tx_string_p(PSTR("=["));
    1c02:	8f e5       	ldi	r24, 0x5F	; 95
    1c04:	94 e0       	ldi	r25, 0x04	; 4
    1c06:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1c0a:	16 c0       	rjmp	.+44     	; 0x1c38 <__vector_11+0xe3a>
			}
			else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    1c0c:	89 e4       	ldi	r24, 0x49	; 73
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1c14:	81 11       	cpse	r24, r1
    1c16:	0a c0       	rjmp	.+20     	; 0x1c2c <__vector_11+0xe2e>
			{
				tx_u16_to_ascii(SQR_DATA + tot_cyc);
    1c18:	80 91 3d 01 	lds	r24, 0x013D
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9c 57       	subi	r25, 0x7C	; 124
    1c20:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1c24:	8c e2       	ldi	r24, 0x2C	; 44
    1c26:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <__vector_11+0xe3a>
			}
			else//Print binary data.
			{
				atmega_uart::tx_word(SQR_DATA + tot_cyc);
    1c2c:	80 91 3d 01 	lds	r24, 0x013D
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9c 57       	subi	r25, 0x7C	; 124
    1c34:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
			}
		
			write_dac((uint16_t)round(sv + sq_amp));
    1c38:	20 91 22 01 	lds	r18, 0x0122
    1c3c:	30 91 23 01 	lds	r19, 0x0123
    1c40:	40 91 24 01 	lds	r20, 0x0124
    1c44:	50 91 25 01 	lds	r21, 0x0125
    1c48:	60 91 39 01 	lds	r22, 0x0139
    1c4c:	70 91 3a 01 	lds	r23, 0x013A
    1c50:	80 91 3b 01 	lds	r24, 0x013B
    1c54:	90 91 3c 01 	lds	r25, 0x013C
    1c58:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1c5c:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <round>
    1c60:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    1c64:	cb 01       	movw	r24, r22
    1c66:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
			i2c_connect_ce();//Always connect counter electrode.
    1c6a:	0e 94 67 16 	call	0x2cce	; 0x2cce <_Z14i2c_connect_cev>
			
			as.set_test_state(SQUARE);
    1c6e:	6b e0       	ldi	r22, 0x0B	; 11
    1c70:	89 e4       	ldi	r24, 0x49	; 73
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    1c78:	53 c4       	rjmp	.+2214   	; 0x2520 <__vector_11+0x1722>
		
		case SQUARE:
			//Do stuff if time to switch square wave halves.
			if(ms_counter >= as.get_square_period())
    1c7a:	89 e4       	ldi	r24, 0x49	; 73
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8as_class17get_square_periodEv>
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	40 91 75 01 	lds	r20, 0x0175
    1c8a:	50 91 76 01 	lds	r21, 0x0176
    1c8e:	60 91 77 01 	lds	r22, 0x0177
    1c92:	70 91 78 01 	lds	r23, 0x0178
    1c96:	48 17       	cp	r20, r24
    1c98:	59 07       	cpc	r21, r25
    1c9a:	6a 07       	cpc	r22, r26
    1c9c:	7b 07       	cpc	r23, r27
    1c9e:	08 f4       	brcc	.+2      	; 0x1ca2 <__vector_11+0xea4>
    1ca0:	50 c2       	rjmp	.+1184   	; 0x2142 <__vector_11+0x1344>
			{
				if(slope == POS_SLOPE)//Positive slope.
    1ca2:	80 91 30 01 	lds	r24, 0x0130
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <__vector_11+0xeae>
    1caa:	1d c1       	rjmp	.+570    	; 0x1ee6 <__vector_11+0x10e8>
				{
					if(sv + (int32_t)this_offset <= ev)//More to go.
    1cac:	60 91 2c 01 	lds	r22, 0x012C
    1cb0:	70 91 2d 01 	lds	r23, 0x012D
    1cb4:	80 91 2e 01 	lds	r24, 0x012E
    1cb8:	90 91 2f 01 	lds	r25, 0x012F
    1cbc:	0e 94 a7 32 	call	0x654e	; 0x654e <__fixsfsi>
    1cc0:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    1cc4:	20 91 39 01 	lds	r18, 0x0139
    1cc8:	30 91 3a 01 	lds	r19, 0x013A
    1ccc:	40 91 3b 01 	lds	r20, 0x013B
    1cd0:	50 91 3c 01 	lds	r21, 0x013C
    1cd4:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1cd8:	20 91 35 01 	lds	r18, 0x0135
    1cdc:	30 91 36 01 	lds	r19, 0x0136
    1ce0:	40 91 37 01 	lds	r20, 0x0137
    1ce4:	50 91 38 01 	lds	r21, 0x0138
    1ce8:	0e 94 3b 32 	call	0x6476	; 0x6476 <__cmpsf2>
    1cec:	18 16       	cp	r1, r24
    1cee:	0c f4       	brge	.+2      	; 0x1cf2 <__vector_11+0xef4>
    1cf0:	f4 c0       	rjmp	.+488    	; 0x1eda <__vector_11+0x10dc>
					{
						if(square_half == POS_HALF)//Positive half cycle.
    1cf2:	80 91 26 01 	lds	r24, 0x0126
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	28 c0       	rjmp	.+80     	; 0x1d4a <__vector_11+0xf4c>
						{
							//Get sample.
							temp_adc = read_adc();
    1cfa:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    1cfe:	90 93 21 01 	sts	0x0121, r25
    1d02:	80 93 20 01 	sts	0x0120, r24
							
							//Update DAC with negative half cycle value.
							write_dac(sv + this_offset - sq_amp);
    1d06:	20 91 2c 01 	lds	r18, 0x012C
    1d0a:	30 91 2d 01 	lds	r19, 0x012D
    1d0e:	40 91 2e 01 	lds	r20, 0x012E
    1d12:	50 91 2f 01 	lds	r21, 0x012F
    1d16:	60 91 39 01 	lds	r22, 0x0139
    1d1a:	70 91 3a 01 	lds	r23, 0x013A
    1d1e:	80 91 3b 01 	lds	r24, 0x013B
    1d22:	90 91 3c 01 	lds	r25, 0x013C
    1d26:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1d2a:	20 91 22 01 	lds	r18, 0x0122
    1d2e:	30 91 23 01 	lds	r19, 0x0123
    1d32:	40 91 24 01 	lds	r20, 0x0124
    1d36:	50 91 25 01 	lds	r21, 0x0125
    1d3a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    1d3e:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    1d42:	cb 01       	movw	r24, r22
    1d44:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
    1d48:	ee c1       	rjmp	.+988    	; 0x2126 <__vector_11+0x1328>
						}
						else//Negative half cycle.
						{
							//Get sample.
							output = read_adc();
    1d4a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
							
							//Make sure this value is not greater than last value.  This can be due to noise.
							(output > temp_adc) ? temp_adc = 0 : temp_adc -= output;
    1d4e:	20 91 20 01 	lds	r18, 0x0120
    1d52:	30 91 21 01 	lds	r19, 0x0121
    1d56:	28 17       	cp	r18, r24
    1d58:	39 07       	cpc	r19, r25
    1d5a:	28 f4       	brcc	.+10     	; 0x1d66 <__vector_11+0xf68>
    1d5c:	10 92 21 01 	sts	0x0121, r1
    1d60:	10 92 20 01 	sts	0x0120, r1
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <__vector_11+0xf74>
    1d66:	28 1b       	sub	r18, r24
    1d68:	39 0b       	sbc	r19, r25
    1d6a:	30 93 21 01 	sts	0x0121, r19
    1d6e:	20 93 20 01 	sts	0x0120, r18
							
							//temp_adc -= read_adc();
							
							output = temp_adc;
    1d72:	80 91 20 01 	lds	r24, 0x0120
    1d76:	90 91 21 01 	lds	r25, 0x0121
    1d7a:	90 93 40 01 	sts	0x0140, r25
    1d7e:	80 93 3f 01 	sts	0x013F, r24
							
							//Print MatLab data.
							if(as.get_tx_mode() == TX_MODE_MATLAB)
    1d82:	89 e4       	ldi	r24, 0x49	; 73
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	99 f5       	brne	.+102    	; 0x1df4 <__vector_11+0xff6>
							{
								tx_u16_to_ascii(output);
    1d8e:	80 91 3f 01 	lds	r24, 0x013F
    1d92:	90 91 40 01 	lds	r25, 0x0140
    1d96:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    1d9a:	8c e2       	ldi	r24, 0x2C	; 44
    1d9c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
								
								//Indicate a new sample has been sent.
								samp_count++;
    1da0:	80 91 45 01 	lds	r24, 0x0145
    1da4:	90 91 46 01 	lds	r25, 0x0146
    1da8:	a0 91 47 01 	lds	r26, 0x0147
    1dac:	b0 91 48 01 	lds	r27, 0x0148
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	6f 5f       	subi	r22, 0xFF	; 255
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	60 93 45 01 	sts	0x0145, r22
    1dc0:	70 93 46 01 	sts	0x0146, r23
    1dc4:	80 93 47 01 	sts	0x0147, r24
    1dc8:	90 93 48 01 	sts	0x0148, r25
								
								//Start newline if 10 or more samples on this line.
								if(samp_count && !(samp_count % 10))
    1dcc:	61 15       	cp	r22, r1
    1dce:	71 05       	cpc	r23, r1
    1dd0:	81 05       	cpc	r24, r1
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	29 f1       	breq	.+74     	; 0x1e20 <__vector_11+0x1022>
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    1de2:	67 2b       	or	r22, r23
    1de4:	68 2b       	or	r22, r24
    1de6:	69 2b       	or	r22, r25
    1de8:	d9 f4       	brne	.+54     	; 0x1e20 <__vector_11+0x1022>
								{
									atmega_uart::tx_string_p(PSTR("...\r"));
    1dea:	8a e5       	ldi	r24, 0x5A	; 90
    1dec:	94 e0       	ldi	r25, 0x04	; 4
    1dee:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    1df2:	16 c0       	rjmp	.+44     	; 0x1e20 <__vector_11+0x1022>
								}
							}
							//Print ASCII data.
							else if(as.get_tx_mode() == TX_MODE_ASCII)
    1df4:	89 e4       	ldi	r24, 0x49	; 73
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	0a c0       	rjmp	.+20     	; 0x1e14 <__vector_11+0x1016>
							{
								tx_u16_to_ascii(output);
    1e00:	80 91 3f 01 	lds	r24, 0x013F
    1e04:	90 91 40 01 	lds	r25, 0x0140
    1e08:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    1e0c:	8c e2       	ldi	r24, 0x2C	; 44
    1e0e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <__vector_11+0x1022>
							}
							//Print binary data.
							else
							{
								atmega_uart::tx_word(output);
    1e14:	80 91 3f 01 	lds	r24, 0x013F
    1e18:	90 91 40 01 	lds	r25, 0x0140
    1e1c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
							}
							
							//Update increment.
							this_offset += (1000L * as.get_square_inc() / V_PER_COUNT);
    1e20:	89 e4       	ldi	r24, 0x49	; 73
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	0e 94 84 14 	call	0x2908	; 0x2908 <_ZN8as_class14get_square_incEv>
    1e28:	9c 01       	movw	r18, r24
    1e2a:	a8 ee       	ldi	r26, 0xE8	; 232
    1e2c:	b3 e0       	ldi	r27, 0x03	; 3
    1e2e:	0e 94 95 34 	call	0x692a	; 0x692a <__umulhisi3>
    1e32:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    1e36:	2f e7       	ldi	r18, 0x7F	; 127
    1e38:	3a e6       	ldi	r19, 0x6A	; 106
    1e3a:	49 e4       	ldi	r20, 0x49	; 73
    1e3c:	54 e4       	ldi	r21, 0x44	; 68
    1e3e:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    1e42:	20 91 2c 01 	lds	r18, 0x012C
    1e46:	30 91 2d 01 	lds	r19, 0x012D
    1e4a:	40 91 2e 01 	lds	r20, 0x012E
    1e4e:	50 91 2f 01 	lds	r21, 0x012F
    1e52:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1e56:	6b 01       	movw	r12, r22
    1e58:	7c 01       	movw	r14, r24
    1e5a:	60 93 2c 01 	sts	0x012C, r22
    1e5e:	70 93 2d 01 	sts	0x012D, r23
    1e62:	80 93 2e 01 	sts	0x012E, r24
    1e66:	90 93 2f 01 	sts	0x012F, r25
							
							if(sv + (int32_t)this_offset > ev)//Special stop case.
    1e6a:	80 90 39 01 	lds	r8, 0x0139
    1e6e:	90 90 3a 01 	lds	r9, 0x013A
    1e72:	a0 90 3b 01 	lds	r10, 0x013B
    1e76:	b0 90 3c 01 	lds	r11, 0x013C
    1e7a:	0e 94 a7 32 	call	0x654e	; 0x654e <__fixsfsi>
    1e7e:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    1e82:	a5 01       	movw	r20, r10
    1e84:	94 01       	movw	r18, r8
    1e86:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1e8a:	20 91 35 01 	lds	r18, 0x0135
    1e8e:	30 91 36 01 	lds	r19, 0x0136
    1e92:	40 91 37 01 	lds	r20, 0x0137
    1e96:	50 91 38 01 	lds	r21, 0x0138
    1e9a:	0e 94 8a 33 	call	0x6714	; 0x6714 <__gesf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	34 f4       	brge	.+12     	; 0x1eae <__vector_11+0x10b0>
							{
								as.set_test_state(SQUARE_STOP);
    1ea2:	6c e0       	ldi	r22, 0x0C	; 12
    1ea4:	89 e4       	ldi	r24, 0x49	; 73
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    1eac:	3c c1       	rjmp	.+632    	; 0x2126 <__vector_11+0x1328>
							}
							else
							{
								//Update DAC with positive half cycle value.
								write_dac(sv + this_offset + sq_amp);
    1eae:	a5 01       	movw	r20, r10
    1eb0:	94 01       	movw	r18, r8
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1eba:	20 91 22 01 	lds	r18, 0x0122
    1ebe:	30 91 23 01 	lds	r19, 0x0123
    1ec2:	40 91 24 01 	lds	r20, 0x0124
    1ec6:	50 91 25 01 	lds	r21, 0x0125
    1eca:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    1ece:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
    1ed8:	26 c1       	rjmp	.+588    	; 0x2126 <__vector_11+0x1328>
							}
						}
					}
					else//Ready to move on.
					{						
						as.set_test_state(SQUARE_STOP);
    1eda:	6c e0       	ldi	r22, 0x0C	; 12
    1edc:	89 e4       	ldi	r24, 0x49	; 73
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    1ee4:	20 c1       	rjmp	.+576    	; 0x2126 <__vector_11+0x1328>
					}
				}
				else//Negative slope.
				{
					if(sv - (int32_t)this_offset >= ev)//More to go.
    1ee6:	60 91 2c 01 	lds	r22, 0x012C
    1eea:	70 91 2d 01 	lds	r23, 0x012D
    1eee:	80 91 2e 01 	lds	r24, 0x012E
    1ef2:	90 91 2f 01 	lds	r25, 0x012F
    1ef6:	0e 94 a7 32 	call	0x654e	; 0x654e <__fixsfsi>
    1efa:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    1efe:	9b 01       	movw	r18, r22
    1f00:	ac 01       	movw	r20, r24
    1f02:	60 91 39 01 	lds	r22, 0x0139
    1f06:	70 91 3a 01 	lds	r23, 0x013A
    1f0a:	80 91 3b 01 	lds	r24, 0x013B
    1f0e:	90 91 3c 01 	lds	r25, 0x013C
    1f12:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    1f16:	20 91 35 01 	lds	r18, 0x0135
    1f1a:	30 91 36 01 	lds	r19, 0x0136
    1f1e:	40 91 37 01 	lds	r20, 0x0137
    1f22:	50 91 38 01 	lds	r21, 0x0138
    1f26:	0e 94 8a 33 	call	0x6714	; 0x6714 <__gesf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	0c f4       	brge	.+2      	; 0x1f30 <__vector_11+0x1132>
    1f2e:	f6 c0       	rjmp	.+492    	; 0x211c <__vector_11+0x131e>
					{
						if(square_half == POS_HALF)//Positive half cycle.
    1f30:	80 91 26 01 	lds	r24, 0x0126
    1f34:	81 11       	cpse	r24, r1
    1f36:	28 c0       	rjmp	.+80     	; 0x1f88 <__vector_11+0x118a>
						{
							//Get sample.
							temp_adc = read_adc();
    1f38:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
    1f3c:	90 93 21 01 	sts	0x0121, r25
    1f40:	80 93 20 01 	sts	0x0120, r24
							
							//Update DAC with negative half cycle value.
							write_dac(sv - this_offset - sq_amp);
    1f44:	20 91 2c 01 	lds	r18, 0x012C
    1f48:	30 91 2d 01 	lds	r19, 0x012D
    1f4c:	40 91 2e 01 	lds	r20, 0x012E
    1f50:	50 91 2f 01 	lds	r21, 0x012F
    1f54:	60 91 39 01 	lds	r22, 0x0139
    1f58:	70 91 3a 01 	lds	r23, 0x013A
    1f5c:	80 91 3b 01 	lds	r24, 0x013B
    1f60:	90 91 3c 01 	lds	r25, 0x013C
    1f64:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    1f68:	20 91 22 01 	lds	r18, 0x0122
    1f6c:	30 91 23 01 	lds	r19, 0x0123
    1f70:	40 91 24 01 	lds	r20, 0x0124
    1f74:	50 91 25 01 	lds	r21, 0x0125
    1f78:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    1f7c:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    1f80:	cb 01       	movw	r24, r22
    1f82:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
    1f86:	cf c0       	rjmp	.+414    	; 0x2126 <__vector_11+0x1328>
						}
						else//Negative half cycle.
						{
							//Get sample.
							output = read_adc();
    1f88:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z8read_adcv>
							
							//Make sure this value is not greater than last value.  This can be due to noise.
							(output > temp_adc) ? temp_adc = 0 : temp_adc -= output;
    1f8c:	20 91 20 01 	lds	r18, 0x0120
    1f90:	30 91 21 01 	lds	r19, 0x0121
    1f94:	28 17       	cp	r18, r24
    1f96:	39 07       	cpc	r19, r25
    1f98:	28 f4       	brcc	.+10     	; 0x1fa4 <__vector_11+0x11a6>
    1f9a:	10 92 21 01 	sts	0x0121, r1
    1f9e:	10 92 20 01 	sts	0x0120, r1
    1fa2:	06 c0       	rjmp	.+12     	; 0x1fb0 <__vector_11+0x11b2>
    1fa4:	28 1b       	sub	r18, r24
    1fa6:	39 0b       	sbc	r19, r25
    1fa8:	30 93 21 01 	sts	0x0121, r19
    1fac:	20 93 20 01 	sts	0x0120, r18
							
							//temp_adc -= read_adc();
							
							output = temp_adc;
    1fb0:	80 91 20 01 	lds	r24, 0x0120
    1fb4:	90 91 21 01 	lds	r25, 0x0121
    1fb8:	90 93 40 01 	sts	0x0140, r25
    1fbc:	80 93 3f 01 	sts	0x013F, r24
							
							//Print MatLab data.
							if(as.get_tx_mode() == TX_MODE_MATLAB)
    1fc0:	89 e4       	ldi	r24, 0x49	; 73
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	99 f5       	brne	.+102    	; 0x2032 <__vector_11+0x1234>
							{
								tx_u16_to_ascii(output);
    1fcc:	80 91 3f 01 	lds	r24, 0x013F
    1fd0:	90 91 40 01 	lds	r25, 0x0140
    1fd4:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    1fd8:	8c e2       	ldi	r24, 0x2C	; 44
    1fda:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
								
								//Indicate a new sample has been sent.
								samp_count++;
    1fde:	80 91 45 01 	lds	r24, 0x0145
    1fe2:	90 91 46 01 	lds	r25, 0x0146
    1fe6:	a0 91 47 01 	lds	r26, 0x0147
    1fea:	b0 91 48 01 	lds	r27, 0x0148
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	6f 5f       	subi	r22, 0xFF	; 255
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	60 93 45 01 	sts	0x0145, r22
    1ffe:	70 93 46 01 	sts	0x0146, r23
    2002:	80 93 47 01 	sts	0x0147, r24
    2006:	90 93 48 01 	sts	0x0148, r25
								
								//Start newline if 10 or more samples on this line.
								if(samp_count && !(samp_count % 10))
    200a:	61 15       	cp	r22, r1
    200c:	71 05       	cpc	r23, r1
    200e:	81 05       	cpc	r24, r1
    2010:	91 05       	cpc	r25, r1
    2012:	29 f1       	breq	.+74     	; 0x205e <__vector_11+0x1260>
    2014:	2a e0       	ldi	r18, 0x0A	; 10
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	50 e0       	ldi	r21, 0x00	; 0
    201c:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    2020:	67 2b       	or	r22, r23
    2022:	68 2b       	or	r22, r24
    2024:	69 2b       	or	r22, r25
    2026:	d9 f4       	brne	.+54     	; 0x205e <__vector_11+0x1260>
								{
									atmega_uart::tx_string_p(PSTR("...\r"));
    2028:	85 e5       	ldi	r24, 0x55	; 85
    202a:	94 e0       	ldi	r25, 0x04	; 4
    202c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    2030:	16 c0       	rjmp	.+44     	; 0x205e <__vector_11+0x1260>
								}
							}
							//Print ASCII data.
							else if(as.get_tx_mode() == TX_MODE_ASCII)
    2032:	89 e4       	ldi	r24, 0x49	; 73
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    203a:	81 11       	cpse	r24, r1
    203c:	0a c0       	rjmp	.+20     	; 0x2052 <__vector_11+0x1254>
							{
								tx_u16_to_ascii(output);
    203e:	80 91 3f 01 	lds	r24, 0x013F
    2042:	90 91 40 01 	lds	r25, 0x0140
    2046:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
								atmega_uart::tx_byte(',');
    204a:	8c e2       	ldi	r24, 0x2C	; 44
    204c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    2050:	06 c0       	rjmp	.+12     	; 0x205e <__vector_11+0x1260>
							}
							//Print binary data.
							else
							{
								atmega_uart::tx_word(output);
    2052:	80 91 3f 01 	lds	r24, 0x013F
    2056:	90 91 40 01 	lds	r25, 0x0140
    205a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
							}
							
							//Update increment.
							this_offset += (1000L * as.get_square_inc() / V_PER_COUNT);
    205e:	89 e4       	ldi	r24, 0x49	; 73
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	0e 94 84 14 	call	0x2908	; 0x2908 <_ZN8as_class14get_square_incEv>
    2066:	9c 01       	movw	r18, r24
    2068:	a8 ee       	ldi	r26, 0xE8	; 232
    206a:	b3 e0       	ldi	r27, 0x03	; 3
    206c:	0e 94 95 34 	call	0x692a	; 0x692a <__umulhisi3>
    2070:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    2074:	2f e7       	ldi	r18, 0x7F	; 127
    2076:	3a e6       	ldi	r19, 0x6A	; 106
    2078:	49 e4       	ldi	r20, 0x49	; 73
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 3f 32 	call	0x647e	; 0x647e <__divsf3>
    2080:	20 91 2c 01 	lds	r18, 0x012C
    2084:	30 91 2d 01 	lds	r19, 0x012D
    2088:	40 91 2e 01 	lds	r20, 0x012E
    208c:	50 91 2f 01 	lds	r21, 0x012F
    2090:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    2094:	6b 01       	movw	r12, r22
    2096:	7c 01       	movw	r14, r24
    2098:	60 93 2c 01 	sts	0x012C, r22
    209c:	70 93 2d 01 	sts	0x012D, r23
    20a0:	80 93 2e 01 	sts	0x012E, r24
    20a4:	90 93 2f 01 	sts	0x012F, r25
							
							if(sv - (int32_t)this_offset < ev)//Special stop case.
    20a8:	80 90 39 01 	lds	r8, 0x0139
    20ac:	90 90 3a 01 	lds	r9, 0x013A
    20b0:	a0 90 3b 01 	lds	r10, 0x013B
    20b4:	b0 90 3c 01 	lds	r11, 0x013C
    20b8:	0e 94 a7 32 	call	0x654e	; 0x654e <__fixsfsi>
    20bc:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	c5 01       	movw	r24, r10
    20c6:	b4 01       	movw	r22, r8
    20c8:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    20cc:	20 91 35 01 	lds	r18, 0x0135
    20d0:	30 91 36 01 	lds	r19, 0x0136
    20d4:	40 91 37 01 	lds	r20, 0x0137
    20d8:	50 91 38 01 	lds	r21, 0x0138
    20dc:	0e 94 3b 32 	call	0x6476	; 0x6476 <__cmpsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	34 f4       	brge	.+12     	; 0x20f0 <__vector_11+0x12f2>
							{
								as.set_test_state(SQUARE_STOP);
    20e4:	6c e0       	ldi	r22, 0x0C	; 12
    20e6:	89 e4       	ldi	r24, 0x49	; 73
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    20ee:	1b c0       	rjmp	.+54     	; 0x2126 <__vector_11+0x1328>
							}
							else
							{
								//Update DAC with positive half cycle value.
								write_dac(sv - this_offset + sq_amp);
    20f0:	a7 01       	movw	r20, r14
    20f2:	96 01       	movw	r18, r12
    20f4:	c5 01       	movw	r24, r10
    20f6:	b4 01       	movw	r22, r8
    20f8:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    20fc:	20 91 22 01 	lds	r18, 0x0122
    2100:	30 91 23 01 	lds	r19, 0x0123
    2104:	40 91 24 01 	lds	r20, 0x0124
    2108:	50 91 25 01 	lds	r21, 0x0125
    210c:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    2110:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
    2114:	cb 01       	movw	r24, r22
    2116:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <__vector_11+0x1328>
							}
						}
					}
					else//Ready to move on.
					{
						as.set_test_state(SQUARE_STOP);
    211c:	6c e0       	ldi	r22, 0x0C	; 12
    211e:	89 e4       	ldi	r24, 0x49	; 73
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
					}
				}
				
				ms_counter = 0;//Reset counter.
    2126:	10 92 75 01 	sts	0x0175, r1
    212a:	10 92 76 01 	sts	0x0176, r1
    212e:	10 92 77 01 	sts	0x0177, r1
    2132:	10 92 78 01 	sts	0x0178, r1
				square_half ^= 0x01;//Change to other square wave half.
    2136:	90 91 26 01 	lds	r25, 0x0126
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	89 27       	eor	r24, r25
    213e:	80 93 26 01 	sts	0x0126, r24
			}
			ms_counter++;//Always Increment counter.
    2142:	80 91 75 01 	lds	r24, 0x0175
    2146:	90 91 76 01 	lds	r25, 0x0176
    214a:	a0 91 77 01 	lds	r26, 0x0177
    214e:	b0 91 78 01 	lds	r27, 0x0178
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	a1 1d       	adc	r26, r1
    2156:	b1 1d       	adc	r27, r1
    2158:	80 93 75 01 	sts	0x0175, r24
    215c:	90 93 76 01 	sts	0x0176, r25
    2160:	a0 93 77 01 	sts	0x0177, r26
    2164:	b0 93 78 01 	sts	0x0178, r27
		break;
    2168:	db c1       	rjmp	.+950    	; 0x2520 <__vector_11+0x1722>
		
		case SQUARE_STOP:
			//Zero out voltage and return to idle.
			write_dac(ZERO_VOLT);
    216a:	8f ef       	ldi	r24, 0xFF	; 255
    216c:	97 e0       	ldi	r25, 0x07	; 7
    216e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
			
			//Disconnect counter electrode.
			i2c_disconnect_ce();
    2172:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_Z17i2c_disconnect_cev>
			
			graph_cycles = 1;//Get ready to graph.
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 27 01 	sts	0x0127, r24
			
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    217c:	89 e4       	ldi	r24, 0x49	; 73
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	29 f4       	brne	.+10     	; 0x2192 <__vector_11+0x1394>
			{
				atmega_uart::tx_string_p(PSTR("];\r\r"));
    2188:	80 e5       	ldi	r24, 0x50	; 80
    218a:	94 e0       	ldi	r25, 0x04	; 4
    218c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    2190:	12 c0       	rjmp	.+36     	; 0x21b6 <__vector_11+0x13b8>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    2192:	89 e4       	ldi	r24, 0x49	; 73
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    219a:	81 11       	cpse	r24, r1
    219c:	08 c0       	rjmp	.+16     	; 0x21ae <__vector_11+0x13b0>
			{
				tx_u16_to_ascii(END_BLOCK);
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	9f ef       	ldi	r25, 0xFF	; 255
    21a2:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    21a6:	8c e2       	ldi	r24, 0x2C	; 44
    21a8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <__vector_11+0x13b8>
			}
			//Print binary data.
			else
			{
				atmega_uart::tx_word(END_BLOCK);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	9f ef       	ldi	r25, 0xFF	; 255
    21b2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
			}
			
			as.set_test_state(FOOTER);//Done.
    21b6:	60 e1       	ldi	r22, 0x10	; 16
    21b8:	89 e4       	ldi	r24, 0x49	; 73
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    21c0:	af c1       	rjmp	.+862    	; 0x2520 <__vector_11+0x1722>
		
		
		
		
		case ARB_INIT:
			i2c_connect_ce();//Always connect counter electrode.
    21c2:	0e 94 67 16 	call	0x2cce	; 0x2cce <_Z14i2c_connect_cev>
			atmega_uart::tx_string_p(PSTR("ARB_INIT\r"));
    21c6:	86 e4       	ldi	r24, 0x46	; 70
    21c8:	94 e0       	ldi	r25, 0x04	; 4
    21ca:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			as.set_test_state(IDLE);
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	89 e4       	ldi	r24, 0x49	; 73
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    21d8:	a3 c1       	rjmp	.+838    	; 0x2520 <__vector_11+0x1722>
		
		case ARB:
			atmega_uart::tx_string_p(PSTR("ARB\r"));
    21da:	81 e4       	ldi	r24, 0x41	; 65
    21dc:	94 e0       	ldi	r25, 0x04	; 4
    21de:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			as.set_test_state(IDLE);
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	89 e4       	ldi	r24, 0x49	; 73
    21e6:	91 e0       	ldi	r25, 0x01	; 1
    21e8:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    21ec:	99 c1       	rjmp	.+818    	; 0x2520 <__vector_11+0x1722>
		
		case ARB_STOP:
			atmega_uart::tx_string_p(PSTR("ARB_STOP\r"));
    21ee:	87 e3       	ldi	r24, 0x37	; 55
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			as.set_test_state(IDLE);
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	89 e4       	ldi	r24, 0x49	; 73
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    2200:	8f c1       	rjmp	.+798    	; 0x2520 <__vector_11+0x1722>
		
		
		
		case FOOTER:
			//Only do stuff if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    2202:	89 e4       	ldi	r24, 0x49	; 73
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	09 f0       	breq	.+2      	; 0x2210 <__vector_11+0x1412>
    220e:	54 c1       	rjmp	.+680    	; 0x24b8 <__vector_11+0x16ba>
			{
				//Calculate TIA resistance value.
				atmega_uart::tx_string_p(PSTR("res=tia_rt*100000/1023;\r"));
    2210:	8e e1       	ldi	r24, 0x1E	; 30
    2212:	94 e0       	ldi	r25, 0x04	; 4
    2214:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				
				//Print deposition graph if it is active.
				if(as.get_dep_rec() && as.get_dep_enable())
    2218:	89 e4       	ldi	r24, 0x49	; 73
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    2220:	88 23       	and	r24, r24
    2222:	31 f1       	breq	.+76     	; 0x2270 <__vector_11+0x1472>
    2224:	89 e4       	ldi	r24, 0x49	; 73
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN8as_class14get_dep_enableEv>
    222c:	88 23       	and	r24, r24
    222e:	01 f1       	breq	.+64     	; 0x2270 <__vector_11+0x1472>
				{
					atmega_uart::tx_string_p(PSTR("d_ua=((d-2047)*(3.3/4096)/res);\r"));
    2230:	8d ef       	ldi	r24, 0xFD	; 253
    2232:	93 e0       	ldi	r25, 0x03	; 3
    2234:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("td=linspace(1,dep_t/1000,length(d_ua));\r"));
    2238:	84 ed       	ldi	r24, 0xD4	; 212
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(1);\r"));
    2240:	88 ec       	ldi	r24, 0xC8	; 200
    2242:	93 e0       	ldi	r25, 0x03	; 3
    2244:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(td,d_ua);\r"));
    2248:	88 eb       	ldi	r24, 0xB8	; 184
    224a:	93 e0       	ldi	r25, 0x03	; 3
    224c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    2250:	81 ea       	ldi	r24, 0xA1	; 161
    2252:	93 e0       	ldi	r25, 0x03	; 3
    2254:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Time (s)');\r"));
    2258:	8c e8       	ldi	r24, 0x8C	; 140
    225a:	93 e0       	ldi	r25, 0x03	; 3
    225c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Deposition Sequence');\r"));
    2260:	8d e6       	ldi	r24, 0x6D	; 109
    2262:	93 e0       	ldi	r25, 0x03	; 3
    2264:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    2268:	82 e6       	ldi	r24, 0x62	; 98
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Print quiet time graph if it is active.
				if(as.get_dep_rec() && as.get_dep_enable() && (as.get_quiet_time() > 0))
    2270:	89 e4       	ldi	r24, 0x49	; 73
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    2278:	88 23       	and	r24, r24
    227a:	71 f1       	breq	.+92     	; 0x22d8 <__vector_11+0x14da>
    227c:	89 e4       	ldi	r24, 0x49	; 73
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN8as_class14get_dep_enableEv>
    2284:	88 23       	and	r24, r24
    2286:	41 f1       	breq	.+80     	; 0x22d8 <__vector_11+0x14da>
    2288:	89 e4       	ldi	r24, 0x49	; 73
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN8as_class14get_quiet_timeEv>
    2290:	67 2b       	or	r22, r23
    2292:	68 2b       	or	r22, r24
    2294:	69 2b       	or	r22, r25
    2296:	01 f1       	breq	.+64     	; 0x22d8 <__vector_11+0x14da>
				{
					atmega_uart::tx_string_p(PSTR("q_ua=((q-2047)*(3.3/4096)/res);\r"));
    2298:	81 e4       	ldi	r24, 0x41	; 65
    229a:	93 e0       	ldi	r25, 0x03	; 3
    229c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("tq=linspace(1,quiet_t/1000,length(q_ua));\r"));
    22a0:	86 e1       	ldi	r24, 0x16	; 22
    22a2:	93 e0       	ldi	r25, 0x03	; 3
    22a4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(2);\r"));
    22a8:	8a e0       	ldi	r24, 0x0A	; 10
    22aa:	93 e0       	ldi	r25, 0x03	; 3
    22ac:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(tq,q_ua);\r"));
    22b0:	8a ef       	ldi	r24, 0xFA	; 250
    22b2:	92 e0       	ldi	r25, 0x02	; 2
    22b4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    22b8:	83 ee       	ldi	r24, 0xE3	; 227
    22ba:	92 e0       	ldi	r25, 0x02	; 2
    22bc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Time (s)');\r"));
    22c0:	8e ec       	ldi	r24, 0xCE	; 206
    22c2:	92 e0       	ldi	r25, 0x02	; 2
    22c4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Quiet Time Sequence');\r"));
    22c8:	8f ea       	ldi	r24, 0xAF	; 175
    22ca:	92 e0       	ldi	r25, 0x02	; 2
    22cc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    22d0:	84 ea       	ldi	r24, 0xA4	; 164
    22d2:	92 e0       	ldi	r25, 0x02	; 2
    22d4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Print voltammetry graphs.
				for(uint16_t i = 1; i <= graph_cycles; i++)
    22d8:	80 91 27 01 	lds	r24, 0x0127
    22dc:	88 23       	and	r24, r24
    22de:	09 f4       	brne	.+2      	; 0x22e2 <__vector_11+0x14e4>
    22e0:	5e c0       	rjmp	.+188    	; 0x239e <__vector_11+0x15a0>
    22e2:	c1 e0       	ldi	r28, 0x01	; 1
    22e4:	d0 e0       	ldi	r29, 0x00	; 0
				{
					//First, convert all values to microamps.
					atmega_uart::tx_string_p(PSTR("s_ua"));
    22e6:	8f e9       	ldi	r24, 0x9F	; 159
    22e8:	92 e0       	ldi	r25, 0x02	; 2
    22ea:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    22ee:	ce 01       	movw	r24, r28
    22f0:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=((s"));
    22f4:	8a e9       	ldi	r24, 0x9A	; 154
    22f6:	92 e0       	ldi	r25, 0x02	; 2
    22f8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    22fc:	ce 01       	movw	r24, r28
    22fe:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					
					//Only have positive and negative values for linear tests.
					if(as.get_test_type() == TEST_LIN)
    2302:	89 e4       	ldi	r24, 0x49	; 73
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
    230a:	81 11       	cpse	r24, r1
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <__vector_11+0x1518>
						atmega_uart::tx_string_p(PSTR("-2047"));
    230e:	84 e9       	ldi	r24, 0x94	; 148
    2310:	92 e0       	ldi	r25, 0x02	; 2
    2312:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					
					atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/res);\r"));
    2316:	80 e8       	ldi	r24, 0x80	; 128
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Next, create time arrays.
					atmega_uart::tx_byte('t');
    231e:	84 e7       	ldi	r24, 0x74	; 116
    2320:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(i);
    2324:	ce 01       	movw	r24, r28
    2326:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=linspace("));
    232a:	85 e7       	ldi	r24, 0x75	; 117
    232c:	92 e0       	ldi	r25, 0x02	; 2
    232e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					if(as.get_test_type() == TEST_SQR)
    2332:	89 e4       	ldi	r24, 0x49	; 73
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	29 f4       	brne	.+10     	; 0x2348 <__vector_11+0x154a>
					{
						atmega_uart::tx_string_p(PSTR("square_vs/1000,square_ve/1000"));
    233e:	87 e5       	ldi	r24, 0x57	; 87
    2340:	92 e0       	ldi	r25, 0x02	; 2
    2342:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    2346:	04 c0       	rjmp	.+8      	; 0x2350 <__vector_11+0x1552>
					}
					else
					{
						atmega_uart::tx_string_p(PSTR("sweep_vs/1000,sweep_ve/1000"));
    2348:	8b e3       	ldi	r24, 0x3B	; 59
    234a:	92 e0       	ldi	r25, 0x02	; 2
    234c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					}
					atmega_uart::tx_string_p(PSTR(",length(s_ua"));
    2350:	8e e2       	ldi	r24, 0x2E	; 46
    2352:	92 e0       	ldi	r25, 0x02	; 2
    2354:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    2358:	ce 01       	movw	r24, r28
    235a:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("));\r"));
    235e:	89 e2       	ldi	r24, 0x29	; 41
    2360:	92 e0       	ldi	r25, 0x02	; 2
    2362:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Then, time reverse every other array.
					if(!(i % 2))
    2366:	c0 fd       	sbrc	r28, 0
    2368:	12 c0       	rjmp	.+36     	; 0x238e <__vector_11+0x1590>
					{
						atmega_uart::tx_string_p(PSTR("s_ua"));
    236a:	84 e2       	ldi	r24, 0x24	; 36
    236c:	92 e0       	ldi	r25, 0x02	; 2
    236e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2372:	ce 01       	movw	r24, r28
    2374:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("=fliplr(s_ua"));
    2378:	87 e1       	ldi	r24, 0x17	; 23
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2380:	ce 01       	movw	r24, r28
    2382:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR(");\r"));
    2386:	83 e1       	ldi	r24, 0x13	; 19
    2388:	92 e0       	ldi	r25, 0x02	; 2
    238a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Quiet Time Sequence');\r"));
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
				}
				
				//Print voltammetry graphs.
				for(uint16_t i = 1; i <= graph_cycles; i++)
    238e:	21 96       	adiw	r28, 0x01	; 1
    2390:	80 91 27 01 	lds	r24, 0x0127
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	8c 17       	cp	r24, r28
    2398:	9d 07       	cpc	r25, r29
    239a:	08 f0       	brcs	.+2      	; 0x239e <__vector_11+0x15a0>
    239c:	a4 cf       	rjmp	.-184    	; 0x22e6 <__vector_11+0x14e8>
						tx_u16_to_ascii(i);
						atmega_uart::tx_string_p(PSTR(");\r"));
					}
				}
				
				atmega_uart::tx_string_p(PSTR("figure(3);\r"));
    239e:	87 e0       	ldi	r24, 0x07	; 7
    23a0:	92 e0       	ldi	r25, 0x02	; 2
    23a2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				
				atmega_uart::tx_string_p(PSTR("plot("));
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	92 e0       	ldi	r25, 0x02	; 2
    23aa:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				for(uint16_t i = 1; i <= graph_cycles; i++)
    23ae:	80 91 27 01 	lds	r24, 0x0127
    23b2:	88 23       	and	r24, r24
    23b4:	d9 f1       	breq	.+118    	; 0x242c <__vector_11+0x162e>
    23b6:	c1 e0       	ldi	r28, 0x01	; 1
    23b8:	d0 e0       	ldi	r29, 0x00	; 0
				{
					atmega_uart::tx_byte('t');
    23ba:	84 e7       	ldi	r24, 0x74	; 116
    23bc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(i);
    23c0:	ce 01       	movw	r24, r28
    23c2:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    23c6:	8c e2       	ldi	r24, 0x2C	; 44
    23c8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					atmega_uart::tx_string_p(PSTR("s_ua"));
    23cc:	8c ef       	ldi	r24, 0xFC	; 252
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(i);
    23d4:	ce 01       	movw	r24, r28
    23d6:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					if(i < graph_cycles)
    23da:	80 91 27 01 	lds	r24, 0x0127
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	c8 17       	cp	r28, r24
    23e2:	d9 07       	cpc	r29, r25
    23e4:	18 f4       	brcc	.+6      	; 0x23ec <__vector_11+0x15ee>
						atmega_uart::tx_byte(',');
    23e6:	8c e2       	ldi	r24, 0x2C	; 44
    23e8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					if(i != 0 && !(i % 5))
    23ec:	20 97       	sbiw	r28, 0x00	; 0
    23ee:	b9 f0       	breq	.+46     	; 0x241e <__vector_11+0x1620>
    23f0:	9e 01       	movw	r18, r28
    23f2:	ad ec       	ldi	r26, 0xCD	; 205
    23f4:	bc ec       	ldi	r27, 0xCC	; 204
    23f6:	0e 94 95 34 	call	0x692a	; 0x692a <__umulhisi3>
    23fa:	96 95       	lsr	r25
    23fc:	87 95       	ror	r24
    23fe:	96 95       	lsr	r25
    2400:	87 95       	ror	r24
    2402:	9c 01       	movw	r18, r24
    2404:	22 0f       	add	r18, r18
    2406:	33 1f       	adc	r19, r19
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	82 0f       	add	r24, r18
    240e:	93 1f       	adc	r25, r19
    2410:	c8 17       	cp	r28, r24
    2412:	d9 07       	cpc	r29, r25
    2414:	21 f4       	brne	.+8      	; 0x241e <__vector_11+0x1620>
						atmega_uart::tx_string_p(PSTR("...\r"));
    2416:	87 ef       	ldi	r24, 0xF7	; 247
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				atmega_uart::tx_string_p(PSTR("figure(3);\r"));
				
				atmega_uart::tx_string_p(PSTR("plot("));
				for(uint16_t i = 1; i <= graph_cycles; i++)
    241e:	21 96       	adiw	r28, 0x01	; 1
    2420:	80 91 27 01 	lds	r24, 0x0127
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	8c 17       	cp	r24, r28
    2428:	9d 07       	cpc	r25, r29
    242a:	38 f6       	brcc	.-114    	; 0x23ba <__vector_11+0x15bc>
					if(i < graph_cycles)
						atmega_uart::tx_byte(',');
					if(i != 0 && !(i % 5))
						atmega_uart::tx_string_p(PSTR("...\r"));
				}
				atmega_uart::tx_string_p(PSTR(");\r"));
    242c:	83 ef       	ldi	r24, 0xF3	; 243
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				
				atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    2434:	8c ed       	ldi	r24, 0xDC	; 220
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				atmega_uart::tx_string_p(PSTR("xlabel('Volts(V)');\r"));
    243c:	87 ec       	ldi	r24, 0xC7	; 199
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				
				//Customize title of graph.
				atmega_uart::tx_string_p(PSTR("title('"));
    2444:	8f eb       	ldi	r24, 0xBF	; 191
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				if(graph_cycles > 1)
    244c:	80 91 27 01 	lds	r24, 0x0127
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	20 f0       	brcs	.+8      	; 0x245c <__vector_11+0x165e>
				{
					atmega_uart::tx_string_p(PSTR("Cyclic "));
    2454:	87 eb       	ldi	r24, 0xB7	; 183
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Determine test type.
				if(as.get_test_type() == TEST_LIN)
    245c:	89 e4       	ldi	r24, 0x49	; 73
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN8as_class13get_test_typeEv>
    2464:	81 11       	cpse	r24, r1
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <__vector_11+0x1674>
				{
					atmega_uart::tx_string_p(PSTR("Linear Sweep"));
    2468:	8a ea       	ldi	r24, 0xAA	; 170
    246a:	91 e0       	ldi	r25, 0x01	; 1
    246c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    2470:	04 c0       	rjmp	.+8      	; 0x247a <__vector_11+0x167c>
				}
				else
				{
					atmega_uart::tx_string_p(PSTR("Square Wave"));
    2472:	8e e9       	ldi	r24, 0x9E	; 158
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				if(graph_cycles > 1)
    247a:	80 91 27 01 	lds	r24, 0x0127
    247e:	82 30       	cpi	r24, 0x02	; 2
    2480:	90 f0       	brcs	.+36     	; 0x24a6 <__vector_11+0x16a8>
				{
					atmega_uart::tx_string_p(PSTR(" ("));
    2482:	8b e9       	ldi	r24, 0x9B	; 155
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(graph_cycles / 2);
    248a:	80 91 27 01 	lds	r24, 0x0127
    248e:	86 95       	lsr	r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR(" "));
    2496:	89 e9       	ldi	r24, 0x99	; 153
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("Cycles)"));
    249e:	81 e9       	ldi	r24, 0x91	; 145
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				}
				atmega_uart::tx_string_p(PSTR("')\r"));
    24a6:	8d e8       	ldi	r24, 0x8D	; 141
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				
				atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    24b6:	09 c0       	rjmp	.+18     	; 0x24ca <__vector_11+0x16cc>
			}
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    24b8:	89 e4       	ldi	r24, 0x49	; 73
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    24c0:	81 11       	cpse	r24, r1
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <__vector_11+0x16cc>
			{
				atmega_uart::tx_byte('\r');
    24c4:	8d e0       	ldi	r24, 0x0D	; 13
    24c6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
			}
			
			as.set_test_state(IDLE);
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	89 e4       	ldi	r24, 0x49	; 73
    24ce:	91 e0       	ldi	r25, 0x01	; 1
    24d0:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
    24d4:	25 c0       	rjmp	.+74     	; 0x2520 <__vector_11+0x1722>
		
		case ABORT:
			//Print message if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    24d6:	89 e4       	ldi	r24, 0x49	; 73
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	29 f4       	brne	.+10     	; 0x24ec <__vector_11+0x16ee>
			{
				atmega_uart::tx_string_p(PSTR("Test Aborted\r"));
    24e2:	84 e7       	ldi	r24, 0x74	; 116
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <__vector_11+0x170c>
			}
			//Print ASCII stream code.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    24ec:	89 e4       	ldi	r24, 0x49	; 73
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    24f4:	81 11       	cpse	r24, r1
    24f6:	05 c0       	rjmp	.+10     	; 0x2502 <__vector_11+0x1704>
			{
				tx_u16_to_ascii(TEST_ABORT);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 ef       	ldi	r25, 0xF0	; 240
    24fc:	0e 94 5f 1a 	call	0x34be	; 0x34be <_Z15tx_u16_to_asciij>
    2500:	04 c0       	rjmp	.+8      	; 0x250a <__vector_11+0x170c>
			}
			//Print binary stream code.	
			else
			{
				atmega_uart::tx_word(TEST_ABORT);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 ef       	ldi	r25, 0xF0	; 240
    2506:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
			}
			
		default://Unrecognized state or abort.
			//Disconnect counter electrode.
			i2c_disconnect_ce();
    250a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_Z17i2c_disconnect_cev>
			//Zero out voltage and return to idle.
			write_dac(ZERO_VOLT);
    250e:	8f ef       	ldi	r24, 0xFF	; 255
    2510:	97 e0       	ldi	r25, 0x07	; 7
    2512:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
			as.set_test_state(IDLE);
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	89 e4       	ldi	r24, 0x49	; 73
    251a:	91 e0       	ldi	r25, 0x01	; 1
    251c:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		break;
	}
	
	PORTB &= ~(1 << PORTB0);
    2520:	28 98       	cbi	0x05, 0	; 5
    2522:	47 c0       	rjmp	.+142    	; 0x25b2 <__vector_11+0x17b4>
				as.set_test_state(RAMP);
			}
			else
			{
				//Disconnect counter electrode.
				i2c_disconnect_ce();
    2524:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_Z17i2c_disconnect_cev>
				//Zero out voltage and return to idle.
				write_dac(ZERO_VOLT);
    2528:	8f ef       	ldi	r24, 0xFF	; 255
    252a:	97 e0       	ldi	r25, 0x07	; 7
    252c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
				
				//Determine how many cycles need to be graphed.
				if(as.get_sweep_cyclic())
    2530:	89 e4       	ldi	r24, 0x49	; 73
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8as_class16get_sweep_cyclicEv>
    2538:	81 11       	cpse	r24, r1
    253a:	a9 ca       	rjmp	.-2734   	; 0x1a8e <__vector_11+0xc90>
    253c:	ad ca       	rjmp	.-2726   	; 0x1a98 <__vector_11+0xc9a>
			this_cyc++;
			
			if(as.get_sweep_cyclic() && (this_cyc <= tot_cyc))
			{
				//Change slope.
				slope ^= 0x01;
    253e:	90 91 30 01 	lds	r25, 0x0130
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	89 27       	eor	r24, r25
    2546:	80 93 30 01 	sts	0x0130, r24
			
				//Swap start and end voltages.
				temp = sv;
    254a:	60 91 39 01 	lds	r22, 0x0139
    254e:	70 91 3a 01 	lds	r23, 0x013A
    2552:	80 91 3b 01 	lds	r24, 0x013B
    2556:	90 91 3c 01 	lds	r25, 0x013C
    255a:	0e 94 a7 32 	call	0x654e	; 0x654e <__fixsfsi>
    255e:	60 93 28 01 	sts	0x0128, r22
    2562:	70 93 29 01 	sts	0x0129, r23
    2566:	80 93 2a 01 	sts	0x012A, r24
    256a:	90 93 2b 01 	sts	0x012B, r25
				sv = ev;
    256e:	c0 90 35 01 	lds	r12, 0x0135
    2572:	d0 90 36 01 	lds	r13, 0x0136
    2576:	e0 90 37 01 	lds	r14, 0x0137
    257a:	f0 90 38 01 	lds	r15, 0x0138
    257e:	c0 92 39 01 	sts	0x0139, r12
    2582:	d0 92 3a 01 	sts	0x013A, r13
    2586:	e0 92 3b 01 	sts	0x013B, r14
    258a:	f0 92 3c 01 	sts	0x013C, r15
				ev = temp;
    258e:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__floatsisf>
    2592:	60 93 35 01 	sts	0x0135, r22
    2596:	70 93 36 01 	sts	0x0136, r23
    259a:	80 93 37 01 	sts	0x0137, r24
    259e:	90 93 38 01 	sts	0x0138, r25
				
				//Print initial stream data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    25a2:	89 e4       	ldi	r24, 0x49	; 73
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <__vector_11+0x17b2>
    25ae:	53 ca       	rjmp	.-2906   	; 0x1a56 <__vector_11+0xc58>
    25b0:	45 ca       	rjmp	.-2934   	; 0x1a3c <__vector_11+0xc3e>
			as.set_test_state(IDLE);
		break;
	}
	
	PORTB &= ~(1 << PORTB0);
}
    25b2:	ff 91       	pop	r31
    25b4:	ef 91       	pop	r30
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	bf 91       	pop	r27
    25bc:	af 91       	pop	r26
    25be:	9f 91       	pop	r25
    25c0:	8f 91       	pop	r24
    25c2:	7f 91       	pop	r23
    25c4:	6f 91       	pop	r22
    25c6:	5f 91       	pop	r21
    25c8:	4f 91       	pop	r20
    25ca:	3f 91       	pop	r19
    25cc:	2f 91       	pop	r18
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	0f 90       	pop	r0
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	0f 90       	pop	r0
    25e4:	1f 90       	pop	r1
    25e6:	18 95       	reti

000025e8 <_GLOBAL__sub_I_ms_counter>:
#include "helper.h"
#include "AquaSift_V0011.h"

uint32_t ms_counter;
uint8_t bin_timeout;
as_class as;
    25e8:	89 e4       	ldi	r24, 0x49	; 73
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN8as_classC1Ev>
    25f0:	08 95       	ret

000025f2 <_ZN8as_classC1Ev>:
#include <avr/io.h>
#include "as_class.h"

//Constructor that initializes default values of the test parameters.
as_class::as_class() : tx_mode(TX_MODE_MATLAB), num_electrodes(ELEC_3), adc_rate(2), 
    25f2:	fc 01       	movw	r30, r24
tia_res_tap(10), tia_cap_mask(0), dep_enable(true), dep_time(60000), dep_volt(-500),
quiet_time(0), dep_rec(true), sweep_volt_start(-500), sweep_volt_end(500), 
sweep_rate(10), sweep_cyclic(false), sweep_cycles(5), square_volt_start(-500),
square_volt_end(500), square_amp(25), square_inc(10), square_period(10),
arb_cyclic(false), arb_cycles(5), soft_filt(false), soft_sel(1), test_state(IDLE){}
    25f4:	a1 e0       	ldi	r26, 0x01	; 1
    25f6:	a0 83       	st	Z, r26
    25f8:	a1 83       	std	Z+1, r26	; 0x01
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	93 83       	std	Z+3, r25	; 0x03
    2600:	82 83       	std	Z+2, r24	; 0x02
    2602:	8a e0       	ldi	r24, 0x0A	; 10
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	95 83       	std	Z+5, r25	; 0x05
    2608:	84 83       	std	Z+4, r24	; 0x04
    260a:	16 82       	std	Z+6, r1	; 0x06
    260c:	a7 83       	std	Z+7, r26	; 0x07
    260e:	40 e6       	ldi	r20, 0x60	; 96
    2610:	5a ee       	ldi	r21, 0xEA	; 234
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	40 87       	std	Z+8, r20	; 0x08
    2618:	51 87       	std	Z+9, r21	; 0x09
    261a:	62 87       	std	Z+10, r22	; 0x0a
    261c:	73 87       	std	Z+11, r23	; 0x0b
    261e:	2c e0       	ldi	r18, 0x0C	; 12
    2620:	3e ef       	ldi	r19, 0xFE	; 254
    2622:	35 87       	std	Z+13, r19	; 0x0d
    2624:	24 87       	std	Z+12, r18	; 0x0c
    2626:	16 86       	std	Z+14, r1	; 0x0e
    2628:	17 86       	std	Z+15, r1	; 0x0f
    262a:	10 8a       	std	Z+16, r1	; 0x10
    262c:	11 8a       	std	Z+17, r1	; 0x11
    262e:	a2 8b       	std	Z+18, r26	; 0x12
    2630:	34 8b       	std	Z+20, r19	; 0x14
    2632:	23 8b       	std	Z+19, r18	; 0x13
    2634:	44 ef       	ldi	r20, 0xF4	; 244
    2636:	51 e0       	ldi	r21, 0x01	; 1
    2638:	56 8b       	std	Z+22, r21	; 0x16
    263a:	45 8b       	std	Z+21, r20	; 0x15
    263c:	90 8f       	std	Z+24, r25	; 0x18
    263e:	87 8b       	std	Z+23, r24	; 0x17
    2640:	11 8e       	std	Z+25, r1	; 0x19
    2642:	65 e0       	ldi	r22, 0x05	; 5
    2644:	62 8f       	std	Z+26, r22	; 0x1a
    2646:	34 8f       	std	Z+28, r19	; 0x1c
    2648:	23 8f       	std	Z+27, r18	; 0x1b
    264a:	56 8f       	std	Z+30, r21	; 0x1e
    264c:	45 8f       	std	Z+29, r20	; 0x1d
    264e:	29 e1       	ldi	r18, 0x19	; 25
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	30 a3       	std	Z+32, r19	; 0x20
    2654:	27 8f       	std	Z+31, r18	; 0x1f
    2656:	92 a3       	std	Z+34, r25	; 0x22
    2658:	81 a3       	std	Z+33, r24	; 0x21
    265a:	94 a3       	std	Z+36, r25	; 0x24
    265c:	83 a3       	std	Z+35, r24	; 0x23
    265e:	15 a2       	std	Z+37, r1	; 0x25
    2660:	66 a3       	std	Z+38, r22	; 0x26
    2662:	17 a2       	std	Z+39, r1	; 0x27
    2664:	a0 a7       	std	Z+40, r26	; 0x28
    2666:	11 a6       	std	Z+41, r1	; 0x29
    2668:	08 95       	ret

0000266a <_ZN8as_class11set_tx_modeE8tx_modes>:
	
/*************************************************Main Menu Functions*************************************************/
//Set transmission mode.
uint8_t as_class::set_tx_mode(tx_modes tx_m)
{
	tx_mode = tx_m;
    266a:	fc 01       	movw	r30, r24
    266c:	60 83       	st	Z, r22
	return AS_NO_ERR;
}
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	08 95       	ret

00002672 <_ZN8as_class11get_tx_modeEv>:

//Get transmission mode.
tx_modes as_class::get_tx_mode()
{
	return tx_mode;
}
    2672:	fc 01       	movw	r30, r24
    2674:	80 81       	ld	r24, Z
    2676:	08 95       	ret

00002678 <_ZN8as_class18set_num_electrodesE9num_elecs>:

//Set number of electrodes.
uint8_t as_class::set_num_electrodes(num_elecs num_e)
{
	num_electrodes = num_e;
    2678:	fc 01       	movw	r30, r24
    267a:	61 83       	std	Z+1, r22	; 0x01
	return AS_NO_ERR;
}
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	08 95       	ret

00002680 <_ZN8as_class18get_num_electrodesEv>:

//Get number of electrodes.
num_elecs as_class::get_num_electrodes()
{
	return num_electrodes;
}
    2680:	fc 01       	movw	r30, r24
    2682:	81 81       	ldd	r24, Z+1	; 0x01
    2684:	08 95       	ret

00002686 <_ZN8as_class12set_adc_rateEj>:

//Set ADC sample rate.
uint8_t as_class::set_adc_rate(uint16_t adc_r)
{
	if(adc_r > ADC_RATE_MAX)
    2686:	69 3e       	cpi	r22, 0xE9	; 233
    2688:	23 e0       	ldi	r18, 0x03	; 3
    268a:	72 07       	cpc	r23, r18
    268c:	40 f4       	brcc	.+16     	; 0x269e <_ZN8as_class12set_adc_rateEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(adc_r < ADC_RATE_MIN)
    268e:	61 15       	cp	r22, r1
    2690:	71 05       	cpc	r23, r1
    2692:	39 f0       	breq	.+14     	; 0x26a2 <_ZN8as_class12set_adc_rateEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	adc_rate = adc_r;
    2694:	fc 01       	movw	r30, r24
    2696:	73 83       	std	Z+3, r23	; 0x03
    2698:	62 83       	std	Z+2, r22	; 0x02
	return AS_NO_ERR;
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	08 95       	ret
//Set ADC sample rate.
uint8_t as_class::set_adc_rate(uint16_t adc_r)
{
	if(adc_r > ADC_RATE_MAX)
	{
		return AS_VALUE_HIGH;
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	08 95       	ret
	}
	
	if(adc_r < ADC_RATE_MIN)
	{
		return AS_VALUE_LOW;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	adc_rate = adc_r;
	return AS_NO_ERR;
}
    26a4:	08 95       	ret

000026a6 <_ZN8as_class12get_adc_rateEv>:

//Get ADC sample rate.
uint16_t as_class::get_adc_rate()
{
	return adc_rate;
}
    26a6:	fc 01       	movw	r30, r24
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	08 95       	ret

000026ae <_ZN8as_class15set_tia_res_tapEj>:

/****************************************************TIA Functions****************************************************/
//Set TIA resistor tap value.
uint8_t as_class::set_tia_res_tap(uint16_t tia_res_t)
{
	if(tia_res_t > TAP_MAX)
    26ae:	61 15       	cp	r22, r1
    26b0:	24 e0       	ldi	r18, 0x04	; 4
    26b2:	72 07       	cpc	r23, r18
    26b4:	40 f5       	brcc	.+80     	; 0x2706 <_ZN8as_class15set_tia_res_tapEj+0x58>
	{
		return AS_VALUE_HIGH;
	}
	
	if(tia_res_t < TAP_MIN)
    26b6:	61 15       	cp	r22, r1
    26b8:	71 05       	cpc	r23, r1
    26ba:	39 f1       	breq	.+78     	; 0x270a <_ZN8as_class15set_tia_res_tapEj+0x5c>
	{
		return AS_VALUE_LOW;
	}
	
	//Hack.  Remove later!
	if(tia_res_t < 5)
    26bc:	65 30       	cpi	r22, 0x05	; 5
    26be:	71 05       	cpc	r23, r1
    26c0:	38 f4       	brcc	.+14     	; 0x26d0 <_ZN8as_class15set_tia_res_tapEj+0x22>
		tia_res_tap = 1;
    26c2:	21 e0       	ldi	r18, 0x01	; 1
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	fc 01       	movw	r30, r24
    26c8:	35 83       	std	Z+5, r19	; 0x05
    26ca:	24 83       	std	Z+4, r18	; 0x04
		tia_res_tap = 102;
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	08 95       	ret
	}
	
	//Hack.  Remove later!
	if(tia_res_t < 5)
		tia_res_tap = 1;
	else if(tia_res_t < 50)
    26d0:	62 33       	cpi	r22, 0x32	; 50
    26d2:	71 05       	cpc	r23, r1
    26d4:	38 f4       	brcc	.+14     	; 0x26e4 <_ZN8as_class15set_tia_res_tapEj+0x36>
		tia_res_tap = 10;
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	fc 01       	movw	r30, r24
    26dc:	35 83       	std	Z+5, r19	; 0x05
    26de:	24 83       	std	Z+4, r18	; 0x04
		tia_res_tap = 102;
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	08 95       	ret
	//Hack.  Remove later!
	if(tia_res_t < 5)
		tia_res_tap = 1;
	else if(tia_res_t < 50)
		tia_res_tap = 10;
	else if(tia_res_t < 500)
    26e4:	64 3f       	cpi	r22, 0xF4	; 244
    26e6:	71 40       	sbci	r23, 0x01	; 1
    26e8:	38 f4       	brcc	.+14     	; 0x26f8 <_ZN8as_class15set_tia_res_tapEj+0x4a>
		tia_res_tap = 102;
    26ea:	26 e6       	ldi	r18, 0x66	; 102
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	fc 01       	movw	r30, r24
    26f0:	35 83       	std	Z+5, r19	; 0x05
    26f2:	24 83       	std	Z+4, r18	; 0x04
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	08 95       	ret
	else if(tia_res_t < 50)
		tia_res_tap = 10;
	else if(tia_res_t < 500)
		tia_res_tap = 102;
	else
		tia_res_tap = 1023;
    26f8:	2f ef       	ldi	r18, 0xFF	; 255
    26fa:	33 e0       	ldi	r19, 0x03	; 3
    26fc:	fc 01       	movw	r30, r24
    26fe:	35 83       	std	Z+5, r19	; 0x05
    2700:	24 83       	std	Z+4, r18	; 0x04
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	08 95       	ret
//Set TIA resistor tap value.
uint8_t as_class::set_tia_res_tap(uint16_t tia_res_t)
{
	if(tia_res_t > TAP_MAX)
	{
		return AS_VALUE_HIGH;
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	08 95       	ret
	}
	
	if(tia_res_t < TAP_MIN)
	{
		return AS_VALUE_LOW;
    270a:	81 e0       	ldi	r24, 0x01	; 1
	else
		tia_res_tap = 1023;
		
	//tia_res_tap = tia_res_t;
	return AS_NO_ERR;
}
    270c:	08 95       	ret

0000270e <_ZN8as_class15get_tia_res_tapEv>:

//Get TIA resistor tap value.
uint16_t as_class::get_tia_res_tap()
{
	return tia_res_tap;
}
    270e:	fc 01       	movw	r30, r24
    2710:	84 81       	ldd	r24, Z+4	; 0x04
    2712:	95 81       	ldd	r25, Z+5	; 0x05
    2714:	08 95       	ret

00002716 <_ZN8as_class16set_tia_cap_maskEh>:

//Set TIA capacitor 6-bit flag value.
uint8_t as_class::set_tia_cap_mask(uint8_t tia_cap_m)
{
	if(tia_cap_m > CAP_MAX)
    2716:	60 34       	cpi	r22, 0x40	; 64
    2718:	20 f4       	brcc	.+8      	; 0x2722 <_ZN8as_class16set_tia_cap_maskEh+0xc>
	if(tia_cap_m < CAP_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	tia_cap_mask = tia_cap_m;
    271a:	fc 01       	movw	r30, r24
    271c:	66 83       	std	Z+6, r22	; 0x06
	return AS_NO_ERR;
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	08 95       	ret
//Set TIA capacitor 6-bit flag value.
uint8_t as_class::set_tia_cap_mask(uint8_t tia_cap_m)
{
	if(tia_cap_m > CAP_MAX)
	{
		return AS_VALUE_HIGH;
    2722:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	tia_cap_mask = tia_cap_m;
	return AS_NO_ERR;
}
    2724:	08 95       	ret

00002726 <_ZN8as_class16get_tia_cap_maskEv>:

//Get TIA capacitor 6-bit flag value.
uint8_t as_class::get_tia_cap_mask()
{
	return tia_cap_mask;
}
    2726:	fc 01       	movw	r30, r24
    2728:	86 81       	ldd	r24, Z+6	; 0x06
    272a:	08 95       	ret

0000272c <_ZN8as_class14set_dep_enableEb>:

/************************************************Deposition Functions*************************************************/
//Set deposition enable.
uint8_t as_class::set_dep_enable(bool dep_e)
{
	dep_enable = dep_e;
    272c:	fc 01       	movw	r30, r24
    272e:	67 83       	std	Z+7, r22	; 0x07
	return AS_NO_ERR;
}
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	08 95       	ret

00002734 <_ZN8as_class14get_dep_enableEv>:

//Get deposition enable.
bool as_class::get_dep_enable()
{
	return dep_enable;
}
    2734:	fc 01       	movw	r30, r24
    2736:	87 81       	ldd	r24, Z+7	; 0x07
    2738:	08 95       	ret

0000273a <_ZN8as_class12set_dep_timeEm>:

//Set deposition time.
uint8_t as_class::set_dep_time(uint32_t dep_t)
{
	if(dep_t > DEP_TIME_MAX)
    273a:	41 30       	cpi	r20, 0x01	; 1
    273c:	25 e3       	ldi	r18, 0x35	; 53
    273e:	52 07       	cpc	r21, r18
    2740:	2c e0       	ldi	r18, 0x0C	; 12
    2742:	62 07       	cpc	r22, r18
    2744:	71 05       	cpc	r23, r1
    2746:	60 f4       	brcc	.+24     	; 0x2760 <_ZN8as_class12set_dep_timeEm+0x26>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dep_t < DEP_TIME_MIN)
    2748:	41 15       	cp	r20, r1
    274a:	51 05       	cpc	r21, r1
    274c:	61 05       	cpc	r22, r1
    274e:	71 05       	cpc	r23, r1
    2750:	49 f0       	breq	.+18     	; 0x2764 <_ZN8as_class12set_dep_timeEm+0x2a>
	{
		return AS_VALUE_LOW;
	}
	
	dep_time = dep_t;
    2752:	fc 01       	movw	r30, r24
    2754:	40 87       	std	Z+8, r20	; 0x08
    2756:	51 87       	std	Z+9, r21	; 0x09
    2758:	62 87       	std	Z+10, r22	; 0x0a
    275a:	73 87       	std	Z+11, r23	; 0x0b
	return AS_NO_ERR;
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	08 95       	ret
//Set deposition time.
uint8_t as_class::set_dep_time(uint32_t dep_t)
{
	if(dep_t > DEP_TIME_MAX)
	{
		return AS_VALUE_HIGH;
    2760:	82 e0       	ldi	r24, 0x02	; 2
    2762:	08 95       	ret
	}
	
	if(dep_t < DEP_TIME_MIN)
	{
		return AS_VALUE_LOW;
    2764:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dep_time = dep_t;
	return AS_NO_ERR;
}
    2766:	08 95       	ret

00002768 <_ZN8as_class12get_dep_timeEv>:

//Get deposition time.
uint32_t as_class::get_dep_time()
{
	return dep_time;
    2768:	fc 01       	movw	r30, r24
    276a:	60 85       	ldd	r22, Z+8	; 0x08
    276c:	71 85       	ldd	r23, Z+9	; 0x09
    276e:	82 85       	ldd	r24, Z+10	; 0x0a
    2770:	93 85       	ldd	r25, Z+11	; 0x0b
}
    2772:	08 95       	ret

00002774 <_ZN8as_class12set_dep_voltEi>:

//Set deposition voltage.
uint8_t as_class::set_dep_volt(int16_t dep_v)
{
	if(dep_v > DEP_VOLT_MAX)
    2774:	63 37       	cpi	r22, 0x73	; 115
    2776:	26 e0       	ldi	r18, 0x06	; 6
    2778:	72 07       	cpc	r23, r18
    277a:	4c f4       	brge	.+18     	; 0x278e <_ZN8as_class12set_dep_voltEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dep_v < DEP_VOLT_MIN)
    277c:	6e 38       	cpi	r22, 0x8E	; 142
    277e:	e9 ef       	ldi	r30, 0xF9	; 249
    2780:	7e 07       	cpc	r23, r30
    2782:	3c f0       	brlt	.+14     	; 0x2792 <_ZN8as_class12set_dep_voltEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	dep_volt = dep_v;
    2784:	fc 01       	movw	r30, r24
    2786:	75 87       	std	Z+13, r23	; 0x0d
    2788:	64 87       	std	Z+12, r22	; 0x0c
	return AS_NO_ERR;
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	08 95       	ret
//Set deposition voltage.
uint8_t as_class::set_dep_volt(int16_t dep_v)
{
	if(dep_v > DEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	08 95       	ret
	}
	
	if(dep_v < DEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    2792:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dep_volt = dep_v;
	return AS_NO_ERR;
}
    2794:	08 95       	ret

00002796 <_ZN8as_class12get_dep_voltEv>:

//Get deposition voltage.
int as_class::get_dep_volt()
{
	return dep_volt;
}
    2796:	fc 01       	movw	r30, r24
    2798:	84 85       	ldd	r24, Z+12	; 0x0c
    279a:	95 85       	ldd	r25, Z+13	; 0x0d
    279c:	08 95       	ret

0000279e <_ZN8as_class14set_quiet_timeEm>:

//Set quiet time.
uint8_t as_class::set_quiet_time(uint32_t quiet_t)
{
	if(quiet_t > QUIET_TIME_MAX)
    279e:	41 30       	cpi	r20, 0x01	; 1
    27a0:	25 e3       	ldi	r18, 0x35	; 53
    27a2:	52 07       	cpc	r21, r18
    27a4:	2c e0       	ldi	r18, 0x0C	; 12
    27a6:	62 07       	cpc	r22, r18
    27a8:	71 05       	cpc	r23, r1
    27aa:	38 f4       	brcc	.+14     	; 0x27ba <_ZN8as_class14set_quiet_timeEm+0x1c>
	if(quiet_t < QUIET_TIME_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	quiet_time = quiet_t;
    27ac:	fc 01       	movw	r30, r24
    27ae:	46 87       	std	Z+14, r20	; 0x0e
    27b0:	57 87       	std	Z+15, r21	; 0x0f
    27b2:	60 8b       	std	Z+16, r22	; 0x10
    27b4:	71 8b       	std	Z+17, r23	; 0x11
	return AS_NO_ERR;
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	08 95       	ret
//Set quiet time.
uint8_t as_class::set_quiet_time(uint32_t quiet_t)
{
	if(quiet_t > QUIET_TIME_MAX)
	{
		return AS_VALUE_HIGH;
    27ba:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	quiet_time = quiet_t;
	return AS_NO_ERR;
}
    27bc:	08 95       	ret

000027be <_ZN8as_class14get_quiet_timeEv>:

//Get quiet time.
uint32_t as_class::get_quiet_time()
{
	return quiet_time;
    27be:	fc 01       	movw	r30, r24
    27c0:	66 85       	ldd	r22, Z+14	; 0x0e
    27c2:	77 85       	ldd	r23, Z+15	; 0x0f
    27c4:	80 89       	ldd	r24, Z+16	; 0x10
    27c6:	91 89       	ldd	r25, Z+17	; 0x11
}
    27c8:	08 95       	ret

000027ca <_ZN8as_class11set_dep_recEb>:

//Set if deposition voltage is to be streamed.
uint8_t as_class::set_dep_rec(bool dep_r)
{
	dep_rec = dep_r;
    27ca:	fc 01       	movw	r30, r24
    27cc:	62 8b       	std	Z+18, r22	; 0x12
	return AS_NO_ERR;
}
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	08 95       	ret

000027d2 <_ZN8as_class11get_dep_recEv>:

//Get if deposition voltage is to be streamed.
bool as_class::get_dep_rec()
{
	return dep_rec;
}
    27d2:	fc 01       	movw	r30, r24
    27d4:	82 89       	ldd	r24, Z+18	; 0x12
    27d6:	08 95       	ret

000027d8 <_ZN8as_class20set_sweep_volt_startEi>:

/***********************************************Linear Sweep Functions************************************************/
//Set starting sweep voltage.
uint8_t as_class::set_sweep_volt_start(int16_t sweep_vs)
{
	if(sweep_vs > SWEEP_VOLT_MAX)
    27d8:	63 37       	cpi	r22, 0x73	; 115
    27da:	26 e0       	ldi	r18, 0x06	; 6
    27dc:	72 07       	cpc	r23, r18
    27de:	4c f4       	brge	.+18     	; 0x27f2 <_ZN8as_class20set_sweep_volt_startEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_vs < SWEEP_VOLT_MIN)
    27e0:	6e 38       	cpi	r22, 0x8E	; 142
    27e2:	e9 ef       	ldi	r30, 0xF9	; 249
    27e4:	7e 07       	cpc	r23, r30
    27e6:	3c f0       	brlt	.+14     	; 0x27f6 <_ZN8as_class20set_sweep_volt_startEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_volt_start = sweep_vs;
    27e8:	fc 01       	movw	r30, r24
    27ea:	74 8b       	std	Z+20, r23	; 0x14
    27ec:	63 8b       	std	Z+19, r22	; 0x13
	return AS_NO_ERR;
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	08 95       	ret
//Set starting sweep voltage.
uint8_t as_class::set_sweep_volt_start(int16_t sweep_vs)
{
	if(sweep_vs > SWEEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	08 95       	ret
	}
	
	if(sweep_vs < SWEEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_volt_start = sweep_vs;
	return AS_NO_ERR;
}
    27f8:	08 95       	ret

000027fa <_ZN8as_class20get_sweep_volt_startEv>:

//Get starting sweep voltage.
int as_class::get_sweep_volt_start()
{
	return sweep_volt_start;
}
    27fa:	fc 01       	movw	r30, r24
    27fc:	83 89       	ldd	r24, Z+19	; 0x13
    27fe:	94 89       	ldd	r25, Z+20	; 0x14
    2800:	08 95       	ret

00002802 <_ZN8as_class18set_sweep_volt_endEi>:

//Set ending sweep voltage.
uint8_t as_class::set_sweep_volt_end(int16_t sweep_ve)
{
	if(sweep_ve > SWEEP_VOLT_MAX)
    2802:	63 37       	cpi	r22, 0x73	; 115
    2804:	26 e0       	ldi	r18, 0x06	; 6
    2806:	72 07       	cpc	r23, r18
    2808:	4c f4       	brge	.+18     	; 0x281c <_ZN8as_class18set_sweep_volt_endEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_ve < SWEEP_VOLT_MIN)
    280a:	6e 38       	cpi	r22, 0x8E	; 142
    280c:	e9 ef       	ldi	r30, 0xF9	; 249
    280e:	7e 07       	cpc	r23, r30
    2810:	3c f0       	brlt	.+14     	; 0x2820 <_ZN8as_class18set_sweep_volt_endEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_volt_end = sweep_ve;
    2812:	fc 01       	movw	r30, r24
    2814:	76 8b       	std	Z+22, r23	; 0x16
    2816:	65 8b       	std	Z+21, r22	; 0x15
	return AS_NO_ERR;
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	08 95       	ret
//Set ending sweep voltage.
uint8_t as_class::set_sweep_volt_end(int16_t sweep_ve)
{
	if(sweep_ve > SWEEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	08 95       	ret
	}
	
	if(sweep_ve < SWEEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    2820:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_volt_end = sweep_ve;
	return AS_NO_ERR;
}
    2822:	08 95       	ret

00002824 <_ZN8as_class18get_sweep_volt_endEv>:

//Get ending sweep voltage.
int as_class::get_sweep_volt_end()
{
	return sweep_volt_end;
}
    2824:	fc 01       	movw	r30, r24
    2826:	85 89       	ldd	r24, Z+21	; 0x15
    2828:	96 89       	ldd	r25, Z+22	; 0x16
    282a:	08 95       	ret

0000282c <_ZN8as_class14set_sweep_rateEj>:

//Set sweep rate.
uint8_t as_class::set_sweep_rate(uint16_t sweep_r)
{
	if(sweep_r > SWEEP_RATE_MAX)
    282c:	61 3d       	cpi	r22, 0xD1	; 209
    282e:	27 e0       	ldi	r18, 0x07	; 7
    2830:	72 07       	cpc	r23, r18
    2832:	40 f4       	brcc	.+16     	; 0x2844 <_ZN8as_class14set_sweep_rateEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_r < SWEEP_RATE_MIN)
    2834:	61 15       	cp	r22, r1
    2836:	71 05       	cpc	r23, r1
    2838:	39 f0       	breq	.+14     	; 0x2848 <_ZN8as_class14set_sweep_rateEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_rate = sweep_r;
    283a:	fc 01       	movw	r30, r24
    283c:	70 8f       	std	Z+24, r23	; 0x18
    283e:	67 8b       	std	Z+23, r22	; 0x17
	return AS_NO_ERR;
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	08 95       	ret
//Set sweep rate.
uint8_t as_class::set_sweep_rate(uint16_t sweep_r)
{
	if(sweep_r > SWEEP_RATE_MAX)
	{
		return AS_VALUE_HIGH;
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	08 95       	ret
	}
	
	if(sweep_r < SWEEP_RATE_MIN)
	{
		return AS_VALUE_LOW;
    2848:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_rate = sweep_r;
	return AS_NO_ERR;
}
    284a:	08 95       	ret

0000284c <_ZN8as_class14get_sweep_rateEv>:

//Get sweep rate.
uint16_t as_class::get_sweep_rate()
{
	return sweep_rate;
}
    284c:	fc 01       	movw	r30, r24
    284e:	87 89       	ldd	r24, Z+23	; 0x17
    2850:	90 8d       	ldd	r25, Z+24	; 0x18
    2852:	08 95       	ret

00002854 <_ZN8as_class16set_sweep_cyclicEb>:

//Set if sweep is cyclic.
uint8_t as_class::set_sweep_cyclic(bool sweep_c)
{
	sweep_cyclic = sweep_c;
    2854:	fc 01       	movw	r30, r24
    2856:	61 8f       	std	Z+25, r22	; 0x19
	return AS_NO_ERR;
}
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	08 95       	ret

0000285c <_ZN8as_class16get_sweep_cyclicEv>:

//Get if sweep is cyclic.
bool as_class::get_sweep_cyclic()
{
	return sweep_cyclic;
}
    285c:	fc 01       	movw	r30, r24
    285e:	81 8d       	ldd	r24, Z+25	; 0x19
    2860:	08 95       	ret

00002862 <_ZN8as_class16set_sweep_cyclesEh>:

//Set number of sweep cycles.
uint8_t as_class::set_sweep_cycles(uint8_t sweep_cs)
{
	if(sweep_cs > SWEEP_CYCLES_MAX)
    2862:	65 36       	cpi	r22, 0x65	; 101
    2864:	30 f4       	brcc	.+12     	; 0x2872 <_ZN8as_class16set_sweep_cyclesEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_cs < SWEEP_CYCLES_MIN)
    2866:	66 23       	and	r22, r22
    2868:	31 f0       	breq	.+12     	; 0x2876 <_ZN8as_class16set_sweep_cyclesEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_cycles = sweep_cs;
    286a:	fc 01       	movw	r30, r24
    286c:	62 8f       	std	Z+26, r22	; 0x1a
	return AS_NO_ERR;
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	08 95       	ret
//Set number of sweep cycles.
uint8_t as_class::set_sweep_cycles(uint8_t sweep_cs)
{
	if(sweep_cs > SWEEP_CYCLES_MAX)
	{
		return AS_VALUE_HIGH;
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	08 95       	ret
	}
	
	if(sweep_cs < SWEEP_CYCLES_MIN)
	{
		return AS_VALUE_LOW;
    2876:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_cycles = sweep_cs;
	return AS_NO_ERR;
}
    2878:	08 95       	ret

0000287a <_ZN8as_class16get_sweep_cyclesEv>:

//Get number of sweep cycles.
uint8_t as_class::get_sweep_cycles()
{
	return sweep_cycles;
}
    287a:	fc 01       	movw	r30, r24
    287c:	82 8d       	ldd	r24, Z+26	; 0x1a
    287e:	08 95       	ret

00002880 <_ZN8as_class21set_square_volt_startEi>:

/************************************************Square Wave Functions************************************************/
//Set square wave start voltage.
uint8_t as_class::set_square_volt_start(int16_t square_volt_s)
{
	if(square_volt_s > SQUARE_VOLT_MAX)
    2880:	63 37       	cpi	r22, 0x73	; 115
    2882:	26 e0       	ldi	r18, 0x06	; 6
    2884:	72 07       	cpc	r23, r18
    2886:	4c f4       	brge	.+18     	; 0x289a <_ZN8as_class21set_square_volt_startEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(square_volt_s < SQUARE_VOLT_MIN)
    2888:	6e 38       	cpi	r22, 0x8E	; 142
    288a:	e9 ef       	ldi	r30, 0xF9	; 249
    288c:	7e 07       	cpc	r23, r30
    288e:	3c f0       	brlt	.+14     	; 0x289e <_ZN8as_class21set_square_volt_startEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	square_volt_start = square_volt_s;
    2890:	fc 01       	movw	r30, r24
    2892:	74 8f       	std	Z+28, r23	; 0x1c
    2894:	63 8f       	std	Z+27, r22	; 0x1b
	return AS_NO_ERR;
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	08 95       	ret
//Set square wave start voltage.
uint8_t as_class::set_square_volt_start(int16_t square_volt_s)
{
	if(square_volt_s > SQUARE_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	08 95       	ret
	}
	
	if(square_volt_s < SQUARE_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    289e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	square_volt_start = square_volt_s;
	return AS_NO_ERR;
}
    28a0:	08 95       	ret

000028a2 <_ZN8as_class21get_square_volt_startEv>:

//Get square wave start voltage.
int as_class::get_square_volt_start()
{
	return square_volt_start;
}
    28a2:	fc 01       	movw	r30, r24
    28a4:	83 8d       	ldd	r24, Z+27	; 0x1b
    28a6:	94 8d       	ldd	r25, Z+28	; 0x1c
    28a8:	08 95       	ret

000028aa <_ZN8as_class19set_square_volt_endEi>:

//Set square wave end voltage.
uint8_t as_class::set_square_volt_end(int16_t square_volt_e)
{
	if(square_volt_e > SQUARE_VOLT_MAX)
    28aa:	63 37       	cpi	r22, 0x73	; 115
    28ac:	26 e0       	ldi	r18, 0x06	; 6
    28ae:	72 07       	cpc	r23, r18
    28b0:	4c f4       	brge	.+18     	; 0x28c4 <_ZN8as_class19set_square_volt_endEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(square_volt_e < SQUARE_VOLT_MIN)
    28b2:	6e 38       	cpi	r22, 0x8E	; 142
    28b4:	e9 ef       	ldi	r30, 0xF9	; 249
    28b6:	7e 07       	cpc	r23, r30
    28b8:	3c f0       	brlt	.+14     	; 0x28c8 <_ZN8as_class19set_square_volt_endEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	square_volt_end = square_volt_e;
    28ba:	fc 01       	movw	r30, r24
    28bc:	76 8f       	std	Z+30, r23	; 0x1e
    28be:	65 8f       	std	Z+29, r22	; 0x1d
	return AS_NO_ERR;
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	08 95       	ret
//Set square wave end voltage.
uint8_t as_class::set_square_volt_end(int16_t square_volt_e)
{
	if(square_volt_e > SQUARE_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	08 95       	ret
	}
	
	if(square_volt_e < SQUARE_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	square_volt_end = square_volt_e;
	return AS_NO_ERR;
}
    28ca:	08 95       	ret

000028cc <_ZN8as_class19get_square_volt_endEv>:

//Set square wave end voltage.
int as_class::get_square_volt_end()
{
	return square_volt_end;
}
    28cc:	fc 01       	movw	r30, r24
    28ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    28d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    28d2:	08 95       	ret

000028d4 <_ZN8as_class14set_square_ampEj>:

//Set square wave amplitude.
uint8_t as_class::set_square_amp(uint16_t square_a)
{
	if(square_a > SQUARE_AMP_MAX)
    28d4:	63 37       	cpi	r22, 0x73	; 115
    28d6:	26 e0       	ldi	r18, 0x06	; 6
    28d8:	72 07       	cpc	r23, r18
    28da:	28 f4       	brcc	.+10     	; 0x28e6 <_ZN8as_class14set_square_ampEj+0x12>
	if(square_a < SQUARE_AMP_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	square_amp = square_a;
    28dc:	fc 01       	movw	r30, r24
    28de:	70 a3       	std	Z+32, r23	; 0x20
    28e0:	67 8f       	std	Z+31, r22	; 0x1f
	return AS_NO_ERR;
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	08 95       	ret
//Set square wave amplitude.
uint8_t as_class::set_square_amp(uint16_t square_a)
{
	if(square_a > SQUARE_AMP_MAX)
	{
		return AS_VALUE_HIGH;
    28e6:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	square_amp = square_a;
	return AS_NO_ERR;
}
    28e8:	08 95       	ret

000028ea <_ZN8as_class14get_square_ampEv>:

//Get square wave amplitude.
uint16_t as_class::get_square_amp()
{
	return square_amp;
}
    28ea:	fc 01       	movw	r30, r24
    28ec:	87 8d       	ldd	r24, Z+31	; 0x1f
    28ee:	90 a1       	ldd	r25, Z+32	; 0x20
    28f0:	08 95       	ret

000028f2 <_ZN8as_class14set_square_incEj>:

//Set square wave increment.
uint8_t as_class::set_square_inc(uint16_t square_i)
{
	if(square_i > SQUARE_INC_MAX)
    28f2:	63 37       	cpi	r22, 0x73	; 115
    28f4:	26 e0       	ldi	r18, 0x06	; 6
    28f6:	72 07       	cpc	r23, r18
    28f8:	28 f4       	brcc	.+10     	; 0x2904 <_ZN8as_class14set_square_incEj+0x12>
	if(square_i < SQUARE_INC_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	square_inc = square_i;
    28fa:	fc 01       	movw	r30, r24
    28fc:	72 a3       	std	Z+34, r23	; 0x22
    28fe:	61 a3       	std	Z+33, r22	; 0x21
	return AS_NO_ERR;
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	08 95       	ret
//Set square wave increment.
uint8_t as_class::set_square_inc(uint16_t square_i)
{
	if(square_i > SQUARE_INC_MAX)
	{
		return AS_VALUE_HIGH;
    2904:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	square_inc = square_i;
	return AS_NO_ERR;
}
    2906:	08 95       	ret

00002908 <_ZN8as_class14get_square_incEv>:

//Get square wave increment.
uint16_t as_class::get_square_inc()
{
	return square_inc;
}
    2908:	fc 01       	movw	r30, r24
    290a:	81 a1       	ldd	r24, Z+33	; 0x21
    290c:	92 a1       	ldd	r25, Z+34	; 0x22
    290e:	08 95       	ret

00002910 <_ZN8as_class17set_square_periodEj>:

//Set square wave period.
uint8_t as_class::set_square_period(uint16_t square_p)
{
	if(square_p > SQUARE_PER_MAX)
    2910:	61 31       	cpi	r22, 0x11	; 17
    2912:	27 e2       	ldi	r18, 0x27	; 39
    2914:	72 07       	cpc	r23, r18
    2916:	40 f4       	brcc	.+16     	; 0x2928 <_ZN8as_class17set_square_periodEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(square_p < SQUARE_PER_MIN)
    2918:	61 15       	cp	r22, r1
    291a:	71 05       	cpc	r23, r1
    291c:	39 f0       	breq	.+14     	; 0x292c <_ZN8as_class17set_square_periodEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	square_period = square_p;
    291e:	fc 01       	movw	r30, r24
    2920:	74 a3       	std	Z+36, r23	; 0x24
    2922:	63 a3       	std	Z+35, r22	; 0x23
	return AS_NO_ERR;
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	08 95       	ret
//Set square wave period.
uint8_t as_class::set_square_period(uint16_t square_p)
{
	if(square_p > SQUARE_PER_MAX)
	{
		return AS_VALUE_HIGH;
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	08 95       	ret
	}
	
	if(square_p < SQUARE_PER_MIN)
	{
		return AS_VALUE_LOW;
    292c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	square_period = square_p;
	return AS_NO_ERR;
}
    292e:	08 95       	ret

00002930 <_ZN8as_class17get_square_periodEv>:

//Get square wave period.
uint16_t as_class::get_square_period()
{
	return square_period;
}
    2930:	fc 01       	movw	r30, r24
    2932:	83 a1       	ldd	r24, Z+35	; 0x23
    2934:	94 a1       	ldd	r25, Z+36	; 0x24
    2936:	08 95       	ret

00002938 <_ZN8as_class14set_arb_cyclicEb>:

/*********************************************Arbitrary Waveform Functions********************************************/
//Set if arbitrary waveform is cyclic.
uint8_t as_class::set_arb_cyclic(bool arb_c)
{
	arb_cyclic = arb_c;
    2938:	fc 01       	movw	r30, r24
    293a:	65 a3       	std	Z+37, r22	; 0x25
	return AS_NO_ERR;
}
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret

00002940 <_ZN8as_class14get_arb_cyclicEv>:

//Get if arbitrary waveform is cyclic.
uint8_t as_class::get_arb_cyclic()
{
	return arb_cyclic;
}
    2940:	fc 01       	movw	r30, r24
    2942:	85 a1       	ldd	r24, Z+37	; 0x25
    2944:	08 95       	ret

00002946 <_ZN8as_class14set_arb_cyclesEh>:

//Set number of arbitrary waveform cycles.
uint8_t as_class::set_arb_cycles(uint8_t arb_cs)
{
	if(arb_cs > ARB_CYCLES_MAX)
    2946:	65 36       	cpi	r22, 0x65	; 101
    2948:	30 f4       	brcc	.+12     	; 0x2956 <_ZN8as_class14set_arb_cyclesEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(arb_cs < ARB_CYCLES_MIN)
    294a:	66 23       	and	r22, r22
    294c:	31 f0       	breq	.+12     	; 0x295a <_ZN8as_class14set_arb_cyclesEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	arb_cycles = arb_cs;
    294e:	fc 01       	movw	r30, r24
    2950:	66 a3       	std	Z+38, r22	; 0x26
	return AS_NO_ERR;
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	08 95       	ret
//Set number of arbitrary waveform cycles.
uint8_t as_class::set_arb_cycles(uint8_t arb_cs)
{
	if(arb_cs > ARB_CYCLES_MAX)
	{
		return AS_VALUE_HIGH;
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	08 95       	ret
	}
	
	if(arb_cs < ARB_CYCLES_MIN)
	{
		return AS_VALUE_LOW;
    295a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	arb_cycles = arb_cs;
	return AS_NO_ERR;
}
    295c:	08 95       	ret

0000295e <_ZN8as_class14get_arb_cyclesEv>:

//Get number of arbitrary waveform cycles.
uint8_t as_class::get_arb_cycles()
{
	return arb_cycles;
}
    295e:	fc 01       	movw	r30, r24
    2960:	86 a1       	ldd	r24, Z+38	; 0x26
    2962:	08 95       	ret

00002964 <_ZN8as_class13set_soft_filtEb>:

/**********************************************Low-pass Filter Functions**********************************************/
//Set if software filter is to be used.
uint8_t as_class::set_soft_filt(bool soft_f)
{
	soft_filt = soft_f;
    2964:	fc 01       	movw	r30, r24
    2966:	67 a3       	std	Z+39, r22	; 0x27
	return AS_NO_ERR;
}
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	08 95       	ret

0000296c <_ZN8as_class13get_soft_filtEv>:

//Get if software filter is to be used.
bool as_class::get_soft_filt()
{
	return soft_filt;
}
    296c:	fc 01       	movw	r30, r24
    296e:	87 a1       	ldd	r24, Z+39	; 0x27
    2970:	08 95       	ret

00002972 <_ZN8as_class12set_soft_selEh>:

//Set software filter to use.
uint8_t as_class::set_soft_sel(uint8_t soft_s)
{
	if(soft_s > LPF_FILT_MAX)
    2972:	68 30       	cpi	r22, 0x08	; 8
    2974:	30 f4       	brcc	.+12     	; 0x2982 <_ZN8as_class12set_soft_selEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(soft_s < LPF_FILT_MIN)
    2976:	66 23       	and	r22, r22
    2978:	31 f0       	breq	.+12     	; 0x2986 <_ZN8as_class12set_soft_selEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	soft_sel = soft_s;
    297a:	fc 01       	movw	r30, r24
    297c:	60 a7       	std	Z+40, r22	; 0x28
	return AS_NO_ERR;
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	08 95       	ret
//Set software filter to use.
uint8_t as_class::set_soft_sel(uint8_t soft_s)
{
	if(soft_s > LPF_FILT_MAX)
	{
		return AS_VALUE_HIGH;
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	08 95       	ret
	}
	
	if(soft_s < LPF_FILT_MIN)
	{
		return AS_VALUE_LOW;
    2986:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	soft_sel = soft_s;
	return AS_NO_ERR;
}
    2988:	08 95       	ret

0000298a <_ZN8as_class12get_soft_selEv>:

//Get software filter to use.
uint8_t as_class::get_soft_sel()
{
	return soft_sel;
}
    298a:	fc 01       	movw	r30, r24
    298c:	80 a5       	ldd	r24, Z+40	; 0x28
    298e:	08 95       	ret

00002990 <_ZN8as_class14set_test_stateE11test_states>:

/*************************************************Test State Functions************************************************/
//Set current test state.
uint8_t as_class::set_test_state(test_states test_s)
{
	test_state = test_s;
    2990:	fc 01       	movw	r30, r24
    2992:	61 a7       	std	Z+41, r22	; 0x29
	return AS_NO_ERR;
}
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	08 95       	ret

00002998 <_ZN8as_class14get_test_stateEv>:

//Get current test state.
test_states as_class::get_test_state()
{
	return test_state;
}
    2998:	fc 01       	movw	r30, r24
    299a:	81 a5       	ldd	r24, Z+41	; 0x29
    299c:	08 95       	ret

0000299e <_ZN8as_class13set_test_typeE10test_types>:

//Set test type.
uint8_t as_class::set_test_type(test_types test_t)
{
	test_type = test_t;
    299e:	fc 01       	movw	r30, r24
    29a0:	62 a7       	std	Z+42, r22	; 0x2a
	return AS_NO_ERR;
}
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	08 95       	ret

000029a6 <_ZN8as_class13get_test_typeEv>:

//Get test type.
test_types as_class::get_test_type()
{
	return test_type;
}
    29a6:	fc 01       	movw	r30, r24
    29a8:	82 a5       	ldd	r24, Z+42	; 0x2a
    29aa:	08 95       	ret

000029ac <_ZN13atmega_eeprom10write_wordEPjj>:
#include "atmega_eeprom.h"

//Write a 16-bit value to the EEPROM.
void atmega_eeprom::write_word(uint16_t *address, uint16_t data)
{
	cli();											//Disable interrupts.
    29ac:	f8 94       	cli
	eeprom_write_word(address, data);				//Write data.
    29ae:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__eewr_word_m328>
	eeprom_write_word((uint16_t *)EEPROM_PARK, 0);	//Park the pointer.
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__eewr_word_m328>
	sei();											//Enable interrupts.
    29be:	78 94       	sei
    29c0:	08 95       	ret

000029c2 <_ZN13atmega_eeprom9read_wordEPj>:
//Read a 16-bit value from the EEPROM.
uint16_t atmega_eeprom::read_word(uint16_t *address)
{
	uint16_t read_data;
	
	cli();											//Disable interrupts.
    29c2:	f8 94       	cli
	read_data = eeprom_read_word(address);			//Get data.
    29c4:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__eerd_word_m328>
	sei();											//Enable interrupts.
    29c8:	78 94       	sei
	
	return read_data;
}
    29ca:	08 95       	ret

000029cc <_ZN13atmega_eeprom16read_word_no_cliEPj>:

//Read a 16-bit value from the EEPROM without disabling the interrupt.
uint16_t atmega_eeprom::read_word_no_cli(uint16_t *address)
{
	return eeprom_read_word(address);
    29cc:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__eerd_word_m328>
}
    29d0:	08 95       	ret

000029d2 <_ZN13atmega_eeprom10write_byteEPhh>:

//Write an 8-bit value to the EEPROM. 8-bit addressing only.
void atmega_eeprom::write_byte(uint8_t *address, uint8_t data)
{
	cli();											//Disable interrupts.
    29d2:	f8 94       	cli
	eeprom_write_byte(address, data);				//Write data.
    29d4:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__eewr_byte_m328>
	eeprom_write_byte((uint8_t *)EEPROM_PARK, 0);	//Park the pointer.
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__eewr_byte_m328>
	sei();											//Enable interrupts.
    29e2:	78 94       	sei
    29e4:	08 95       	ret

000029e6 <_ZN13atmega_eeprom9read_byteEPh>:
//Read an 8-bit value from the EEPROM. 8-bit addressing only.
uint8_t atmega_eeprom::read_byte(uint8_t *address)
{
	uint8_t read_data;
	
	cli();											//Disable interrupts.
    29e6:	f8 94       	cli
	read_data = eeprom_read_byte(address);			//Get data.
    29e8:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eerd_byte_m328>
	sei();											//Enable interrupts.
    29ec:	78 94       	sei
	
	return read_data;
    29ee:	08 95       	ret

000029f0 <_ZN10atmega_spi15spi_master_initEv>:

//Setup all registers required for an spi master.
void atmega_spi::spi_master_init()
{
	//Set pins as outputs.
	ddrMOSI |= (1 << MOSI);
    29f0:	23 9a       	sbi	0x04, 3	; 4
	ddrSCK  |= (1 << SCK);
    29f2:	25 9a       	sbi	0x04, 5	; 4
	ddrSS   |= (1 << SS);
    29f4:	22 9a       	sbi	0x04, 2	; 4
	
	//Enable SPI controller and clock it at system clock speed / 2.
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    29f6:	81 e5       	ldi	r24, 0x51	; 81
    29f8:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= (1 << SPI2X);
	
	//Turn on pull-up resistors.
	prtMOSI |= (1 << MOSI);
    29fa:	2b 9a       	sbi	0x05, 3	; 5
	prtMISO |= (1 << MISO);
    29fc:	2c 9a       	sbi	0x05, 4	; 5
    29fe:	08 95       	ret

00002a00 <_ZN10atmega_spi9spi_writeEh>:
}

//Send data byte.
void atmega_spi::spi_write(uint8_t data)
{
	SPDR = data;
    2a00:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))){}
    2a02:	0d b4       	in	r0, 0x2d	; 45
    2a04:	07 fe       	sbrs	r0, 7
    2a06:	fd cf       	rjmp	.-6      	; 0x2a02 <_ZN10atmega_spi9spi_writeEh+0x2>
}
    2a08:	08 95       	ret

00002a0a <_ZN10atmega_spi8spi_readEv>:

//Receive data byte.
uint8_t atmega_spi::spi_read()
{	
	SPDR = 0xFF;
    2a0a:	8f ef       	ldi	r24, 0xFF	; 255
    2a0c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))){}
    2a0e:	0d b4       	in	r0, 0x2d	; 45
    2a10:	07 fe       	sbrs	r0, 7
    2a12:	fd cf       	rjmp	.-6      	; 0x2a0e <_ZN10atmega_spi8spi_readEv+0x4>
	return SPDR;
    2a14:	8e b5       	in	r24, 0x2e	; 46
}
    2a16:	08 95       	ret

00002a18 <_ZN10atmega_twi15twi_master_initEv>:
#include "atmega_twi.h"

//TWI initialize as master.
void atmega_twi::twi_master_init(void)
{
	TWCR = 0x00;	//disable twi.
    2a18:	ec eb       	ldi	r30, 0xBC	; 188
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	10 82       	st	Z, r1
	TWBR = 0x02;	//set bit rate 400KHz @ 8 MHz CPU clock.
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;	//set prescale = 1.
    2a24:	10 92 b9 00 	sts	0x00B9, r1
	TWCR = 0x44;	//enable twi.
    2a28:	84 e4       	ldi	r24, 0x44	; 68
    2a2a:	80 83       	st	Z, r24
    2a2c:	08 95       	ret

00002a2e <_ZN10atmega_twi9i2c_startEPh>:
//Function to start i2c communication.  No return value.  Sets errno 
//with error code if function failed, clears errno if function successful.
void atmega_twi::i2c_start(uint8_t* errno)
{
	//Send START condition.
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2a2e:	24 ea       	ldi	r18, 0xA4	; 164
    2a30:	20 93 bc 00 	sts	0x00BC, r18
	
	//Wait for TWINT flag set.
    while(!(TWCR & (1 << TWINT)));
    2a34:	ec eb       	ldi	r30, 0xBC	; 188
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	20 81       	ld	r18, Z
    2a3a:	22 23       	and	r18, r18
    2a3c:	ec f7       	brge	.-6      	; 0x2a38 <_ZN10atmega_twi9i2c_startEPh+0xa>
	
	//Check value of TWI Status Register.
    (TWSR & 0xF8) == START ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    2a3e:	20 91 b9 00 	lds	r18, 0x00B9
    2a42:	28 7f       	andi	r18, 0xF8	; 248
    2a44:	28 30       	cpi	r18, 0x08	; 8
    2a46:	19 f4       	brne	.+6      	; 0x2a4e <_ZN10atmega_twi9i2c_startEPh+0x20>
    2a48:	fc 01       	movw	r30, r24
    2a4a:	10 82       	st	Z, r1
    2a4c:	08 95       	ret
    2a4e:	20 91 b9 00 	lds	r18, 0x00B9
    2a52:	28 7f       	andi	r18, 0xF8	; 248
    2a54:	fc 01       	movw	r30, r24
    2a56:	20 83       	st	Z, r18
    2a58:	08 95       	ret

00002a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>:
void atmega_twi::i2c_sendAddress(const uint8_t address, uint8_t* errno)
{
	uint8_t ack;
   
	//Set ack based on whether receiving or transmitting.
	(address & 0x01) == 0 ? ack = MT_SLA_ACK : ack = MR_SLA_ACK;
    2a5a:	80 fd       	sbrc	r24, 0
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <_ZN10atmega_twi15i2c_sendAddressEhPh+0x8>
    2a5e:	48 e1       	ldi	r20, 0x18	; 24
    2a60:	01 c0       	rjmp	.+2      	; 0x2a64 <_ZN10atmega_twi15i2c_sendAddressEhPh+0xa>
    2a62:	40 e4       	ldi	r20, 0x40	; 64
	
	//Load SLA_W into TWDR Register. Clear TWINT bit to start transmission.
	TWDR = address; 
    2a64:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    2a68:	84 e8       	ldi	r24, 0x84	; 132
    2a6a:	80 93 bc 00 	sts	0x00BC, r24
   
	//Wait for TWINT flag set.
	while(!(TWCR & (1 << TWINT)));
    2a6e:	ec eb       	ldi	r30, 0xBC	; 188
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	90 81       	ld	r25, Z
    2a74:	99 23       	and	r25, r25
    2a76:	ec f7       	brge	.-6      	; 0x2a72 <_ZN10atmega_twi15i2c_sendAddressEhPh+0x18>
	
	//Check value of TWI Status Register.
	(TWSR & 0xF8) == ack ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    2a78:	20 91 b9 00 	lds	r18, 0x00B9
    2a7c:	28 7f       	andi	r18, 0xF8	; 248
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	84 2f       	mov	r24, r20
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	28 17       	cp	r18, r24
    2a86:	39 07       	cpc	r19, r25
    2a88:	19 f4       	brne	.+6      	; 0x2a90 <_ZN10atmega_twi15i2c_sendAddressEhPh+0x36>
    2a8a:	fb 01       	movw	r30, r22
    2a8c:	10 82       	st	Z, r1
    2a8e:	08 95       	ret
    2a90:	80 91 b9 00 	lds	r24, 0x00B9
    2a94:	88 7f       	andi	r24, 0xF8	; 248
    2a96:	fb 01       	movw	r30, r22
    2a98:	80 83       	st	Z, r24
    2a9a:	08 95       	ret

00002a9c <_ZN10atmega_twi12i2c_sendDataEhPh>:
//Function to transmit a data byte.  No return value.  Sets errno
//with error code if function failed, clears errno if function successful.
void atmega_twi::i2c_sendData(const uint8_t data, uint8_t* errno)
{
	//Load SLA_W into TWDR Register. Clear TWINT bit to start transmission.
	TWDR = data; 
    2a9c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);	
    2aa0:	84 e8       	ldi	r24, 0x84	; 132
    2aa2:	80 93 bc 00 	sts	0x00BC, r24
	
	//Wait for TWINT flag set.
	while(!(TWCR & (1 << TWINT)));
    2aa6:	ec eb       	ldi	r30, 0xBC	; 188
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 23       	and	r24, r24
    2aae:	ec f7       	brge	.-6      	; 0x2aaa <_ZN10atmega_twi12i2c_sendDataEhPh+0xe>
	
	//Check value of TWI Status Register
	(TWSR & 0xF8) == MT_DATA_ACK ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    2ab0:	80 91 b9 00 	lds	r24, 0x00B9
    2ab4:	88 7f       	andi	r24, 0xF8	; 248
    2ab6:	88 32       	cpi	r24, 0x28	; 40
    2ab8:	19 f4       	brne	.+6      	; 0x2ac0 <_ZN10atmega_twi12i2c_sendDataEhPh+0x24>
    2aba:	fb 01       	movw	r30, r22
    2abc:	10 82       	st	Z, r1
    2abe:	08 95       	ret
    2ac0:	80 91 b9 00 	lds	r24, 0x00B9
    2ac4:	88 7f       	andi	r24, 0xF8	; 248
    2ac6:	fb 01       	movw	r30, r22
    2ac8:	80 83       	st	Z, r24
    2aca:	08 95       	ret

00002acc <_ZN10atmega_twi20i2c_receiveData_NACKEPh>:
uint8_t atmega_twi::i2c_receiveData_NACK(uint8_t* errno)
{
	uint8_t data;
  
	//Start transmission.
	TWCR = (1 << TWINT) | (1 << TWEN);
    2acc:	24 e8       	ldi	r18, 0x84	; 132
    2ace:	20 93 bc 00 	sts	0x00BC, r18
  
	//Wait for TWINT flag set.  
	while(!(TWCR & (1 << TWINT)));
    2ad2:	ec eb       	ldi	r30, 0xBC	; 188
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	20 81       	ld	r18, Z
    2ad8:	22 23       	and	r18, r18
    2ada:	ec f7       	brge	.-6      	; 0x2ad6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0xa>
	
	//Check value of TWI Status Register.   	   
	(TWSR & 0xF8) == MR_DATA_NACK ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    2adc:	20 91 b9 00 	lds	r18, 0x00B9
    2ae0:	28 7f       	andi	r18, 0xF8	; 248
    2ae2:	28 35       	cpi	r18, 0x58	; 88
    2ae4:	19 f4       	brne	.+6      	; 0x2aec <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0x20>
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	10 82       	st	Z, r1
    2aea:	05 c0       	rjmp	.+10     	; 0x2af6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0x2a>
    2aec:	20 91 b9 00 	lds	r18, 0x00B9
    2af0:	28 7f       	andi	r18, 0xF8	; 248
    2af2:	fc 01       	movw	r30, r24
    2af4:	20 83       	st	Z, r18
  
	data = TWDR;
    2af6:	80 91 bb 00 	lds	r24, 0x00BB
	return(data);
}
    2afa:	08 95       	ret

00002afc <_ZN10atmega_twi8i2c_stopEv>:

//Function to end the i2c communication.   	
void atmega_twi::i2c_stop()
{
	//Transmit STOP condition.
	TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2afc:	84 e9       	ldi	r24, 0x94	; 148
    2afe:	80 93 bc 00 	sts	0x00BC, r24
    2b02:	08 95       	ret

00002b04 <_ZN11atmega_uart9uart_initEj>:
#include "atmega_uart.h"

///Configure the UART.
void atmega_uart::uart_init(const uint16_t ubrr)
{
	UBRR0H = (uint8_t)(ubrr >> 8);							//Load upper ubrr byte.
    2b04:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)ubrr;									//Load lower ubrr byte.
    2b08:	80 93 c4 00 	sts	0x00C4, r24
	//UCSR0A = (1 << U2X0);									//Double speed mode.
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);	//Enable RX interrupt, receive and transmit circuits.
    2b0c:	88 e9       	ldi	r24, 0x98	; 152
    2b0e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3 << UCSZ00);									//Use 8 bit bytes.
    2b12:	86 e0       	ldi	r24, 0x06	; 6
    2b14:	80 93 c2 00 	sts	0x00C2, r24
    2b18:	08 95       	ret

00002b1a <_ZN11atmega_uart7tx_byteEh>:
}

//Transmits a single byte out the UART.
void atmega_uart::tx_byte(const uint8_t data)
{
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2b1a:	e0 ec       	ldi	r30, 0xC0	; 192
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	90 81       	ld	r25, Z
    2b20:	95 ff       	sbrs	r25, 5
    2b22:	fd cf       	rjmp	.-6      	; 0x2b1e <_ZN11atmega_uart7tx_byteEh+0x4>
	UDR0 = data;
    2b24:	80 93 c6 00 	sts	0x00C6, r24
    2b28:	08 95       	ret

00002b2a <_ZN11atmega_uart7tx_wordEj>:
}

//Transmit 16-bit number.
void atmega_uart::tx_word(const uint16_t data)
{
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2b2a:	e0 ec       	ldi	r30, 0xC0	; 192
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	20 81       	ld	r18, Z
    2b30:	25 ff       	sbrs	r18, 5
    2b32:	fd cf       	rjmp	.-6      	; 0x2b2e <_ZN11atmega_uart7tx_wordEj+0x4>
	UDR0 = data >> 8;
    2b34:	90 93 c6 00 	sts	0x00C6, r25
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2b38:	e0 ec       	ldi	r30, 0xC0	; 192
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	90 81       	ld	r25, Z
    2b3e:	95 ff       	sbrs	r25, 5
    2b40:	fd cf       	rjmp	.-6      	; 0x2b3c <_ZN11atmega_uart7tx_wordEj+0x12>
	UDR0 = data;
    2b42:	80 93 c6 00 	sts	0x00C6, r24
    2b46:	08 95       	ret

00002b48 <_ZN11atmega_uart8tx_dwordEm>:
}

//Transmit 32-bit number.
void atmega_uart::tx_dword(const uint32_t data)
{
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2b4c:	e0 ec       	ldi	r30, 0xC0	; 192
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	20 81       	ld	r18, Z
    2b52:	25 ff       	sbrs	r18, 5
    2b54:	fd cf       	rjmp	.-6      	; 0x2b50 <_ZN11atmega_uart8tx_dwordEm+0x8>
	UDR0 = data >> 24;
    2b56:	09 2f       	mov	r16, r25
    2b58:	11 27       	eor	r17, r17
    2b5a:	22 27       	eor	r18, r18
    2b5c:	33 27       	eor	r19, r19
    2b5e:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2b62:	e0 ec       	ldi	r30, 0xC0	; 192
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	20 81       	ld	r18, Z
    2b68:	25 ff       	sbrs	r18, 5
    2b6a:	fd cf       	rjmp	.-6      	; 0x2b66 <_ZN11atmega_uart8tx_dwordEm+0x1e>
	UDR0 = data >> 16;
    2b6c:	8c 01       	movw	r16, r24
    2b6e:	22 27       	eor	r18, r18
    2b70:	33 27       	eor	r19, r19
    2b72:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2b76:	e0 ec       	ldi	r30, 0xC0	; 192
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	20 81       	ld	r18, Z
    2b7c:	25 ff       	sbrs	r18, 5
    2b7e:	fd cf       	rjmp	.-6      	; 0x2b7a <_ZN11atmega_uart8tx_dwordEm+0x32>
	UDR0 = data >> 8;
    2b80:	07 2f       	mov	r16, r23
    2b82:	18 2f       	mov	r17, r24
    2b84:	29 2f       	mov	r18, r25
    2b86:	33 27       	eor	r19, r19
    2b88:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    2b8c:	e0 ec       	ldi	r30, 0xC0	; 192
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	20 81       	ld	r18, Z
    2b92:	25 ff       	sbrs	r18, 5
    2b94:	fd cf       	rjmp	.-6      	; 0x2b90 <_ZN11atmega_uart8tx_dwordEm+0x48>
	UDR0 = data;
    2b96:	60 93 c6 00 	sts	0x00C6, r22
}
    2b9a:	1f 91       	pop	r17
    2b9c:	0f 91       	pop	r16
    2b9e:	08 95       	ret

00002ba0 <_ZN11atmega_uart9tx_stringEPKc>:

//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	ec 01       	movw	r28, r24
	uint8_t tx_string_index = 0;
	
	while(data[tx_string_index])
    2ba8:	88 81       	ld	r24, Y
    2baa:	88 23       	and	r24, r24
    2bac:	51 f0       	breq	.+20     	; 0x2bc2 <_ZN11atmega_uart9tx_stringEPKc+0x22>
}

//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
	uint8_t tx_string_index = 0;
    2bae:	10 e0       	ldi	r17, 0x00	; 0
	
	while(data[tx_string_index])
	{
		tx_byte(data[tx_string_index++]);	//Transmit byte.
    2bb0:	1f 5f       	subi	r17, 0xFF	; 255
    2bb2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
	uint8_t tx_string_index = 0;
	
	while(data[tx_string_index])
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e1 0f       	add	r30, r17
    2bba:	f1 1d       	adc	r31, r1
    2bbc:	80 81       	ld	r24, Z
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	f7 cf       	rjmp	.-18     	; 0x2bb0 <_ZN11atmega_uart9tx_stringEPKc+0x10>
	{
		tx_byte(data[tx_string_index++]);	//Transmit byte.
	}
}
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	1f 91       	pop	r17
    2bc8:	08 95       	ret

00002bca <_ZN11atmega_uart11tx_string_pEPKc>:

//Transmits a string from program space out the UART.
void atmega_uart::tx_string_p(const char *data)
{
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	ec 01       	movw	r28, r24
	while(pgm_read_byte(data))
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	24 91       	lpm	r18, Z
    2bd4:	22 23       	and	r18, r18
    2bd6:	51 f0       	breq	.+20     	; 0x2bec <_ZN11atmega_uart11tx_string_pEPKc+0x22>
	{
		tx_byte(pgm_read_byte(data));
    2bd8:	fc 01       	movw	r30, r24
    2bda:	84 91       	lpm	r24, Z
    2bdc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
			
		data++;
    2be0:	21 96       	adiw	r28, 0x01	; 1
}

//Transmits a string from program space out the UART.
void atmega_uart::tx_string_p(const char *data)
{
	while(pgm_read_byte(data))
    2be2:	ce 01       	movw	r24, r28
    2be4:	fe 01       	movw	r30, r28
    2be6:	24 91       	lpm	r18, Z
    2be8:	21 11       	cpse	r18, r1
    2bea:	f6 cf       	rjmp	.-20     	; 0x2bd8 <_ZN11atmega_uart11tx_string_pEPKc+0xe>
	{
		tx_byte(pgm_read_byte(data));
			
		data++;
	}
}
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	08 95       	ret

00002bf2 <_ZN11atmega_uart5tx_tfEb>:

//Transmit 0x01 for true, 0x00 for false.
void atmega_uart::tx_tf(const bool data)
{
	data ? atmega_uart::tx_byte(0x01) : atmega_uart::tx_byte(0x00);
    2bf2:	88 23       	and	r24, r24
    2bf4:	21 f0       	breq	.+8      	; 0x2bfe <_ZN11atmega_uart5tx_tfEb+0xc>
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    2bfc:	08 95       	ret
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    2c04:	08 95       	ret

00002c06 <_Z17i2c_load_cap_maskP8as_class>:
	sei(); //Enable global interrupts.
}

//Update capacitors connected to system.
void i2c_load_cap_mask(as_class *as)
{
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	ec 01       	movw	r28, r24
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2c0e:	85 e9       	ldi	r24, 0x95	; 149
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2c16:	65 e9       	ldi	r22, 0x95	; 149
    2c18:	71 e0       	ldi	r23, 0x01	; 1
    2c1a:	87 e9       	ldi	r24, 0x97	; 151
    2c1c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2c20:	85 e9       	ldi	r24, 0x95	; 149
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2c28:	18 2f       	mov	r17, r24
	atmega_twi::i2c_stop();
    2c2a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
	
	//Get rid of 6 upper bits of temp.
	temp &= 0x03;
	
	//Update temp with current cap mask.
	temp |= (as->get_tia_cap_mask() << 2);
    2c2e:	ce 01       	movw	r24, r28
    2c30:	0e 94 93 13 	call	0x2726	; 0x2726 <_ZN8as_class16get_tia_cap_maskEv>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
	atmega_twi::i2c_stop();
	
	//Get rid of 6 upper bits of temp.
	temp &= 0x03;
    2c34:	13 70       	andi	r17, 0x03	; 3
	
	//Update temp with current cap mask.
	temp |= (as->get_tia_cap_mask() << 2);
    2c36:	24 e0       	ldi	r18, 0x04	; 4
    2c38:	82 9f       	mul	r24, r18
    2c3a:	c0 01       	movw	r24, r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	ec 01       	movw	r28, r24
    2c40:	c1 2b       	or	r28, r17
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2c42:	85 e9       	ldi	r24, 0x95	; 149
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2c4a:	65 e9       	ldi	r22, 0x95	; 149
    2c4c:	71 e0       	ldi	r23, 0x01	; 1
    2c4e:	86 e9       	ldi	r24, 0x96	; 150
    2c50:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2c54:	65 e9       	ldi	r22, 0x95	; 149
    2c56:	71 e0       	ldi	r23, 0x01	; 1
    2c58:	8c 2f       	mov	r24, r28
    2c5a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2c5e:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
}
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	08 95       	ret

00002c6a <_Z19i2c_load_electrodesP8as_class>:

//Update config for one or two electrodes.
void i2c_load_electrodes(as_class *as)
{
    2c6a:	1f 93       	push	r17
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	ec 01       	movw	r28, r24
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2c72:	85 e9       	ldi	r24, 0x95	; 149
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2c7a:	65 e9       	ldi	r22, 0x95	; 149
    2c7c:	71 e0       	ldi	r23, 0x01	; 1
    2c7e:	87 e9       	ldi	r24, 0x97	; 151
    2c80:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2c84:	85 e9       	ldi	r24, 0x95	; 149
    2c86:	91 e0       	ldi	r25, 0x01	; 1
    2c88:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2c8c:	18 2f       	mov	r17, r24
	atmega_twi::i2c_stop();
    2c8e:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
	
	//Setup 2 electrode configuration.
	if(as->get_num_electrodes() == ELEC_2)
    2c92:	ce 01       	movw	r24, r28
    2c94:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN8as_class18get_num_electrodesEv>
    2c98:	81 11       	cpse	r24, r1
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <_Z19i2c_load_electrodesP8as_class+0x38>
	{
		temp |= ANS_2_ELEC;
    2c9c:	c1 2f       	mov	r28, r17
    2c9e:	c2 60       	ori	r28, 0x02	; 2
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <_Z19i2c_load_electrodesP8as_class+0x3c>
	}
	//Setup 3 electrode configuration.
	else
	{
		temp &= ~ANS_2_ELEC;
    2ca2:	c1 2f       	mov	r28, r17
    2ca4:	cd 7f       	andi	r28, 0xFD	; 253
	}
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2ca6:	85 e9       	ldi	r24, 0x95	; 149
    2ca8:	91 e0       	ldi	r25, 0x01	; 1
    2caa:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2cae:	65 e9       	ldi	r22, 0x95	; 149
    2cb0:	71 e0       	ldi	r23, 0x01	; 1
    2cb2:	86 e9       	ldi	r24, 0x96	; 150
    2cb4:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2cb8:	65 e9       	ldi	r22, 0x95	; 149
    2cba:	71 e0       	ldi	r23, 0x01	; 1
    2cbc:	8c 2f       	mov	r24, r28
    2cbe:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2cc2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
}
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	08 95       	ret

00002cce <_Z14i2c_connect_cev>:

//Connects the counter electrode to the system.
void i2c_connect_ce()
{
    2cce:	cf 93       	push	r28
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2cd0:	85 e9       	ldi	r24, 0x95	; 149
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2cd8:	65 e9       	ldi	r22, 0x95	; 149
    2cda:	71 e0       	ldi	r23, 0x01	; 1
    2cdc:	87 e9       	ldi	r24, 0x97	; 151
    2cde:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2ce2:	85 e9       	ldi	r24, 0x95	; 149
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2cea:	c8 2f       	mov	r28, r24
	atmega_twi::i2c_stop();
    2cec:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
	
	temp |= ANS_CE;	//Set bit for counter electrode.
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2cf0:	85 e9       	ldi	r24, 0x95	; 149
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2cf8:	65 e9       	ldi	r22, 0x95	; 149
    2cfa:	71 e0       	ldi	r23, 0x01	; 1
    2cfc:	86 e9       	ldi	r24, 0x96	; 150
    2cfe:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2d02:	65 e9       	ldi	r22, 0x95	; 149
    2d04:	71 e0       	ldi	r23, 0x01	; 1
    2d06:	8c 2f       	mov	r24, r28
    2d08:	81 60       	ori	r24, 0x01	; 1
    2d0a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2d0e:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
}
    2d12:	cf 91       	pop	r28
    2d14:	08 95       	ret

00002d16 <_Z17i2c_disconnect_cev>:

//Disconnects the counter electrode from the system.
void i2c_disconnect_ce()
{
    2d16:	cf 93       	push	r28
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2d18:	85 e9       	ldi	r24, 0x95	; 149
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2d20:	65 e9       	ldi	r22, 0x95	; 149
    2d22:	71 e0       	ldi	r23, 0x01	; 1
    2d24:	87 e9       	ldi	r24, 0x97	; 151
    2d26:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    2d2a:	85 e9       	ldi	r24, 0x95	; 149
    2d2c:	91 e0       	ldi	r25, 0x01	; 1
    2d2e:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2d32:	c8 2f       	mov	r28, r24
	atmega_twi::i2c_stop();
    2d34:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
	
	temp &= ~ANS_CE;	//Set bit for counter electrode.
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2d38:	85 e9       	ldi	r24, 0x95	; 149
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2d40:	65 e9       	ldi	r22, 0x95	; 149
    2d42:	71 e0       	ldi	r23, 0x01	; 1
    2d44:	86 e9       	ldi	r24, 0x96	; 150
    2d46:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    2d4a:	65 e9       	ldi	r22, 0x95	; 149
    2d4c:	71 e0       	ldi	r23, 0x01	; 1
    2d4e:	8c 2f       	mov	r24, r28
    2d50:	8e 7f       	andi	r24, 0xFE	; 254
    2d52:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2d56:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
}
    2d5a:	cf 91       	pop	r28
    2d5c:	08 95       	ret

00002d5e <_Z12i2c_load_potP8as_class>:

//Update the tap position on the digital pot.
void i2c_load_pot(as_class *as)
{
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
	//Get current value of resistor tap.
	uint16_t temp = as->get_tia_res_tap();
    2d64:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN8as_class15get_tia_res_tapEv>
    2d68:	ec 01       	movw	r28, r24
	uint8_t val;
	
	//Hack.  Fix later!
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2d6a:	85 e9       	ldi	r24, 0x95	; 149
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    2d72:	65 e9       	ldi	r22, 0x95	; 149
    2d74:	71 e0       	ldi	r23, 0x01	; 1
    2d76:	87 e9       	ldi	r24, 0x97	; 151
    2d78:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	val = atmega_twi::i2c_receiveData_NACK(&errno);
    2d7c:	85 e9       	ldi	r24, 0x95	; 149
    2d7e:	91 e0       	ldi	r25, 0x01	; 1
    2d80:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    2d84:	18 2f       	mov	r17, r24
	atmega_twi::i2c_stop();
    2d86:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
	
	//Strip away resistor data and keep electrode data.
	val &= 0x03;
    2d8a:	13 70       	andi	r17, 0x03	; 3
	
	if(temp == 1)
    2d8c:	c1 30       	cpi	r28, 0x01	; 1
    2d8e:	d1 05       	cpc	r29, r1
    2d90:	11 f4       	brne	.+4      	; 0x2d96 <_Z12i2c_load_potP8as_class+0x38>
		val |= 0x20;
    2d92:	10 62       	ori	r17, 0x20	; 32
    2d94:	0b c0       	rjmp	.+22     	; 0x2dac <_Z12i2c_load_potP8as_class+0x4e>
	else if(temp == 10)
    2d96:	ca 30       	cpi	r28, 0x0A	; 10
    2d98:	d1 05       	cpc	r29, r1
    2d9a:	11 f4       	brne	.+4      	; 0x2da0 <_Z12i2c_load_potP8as_class+0x42>
		val |= 0x10;
    2d9c:	10 61       	ori	r17, 0x10	; 16
    2d9e:	06 c0       	rjmp	.+12     	; 0x2dac <_Z12i2c_load_potP8as_class+0x4e>
	else if(temp == 102)
    2da0:	c6 36       	cpi	r28, 0x66	; 102
    2da2:	d1 05       	cpc	r29, r1
    2da4:	11 f4       	brne	.+4      	; 0x2daa <_Z12i2c_load_potP8as_class+0x4c>
		val |= 0x08;
    2da6:	18 60       	ori	r17, 0x08	; 8
    2da8:	01 c0       	rjmp	.+2      	; 0x2dac <_Z12i2c_load_potP8as_class+0x4e>
	else
		val |= 0x04;
    2daa:	14 60       	ori	r17, 0x04	; 4
	
	
		
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    2dac:	85 e9       	ldi	r24, 0x95	; 149
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    2db4:	65 e9       	ldi	r22, 0x95	; 149
    2db6:	71 e0       	ldi	r23, 0x01	; 1
    2db8:	86 e9       	ldi	r24, 0x96	; 150
    2dba:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(val, &errno);
    2dbe:	65 e9       	ldi	r22, 0x95	; 149
    2dc0:	71 e0       	ldi	r23, 0x01	; 1
    2dc2:	81 2f       	mov	r24, r17
    2dc4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2dc8:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
	/*atmega_twi::i2c_start(&errno);
	atmega_twi::i2c_sendAddress(I2C_POT_W_ADDR, &errno);
	atmega_twi::i2c_sendData(0x04 | (temp >> 8), &errno);
	atmega_twi::i2c_sendData(temp, &errno);
	atmega_twi::i2c_stop();*/
}
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	1f 91       	pop	r17
    2dd2:	08 95       	ret

00002dd4 <_Z16init_i2c_devicesP8as_class>:

//Set initial capacitor and resistor values for the TIA.
void init_i2c_devices(as_class *as)
{
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	ec 01       	movw	r28, r24
	//Enable updates to the digital pot wiper.
	atmega_twi::i2c_start(&errno);
    2dda:	85 e9       	ldi	r24, 0x95	; 149
    2ddc:	91 e0       	ldi	r25, 0x01	; 1
    2dde:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_POT_W_ADDR, &errno);
    2de2:	65 e9       	ldi	r22, 0x95	; 149
    2de4:	71 e0       	ldi	r23, 0x01	; 1
    2de6:	88 e5       	ldi	r24, 0x58	; 88
    2de8:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(0x1C, &errno);
    2dec:	65 e9       	ldi	r22, 0x95	; 149
    2dee:	71 e0       	ldi	r23, 0x01	; 1
    2df0:	8c e1       	ldi	r24, 0x1C	; 28
    2df2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_sendData(0x02, &errno);
    2df6:	65 e9       	ldi	r22, 0x95	; 149
    2df8:	71 e0       	ldi	r23, 0x01	; 1
    2dfa:	82 e0       	ldi	r24, 0x02	; 2
    2dfc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    2e00:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN10atmega_twi8i2c_stopEv>
	
	//Ensure all analog channels are configured to their default states
	//and the working electrode is disconnected on startup.  Also
	//set initial resistance for TIA digital pot.
	i2c_disconnect_ce();
    2e04:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_Z17i2c_disconnect_cev>
	i2c_load_cap_mask(as);
    2e08:	ce 01       	movw	r24, r28
    2e0a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_Z17i2c_load_cap_maskP8as_class>
	i2c_load_electrodes(as);
    2e0e:	ce 01       	movw	r24, r28
    2e10:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z19i2c_load_electrodesP8as_class>
	i2c_load_pot(as);
    2e14:	ce 01       	movw	r24, r28
    2e16:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_Z12i2c_load_potP8as_class>
}
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	08 95       	ret

00002e20 <_Z9write_dacj>:

/****************************************************ADC and DAC Routines****************************************************/
//Write a 16-bit word of data to the DAC.
//This function is designed for a 12-bit DAC.
void write_dac(uint16_t data)
{
    2e20:	cf 93       	push	r28
    2e22:	c8 2f       	mov	r28, r24
	prtDACS &= ~(1 << DACS);	//Select DAC.
    2e24:	2a 98       	cbi	0x05, 2	; 5
	
	//Set control bits and send data.
	atmega_spi::spi_write(0x70 | (data >> 8));
    2e26:	89 2f       	mov	r24, r25
    2e28:	80 67       	ori	r24, 0x70	; 112
    2e2a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(data);
    2e2e:	8c 2f       	mov	r24, r28
    2e30:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN10atmega_spi9spi_writeEh>
	
	prtDACS |= (1 << DACS);	//Unselect DAC.
    2e34:	2a 9a       	sbi	0x05, 2	; 5
}
    2e36:	cf 91       	pop	r28
    2e38:	08 95       	ret

00002e3a <_Z8read_adcv>:

//Read a 16-bit word from the ADC.
//This function is designed for a 12-bit ADC.
uint16_t read_adc()
{
    2e3a:	cf 93       	push	r28
	uint8_t lower_byte, upper_byte;
	uint16_t data;
	
	prtADCS &= ~(1 << ADCS);	//Select ADC.
    2e3c:	29 98       	cbi	0x05, 1	; 5
	
	upper_byte = atmega_spi::spi_read();
    2e3e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <_ZN10atmega_spi8spi_readEv>
    2e42:	c8 2f       	mov	r28, r24
	lower_byte = atmega_spi::spi_read();
    2e44:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <_ZN10atmega_spi8spi_readEv>
	data = (upper_byte << 7);
    2e48:	90 e8       	ldi	r25, 0x80	; 128
    2e4a:	c9 9f       	mul	r28, r25
    2e4c:	90 01       	movw	r18, r0
    2e4e:	11 24       	eor	r1, r1
	data |= (lower_byte >> 1);
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	95 95       	asr	r25
    2e54:	87 95       	ror	r24
    2e56:	82 2b       	or	r24, r18
    2e58:	93 2b       	or	r25, r19
	data &= 0x0FFF;
	
	prtADCS |= (1 << ADCS);	//Unselect ADC.
    2e5a:	29 9a       	sbi	0x05, 1	; 5
	
	return data;
}
    2e5c:	9f 70       	andi	r25, 0x0F	; 15
    2e5e:	cf 91       	pop	r28
    2e60:	08 95       	ret

00002e62 <_Z3lpfjP8as_class>:

/********************************************************DSP Routines********************************************************/
//DSP software low pass filter.
uint16_t lpf(uint16_t input, as_class *as)
{
    2e62:	cf 92       	push	r12
    2e64:	df 92       	push	r13
    2e66:	ef 92       	push	r14
    2e68:	ff 92       	push	r15
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	8b 01       	movw	r16, r22
	static double x[] = {ZERO_VOLT, ZERO_VOLT, ZERO_VOLT};
	static double y[] = {ZERO_VOLT, ZERO_VOLT};
	double output=0;
	
	//Shift x array to make room for new value.
	x[0] = x[1];
    2e74:	ec e0       	ldi	r30, 0x0C	; 12
    2e76:	f1 e0       	ldi	r31, 0x01	; 1
    2e78:	40 81       	ld	r20, Z
    2e7a:	51 81       	ldd	r21, Z+1	; 0x01
    2e7c:	62 81       	ldd	r22, Z+2	; 0x02
    2e7e:	73 81       	ldd	r23, Z+3	; 0x03
    2e80:	40 93 08 01 	sts	0x0108, r20
    2e84:	50 93 09 01 	sts	0x0109, r21
    2e88:	60 93 0a 01 	sts	0x010A, r22
    2e8c:	70 93 0b 01 	sts	0x010B, r23
	x[1] = x[2];
    2e90:	c0 e1       	ldi	r28, 0x10	; 16
    2e92:	d1 e0       	ldi	r29, 0x01	; 1
    2e94:	48 81       	ld	r20, Y
    2e96:	59 81       	ldd	r21, Y+1	; 0x01
    2e98:	6a 81       	ldd	r22, Y+2	; 0x02
    2e9a:	7b 81       	ldd	r23, Y+3	; 0x03
    2e9c:	40 83       	st	Z, r20
    2e9e:	51 83       	std	Z+1, r21	; 0x01
    2ea0:	62 83       	std	Z+2, r22	; 0x02
    2ea2:	73 83       	std	Z+3, r23	; 0x03
	
	//Insert new value.
	x[2] = (double)input;
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <__floatunsisf>
    2eae:	68 83       	st	Y, r22
    2eb0:	79 83       	std	Y+1, r23	; 0x01
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
    2eb4:	9b 83       	std	Y+3, r25	; 0x03
	
	switch (as->get_soft_sel())
    2eb6:	c8 01       	movw	r24, r16
    2eb8:	0e 94 c5 14 	call	0x298a	; 0x298a <_ZN8as_class12get_soft_selEv>
    2ebc:	83 30       	cpi	r24, 0x03	; 3
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <_Z3lpfjP8as_class+0x60>
    2ec0:	de c0       	rjmp	.+444    	; 0x307e <_Z3lpfjP8as_class+0x21c>
    2ec2:	30 f4       	brcc	.+12     	; 0x2ed0 <_Z3lpfjP8as_class+0x6e>
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	69 f0       	breq	.+26     	; 0x2ee2 <_Z3lpfjP8as_class+0x80>
    2ec8:	82 30       	cpi	r24, 0x02	; 2
    2eca:	09 f4       	brne	.+2      	; 0x2ece <_Z3lpfjP8as_class+0x6c>
    2ecc:	71 c0       	rjmp	.+226    	; 0x2fb0 <_Z3lpfjP8as_class+0x14e>
    2ece:	73 c2       	rjmp	.+1254   	; 0x33b6 <_Z3lpfjP8as_class+0x554>
    2ed0:	85 30       	cpi	r24, 0x05	; 5
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <_Z3lpfjP8as_class+0x74>
    2ed4:	a2 c1       	rjmp	.+836    	; 0x321a <_Z3lpfjP8as_class+0x3b8>
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <_Z3lpfjP8as_class+0x78>
    2ed8:	39 c1       	rjmp	.+626    	; 0x314c <_Z3lpfjP8as_class+0x2ea>
    2eda:	86 30       	cpi	r24, 0x06	; 6
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <_Z3lpfjP8as_class+0x7e>
    2ede:	04 c2       	rjmp	.+1032   	; 0x32e8 <_Z3lpfjP8as_class+0x486>
    2ee0:	6a c2       	rjmp	.+1236   	; 0x33b6 <_Z3lpfjP8as_class+0x554>
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
    2ee2:	21 e1       	ldi	r18, 0x11	; 17
    2ee4:	3f e8       	ldi	r19, 0x8F	; 143
    2ee6:	44 e2       	ldi	r20, 0x24	; 36
    2ee8:	58 e3       	ldi	r21, 0x38	; 56
    2eea:	60 91 10 01 	lds	r22, 0x0110
    2eee:	70 91 11 01 	lds	r23, 0x0111
    2ef2:	80 91 12 01 	lds	r24, 0x0112
    2ef6:	90 91 13 01 	lds	r25, 0x0113
    2efa:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    2efe:	6b 01       	movw	r12, r22
    2f00:	7c 01       	movw	r14, r24
			0.0000784677768152497 * x[1] +
    2f02:	21 e1       	ldi	r18, 0x11	; 17
    2f04:	3f e8       	ldi	r19, 0x8F	; 143
    2f06:	44 ea       	ldi	r20, 0xA4	; 164
    2f08:	58 e3       	ldi	r21, 0x38	; 56
    2f0a:	60 91 0c 01 	lds	r22, 0x010C
    2f0e:	70 91 0d 01 	lds	r23, 0x010D
    2f12:	80 91 0e 01 	lds	r24, 0x010E
    2f16:	90 91 0f 01 	lds	r25, 0x010F
    2f1a:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    2f1e:	9b 01       	movw	r18, r22
    2f20:	ac 01       	movw	r20, r24
	x[2] = (double)input;
	
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
    2f22:	c7 01       	movw	r24, r14
    2f24:	b6 01       	movw	r22, r12
    2f26:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    2f2a:	6b 01       	movw	r12, r22
    2f2c:	7c 01       	movw	r14, r24
			0.0000784677768152497 * x[1] +
			0.0000392338884076249 * x[0] +
    2f2e:	21 e1       	ldi	r18, 0x11	; 17
    2f30:	3f e8       	ldi	r19, 0x8F	; 143
    2f32:	44 e2       	ldi	r20, 0x24	; 36
    2f34:	58 e3       	ldi	r21, 0x38	; 56
    2f36:	60 91 08 01 	lds	r22, 0x0108
    2f3a:	70 91 09 01 	lds	r23, 0x0109
    2f3e:	80 91 0a 01 	lds	r24, 0x010A
    2f42:	90 91 0b 01 	lds	r25, 0x010B
    2f46:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    2f4a:	9b 01       	movw	r18, r22
    2f4c:	ac 01       	movw	r20, r24
	
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
			0.0000784677768152497 * x[1] +
    2f4e:	c7 01       	movw	r24, r14
    2f50:	b6 01       	movw	r22, r12
    2f52:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    2f56:	6b 01       	movw	r12, r22
    2f58:	7c 01       	movw	r14, r24
			0.0000392338884076249 * x[0] +
			1.982205298140594 * y[1] -
    2f5a:	27 ee       	ldi	r18, 0xE7	; 231
    2f5c:	38 eb       	ldi	r19, 0xB8	; 184
    2f5e:	4d ef       	ldi	r20, 0xFD	; 253
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	60 91 04 01 	lds	r22, 0x0104
    2f66:	70 91 05 01 	lds	r23, 0x0105
    2f6a:	80 91 06 01 	lds	r24, 0x0106
    2f6e:	90 91 07 01 	lds	r25, 0x0107
    2f72:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    2f76:	9b 01       	movw	r18, r22
    2f78:	ac 01       	movw	r20, r24
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
			0.0000784677768152497 * x[1] +
			0.0000392338884076249 * x[0] +
    2f7a:	c7 01       	movw	r24, r14
    2f7c:	b6 01       	movw	r22, r12
    2f7e:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    2f82:	6b 01       	movw	r12, r22
    2f84:	7c 01       	movw	r14, r24
			1.982205298140594 * y[1] -
			0.982362233694224 * y[0];
    2f86:	27 e1       	ldi	r18, 0x17	; 23
    2f88:	3c e7       	ldi	r19, 0x7C	; 124
    2f8a:	4b e7       	ldi	r20, 0x7B	; 123
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	60 91 00 01 	lds	r22, 0x0100
    2f92:	70 91 01 01 	lds	r23, 0x0101
    2f96:	80 91 02 01 	lds	r24, 0x0102
    2f9a:	90 91 03 01 	lds	r25, 0x0103
    2f9e:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    2fa2:	9b 01       	movw	r18, r22
    2fa4:	ac 01       	movw	r20, r24
    2fa6:	c7 01       	movw	r24, r14
    2fa8:	b6 01       	movw	r22, r12
    2faa:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
		break;
    2fae:	69 c2       	rjmp	.+1234   	; 0x3482 <_Z3lpfjP8as_class+0x620>
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
    2fb0:	2e e1       	ldi	r18, 0x1E	; 30
    2fb2:	31 ec       	ldi	r19, 0xC1	; 193
    2fb4:	4c e3       	ldi	r20, 0x3C	; 60
    2fb6:	5a e3       	ldi	r21, 0x3A	; 58
    2fb8:	60 91 10 01 	lds	r22, 0x0110
    2fbc:	70 91 11 01 	lds	r23, 0x0111
    2fc0:	80 91 12 01 	lds	r24, 0x0112
    2fc4:	90 91 13 01 	lds	r25, 0x0113
    2fc8:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    2fcc:	6b 01       	movw	r12, r22
    2fce:	7c 01       	movw	r14, r24
			0.001440081468920 * x[1] +
    2fd0:	2e e1       	ldi	r18, 0x1E	; 30
    2fd2:	31 ec       	ldi	r19, 0xC1	; 193
    2fd4:	4c eb       	ldi	r20, 0xBC	; 188
    2fd6:	5a e3       	ldi	r21, 0x3A	; 58
    2fd8:	60 91 0c 01 	lds	r22, 0x010C
    2fdc:	70 91 0d 01 	lds	r23, 0x010D
    2fe0:	80 91 0e 01 	lds	r24, 0x010E
    2fe4:	90 91 0f 01 	lds	r25, 0x010F
    2fe8:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    2fec:	9b 01       	movw	r18, r22
    2fee:	ac 01       	movw	r20, r24
			1.982205298140594 * y[1] -
			0.982362233694224 * y[0];
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
    2ff0:	c7 01       	movw	r24, r14
    2ff2:	b6 01       	movw	r22, r12
    2ff4:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    2ff8:	6b 01       	movw	r12, r22
    2ffa:	7c 01       	movw	r14, r24
			0.001440081468920 * x[1] +
			0.000720040734460 * x[0] +
    2ffc:	2e e1       	ldi	r18, 0x1E	; 30
    2ffe:	31 ec       	ldi	r19, 0xC1	; 193
    3000:	4c e3       	ldi	r20, 0x3C	; 60
    3002:	5a e3       	ldi	r21, 0x3A	; 58
    3004:	60 91 08 01 	lds	r22, 0x0108
    3008:	70 91 09 01 	lds	r23, 0x0109
    300c:	80 91 0a 01 	lds	r24, 0x010A
    3010:	90 91 0b 01 	lds	r25, 0x010B
    3014:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3018:	9b 01       	movw	r18, r22
    301a:	ac 01       	movw	r20, r24
			0.982362233694224 * y[0];
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
			0.001440081468920 * x[1] +
    301c:	c7 01       	movw	r24, r14
    301e:	b6 01       	movw	r22, r12
    3020:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    3024:	6b 01       	movw	r12, r22
    3026:	7c 01       	movw	r14, r24
			0.000720040734460 * x[0] +
			1.922676771251572 * y[1] -
    3028:	26 e4       	ldi	r18, 0x46	; 70
    302a:	3a e1       	ldi	r19, 0x1A	; 26
    302c:	46 ef       	ldi	r20, 0xF6	; 246
    302e:	5f e3       	ldi	r21, 0x3F	; 63
    3030:	60 91 04 01 	lds	r22, 0x0104
    3034:	70 91 05 01 	lds	r23, 0x0105
    3038:	80 91 06 01 	lds	r24, 0x0106
    303c:	90 91 07 01 	lds	r25, 0x0107
    3040:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3044:	9b 01       	movw	r18, r22
    3046:	ac 01       	movw	r20, r24
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
			0.001440081468920 * x[1] +
			0.000720040734460 * x[0] +
    3048:	c7 01       	movw	r24, r14
    304a:	b6 01       	movw	r22, r12
    304c:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    3050:	6b 01       	movw	r12, r22
    3052:	7c 01       	movw	r14, r24
			1.922676771251572 * y[1] -
			0.925556934189412 * y[0];
    3054:	2d e4       	ldi	r18, 0x4D	; 77
    3056:	31 ef       	ldi	r19, 0xF1	; 241
    3058:	4c e6       	ldi	r20, 0x6C	; 108
    305a:	5f e3       	ldi	r21, 0x3F	; 63
    305c:	60 91 00 01 	lds	r22, 0x0100
    3060:	70 91 01 01 	lds	r23, 0x0101
    3064:	80 91 02 01 	lds	r24, 0x0102
    3068:	90 91 03 01 	lds	r25, 0x0103
    306c:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3070:	9b 01       	movw	r18, r22
    3072:	ac 01       	movw	r20, r24
    3074:	c7 01       	movw	r24, r14
    3076:	b6 01       	movw	r22, r12
    3078:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
		break;
    307c:	02 c2       	rjmp	.+1028   	; 0x3482 <_Z3lpfjP8as_class+0x620>
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
    307e:	28 ea       	ldi	r18, 0xA8	; 168
    3080:	36 e4       	ldi	r19, 0x46	; 70
    3082:	47 e3       	ldi	r20, 0x37	; 55
    3084:	5b e3       	ldi	r21, 0x3B	; 59
    3086:	60 91 10 01 	lds	r22, 0x0110
    308a:	70 91 11 01 	lds	r23, 0x0111
    308e:	80 91 12 01 	lds	r24, 0x0112
    3092:	90 91 13 01 	lds	r25, 0x0113
    3096:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    309a:	6b 01       	movw	r12, r22
    309c:	7c 01       	movw	r14, r24
			0.005593139818584 * x[1] +
    309e:	28 ea       	ldi	r18, 0xA8	; 168
    30a0:	36 e4       	ldi	r19, 0x46	; 70
    30a2:	47 eb       	ldi	r20, 0xB7	; 183
    30a4:	5b e3       	ldi	r21, 0x3B	; 59
    30a6:	60 91 0c 01 	lds	r22, 0x010C
    30aa:	70 91 0d 01 	lds	r23, 0x010D
    30ae:	80 91 0e 01 	lds	r24, 0x010E
    30b2:	90 91 0f 01 	lds	r25, 0x010F
    30b6:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    30ba:	9b 01       	movw	r18, r22
    30bc:	ac 01       	movw	r20, r24
			1.922676771251572 * y[1] -
			0.925556934189412 * y[0];
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
    30be:	c7 01       	movw	r24, r14
    30c0:	b6 01       	movw	r22, r12
    30c2:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    30c6:	6b 01       	movw	r12, r22
    30c8:	7c 01       	movw	r14, r24
			0.005593139818584 * x[1] +
			0.002796569909292 * x[0] +
    30ca:	28 ea       	ldi	r18, 0xA8	; 168
    30cc:	36 e4       	ldi	r19, 0x46	; 70
    30ce:	47 e3       	ldi	r20, 0x37	; 55
    30d0:	5b e3       	ldi	r21, 0x3B	; 59
    30d2:	60 91 08 01 	lds	r22, 0x0108
    30d6:	70 91 09 01 	lds	r23, 0x0109
    30da:	80 91 0a 01 	lds	r24, 0x010A
    30de:	90 91 0b 01 	lds	r25, 0x010B
    30e2:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    30e6:	9b 01       	movw	r18, r22
    30e8:	ac 01       	movw	r20, r24
			0.925556934189412 * y[0];
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
			0.005593139818584 * x[1] +
    30ea:	c7 01       	movw	r24, r14
    30ec:	b6 01       	movw	r22, r12
    30ee:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    30f2:	6b 01       	movw	r12, r22
    30f4:	7c 01       	movw	r14, r24
			0.002796569909292 * x[0] +
			1.844936876367589 * y[1] -
    30f6:	24 ee       	ldi	r18, 0xE4	; 228
    30f8:	36 e2       	ldi	r19, 0x26	; 38
    30fa:	4c ee       	ldi	r20, 0xEC	; 236
    30fc:	5f e3       	ldi	r21, 0x3F	; 63
    30fe:	60 91 04 01 	lds	r22, 0x0104
    3102:	70 91 05 01 	lds	r23, 0x0105
    3106:	80 91 06 01 	lds	r24, 0x0106
    310a:	90 91 07 01 	lds	r25, 0x0107
    310e:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3112:	9b 01       	movw	r18, r22
    3114:	ac 01       	movw	r20, r24
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
			0.005593139818584 * x[1] +
			0.002796569909292 * x[0] +
    3116:	c7 01       	movw	r24, r14
    3118:	b6 01       	movw	r22, r12
    311a:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    311e:	6b 01       	movw	r12, r22
    3120:	7c 01       	movw	r14, r24
			1.844936876367589 * y[1] -
			0.856123156004757 * y[0];
    3122:	23 ee       	ldi	r18, 0xE3	; 227
    3124:	3a e2       	ldi	r19, 0x2A	; 42
    3126:	4b e5       	ldi	r20, 0x5B	; 91
    3128:	5f e3       	ldi	r21, 0x3F	; 63
    312a:	60 91 00 01 	lds	r22, 0x0100
    312e:	70 91 01 01 	lds	r23, 0x0101
    3132:	80 91 02 01 	lds	r24, 0x0102
    3136:	90 91 03 01 	lds	r25, 0x0103
    313a:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    313e:	9b 01       	movw	r18, r22
    3140:	ac 01       	movw	r20, r24
    3142:	c7 01       	movw	r24, r14
    3144:	b6 01       	movw	r22, r12
    3146:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
		break;
    314a:	9b c1       	rjmp	.+822    	; 0x3482 <_Z3lpfjP8as_class+0x620>
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
    314c:	2d e7       	ldi	r18, 0x7D	; 125
    314e:	38 e9       	ldi	r19, 0x98	; 152
    3150:	4d e7       	ldi	r20, 0x7D	; 125
    3152:	5d e3       	ldi	r21, 0x3D	; 61
    3154:	60 91 10 01 	lds	r22, 0x0110
    3158:	70 91 11 01 	lds	r23, 0x0111
    315c:	80 91 12 01 	lds	r24, 0x0112
    3160:	90 91 13 01 	lds	r25, 0x0113
    3164:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3168:	6b 01       	movw	r12, r22
    316a:	7c 01       	movw	r14, r24
			0.123826001401403 * x[1] +
    316c:	2d e7       	ldi	r18, 0x7D	; 125
    316e:	38 e9       	ldi	r19, 0x98	; 152
    3170:	4d ef       	ldi	r20, 0xFD	; 253
    3172:	5d e3       	ldi	r21, 0x3D	; 61
    3174:	60 91 0c 01 	lds	r22, 0x010C
    3178:	70 91 0d 01 	lds	r23, 0x010D
    317c:	80 91 0e 01 	lds	r24, 0x010E
    3180:	90 91 0f 01 	lds	r25, 0x010F
    3184:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3188:	9b 01       	movw	r18, r22
    318a:	ac 01       	movw	r20, r24
			1.844936876367589 * y[1] -
			0.856123156004757 * y[0];
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
    318c:	c7 01       	movw	r24, r14
    318e:	b6 01       	movw	r22, r12
    3190:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    3194:	6b 01       	movw	r12, r22
    3196:	7c 01       	movw	r14, r24
			0.123826001401403 * x[1] +
			0.061913000700701 * x[0] +
    3198:	2d e7       	ldi	r18, 0x7D	; 125
    319a:	38 e9       	ldi	r19, 0x98	; 152
    319c:	4d e7       	ldi	r20, 0x7D	; 125
    319e:	5d e3       	ldi	r21, 0x3D	; 61
    31a0:	60 91 08 01 	lds	r22, 0x0108
    31a4:	70 91 09 01 	lds	r23, 0x0109
    31a8:	80 91 0a 01 	lds	r24, 0x010A
    31ac:	90 91 0b 01 	lds	r25, 0x010B
    31b0:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    31b4:	9b 01       	movw	r18, r22
    31b6:	ac 01       	movw	r20, r24
			0.856123156004757 * y[0];
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
			0.123826001401403 * x[1] +
    31b8:	c7 01       	movw	r24, r14
    31ba:	b6 01       	movw	r22, r12
    31bc:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    31c0:	6b 01       	movw	r12, r22
    31c2:	7c 01       	movw	r14, r24
			0.061913000700701 * x[0] +
			1.183374513189903 * y[1] -
    31c4:	21 ed       	ldi	r18, 0xD1	; 209
    31c6:	38 e7       	ldi	r19, 0x78	; 120
    31c8:	47 e9       	ldi	r20, 0x97	; 151
    31ca:	5f e3       	ldi	r21, 0x3F	; 63
    31cc:	60 91 04 01 	lds	r22, 0x0104
    31d0:	70 91 05 01 	lds	r23, 0x0105
    31d4:	80 91 06 01 	lds	r24, 0x0106
    31d8:	90 91 07 01 	lds	r25, 0x0107
    31dc:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    31e0:	9b 01       	movw	r18, r22
    31e2:	ac 01       	movw	r20, r24
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
			0.123826001401403 * x[1] +
			0.061913000700701 * x[0] +
    31e4:	c7 01       	movw	r24, r14
    31e6:	b6 01       	movw	r22, r12
    31e8:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    31ec:	6b 01       	movw	r12, r22
    31ee:	7c 01       	movw	r14, r24
			1.183374513189903 * y[1] -
			0.431026515992709 * y[0];
    31f0:	22 e8       	ldi	r18, 0x82	; 130
    31f2:	3f ea       	ldi	r19, 0xAF	; 175
    31f4:	4c ed       	ldi	r20, 0xDC	; 220
    31f6:	5e e3       	ldi	r21, 0x3E	; 62
    31f8:	60 91 00 01 	lds	r22, 0x0100
    31fc:	70 91 01 01 	lds	r23, 0x0101
    3200:	80 91 02 01 	lds	r24, 0x0102
    3204:	90 91 03 01 	lds	r25, 0x0103
    3208:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    320c:	9b 01       	movw	r18, r22
    320e:	ac 01       	movw	r20, r24
    3210:	c7 01       	movw	r24, r14
    3212:	b6 01       	movw	r22, r12
    3214:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
		break;
    3218:	34 c1       	rjmp	.+616    	; 0x3482 <_Z3lpfjP8as_class+0x620>
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
    321a:	25 e1       	ldi	r18, 0x15	; 21
    321c:	3a ea       	ldi	r19, 0xAA	; 170
    321e:	49 e6       	ldi	r20, 0x69	; 105
    3220:	5e e3       	ldi	r21, 0x3E	; 62
    3222:	60 91 10 01 	lds	r22, 0x0110
    3226:	70 91 11 01 	lds	r23, 0x0111
    322a:	80 91 12 01 	lds	r24, 0x0112
    322e:	90 91 13 01 	lds	r25, 0x0113
    3232:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3236:	6b 01       	movw	r12, r22
    3238:	7c 01       	movw	r14, r24
			0.456375736398963 * x[1] +
    323a:	25 e1       	ldi	r18, 0x15	; 21
    323c:	3a ea       	ldi	r19, 0xAA	; 170
    323e:	49 ee       	ldi	r20, 0xE9	; 233
    3240:	5e e3       	ldi	r21, 0x3E	; 62
    3242:	60 91 0c 01 	lds	r22, 0x010C
    3246:	70 91 0d 01 	lds	r23, 0x010D
    324a:	80 91 0e 01 	lds	r24, 0x010E
    324e:	90 91 0f 01 	lds	r25, 0x010F
    3252:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3256:	9b 01       	movw	r18, r22
    3258:	ac 01       	movw	r20, r24
			1.183374513189903 * y[1] -
			0.431026515992709 * y[0];
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
    325a:	c7 01       	movw	r24, r14
    325c:	b6 01       	movw	r22, r12
    325e:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    3262:	6b 01       	movw	r12, r22
    3264:	7c 01       	movw	r14, r24
			0.456375736398963 * x[1] +
			0.228187868199481 * x[0] +
    3266:	25 e1       	ldi	r18, 0x15	; 21
    3268:	3a ea       	ldi	r19, 0xAA	; 170
    326a:	49 e6       	ldi	r20, 0x69	; 105
    326c:	5e e3       	ldi	r21, 0x3E	; 62
    326e:	60 91 08 01 	lds	r22, 0x0108
    3272:	70 91 09 01 	lds	r23, 0x0109
    3276:	80 91 0a 01 	lds	r24, 0x010A
    327a:	90 91 0b 01 	lds	r25, 0x010B
    327e:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3282:	9b 01       	movw	r18, r22
    3284:	ac 01       	movw	r20, r24
			0.431026515992709 * y[0];
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
			0.456375736398963 * x[1] +
    3286:	c7 01       	movw	r24, r14
    3288:	b6 01       	movw	r22, r12
    328a:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    328e:	6b 01       	movw	r12, r22
    3290:	7c 01       	movw	r14, r24
			0.228187868199481 * x[0] +
			0.271922988606727 * y[1] -
    3292:	2d e7       	ldi	r18, 0x7D	; 125
    3294:	39 e3       	ldi	r19, 0x39	; 57
    3296:	4b e8       	ldi	r20, 0x8B	; 139
    3298:	5e e3       	ldi	r21, 0x3E	; 62
    329a:	60 91 04 01 	lds	r22, 0x0104
    329e:	70 91 05 01 	lds	r23, 0x0105
    32a2:	80 91 06 01 	lds	r24, 0x0106
    32a6:	90 91 07 01 	lds	r25, 0x0107
    32aa:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    32ae:	9b 01       	movw	r18, r22
    32b0:	ac 01       	movw	r20, r24
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
			0.456375736398963 * x[1] +
			0.228187868199481 * x[0] +
    32b2:	c7 01       	movw	r24, r14
    32b4:	b6 01       	movw	r22, r12
    32b6:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    32ba:	6b 01       	movw	r12, r22
    32bc:	7c 01       	movw	r14, r24
			0.271922988606727 * y[1] -
			0.184674461404652 * y[0];
    32be:	2d e4       	ldi	r18, 0x4D	; 77
    32c0:	3b e1       	ldi	r19, 0x1B	; 27
    32c2:	4d e3       	ldi	r20, 0x3D	; 61
    32c4:	5e e3       	ldi	r21, 0x3E	; 62
    32c6:	60 91 00 01 	lds	r22, 0x0100
    32ca:	70 91 01 01 	lds	r23, 0x0101
    32ce:	80 91 02 01 	lds	r24, 0x0102
    32d2:	90 91 03 01 	lds	r25, 0x0103
    32d6:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    32da:	9b 01       	movw	r18, r22
    32dc:	ac 01       	movw	r20, r24
    32de:	c7 01       	movw	r24, r14
    32e0:	b6 01       	movw	r22, r12
    32e2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
		break;
    32e6:	cd c0       	rjmp	.+410    	; 0x3482 <_Z3lpfjP8as_class+0x620>
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
    32e8:	28 eb       	ldi	r18, 0xB8	; 184
    32ea:	32 e7       	ldi	r19, 0x72	; 114
    32ec:	47 e8       	ldi	r20, 0x87	; 135
    32ee:	5e e3       	ldi	r21, 0x3E	; 62
    32f0:	60 91 10 01 	lds	r22, 0x0110
    32f4:	70 91 11 01 	lds	r23, 0x0111
    32f8:	80 91 12 01 	lds	r24, 0x0112
    32fc:	90 91 13 01 	lds	r25, 0x0113
    3300:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3304:	6b 01       	movw	r12, r22
    3306:	7c 01       	movw	r14, r24
			0.529094226850682 * x[1] +
    3308:	28 eb       	ldi	r18, 0xB8	; 184
    330a:	32 e7       	ldi	r19, 0x72	; 114
    330c:	47 e0       	ldi	r20, 0x07	; 7
    330e:	5f e3       	ldi	r21, 0x3F	; 63
    3310:	60 91 0c 01 	lds	r22, 0x010C
    3314:	70 91 0d 01 	lds	r23, 0x010D
    3318:	80 91 0e 01 	lds	r24, 0x010E
    331c:	90 91 0f 01 	lds	r25, 0x010F
    3320:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3324:	9b 01       	movw	r18, r22
    3326:	ac 01       	movw	r20, r24
			0.271922988606727 * y[1] -
			0.184674461404652 * y[0];
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
    3328:	c7 01       	movw	r24, r14
    332a:	b6 01       	movw	r22, r12
    332c:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    3330:	6b 01       	movw	r12, r22
    3332:	7c 01       	movw	r14, r24
			0.529094226850682 * x[1] +
			0.264547113425341 * x[0] +
    3334:	28 eb       	ldi	r18, 0xB8	; 184
    3336:	32 e7       	ldi	r19, 0x72	; 114
    3338:	47 e8       	ldi	r20, 0x87	; 135
    333a:	5e e3       	ldi	r21, 0x3E	; 62
    333c:	60 91 08 01 	lds	r22, 0x0108
    3340:	70 91 09 01 	lds	r23, 0x0109
    3344:	80 91 0a 01 	lds	r24, 0x010A
    3348:	90 91 0b 01 	lds	r25, 0x010B
    334c:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3350:	9b 01       	movw	r18, r22
    3352:	ac 01       	movw	r20, r24
			0.184674461404652 * y[0];
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
			0.529094226850682 * x[1] +
    3354:	c7 01       	movw	r24, r14
    3356:	b6 01       	movw	r22, r12
    3358:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    335c:	6b 01       	movw	r12, r22
    335e:	7c 01       	movw	r14, r24
			0.264547113425341 * x[0] +
			0.115754044922547 * y[1] -
    3360:	25 e7       	ldi	r18, 0x75	; 117
    3362:	30 e1       	ldi	r19, 0x10	; 16
    3364:	4d ee       	ldi	r20, 0xED	; 237
    3366:	5d e3       	ldi	r21, 0x3D	; 61
    3368:	60 91 04 01 	lds	r22, 0x0104
    336c:	70 91 05 01 	lds	r23, 0x0105
    3370:	80 91 06 01 	lds	r24, 0x0106
    3374:	90 91 07 01 	lds	r25, 0x0107
    3378:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    337c:	9b 01       	movw	r18, r22
    337e:	ac 01       	movw	r20, r24
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
			0.529094226850682 * x[1] +
			0.264547113425341 * x[0] +
    3380:	c7 01       	movw	r24, r14
    3382:	b6 01       	movw	r22, r12
    3384:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    3388:	6b 01       	movw	r12, r22
    338a:	7c 01       	movw	r14, r24
			0.115754044922547 * y[1] -
			0.173942498623910 * y[0];
    338c:	2b ef       	ldi	r18, 0xFB	; 251
    338e:	3d e1       	ldi	r19, 0x1D	; 29
    3390:	42 e3       	ldi	r20, 0x32	; 50
    3392:	5e e3       	ldi	r21, 0x3E	; 62
    3394:	60 91 00 01 	lds	r22, 0x0100
    3398:	70 91 01 01 	lds	r23, 0x0101
    339c:	80 91 02 01 	lds	r24, 0x0102
    33a0:	90 91 03 01 	lds	r25, 0x0103
    33a4:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    33a8:	9b 01       	movw	r18, r22
    33aa:	ac 01       	movw	r20, r24
    33ac:	c7 01       	movw	r24, r14
    33ae:	b6 01       	movw	r22, r12
    33b0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
		break;
    33b4:	66 c0       	rjmp	.+204    	; 0x3482 <_Z3lpfjP8as_class+0x620>
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
    33b6:	2a e7       	ldi	r18, 0x7A	; 122
    33b8:	32 e6       	ldi	r19, 0x62	; 98
    33ba:	4b eb       	ldi	r20, 0xBB	; 187
    33bc:	5e e3       	ldi	r21, 0x3E	; 62
    33be:	60 91 10 01 	lds	r22, 0x0110
    33c2:	70 91 11 01 	lds	r23, 0x0111
    33c6:	80 91 12 01 	lds	r24, 0x0112
    33ca:	90 91 13 01 	lds	r25, 0x0113
    33ce:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    33d2:	6b 01       	movw	r12, r22
    33d4:	7c 01       	movw	r14, r24
			0.731971376485284 * x[1] +
    33d6:	2a e7       	ldi	r18, 0x7A	; 122
    33d8:	32 e6       	ldi	r19, 0x62	; 98
    33da:	4b e3       	ldi	r20, 0x3B	; 59
    33dc:	5f e3       	ldi	r21, 0x3F	; 63
    33de:	60 91 0c 01 	lds	r22, 0x010C
    33e2:	70 91 0d 01 	lds	r23, 0x010D
    33e6:	80 91 0e 01 	lds	r24, 0x010E
    33ea:	90 91 0f 01 	lds	r25, 0x010F
    33ee:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    33f2:	9b 01       	movw	r18, r22
    33f4:	ac 01       	movw	r20, r24
			0.115754044922547 * y[1] -
			0.173942498623910 * y[0];
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
    33f6:	c7 01       	movw	r24, r14
    33f8:	b6 01       	movw	r22, r12
    33fa:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    33fe:	6b 01       	movw	r12, r22
    3400:	7c 01       	movw	r14, r24
			0.731971376485284 * x[1] +
			0.365985688242642 * x[0] -
    3402:	2a e7       	ldi	r18, 0x7A	; 122
    3404:	32 e6       	ldi	r19, 0x62	; 98
    3406:	4b eb       	ldi	r20, 0xBB	; 187
    3408:	5e e3       	ldi	r21, 0x3E	; 62
    340a:	60 91 08 01 	lds	r22, 0x0108
    340e:	70 91 09 01 	lds	r23, 0x0109
    3412:	80 91 0a 01 	lds	r24, 0x010A
    3416:	90 91 0b 01 	lds	r25, 0x010B
    341a:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    341e:	9b 01       	movw	r18, r22
    3420:	ac 01       	movw	r20, r24
			0.173942498623910 * y[0];
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
			0.731971376485284 * x[1] +
    3422:	c7 01       	movw	r24, r14
    3424:	b6 01       	movw	r22, r12
    3426:	0e 94 d7 31 	call	0x63ae	; 0x63ae <__addsf3>
    342a:	6b 01       	movw	r12, r22
    342c:	7c 01       	movw	r14, r24
			0.365985688242642 * x[0] -
			0.278614001640615 * y[1] -
    342e:	2f e7       	ldi	r18, 0x7F	; 127
    3430:	36 ea       	ldi	r19, 0xA6	; 166
    3432:	4e e8       	ldi	r20, 0x8E	; 142
    3434:	5e e3       	ldi	r21, 0x3E	; 62
    3436:	60 91 04 01 	lds	r22, 0x0104
    343a:	70 91 05 01 	lds	r23, 0x0105
    343e:	80 91 06 01 	lds	r24, 0x0106
    3442:	90 91 07 01 	lds	r25, 0x0107
    3446:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    344a:	9b 01       	movw	r18, r22
    344c:	ac 01       	movw	r20, r24
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
			0.731971376485284 * x[1] +
			0.365985688242642 * x[0] -
    344e:	c7 01       	movw	r24, r14
    3450:	b6 01       	movw	r22, r12
    3452:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
    3456:	6b 01       	movw	r12, r22
    3458:	7c 01       	movw	r14, r24
			0.278614001640615 * y[1] -
			0.185328751329953 * y[0];
    345a:	22 ed       	ldi	r18, 0xD2	; 210
    345c:	36 ec       	ldi	r19, 0xC6	; 198
    345e:	4d e3       	ldi	r20, 0x3D	; 61
    3460:	5e e3       	ldi	r21, 0x3E	; 62
    3462:	60 91 00 01 	lds	r22, 0x0100
    3466:	70 91 01 01 	lds	r23, 0x0101
    346a:	80 91 02 01 	lds	r24, 0x0102
    346e:	90 91 03 01 	lds	r25, 0x0103
    3472:	0e 94 8e 33 	call	0x671c	; 0x671c <__mulsf3>
    3476:	9b 01       	movw	r18, r22
    3478:	ac 01       	movw	r20, r24
    347a:	c7 01       	movw	r24, r14
    347c:	b6 01       	movw	r22, r12
    347e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__subsf3>
		break;
	}
			 
	//Shift output to make room for new value.
	y[0] = y[1];
    3482:	e4 e0       	ldi	r30, 0x04	; 4
    3484:	f1 e0       	ldi	r31, 0x01	; 1
    3486:	00 81       	ld	r16, Z
    3488:	11 81       	ldd	r17, Z+1	; 0x01
    348a:	22 81       	ldd	r18, Z+2	; 0x02
    348c:	33 81       	ldd	r19, Z+3	; 0x03
    348e:	00 93 00 01 	sts	0x0100, r16
    3492:	10 93 01 01 	sts	0x0101, r17
    3496:	20 93 02 01 	sts	0x0102, r18
    349a:	30 93 03 01 	sts	0x0103, r19
	y[1] = output;
    349e:	60 83       	st	Z, r22
    34a0:	71 83       	std	Z+1, r23	; 0x01
    34a2:	82 83       	std	Z+2, r24	; 0x02
    34a4:	93 83       	std	Z+3, r25	; 0x03
	
	//Send value back to calling function.
	return (uint16_t)output;
    34a6:	0e 94 ac 32 	call	0x6558	; 0x6558 <__fixunssfsi>
}
    34aa:	cb 01       	movw	r24, r22
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	1f 91       	pop	r17
    34b2:	0f 91       	pop	r16
    34b4:	ff 90       	pop	r15
    34b6:	ef 90       	pop	r14
    34b8:	df 90       	pop	r13
    34ba:	cf 90       	pop	r12
    34bc:	08 95       	ret

000034be <_Z15tx_u16_to_asciij>:

/************************************************String Manipulation Routines************************************************/
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
    34be:	df 92       	push	r13
    34c0:	ef 92       	push	r14
    34c2:	ff 92       	push	r15
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	f8 2e       	mov	r15, r24
    34ce:	e9 2e       	mov	r14, r25
    34d0:	04 e0       	ldi	r16, 0x04	; 4
    34d2:	10 e0       	ldi	r17, 0x00	; 0
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
    34d4:	c0 e1       	ldi	r28, 0x10	; 16
    34d6:	d7 e2       	ldi	r29, 0x27	; 39

/************************************************String Manipulation Routines************************************************/
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
	bool number_started = false; //Indicate conversion has started.
    34d8:	40 e0       	ldi	r20, 0x00	; 0
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    34da:	dd 24       	eor	r13, r13
    34dc:	d3 94       	inc	r13
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
    34de:	8f 2d       	mov	r24, r15
    34e0:	9e 2d       	mov	r25, r14
    34e2:	be 01       	movw	r22, r28
    34e4:	0e 94 3a 34 	call	0x6874	; 0x6874 <__udivmodhi4>
    34e8:	61 15       	cp	r22, r1
    34ea:	71 05       	cpc	r23, r1
    34ec:	11 f4       	brne	.+4      	; 0x34f2 <_Z15tx_u16_to_asciij+0x34>
    34ee:	44 23       	and	r20, r20
    34f0:	61 f0       	breq	.+24     	; 0x350a <_Z15tx_u16_to_asciij+0x4c>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    34f2:	80 e3       	ldi	r24, 0x30	; 48
    34f4:	86 0f       	add	r24, r22
    34f6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    34fa:	8f 2d       	mov	r24, r15
    34fc:	9e 2d       	mov	r25, r14
    34fe:	be 01       	movw	r22, r28
    3500:	0e 94 3a 34 	call	0x6874	; 0x6874 <__udivmodhi4>
    3504:	f8 2e       	mov	r15, r24
    3506:	e9 2e       	mov	r14, r25
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    3508:	4d 2d       	mov	r20, r13
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
    350a:	9e 01       	movw	r18, r28
    350c:	ad ec       	ldi	r26, 0xCD	; 205
    350e:	bc ec       	ldi	r27, 0xCC	; 204
    3510:	0e 94 95 34 	call	0x692a	; 0x692a <__umulhisi3>
    3514:	ec 01       	movw	r28, r24
    3516:	d6 95       	lsr	r29
    3518:	c7 95       	ror	r28
    351a:	d6 95       	lsr	r29
    351c:	c7 95       	ror	r28
    351e:	d6 95       	lsr	r29
    3520:	c7 95       	ror	r28
    3522:	01 50       	subi	r16, 0x01	; 1
    3524:	11 09       	sbc	r17, r1
    3526:	01 15       	cp	r16, r1
    3528:	11 05       	cpc	r17, r1
    352a:	c9 f6       	brne	.-78     	; 0x34de <_Z15tx_u16_to_asciij+0x20>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    352c:	80 e3       	ldi	r24, 0x30	; 48
    352e:	8f 0d       	add	r24, r15
    3530:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
}
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	ff 90       	pop	r15
    353e:	ef 90       	pop	r14
    3540:	df 90       	pop	r13
    3542:	08 95       	ret

00003544 <_Z15tx_u32_to_asciim>:

//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
    3544:	4f 92       	push	r4
    3546:	5f 92       	push	r5
    3548:	6f 92       	push	r6
    354a:	7f 92       	push	r7
    354c:	8f 92       	push	r8
    354e:	9f 92       	push	r9
    3550:	af 92       	push	r10
    3552:	bf 92       	push	r11
    3554:	cf 92       	push	r12
    3556:	df 92       	push	r13
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	16 2f       	mov	r17, r22
    3566:	67 2e       	mov	r6, r23
    3568:	78 2e       	mov	r7, r24
    356a:	09 2f       	mov	r16, r25
    356c:	c9 e0       	ldi	r28, 0x09	; 9
    356e:	d0 e0       	ldi	r29, 0x00	; 0
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    3570:	0f 2e       	mov	r0, r31
    3572:	c1 2c       	mov	r12, r1
    3574:	fa ec       	ldi	r31, 0xCA	; 202
    3576:	df 2e       	mov	r13, r31
    3578:	fa e9       	ldi	r31, 0x9A	; 154
    357a:	ef 2e       	mov	r14, r31
    357c:	fb e3       	ldi	r31, 0x3B	; 59
    357e:	ff 2e       	mov	r15, r31
    3580:	f0 2d       	mov	r31, r0
}

//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
    3582:	51 2c       	mov	r5, r1
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    3584:	44 24       	eor	r4, r4
    3586:	43 94       	inc	r4
//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    3588:	0f 2e       	mov	r0, r31
    358a:	fa e0       	ldi	r31, 0x0A	; 10
    358c:	8f 2e       	mov	r8, r31
    358e:	91 2c       	mov	r9, r1
    3590:	a1 2c       	mov	r10, r1
    3592:	b1 2c       	mov	r11, r1
    3594:	f0 2d       	mov	r31, r0
	{
		if(number / i || number_started)
    3596:	61 2f       	mov	r22, r17
    3598:	76 2d       	mov	r23, r6
    359a:	87 2d       	mov	r24, r7
    359c:	90 2f       	mov	r25, r16
    359e:	a7 01       	movw	r20, r14
    35a0:	96 01       	movw	r18, r12
    35a2:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    35a6:	21 15       	cp	r18, r1
    35a8:	31 05       	cpc	r19, r1
    35aa:	41 05       	cpc	r20, r1
    35ac:	51 05       	cpc	r21, r1
    35ae:	11 f4       	brne	.+4      	; 0x35b4 <_Z15tx_u32_to_asciim+0x70>
    35b0:	55 20       	and	r5, r5
    35b2:	89 f0       	breq	.+34     	; 0x35d6 <_Z15tx_u32_to_asciim+0x92>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    35b4:	80 e3       	ldi	r24, 0x30	; 48
    35b6:	82 0f       	add	r24, r18
    35b8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    35bc:	61 2f       	mov	r22, r17
    35be:	76 2d       	mov	r23, r6
    35c0:	87 2d       	mov	r24, r7
    35c2:	90 2f       	mov	r25, r16
    35c4:	a7 01       	movw	r20, r14
    35c6:	96 01       	movw	r18, r12
    35c8:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    35cc:	16 2f       	mov	r17, r22
    35ce:	67 2e       	mov	r6, r23
    35d0:	78 2e       	mov	r7, r24
    35d2:	09 2f       	mov	r16, r25
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    35d4:	54 2c       	mov	r5, r4
//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    35d6:	c7 01       	movw	r24, r14
    35d8:	b6 01       	movw	r22, r12
    35da:	a5 01       	movw	r20, r10
    35dc:	94 01       	movw	r18, r8
    35de:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    35e2:	69 01       	movw	r12, r18
    35e4:	7a 01       	movw	r14, r20
    35e6:	21 97       	sbiw	r28, 0x01	; 1
    35e8:	20 97       	sbiw	r28, 0x00	; 0
    35ea:	a9 f6       	brne	.-86     	; 0x3596 <_Z15tx_u32_to_asciim+0x52>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    35ec:	80 e3       	ldi	r24, 0x30	; 48
    35ee:	81 0f       	add	r24, r17
    35f0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
}
    35f4:	df 91       	pop	r29
    35f6:	cf 91       	pop	r28
    35f8:	1f 91       	pop	r17
    35fa:	0f 91       	pop	r16
    35fc:	ff 90       	pop	r15
    35fe:	ef 90       	pop	r14
    3600:	df 90       	pop	r13
    3602:	cf 90       	pop	r12
    3604:	bf 90       	pop	r11
    3606:	af 90       	pop	r10
    3608:	9f 90       	pop	r9
    360a:	8f 90       	pop	r8
    360c:	7f 90       	pop	r7
    360e:	6f 90       	pop	r6
    3610:	5f 90       	pop	r5
    3612:	4f 90       	pop	r4
    3614:	08 95       	ret

00003616 <_Z13calibrate_oscv>:
//register.  Once it can no longer detect Us on the serial port, it
//finds the midpoint of the oscillation calibration register values
//that Us were detected and uses this value as the final oscillator
//calibration value.  The processor then freezes until reset.
void calibrate_osc()
{
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
	uint8_t cal_start = 0, cal_stop = 0, rx_byte, cal_state = CALREADY;
	
	//Exit if calibration header is not in place.
	if(PIND & OCAL) return;
    361a:	4a 99       	sbic	0x09, 2	; 9
    361c:	49 c0       	rjmp	.+146    	; 0x36b0 <_Z13calibrate_oscv+0x9a>
	
	OSCCAL = 0;
    361e:	10 92 66 00 	sts	0x0066, r1
//finds the midpoint of the oscillation calibration register values
//that Us were detected and uses this value as the final oscillator
//calibration value.  The processor then freezes until reset.
void calibrate_osc()
{
	uint8_t cal_start = 0, cal_stop = 0, rx_byte, cal_state = CALREADY;
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	40 e0       	ldi	r20, 0x00	; 0
	
	//Else go into calibration loop.
	while(1)
	{
		//Check if byte received.
		if(UCSR0A & flgRXC0)
    3628:	a0 ec       	ldi	r26, 0xC0	; 192
    362a:	b0 e0       	ldi	r27, 0x00	; 0
		{
			rx_byte = UDR0;
    362c:	c6 ec       	ldi	r28, 0xC6	; 198
    362e:	d0 e0       	ldi	r29, 0x00	; 0
				if(rx_byte == 'U')
				{
					cal_start = OSCCAL;
					cal_state = CALSTART;
				}
				OSCCAL++;
    3630:	e6 e6       	ldi	r30, 0x66	; 102
    3632:	f0 e0       	ldi	r31, 0x00	; 0
				//Increment oscillation calibration register until 'U' is detected.
				case CALREADY:
				if(rx_byte == 'U')
				{
					cal_start = OSCCAL;
					cal_state = CALSTART;
    3634:	51 e0       	ldi	r21, 0x01	; 1
				}
				//Find OSCCAL range that allows the correct detection of U.
				else
				{
					cal_stop = OSCCAL - 1;
					cal_state = CALSTOP;
    3636:	32 e0       	ldi	r19, 0x02	; 2
	
	//Else go into calibration loop.
	while(1)
	{
		//Check if byte received.
		if(UCSR0A & flgRXC0)
    3638:	8c 91       	ld	r24, X
    363a:	88 23       	and	r24, r24
    363c:	ec f7       	brge	.-6      	; 0x3638 <_Z13calibrate_oscv+0x22>
		{
			rx_byte = UDR0;
    363e:	88 81       	ld	r24, Y
			
			switch(cal_state)
    3640:	99 23       	and	r25, r25
    3642:	19 f0       	breq	.+6      	; 0x364a <_Z13calibrate_oscv+0x34>
    3644:	91 30       	cpi	r25, 0x01	; 1
    3646:	49 f0       	breq	.+18     	; 0x365a <_Z13calibrate_oscv+0x44>
    3648:	12 c0       	rjmp	.+36     	; 0x366e <_Z13calibrate_oscv+0x58>
			{
				//Increment oscillation calibration register until 'U' is detected.
				case CALREADY:
				if(rx_byte == 'U')
    364a:	85 35       	cpi	r24, 0x55	; 85
    364c:	11 f4       	brne	.+4      	; 0x3652 <_Z13calibrate_oscv+0x3c>
				{
					cal_start = OSCCAL;
    364e:	40 81       	ld	r20, Z
					cal_state = CALSTART;
    3650:	95 2f       	mov	r25, r21
				}
				OSCCAL++;
    3652:	80 81       	ld	r24, Z
    3654:	8f 5f       	subi	r24, 0xFF	; 255
    3656:	80 83       	st	Z, r24
				break;
    3658:	ef cf       	rjmp	.-34     	; 0x3638 <_Z13calibrate_oscv+0x22>
				
				case CALSTART:
				//Increment OSCCAL until U is no longer detected.
				if(rx_byte == 'U')
    365a:	85 35       	cpi	r24, 0x55	; 85
    365c:	21 f4       	brne	.+8      	; 0x3666 <_Z13calibrate_oscv+0x50>
				{
					OSCCAL++;
    365e:	80 81       	ld	r24, Z
    3660:	8f 5f       	subi	r24, 0xFF	; 255
    3662:	80 83       	st	Z, r24
    3664:	e9 cf       	rjmp	.-46     	; 0x3638 <_Z13calibrate_oscv+0x22>
				}
				//Find OSCCAL range that allows the correct detection of U.
				else
				{
					cal_stop = OSCCAL - 1;
    3666:	20 81       	ld	r18, Z
    3668:	21 50       	subi	r18, 0x01	; 1
					cal_state = CALSTOP;
    366a:	93 2f       	mov	r25, r19
    366c:	e5 cf       	rjmp	.-54     	; 0x3638 <_Z13calibrate_oscv+0x22>
				
				//Calibration complete. Save value and spin lock the processor.
				case CALSTOP:
				default:
				//Calculate final OSCCAL value.
				OSCCAL = cal_start + (cal_stop - cal_start) / 2;
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	24 1b       	sub	r18, r20
    3672:	31 09       	sbc	r19, r1
    3674:	c9 01       	movw	r24, r18
    3676:	99 23       	and	r25, r25
    3678:	0c f4       	brge	.+2      	; 0x367c <_Z13calibrate_oscv+0x66>
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	95 95       	asr	r25
    367e:	87 95       	ror	r24
    3680:	84 0f       	add	r24, r20
    3682:	c6 e6       	ldi	r28, 0x66	; 102
    3684:	d0 e0       	ldi	r29, 0x00	; 0
    3686:	88 83       	st	Y, r24
				
				//Indicate calibration complete.
				atmega_uart::tx_string_p(PSTR("OK. OSCCAL = "));
    3688:	8c ed       	ldi	r24, 0xDC	; 220
    368a:	9c e0       	ldi	r25, 0x0C	; 12
    368c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
				tx_u32_to_ascii(OSCCAL);
    3690:	68 81       	ld	r22, Y
    3692:	70 e0       	ldi	r23, 0x00	; 0
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
				atmega_uart::tx_byte('\r');
    369c:	8d e0       	ldi	r24, 0x0D	; 13
    369e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				
				//Save oscillator calibration value.
				atmega_eeprom::write_byte((uint8_t *)OSC_ADDR, OSCCAL);
    36a2:	68 81       	ld	r22, Y
    36a4:	82 e0       	ldi	r24, 0x02	; 2
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN13atmega_eeprom10write_byteEPhh>
				cli();	//Disable interrupts.
    36ac:	f8 94       	cli
    36ae:	ff cf       	rjmp	.-2      	; 0x36ae <_Z13calibrate_oscv+0x98>
				while(1);	//Done. Spin lock processor.
				break;
			}
		}
	}
}
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	08 95       	ret

000036b6 <_Z14init_processorP8as_class>:
bool bin_overflowed;

/*******************************************Initialization and Configuration Routines****************************************/
//Initialize the MCU.
void init_processor(as_class *as)
{
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
    36be:	00 d0       	rcall	.+0      	; 0x36c0 <_Z14init_processorP8as_class+0xa>
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	8c 01       	movw	r16, r24
	//Wait for voltage to stabilize on sensor board.
	for(volatile int i = 0; i < 10000; i++);
    36c6:	1a 82       	std	Y+2, r1	; 0x02
    36c8:	19 82       	std	Y+1, r1	; 0x01
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	9a 81       	ldd	r25, Y+2	; 0x02
    36ce:	80 31       	cpi	r24, 0x10	; 16
    36d0:	97 42       	sbci	r25, 0x27	; 39
    36d2:	5c f4       	brge	.+22     	; 0x36ea <_Z14init_processorP8as_class+0x34>
    36d4:	29 81       	ldd	r18, Y+1	; 0x01
    36d6:	3a 81       	ldd	r19, Y+2	; 0x02
    36d8:	2f 5f       	subi	r18, 0xFF	; 255
    36da:	3f 4f       	sbci	r19, 0xFF	; 255
    36dc:	3a 83       	std	Y+2, r19	; 0x02
    36de:	29 83       	std	Y+1, r18	; 0x01
    36e0:	29 81       	ldd	r18, Y+1	; 0x01
    36e2:	3a 81       	ldd	r19, Y+2	; 0x02
    36e4:	20 31       	cpi	r18, 0x10	; 16
    36e6:	37 42       	sbci	r19, 0x27	; 39
    36e8:	ac f3       	brlt	.-22     	; 0x36d4 <_Z14init_processorP8as_class+0x1e>
	
	atmega_twi::twi_master_init();	//I2C init.
    36ea:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_ZN10atmega_twi15twi_master_initEv>
	atmega_spi::spi_master_init();	//SPI init.
    36ee:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN10atmega_spi15spi_master_initEv>
	atmega_uart::uart_init(UBRR);	//UART init.
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN11atmega_uart9uart_initEj>
	
	//Turn off unused hardware.
	PRR =  (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRADC);
    36fa:	81 e6       	ldi	r24, 0x61	; 97
    36fc:	80 93 64 00 	sts	0x0064, r24
	ACSR = (1  << ACD); //Turn off analog comparator.
    3700:	80 e8       	ldi	r24, 0x80	; 128
    3702:	80 bf       	out	0x30, r24	; 48
	
	//Pull up unused pins.
	PORTB |= 0xC0;
    3704:	85 b1       	in	r24, 0x05	; 5
    3706:	80 6c       	ori	r24, 0xC0	; 192
    3708:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0xFF;
    370a:	88 b1       	in	r24, 0x08	; 8
    370c:	8f ef       	ldi	r24, 0xFF	; 255
    370e:	88 b9       	out	0x08, r24	; 8
	PORTD |= 0xFC;
    3710:	8b b1       	in	r24, 0x0b	; 11
    3712:	8c 6f       	ori	r24, 0xFC	; 252
    3714:	8b b9       	out	0x0b, r24	; 11
	
	//Set pins as outputs.
	ddrADCS |= (1 << ADCS);
    3716:	21 9a       	sbi	0x04, 1	; 4
	ddrDACS |= (1 << DACS);
    3718:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << PORTB0);
    371a:	20 9a       	sbi	0x04, 0	; 4
	
	
	//Disable ADC and DAC.
	prtADCS |= (1 << ADCS);
    371c:	29 9a       	sbi	0x05, 1	; 5
	prtDACS |= (1 << DACS);
    371e:	2a 9a       	sbi	0x05, 2	; 5
	
	//Load TIMER1 configuration.
	TCCR1B = 0x09;					//No prescaling, CTC.
    3720:	89 e0       	ldi	r24, 0x09	; 9
    3722:	80 93 81 00 	sts	0x0081, r24
	OCR1A  = INT_TIME;				//Match counter every 1 ms.
    3726:	8f e0       	ldi	r24, 0x0F	; 15
    3728:	9d e1       	ldi	r25, 0x1D	; 29
    372a:	90 93 89 00 	sts	0x0089, r25
    372e:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02;					//Enable TIMER1_COMPA interrupt.
    3732:	82 e0       	ldi	r24, 0x02	; 2
    3734:	80 93 6f 00 	sts	0x006F, r24
	
	//Zero the DAC.
	write_dac(ZERO_VOLT);
    3738:	8f ef       	ldi	r24, 0xFF	; 255
    373a:	97 e0       	ldi	r25, 0x07	; 7
    373c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z9write_dacj>
	
	//Set initial config for digital pot and analog switches.
	init_i2c_devices(as);
    3740:	c8 01       	movw	r24, r16
    3742:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_Z16init_i2c_devicesP8as_class>
	
	//Calibrate oscillator if necessary.
	calibrate_osc();
    3746:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_Z13calibrate_oscv>
	
	//Load oscillator calibration value.
	OSCCAL = atmega_eeprom::read_byte((uint8_t *)OSC_ADDR);
    374a:	82 e0       	ldi	r24, 0x02	; 2
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN13atmega_eeprom9read_byteEPh>
    3752:	80 93 66 00 	sts	0x0066, r24
	
	sei(); //Enable global interrupts.
    3756:	78 94       	sei
}
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	1f 91       	pop	r17
    3762:	0f 91       	pop	r16
    3764:	08 95       	ret

00003766 <_Z15tx_int_to_asciil>:
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}

//Convert a 32-bit signed integer to an ASCII string and transmit it out the UART.
void tx_int_to_ascii(int32_t number)
{
    3766:	2f 92       	push	r2
    3768:	3f 92       	push	r3
    376a:	4f 92       	push	r4
    376c:	5f 92       	push	r5
    376e:	6f 92       	push	r6
    3770:	7f 92       	push	r7
    3772:	8f 92       	push	r8
    3774:	9f 92       	push	r9
    3776:	af 92       	push	r10
    3778:	bf 92       	push	r11
    377a:	cf 92       	push	r12
    377c:	df 92       	push	r13
    377e:	ef 92       	push	r14
    3780:	ff 92       	push	r15
    3782:	0f 93       	push	r16
    3784:	1f 93       	push	r17
    3786:	cf 93       	push	r28
    3788:	df 93       	push	r29
    378a:	00 d0       	rcall	.+0      	; 0x378c <_Z15tx_int_to_asciil+0x26>
    378c:	1f 92       	push	r1
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	6b 01       	movw	r12, r22
    3794:	7c 01       	movw	r14, r24
	bool number_started = false; //Indicate conversion has started.
	
	//Check if negative.
	if(number < 0)
    3796:	99 23       	and	r25, r25
    3798:	0c f0       	brlt	.+2      	; 0x379c <_Z15tx_int_to_asciil+0x36>
    379a:	41 c0       	rjmp	.+130    	; 0x381e <_Z15tx_int_to_asciil+0xb8>
	{
		atmega_uart::tx_byte('-');
    379c:	8d e2       	ldi	r24, 0x2D	; 45
    379e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		number *= -1;
    37a2:	f0 94       	com	r15
    37a4:	e0 94       	com	r14
    37a6:	d0 94       	com	r13
    37a8:	c0 94       	com	r12
    37aa:	c1 1c       	adc	r12, r1
    37ac:	d1 1c       	adc	r13, r1
    37ae:	e1 1c       	adc	r14, r1
    37b0:	f1 1c       	adc	r15, r1
    37b2:	35 c0       	rjmp	.+106    	; 0x381e <_Z15tx_int_to_asciil+0xb8>
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
    37b4:	0c 2d       	mov	r16, r12
    37b6:	1d 2d       	mov	r17, r13
    37b8:	eb 82       	std	Y+3, r14	; 0x03
    37ba:	fa 82       	std	Y+2, r15	; 0x02
    37bc:	c7 01       	movw	r24, r14
    37be:	b6 01       	movw	r22, r12
    37c0:	a5 01       	movw	r20, r10
    37c2:	94 01       	movw	r18, r8
    37c4:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    37c8:	21 15       	cp	r18, r1
    37ca:	31 05       	cpc	r19, r1
    37cc:	41 05       	cpc	r20, r1
    37ce:	51 05       	cpc	r21, r1
    37d0:	19 f4       	brne	.+6      	; 0x37d8 <_Z15tx_int_to_asciil+0x72>
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	88 23       	and	r24, r24
    37d6:	81 f0       	breq	.+32     	; 0x37f8 <_Z15tx_int_to_asciil+0x92>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    37d8:	80 e3       	ldi	r24, 0x30	; 48
    37da:	82 0f       	add	r24, r18
    37dc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    37e0:	60 2f       	mov	r22, r16
    37e2:	71 2f       	mov	r23, r17
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	9a 81       	ldd	r25, Y+2	; 0x02
    37e8:	a5 01       	movw	r20, r10
    37ea:	94 01       	movw	r18, r8
    37ec:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    37f0:	6b 01       	movw	r12, r22
    37f2:	7c 01       	movw	r14, r24
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    37f4:	e1 e0       	ldi	r30, 0x01	; 1
    37f6:	e9 83       	std	Y+1, r30	; 0x01
	{
		atmega_uart::tx_byte('-');
		number *= -1;
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    37f8:	c5 01       	movw	r24, r10
    37fa:	b4 01       	movw	r22, r8
    37fc:	a3 01       	movw	r20, r6
    37fe:	92 01       	movw	r18, r4
    3800:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    3804:	49 01       	movw	r8, r18
    3806:	5a 01       	movw	r10, r20
    3808:	f1 e0       	ldi	r31, 0x01	; 1
    380a:	2f 1a       	sub	r2, r31
    380c:	31 08       	sbc	r3, r1
    380e:	21 14       	cp	r2, r1
    3810:	31 04       	cpc	r3, r1
    3812:	81 f6       	brne	.-96     	; 0x37b4 <_Z15tx_int_to_asciil+0x4e>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    3814:	80 e3       	ldi	r24, 0x30	; 48
    3816:	8c 0d       	add	r24, r12
    3818:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    381c:	15 c0       	rjmp	.+42     	; 0x3848 <_Z15tx_int_to_asciil+0xe2>
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}

//Convert a 32-bit signed integer to an ASCII string and transmit it out the UART.
void tx_int_to_ascii(int32_t number)
{
    381e:	09 e0       	ldi	r16, 0x09	; 9
    3820:	10 e0       	ldi	r17, 0x00	; 0
    3822:	0f 2e       	mov	r0, r31
    3824:	81 2c       	mov	r8, r1
    3826:	fa ec       	ldi	r31, 0xCA	; 202
    3828:	9f 2e       	mov	r9, r31
    382a:	fa e9       	ldi	r31, 0x9A	; 154
    382c:	af 2e       	mov	r10, r31
    382e:	fb e3       	ldi	r31, 0x3B	; 59
    3830:	bf 2e       	mov	r11, r31
    3832:	f0 2d       	mov	r31, r0
    3834:	19 82       	std	Y+1, r1	; 0x01
	{
		atmega_uart::tx_byte('-');
		number *= -1;
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    3836:	0f 2e       	mov	r0, r31
    3838:	fa e0       	ldi	r31, 0x0A	; 10
    383a:	4f 2e       	mov	r4, r31
    383c:	51 2c       	mov	r5, r1
    383e:	61 2c       	mov	r6, r1
    3840:	71 2c       	mov	r7, r1
    3842:	f0 2d       	mov	r31, r0
    3844:	18 01       	movw	r2, r16
    3846:	b6 cf       	rjmp	.-148    	; 0x37b4 <_Z15tx_int_to_asciil+0x4e>
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	ff 90       	pop	r15
    3858:	ef 90       	pop	r14
    385a:	df 90       	pop	r13
    385c:	cf 90       	pop	r12
    385e:	bf 90       	pop	r11
    3860:	af 90       	pop	r10
    3862:	9f 90       	pop	r9
    3864:	8f 90       	pop	r8
    3866:	7f 90       	pop	r7
    3868:	6f 90       	pop	r6
    386a:	5f 90       	pop	r5
    386c:	4f 90       	pop	r4
    386e:	3f 90       	pop	r3
    3870:	2f 90       	pop	r2
    3872:	08 95       	ret

00003874 <_Z13string_to_u32PKhPhh>:

//Converts a string into an unsigned integer.
//This function looks for user defined character to stop the conversion.
uint32_t string_to_u32(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
    3874:	2f 92       	push	r2
    3876:	3f 92       	push	r3
    3878:	4f 92       	push	r4
    387a:	5f 92       	push	r5
    387c:	6f 92       	push	r6
    387e:	7f 92       	push	r7
    3880:	8f 92       	push	r8
    3882:	9f 92       	push	r9
    3884:	af 92       	push	r10
    3886:	bf 92       	push	r11
    3888:	cf 92       	push	r12
    388a:	df 92       	push	r13
    388c:	ef 92       	push	r14
    388e:	ff 92       	push	r15
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	28 97       	sbiw	r28, 0x08	; 8
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	7c 83       	std	Y+4, r23	; 0x04
    38ae:	6b 83       	std	Y+3, r22	; 0x03
    38b0:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    38b2:	dc 01       	movw	r26, r24
    38b4:	5c 91       	ld	r21, X
    38b6:	54 17       	cp	r21, r20
    38b8:	09 f4       	brne	.+2      	; 0x38bc <_Z13string_to_u32PKhPhh+0x48>
    38ba:	97 c0       	rjmp	.+302    	; 0x39ea <_Z13string_to_u32PKhPhh+0x176>
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
    38bc:	80 ed       	ldi	r24, 0xD0	; 208
    38be:	85 0f       	add	r24, r21
    38c0:	8a 30       	cpi	r24, 0x0A	; 10
    38c2:	08 f0       	brcs	.+2      	; 0x38c6 <_Z13string_to_u32PKhPhh+0x52>
    38c4:	6b c0       	rjmp	.+214    	; 0x399c <_Z13string_to_u32PKhPhh+0x128>
    38c6:	4d 01       	movw	r8, r26
    38c8:	bf ef       	ldi	r27, 0xFF	; 255
    38ca:	8b 1a       	sub	r8, r27
    38cc:	9b 0a       	sbc	r9, r27
    38ce:	e1 e0       	ldi	r30, 0x01	; 1
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    38d2:	61 2c       	mov	r6, r1
    38d4:	71 2c       	mov	r7, r1
//Converts a string into an unsigned integer.
//This function looks for user defined character to stop the conversion.
uint32_t string_to_u32(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
	uint8_t index = 0;
	uint64_t number = 0;
    38d6:	d1 2c       	mov	r13, r1
    38d8:	e1 2c       	mov	r14, r1
    38da:	f1 2c       	mov	r15, r1
    38dc:	00 e0       	ldi	r16, 0x00	; 0
    38de:	b1 2c       	mov	r11, r1
    38e0:	c1 2c       	mov	r12, r1
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	0a c0       	rjmp	.+20     	; 0x38fc <_Z13string_to_u32PKhPhh+0x88>
    38e8:	9f 01       	movw	r18, r30
    38ea:	2f 5f       	subi	r18, 0xFF	; 255
    38ec:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
    38ee:	40 ed       	ldi	r20, 0xD0	; 208
    38f0:	45 0f       	add	r20, r21
    38f2:	4a 30       	cpi	r20, 0x0A	; 10
    38f4:	08 f0       	brcs	.+2      	; 0x38f8 <_Z13string_to_u32PKhPhh+0x84>
    38f6:	52 c0       	rjmp	.+164    	; 0x399c <_Z13string_to_u32PKhPhh+0x128>
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    38f8:	3f 01       	movw	r6, r30
    38fa:	f9 01       	movw	r30, r18
    38fc:	55 24       	eor	r5, r5
    38fe:	5a 94       	dec	r5
    3900:	5e 0e       	add	r5, r30
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
		{
			//Add character to number.
			number += (array[index] - '0');
    3902:	a5 2f       	mov	r26, r21
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	d0 97       	sbiw	r26, 0x30	; 48
    3908:	1b 2f       	mov	r17, r27
    390a:	11 0f       	add	r17, r17
    390c:	11 0b       	sbc	r17, r17
    390e:	2d 2d       	mov	r18, r13
    3910:	3e 2d       	mov	r19, r14
    3912:	4f 2d       	mov	r20, r15
    3914:	50 2f       	mov	r21, r16
    3916:	6b 2d       	mov	r22, r11
    3918:	7c 2d       	mov	r23, r12
    391a:	aa 2e       	mov	r10, r26
    391c:	bb 2e       	mov	r11, r27
    391e:	c1 2e       	mov	r12, r17
    3920:	d1 2e       	mov	r13, r17
    3922:	e1 2e       	mov	r14, r17
    3924:	f1 2e       	mov	r15, r17
    3926:	01 2f       	mov	r16, r17
    3928:	0e 94 cf 34 	call	0x699e	; 0x699e <__adddi3>
    392c:	19 2f       	mov	r17, r25
    392e:	d2 2e       	mov	r13, r18
    3930:	e3 2e       	mov	r14, r19
    3932:	f4 2e       	mov	r15, r20
    3934:	05 2f       	mov	r16, r21
    3936:	b6 2e       	mov	r11, r22
    3938:	c7 2e       	mov	r12, r23
    393a:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(array[index + 1] >= '0' && array[index + 1] <= '9')
    393c:	ad 81       	ldd	r26, Y+5	; 0x05
    393e:	be 81       	ldd	r27, Y+6	; 0x06
    3940:	a6 0d       	add	r26, r6
    3942:	b7 1d       	adc	r27, r7
    3944:	11 96       	adiw	r26, 0x01	; 1
    3946:	ac 91       	ld	r26, X
    3948:	a0 53       	subi	r26, 0x30	; 48
    394a:	aa 30       	cpi	r26, 0x0A	; 10
    394c:	80 f5       	brcc	.+96     	; 0x39ae <_Z13string_to_u32PKhPhh+0x13a>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    394e:	01 e0       	ldi	r16, 0x01	; 1
    3950:	0e 94 b6 34 	call	0x696c	; 0x696c <__ashldi3>
    3954:	22 2e       	mov	r2, r18
    3956:	33 2e       	mov	r3, r19
    3958:	44 2e       	mov	r4, r20
    395a:	65 2e       	mov	r6, r21
    395c:	76 2e       	mov	r7, r22
    395e:	a7 2f       	mov	r26, r23
    3960:	8f 83       	std	Y+7, r24	; 0x07
    3962:	b9 2f       	mov	r27, r25
    3964:	02 e0       	ldi	r16, 0x02	; 2
    3966:	0e 94 b6 34 	call	0x696c	; 0x696c <__ashldi3>
    396a:	a2 2e       	mov	r10, r18
    396c:	b3 2e       	mov	r11, r19
    396e:	c4 2e       	mov	r12, r20
    3970:	d5 2e       	mov	r13, r21
    3972:	e6 2e       	mov	r14, r22
    3974:	f7 2e       	mov	r15, r23
    3976:	08 2f       	mov	r16, r24
    3978:	19 2f       	mov	r17, r25
    397a:	22 2d       	mov	r18, r2
    397c:	33 2d       	mov	r19, r3
    397e:	44 2d       	mov	r20, r4
    3980:	56 2d       	mov	r21, r6
    3982:	67 2d       	mov	r22, r7
    3984:	7a 2f       	mov	r23, r26
    3986:	8f 81       	ldd	r24, Y+7	; 0x07
    3988:	9b 2f       	mov	r25, r27
    398a:	0e 94 cf 34 	call	0x699e	; 0x699e <__adddi3>
    398e:	d2 2e       	mov	r13, r18
    3990:	e3 2e       	mov	r14, r19
    3992:	f4 2e       	mov	r15, r20
    3994:	05 2f       	mov	r16, r21
    3996:	b6 2e       	mov	r11, r22
    3998:	c7 2e       	mov	r12, r23
    399a:	09 c0       	rjmp	.+18     	; 0x39ae <_Z13string_to_u32PKhPhh+0x13a>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	eb 81       	ldd	r30, Y+3	; 0x03
    39a0:	fc 81       	ldd	r31, Y+4	; 0x04
    39a2:	80 83       	st	Z, r24
			return 0;
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	2e c0       	rjmp	.+92     	; 0x3a0a <_Z13string_to_u32PKhPhh+0x196>
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    39ae:	d4 01       	movw	r26, r8
    39b0:	5d 91       	ld	r21, X+
    39b2:	4d 01       	movw	r8, r26
    39b4:	ba 81       	ldd	r27, Y+2	; 0x02
    39b6:	5b 17       	cp	r21, r27
    39b8:	21 f0       	breq	.+8      	; 0x39c2 <_Z13string_to_u32PKhPhh+0x14e>
    39ba:	ea 30       	cpi	r30, 0x0A	; 10
    39bc:	f1 05       	cpc	r31, r1
    39be:	09 f0       	breq	.+2      	; 0x39c2 <_Z13string_to_u32PKhPhh+0x14e>
    39c0:	93 cf       	rjmp	.-218    	; 0x38e8 <_Z13string_to_u32PKhPhh+0x74>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, number out of range or no digits at all.
	if((index > 10) || (number > U32_MAX) || (!index)) 
    39c2:	26 ef       	ldi	r18, 0xF6	; 246
    39c4:	25 0d       	add	r18, r5
    39c6:	26 3f       	cpi	r18, 0xF6	; 246
    39c8:	80 f0       	brcs	.+32     	; 0x39ea <_Z13string_to_u32PKhPhh+0x176>
    39ca:	2d 2d       	mov	r18, r13
    39cc:	3e 2d       	mov	r19, r14
    39ce:	4f 2d       	mov	r20, r15
    39d0:	50 2f       	mov	r21, r16
    39d2:	6b 2d       	mov	r22, r11
    39d4:	7c 2d       	mov	r23, r12
    39d6:	2f 3f       	cpi	r18, 0xFF	; 255
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	4f 4f       	sbci	r20, 0xFF	; 255
    39dc:	5f 4f       	sbci	r21, 0xFF	; 255
    39de:	61 05       	cpc	r22, r1
    39e0:	71 05       	cpc	r23, r1
    39e2:	81 05       	cpc	r24, r1
    39e4:	91 05       	cpc	r25, r1
    39e6:	51 f0       	breq	.+20     	; 0x39fc <_Z13string_to_u32PKhPhh+0x188>
    39e8:	48 f0       	brcs	.+18     	; 0x39fc <_Z13string_to_u32PKhPhh+0x188>
	{
		*errno = ER_ERROR;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	ab 81       	ldd	r26, Y+3	; 0x03
    39ee:	bc 81       	ldd	r27, Y+4	; 0x04
    39f0:	8c 93       	st	X, r24
		return 0;
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	07 c0       	rjmp	.+14     	; 0x3a0a <_Z13string_to_u32PKhPhh+0x196>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    39fc:	eb 81       	ldd	r30, Y+3	; 0x03
    39fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3a00:	10 82       	st	Z, r1
	return (uint32_t)number;
    3a02:	6d 2d       	mov	r22, r13
    3a04:	7e 2d       	mov	r23, r14
    3a06:	8f 2d       	mov	r24, r15
    3a08:	90 2f       	mov	r25, r16
}
    3a0a:	28 96       	adiw	r28, 0x08	; 8
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	df 90       	pop	r13
    3a24:	cf 90       	pop	r12
    3a26:	bf 90       	pop	r11
    3a28:	af 90       	pop	r10
    3a2a:	9f 90       	pop	r9
    3a2c:	8f 90       	pop	r8
    3a2e:	7f 90       	pop	r7
    3a30:	6f 90       	pop	r6
    3a32:	5f 90       	pop	r5
    3a34:	4f 90       	pop	r4
    3a36:	3f 90       	pop	r3
    3a38:	2f 90       	pop	r2
    3a3a:	08 95       	ret

00003a3c <_Z13string_to_intPKhPhh>:

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
int32_t string_to_int(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
    3a3c:	2f 92       	push	r2
    3a3e:	3f 92       	push	r3
    3a40:	4f 92       	push	r4
    3a42:	5f 92       	push	r5
    3a44:	6f 92       	push	r6
    3a46:	7f 92       	push	r7
    3a48:	8f 92       	push	r8
    3a4a:	9f 92       	push	r9
    3a4c:	af 92       	push	r10
    3a4e:	bf 92       	push	r11
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	29 97       	sbiw	r28, 0x09	; 9
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	9f 83       	std	Y+7, r25	; 0x07
    3a72:	8e 83       	std	Y+6, r24	; 0x06
    3a74:	7c 83       	std	Y+4, r23	; 0x04
    3a76:	6b 83       	std	Y+3, r22	; 0x03
    3a78:	4a 83       	std	Y+2, r20	; 0x02
	
	//Switch to new array pointer to account for any negative sign.
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	8c 91       	ld	r24, X
    3a7e:	8d 32       	cpi	r24, 0x2D	; 45
    3a80:	31 f4       	brne	.+12     	; 0x3a8e <_Z13string_to_intPKhPhh+0x52>
	{
		is_neg = true;
		arr++;
    3a82:	11 96       	adiw	r26, 0x01	; 1
    3a84:	bf 83       	std	Y+7, r27	; 0x07
    3a86:	ae 83       	std	Y+6, r26	; 0x06
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
	{
		is_neg = true;
    3a88:	b1 e0       	ldi	r27, 0x01	; 1
    3a8a:	bd 83       	std	Y+5, r27	; 0x05
    3a8c:	01 c0       	rjmp	.+2      	; 0x3a90 <_Z13string_to_intPKhPhh+0x54>

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
int32_t string_to_int(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
	bool is_neg = false;
    3a8e:	1d 82       	std	Y+5, r1	; 0x05
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3a90:	ee 81       	ldd	r30, Y+6	; 0x06
    3a92:	ff 81       	ldd	r31, Y+7	; 0x07
    3a94:	50 81       	ld	r21, Z
    3a96:	fa 81       	ldd	r31, Y+2	; 0x02
    3a98:	5f 17       	cp	r21, r31
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <_Z13string_to_intPKhPhh+0x62>
    3a9c:	87 c0       	rjmp	.+270    	; 0x3bac <_Z13string_to_intPKhPhh+0x170>
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    3a9e:	80 ed       	ldi	r24, 0xD0	; 208
    3aa0:	85 0f       	add	r24, r21
    3aa2:	8a 30       	cpi	r24, 0x0A	; 10
    3aa4:	08 f0       	brcs	.+2      	; 0x3aa8 <_Z13string_to_intPKhPhh+0x6c>
    3aa6:	6c c0       	rjmp	.+216    	; 0x3b80 <_Z13string_to_intPKhPhh+0x144>
    3aa8:	8e 80       	ldd	r8, Y+6	; 0x06
    3aaa:	9f 80       	ldd	r9, Y+7	; 0x07
    3aac:	2f ef       	ldi	r18, 0xFF	; 255
    3aae:	82 1a       	sub	r8, r18
    3ab0:	92 0a       	sbc	r9, r18
    3ab2:	e1 e0       	ldi	r30, 0x01	; 1
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3ab6:	61 2c       	mov	r6, r1
    3ab8:	71 2c       	mov	r7, r1
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    3aba:	d1 2c       	mov	r13, r1
    3abc:	e1 2c       	mov	r14, r1
    3abe:	f1 2c       	mov	r15, r1
    3ac0:	00 e0       	ldi	r16, 0x00	; 0
    3ac2:	b1 2c       	mov	r11, r1
    3ac4:	c1 2c       	mov	r12, r1
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	0a c0       	rjmp	.+20     	; 0x3ae0 <_Z13string_to_intPKhPhh+0xa4>
    3acc:	9f 01       	movw	r18, r30
    3ace:	2f 5f       	subi	r18, 0xFF	; 255
    3ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad2:	40 ed       	ldi	r20, 0xD0	; 208
    3ad4:	45 0f       	add	r20, r21
    3ad6:	4a 30       	cpi	r20, 0x0A	; 10
    3ad8:	08 f0       	brcs	.+2      	; 0x3adc <_Z13string_to_intPKhPhh+0xa0>
    3ada:	52 c0       	rjmp	.+164    	; 0x3b80 <_Z13string_to_intPKhPhh+0x144>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3adc:	3f 01       	movw	r6, r30
    3ade:	f9 01       	movw	r30, r18
    3ae0:	55 24       	eor	r5, r5
    3ae2:	5a 94       	dec	r5
    3ae4:	5e 0e       	add	r5, r30
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
		{
			//Add character to number.
			number += (arr[index] - '0');
    3ae6:	a5 2f       	mov	r26, r21
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	d0 97       	sbiw	r26, 0x30	; 48
    3aec:	1b 2f       	mov	r17, r27
    3aee:	11 0f       	add	r17, r17
    3af0:	11 0b       	sbc	r17, r17
    3af2:	2d 2d       	mov	r18, r13
    3af4:	3e 2d       	mov	r19, r14
    3af6:	4f 2d       	mov	r20, r15
    3af8:	50 2f       	mov	r21, r16
    3afa:	6b 2d       	mov	r22, r11
    3afc:	7c 2d       	mov	r23, r12
    3afe:	aa 2e       	mov	r10, r26
    3b00:	bb 2e       	mov	r11, r27
    3b02:	c1 2e       	mov	r12, r17
    3b04:	d1 2e       	mov	r13, r17
    3b06:	e1 2e       	mov	r14, r17
    3b08:	f1 2e       	mov	r15, r17
    3b0a:	01 2f       	mov	r16, r17
    3b0c:	0e 94 cf 34 	call	0x699e	; 0x699e <__adddi3>
    3b10:	19 2f       	mov	r17, r25
    3b12:	d2 2e       	mov	r13, r18
    3b14:	e3 2e       	mov	r14, r19
    3b16:	f4 2e       	mov	r15, r20
    3b18:	05 2f       	mov	r16, r21
    3b1a:	b6 2e       	mov	r11, r22
    3b1c:	c7 2e       	mov	r12, r23
    3b1e:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(arr[index + 1] >= '0' && arr[index + 1] <= '9')
    3b20:	ae 81       	ldd	r26, Y+6	; 0x06
    3b22:	bf 81       	ldd	r27, Y+7	; 0x07
    3b24:	a6 0d       	add	r26, r6
    3b26:	b7 1d       	adc	r27, r7
    3b28:	11 96       	adiw	r26, 0x01	; 1
    3b2a:	ac 91       	ld	r26, X
    3b2c:	a0 53       	subi	r26, 0x30	; 48
    3b2e:	aa 30       	cpi	r26, 0x0A	; 10
    3b30:	80 f5       	brcc	.+96     	; 0x3b92 <_Z13string_to_intPKhPhh+0x156>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    3b32:	01 e0       	ldi	r16, 0x01	; 1
    3b34:	0e 94 b6 34 	call	0x696c	; 0x696c <__ashldi3>
    3b38:	22 2e       	mov	r2, r18
    3b3a:	33 2e       	mov	r3, r19
    3b3c:	44 2e       	mov	r4, r20
    3b3e:	65 2e       	mov	r6, r21
    3b40:	76 2e       	mov	r7, r22
    3b42:	a7 2f       	mov	r26, r23
    3b44:	88 87       	std	Y+8, r24	; 0x08
    3b46:	b9 2f       	mov	r27, r25
    3b48:	02 e0       	ldi	r16, 0x02	; 2
    3b4a:	0e 94 b6 34 	call	0x696c	; 0x696c <__ashldi3>
    3b4e:	a2 2e       	mov	r10, r18
    3b50:	b3 2e       	mov	r11, r19
    3b52:	c4 2e       	mov	r12, r20
    3b54:	d5 2e       	mov	r13, r21
    3b56:	e6 2e       	mov	r14, r22
    3b58:	f7 2e       	mov	r15, r23
    3b5a:	08 2f       	mov	r16, r24
    3b5c:	19 2f       	mov	r17, r25
    3b5e:	22 2d       	mov	r18, r2
    3b60:	33 2d       	mov	r19, r3
    3b62:	44 2d       	mov	r20, r4
    3b64:	56 2d       	mov	r21, r6
    3b66:	67 2d       	mov	r22, r7
    3b68:	7a 2f       	mov	r23, r26
    3b6a:	88 85       	ldd	r24, Y+8	; 0x08
    3b6c:	9b 2f       	mov	r25, r27
    3b6e:	0e 94 cf 34 	call	0x699e	; 0x699e <__adddi3>
    3b72:	d2 2e       	mov	r13, r18
    3b74:	e3 2e       	mov	r14, r19
    3b76:	f4 2e       	mov	r15, r20
    3b78:	05 2f       	mov	r16, r21
    3b7a:	b6 2e       	mov	r11, r22
    3b7c:	c7 2e       	mov	r12, r23
    3b7e:	09 c0       	rjmp	.+18     	; 0x3b92 <_Z13string_to_intPKhPhh+0x156>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	ab 81       	ldd	r26, Y+3	; 0x03
    3b84:	bc 81       	ldd	r27, Y+4	; 0x04
    3b86:	8c 93       	st	X, r24
			return 0;
    3b88:	60 e0       	ldi	r22, 0x00	; 0
    3b8a:	70 e0       	ldi	r23, 0x00	; 0
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	64 c0       	rjmp	.+200    	; 0x3c5a <_Z13string_to_intPKhPhh+0x21e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3b92:	d4 01       	movw	r26, r8
    3b94:	5d 91       	ld	r21, X+
    3b96:	4d 01       	movw	r8, r26
    3b98:	ba 81       	ldd	r27, Y+2	; 0x02
    3b9a:	5b 17       	cp	r21, r27
    3b9c:	21 f0       	breq	.+8      	; 0x3ba6 <_Z13string_to_intPKhPhh+0x16a>
    3b9e:	ea 30       	cpi	r30, 0x0A	; 10
    3ba0:	f1 05       	cpc	r31, r1
    3ba2:	09 f0       	breq	.+2      	; 0x3ba6 <_Z13string_to_intPKhPhh+0x16a>
    3ba4:	93 cf       	rjmp	.-218    	; 0x3acc <_Z13string_to_intPKhPhh+0x90>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, no digits at all.
	if((index > 10) || (!index))
    3ba6:	e9 e0       	ldi	r30, 0x09	; 9
    3ba8:	e5 15       	cp	r30, r5
    3baa:	48 f4       	brcc	.+18     	; 0x3bbe <_Z13string_to_intPKhPhh+0x182>
	{
		*errno = ER_ERROR;
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	ab 81       	ldd	r26, Y+3	; 0x03
    3bb0:	bc 81       	ldd	r27, Y+4	; 0x04
    3bb2:	8c 93       	st	X, r24
		return 0;
    3bb4:	60 e0       	ldi	r22, 0x00	; 0
    3bb6:	70 e0       	ldi	r23, 0x00	; 0
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	4e c0       	rjmp	.+156    	; 0x3c5a <_Z13string_to_intPKhPhh+0x21e>
	}
	
	//Check to see if number is too big.
	if(!is_neg && (number > INT_MAX))
    3bbe:	bd 81       	ldd	r27, Y+5	; 0x05
    3bc0:	b1 11       	cpse	r27, r1
    3bc2:	19 c0       	rjmp	.+50     	; 0x3bf6 <_Z13string_to_intPKhPhh+0x1ba>
    3bc4:	2d 2d       	mov	r18, r13
    3bc6:	3e 2d       	mov	r19, r14
    3bc8:	4f 2d       	mov	r20, r15
    3bca:	50 2f       	mov	r21, r16
    3bcc:	6b 2d       	mov	r22, r11
    3bce:	7c 2d       	mov	r23, r12
    3bd0:	2f 3f       	cpi	r18, 0xFF	; 255
    3bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd4:	4f 4f       	sbci	r20, 0xFF	; 255
    3bd6:	5f 47       	sbci	r21, 0x7F	; 127
    3bd8:	61 05       	cpc	r22, r1
    3bda:	71 05       	cpc	r23, r1
    3bdc:	81 05       	cpc	r24, r1
    3bde:	91 05       	cpc	r25, r1
    3be0:	b9 f1       	breq	.+110    	; 0x3c50 <_Z13string_to_intPKhPhh+0x214>
    3be2:	b0 f1       	brcs	.+108    	; 0x3c50 <_Z13string_to_intPKhPhh+0x214>
	{
		*errno = ER_ERROR;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	ab 81       	ldd	r26, Y+3	; 0x03
    3be8:	bc 81       	ldd	r27, Y+4	; 0x04
    3bea:	8c 93       	st	X, r24
		return 0;
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	70 e0       	ldi	r23, 0x00	; 0
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	32 c0       	rjmp	.+100    	; 0x3c5a <_Z13string_to_intPKhPhh+0x21e>
	}
	
	//Check if number is too small.
	if(is_neg && number > INT_MIN)
    3bf6:	2d 2d       	mov	r18, r13
    3bf8:	3e 2d       	mov	r19, r14
    3bfa:	4f 2d       	mov	r20, r15
    3bfc:	50 2f       	mov	r21, r16
    3bfe:	6b 2d       	mov	r22, r11
    3c00:	7c 2d       	mov	r23, r12
    3c02:	21 15       	cp	r18, r1
    3c04:	31 05       	cpc	r19, r1
    3c06:	41 05       	cpc	r20, r1
    3c08:	50 48       	sbci	r21, 0x80	; 128
    3c0a:	61 05       	cpc	r22, r1
    3c0c:	71 05       	cpc	r23, r1
    3c0e:	81 05       	cpc	r24, r1
    3c10:	91 05       	cpc	r25, r1
    3c12:	91 f0       	breq	.+36     	; 0x3c38 <_Z13string_to_intPKhPhh+0x1fc>
    3c14:	88 f0       	brcs	.+34     	; 0x3c38 <_Z13string_to_intPKhPhh+0x1fc>
	{
		*errno = ER_ERROR;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	eb 81       	ldd	r30, Y+3	; 0x03
    3c1a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c1c:	80 83       	st	Z, r24
		return 0;
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	19 c0       	rjmp	.+50     	; 0x3c5a <_Z13string_to_intPKhPhh+0x21e>
	{
		num *= -1;
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    3c28:	ab 81       	ldd	r26, Y+3	; 0x03
    3c2a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c2c:	1c 92       	st	X, r1
	return num;
    3c2e:	6c 2d       	mov	r22, r12
    3c30:	7d 2d       	mov	r23, r13
    3c32:	8e 2d       	mov	r24, r14
    3c34:	9f 2d       	mov	r25, r15
    3c36:	11 c0       	rjmp	.+34     	; 0x3c5a <_Z13string_to_intPKhPhh+0x21e>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3c38:	4d 2d       	mov	r20, r13
    3c3a:	5e 2d       	mov	r21, r14
    3c3c:	6f 2d       	mov	r22, r15
    3c3e:	70 2f       	mov	r23, r16
	
	//Convert to a negative number, if necessary.
	if(is_neg)
	{
		num *= -1;
    3c40:	cc 24       	eor	r12, r12
    3c42:	dd 24       	eor	r13, r13
    3c44:	76 01       	movw	r14, r12
    3c46:	c4 1a       	sub	r12, r20
    3c48:	d5 0a       	sbc	r13, r21
    3c4a:	e6 0a       	sbc	r14, r22
    3c4c:	f7 0a       	sbc	r15, r23
    3c4e:	ec cf       	rjmp	.-40     	; 0x3c28 <_Z13string_to_intPKhPhh+0x1ec>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3c50:	cd 2c       	mov	r12, r13
    3c52:	de 2c       	mov	r13, r14
    3c54:	ef 2c       	mov	r14, r15
    3c56:	f0 2e       	mov	r15, r16
    3c58:	e7 cf       	rjmp	.-50     	; 0x3c28 <_Z13string_to_intPKhPhh+0x1ec>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
	return num;
}
    3c5a:	29 96       	adiw	r28, 0x09	; 9
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	1f 91       	pop	r17
    3c6c:	0f 91       	pop	r16
    3c6e:	ff 90       	pop	r15
    3c70:	ef 90       	pop	r14
    3c72:	df 90       	pop	r13
    3c74:	cf 90       	pop	r12
    3c76:	bf 90       	pop	r11
    3c78:	af 90       	pop	r10
    3c7a:	9f 90       	pop	r9
    3c7c:	8f 90       	pop	r8
    3c7e:	7f 90       	pop	r7
    3c80:	6f 90       	pop	r6
    3c82:	5f 90       	pop	r5
    3c84:	4f 90       	pop	r4
    3c86:	3f 90       	pop	r3
    3c88:	2f 90       	pop	r2
    3c8a:	08 95       	ret

00003c8c <_Z15string_to_int_pPKhPhS1_h>:

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
//Also, it gives the index where the number was terminated.
int32_t string_to_int_p(const uint8_t *array, uint8_t *errno, uint8_t *pend, uint8_t term = '\r')
{
    3c8c:	2f 92       	push	r2
    3c8e:	3f 92       	push	r3
    3c90:	4f 92       	push	r4
    3c92:	5f 92       	push	r5
    3c94:	6f 92       	push	r6
    3c96:	7f 92       	push	r7
    3c98:	8f 92       	push	r8
    3c9a:	9f 92       	push	r9
    3c9c:	af 92       	push	r10
    3c9e:	bf 92       	push	r11
    3ca0:	cf 92       	push	r12
    3ca2:	df 92       	push	r13
    3ca4:	ef 92       	push	r14
    3ca6:	ff 92       	push	r15
    3ca8:	0f 93       	push	r16
    3caa:	1f 93       	push	r17
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	29 97       	sbiw	r28, 0x09	; 9
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	3c 01       	movw	r6, r24
    3cc2:	7c 83       	std	Y+4, r23	; 0x04
    3cc4:	6b 83       	std	Y+3, r22	; 0x03
    3cc6:	5f 83       	std	Y+7, r21	; 0x07
    3cc8:	4e 83       	std	Y+6, r20	; 0x06
    3cca:	92 2e       	mov	r9, r18
	
	//Switch to new array pointer to account for any negative sign.
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
    3ccc:	dc 01       	movw	r26, r24
    3cce:	8c 91       	ld	r24, X
    3cd0:	8d 32       	cpi	r24, 0x2D	; 45
    3cd2:	31 f4       	brne	.+12     	; 0x3ce0 <_Z15string_to_int_pPKhPhS1_h+0x54>
	{
		is_neg = true;
		arr++;
    3cd4:	bf ef       	ldi	r27, 0xFF	; 255
    3cd6:	6b 1a       	sub	r6, r27
    3cd8:	7b 0a       	sbc	r7, r27
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
	{
		is_neg = true;
    3cda:	e1 e0       	ldi	r30, 0x01	; 1
    3cdc:	ed 83       	std	Y+5, r30	; 0x05
    3cde:	01 c0       	rjmp	.+2      	; 0x3ce2 <_Z15string_to_int_pPKhPhS1_h+0x56>
//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
//Also, it gives the index where the number was terminated.
int32_t string_to_int_p(const uint8_t *array, uint8_t *errno, uint8_t *pend, uint8_t term = '\r')
{
	bool is_neg = false;
    3ce0:	1d 82       	std	Y+5, r1	; 0x05
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3ce2:	f3 01       	movw	r30, r6
    3ce4:	a0 81       	ld	r26, Z
    3ce6:	a9 15       	cp	r26, r9
    3ce8:	09 f4       	brne	.+2      	; 0x3cec <_Z15string_to_int_pPKhPhS1_h+0x60>
    3cea:	86 c0       	rjmp	.+268    	; 0x3df8 <_Z15string_to_int_pPKhPhS1_h+0x16c>
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    3cec:	80 ed       	ldi	r24, 0xD0	; 208
    3cee:	8a 0f       	add	r24, r26
    3cf0:	8a 30       	cpi	r24, 0x0A	; 10
    3cf2:	08 f0       	brcs	.+2      	; 0x3cf6 <_Z15string_to_int_pPKhPhS1_h+0x6a>
    3cf4:	6a c0       	rjmp	.+212    	; 0x3dca <_Z15string_to_int_pPKhPhS1_h+0x13e>
    3cf6:	31 96       	adiw	r30, 0x01	; 1
    3cf8:	fa 83       	std	Y+2, r31	; 0x02
    3cfa:	e9 83       	std	Y+1, r30	; 0x01
    3cfc:	e1 e0       	ldi	r30, 0x01	; 1
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3d00:	41 2c       	mov	r4, r1
    3d02:	51 2c       	mov	r5, r1
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    3d04:	f1 2c       	mov	r15, r1
    3d06:	00 e0       	ldi	r16, 0x00	; 0
    3d08:	a1 2c       	mov	r10, r1
    3d0a:	b1 2c       	mov	r11, r1
    3d0c:	d1 2c       	mov	r13, r1
    3d0e:	e1 2c       	mov	r14, r1
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	5a 2f       	mov	r21, r26
    3d16:	0a c0       	rjmp	.+20     	; 0x3d2c <_Z15string_to_int_pPKhPhS1_h+0xa0>
    3d18:	9f 01       	movw	r18, r30
    3d1a:	2f 5f       	subi	r18, 0xFF	; 255
    3d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1e:	40 ed       	ldi	r20, 0xD0	; 208
    3d20:	45 0f       	add	r20, r21
    3d22:	4a 30       	cpi	r20, 0x0A	; 10
    3d24:	08 f0       	brcs	.+2      	; 0x3d28 <_Z15string_to_int_pPKhPhS1_h+0x9c>
    3d26:	51 c0       	rjmp	.+162    	; 0x3dca <_Z15string_to_int_pPKhPhS1_h+0x13e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3d28:	2f 01       	movw	r4, r30
    3d2a:	f9 01       	movw	r30, r18
    3d2c:	88 24       	eor	r8, r8
    3d2e:	8a 94       	dec	r8
    3d30:	8e 0e       	add	r8, r30
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
		{
			//Add character to number.
			number += (arr[index] - '0');
    3d32:	a5 2f       	mov	r26, r21
    3d34:	b0 e0       	ldi	r27, 0x00	; 0
    3d36:	d0 97       	sbiw	r26, 0x30	; 48
    3d38:	1b 2f       	mov	r17, r27
    3d3a:	11 0f       	add	r17, r17
    3d3c:	11 0b       	sbc	r17, r17
    3d3e:	2f 2d       	mov	r18, r15
    3d40:	30 2f       	mov	r19, r16
    3d42:	4a 2d       	mov	r20, r10
    3d44:	5b 2d       	mov	r21, r11
    3d46:	6d 2d       	mov	r22, r13
    3d48:	7e 2d       	mov	r23, r14
    3d4a:	aa 2e       	mov	r10, r26
    3d4c:	bb 2e       	mov	r11, r27
    3d4e:	c1 2e       	mov	r12, r17
    3d50:	d1 2e       	mov	r13, r17
    3d52:	e1 2e       	mov	r14, r17
    3d54:	f1 2e       	mov	r15, r17
    3d56:	01 2f       	mov	r16, r17
    3d58:	0e 94 cf 34 	call	0x699e	; 0x699e <__adddi3>
    3d5c:	19 2f       	mov	r17, r25
    3d5e:	f2 2e       	mov	r15, r18
    3d60:	03 2f       	mov	r16, r19
    3d62:	a4 2e       	mov	r10, r20
    3d64:	b5 2e       	mov	r11, r21
    3d66:	d6 2e       	mov	r13, r22
    3d68:	e7 2e       	mov	r14, r23
    3d6a:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(arr[index + 1] >= '0' && arr[index + 1] <= '9')
    3d6c:	d3 01       	movw	r26, r6
    3d6e:	a4 0d       	add	r26, r4
    3d70:	b5 1d       	adc	r27, r5
    3d72:	11 96       	adiw	r26, 0x01	; 1
    3d74:	ac 91       	ld	r26, X
    3d76:	a0 53       	subi	r26, 0x30	; 48
    3d78:	aa 30       	cpi	r26, 0x0A	; 10
    3d7a:	80 f5       	brcc	.+96     	; 0x3ddc <_Z15string_to_int_pPKhPhS1_h+0x150>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    3d7c:	01 e0       	ldi	r16, 0x01	; 1
    3d7e:	0e 94 b6 34 	call	0x696c	; 0x696c <__ashldi3>
    3d82:	22 2e       	mov	r2, r18
    3d84:	33 2e       	mov	r3, r19
    3d86:	44 2e       	mov	r4, r20
    3d88:	55 2e       	mov	r5, r21
    3d8a:	69 87       	std	Y+9, r22	; 0x09
    3d8c:	78 87       	std	Y+8, r23	; 0x08
    3d8e:	b8 2f       	mov	r27, r24
    3d90:	a9 2f       	mov	r26, r25
    3d92:	02 e0       	ldi	r16, 0x02	; 2
    3d94:	0e 94 b6 34 	call	0x696c	; 0x696c <__ashldi3>
    3d98:	a2 2e       	mov	r10, r18
    3d9a:	b3 2e       	mov	r11, r19
    3d9c:	c4 2e       	mov	r12, r20
    3d9e:	d5 2e       	mov	r13, r21
    3da0:	e6 2e       	mov	r14, r22
    3da2:	f7 2e       	mov	r15, r23
    3da4:	08 2f       	mov	r16, r24
    3da6:	19 2f       	mov	r17, r25
    3da8:	22 2d       	mov	r18, r2
    3daa:	33 2d       	mov	r19, r3
    3dac:	44 2d       	mov	r20, r4
    3dae:	55 2d       	mov	r21, r5
    3db0:	69 85       	ldd	r22, Y+9	; 0x09
    3db2:	78 85       	ldd	r23, Y+8	; 0x08
    3db4:	8b 2f       	mov	r24, r27
    3db6:	9a 2f       	mov	r25, r26
    3db8:	0e 94 cf 34 	call	0x699e	; 0x699e <__adddi3>
    3dbc:	f2 2e       	mov	r15, r18
    3dbe:	03 2f       	mov	r16, r19
    3dc0:	a4 2e       	mov	r10, r20
    3dc2:	b5 2e       	mov	r11, r21
    3dc4:	d6 2e       	mov	r13, r22
    3dc6:	e7 2e       	mov	r14, r23
    3dc8:	09 c0       	rjmp	.+18     	; 0x3ddc <_Z15string_to_int_pPKhPhS1_h+0x150>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	ab 81       	ldd	r26, Y+3	; 0x03
    3dce:	bc 81       	ldd	r27, Y+4	; 0x04
    3dd0:	8c 93       	st	X, r24
			return 0;
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	70 e0       	ldi	r23, 0x00	; 0
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	6f c0       	rjmp	.+222    	; 0x3eba <_Z15string_to_int_pPKhPhS1_h+0x22e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    3ddc:	a9 81       	ldd	r26, Y+1	; 0x01
    3dde:	ba 81       	ldd	r27, Y+2	; 0x02
    3de0:	5d 91       	ld	r21, X+
    3de2:	ba 83       	std	Y+2, r27	; 0x02
    3de4:	a9 83       	std	Y+1, r26	; 0x01
    3de6:	59 15       	cp	r21, r9
    3de8:	21 f0       	breq	.+8      	; 0x3df2 <_Z15string_to_int_pPKhPhS1_h+0x166>
    3dea:	ea 30       	cpi	r30, 0x0A	; 10
    3dec:	f1 05       	cpc	r31, r1
    3dee:	09 f0       	breq	.+2      	; 0x3df2 <_Z15string_to_int_pPKhPhS1_h+0x166>
    3df0:	93 cf       	rjmp	.-218    	; 0x3d18 <_Z15string_to_int_pPKhPhS1_h+0x8c>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, no digits at all.
	if((index > 10) || (!index))
    3df2:	b9 e0       	ldi	r27, 0x09	; 9
    3df4:	b8 15       	cp	r27, r8
    3df6:	48 f4       	brcc	.+18     	; 0x3e0a <_Z15string_to_int_pPKhPhS1_h+0x17e>
	{
		*errno = ER_ERROR;
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	eb 81       	ldd	r30, Y+3	; 0x03
    3dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    3dfe:	80 83       	st	Z, r24
		return 0;
    3e00:	60 e0       	ldi	r22, 0x00	; 0
    3e02:	70 e0       	ldi	r23, 0x00	; 0
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	58 c0       	rjmp	.+176    	; 0x3eba <_Z15string_to_int_pPKhPhS1_h+0x22e>
	}
	
	//Check to see if number is too big.
	if(!is_neg && (number > INT_MAX))
    3e0a:	fd 81       	ldd	r31, Y+5	; 0x05
    3e0c:	f1 11       	cpse	r31, r1
    3e0e:	19 c0       	rjmp	.+50     	; 0x3e42 <_Z15string_to_int_pPKhPhS1_h+0x1b6>
    3e10:	2f 2d       	mov	r18, r15
    3e12:	30 2f       	mov	r19, r16
    3e14:	4a 2d       	mov	r20, r10
    3e16:	5b 2d       	mov	r21, r11
    3e18:	6d 2d       	mov	r22, r13
    3e1a:	7e 2d       	mov	r23, r14
    3e1c:	2f 3f       	cpi	r18, 0xFF	; 255
    3e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e20:	4f 4f       	sbci	r20, 0xFF	; 255
    3e22:	5f 47       	sbci	r21, 0x7F	; 127
    3e24:	61 05       	cpc	r22, r1
    3e26:	71 05       	cpc	r23, r1
    3e28:	81 05       	cpc	r24, r1
    3e2a:	91 05       	cpc	r25, r1
    3e2c:	e1 f1       	breq	.+120    	; 0x3ea6 <_Z15string_to_int_pPKhPhS1_h+0x21a>
    3e2e:	d8 f1       	brcs	.+118    	; 0x3ea6 <_Z15string_to_int_pPKhPhS1_h+0x21a>
	{
		*errno = ER_ERROR;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	eb 81       	ldd	r30, Y+3	; 0x03
    3e34:	fc 81       	ldd	r31, Y+4	; 0x04
    3e36:	80 83       	st	Z, r24
		return 0;
    3e38:	60 e0       	ldi	r22, 0x00	; 0
    3e3a:	70 e0       	ldi	r23, 0x00	; 0
    3e3c:	80 e0       	ldi	r24, 0x00	; 0
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	3c c0       	rjmp	.+120    	; 0x3eba <_Z15string_to_int_pPKhPhS1_h+0x22e>
	}
	
	//Check if number is too small.
	if(is_neg && number > INT_MIN)
    3e42:	2f 2d       	mov	r18, r15
    3e44:	30 2f       	mov	r19, r16
    3e46:	4a 2d       	mov	r20, r10
    3e48:	5b 2d       	mov	r21, r11
    3e4a:	6d 2d       	mov	r22, r13
    3e4c:	7e 2d       	mov	r23, r14
    3e4e:	21 15       	cp	r18, r1
    3e50:	31 05       	cpc	r19, r1
    3e52:	41 05       	cpc	r20, r1
    3e54:	50 48       	sbci	r21, 0x80	; 128
    3e56:	61 05       	cpc	r22, r1
    3e58:	71 05       	cpc	r23, r1
    3e5a:	81 05       	cpc	r24, r1
    3e5c:	91 05       	cpc	r25, r1
    3e5e:	91 f0       	breq	.+36     	; 0x3e84 <_Z15string_to_int_pPKhPhS1_h+0x1f8>
    3e60:	88 f0       	brcs	.+34     	; 0x3e84 <_Z15string_to_int_pPKhPhS1_h+0x1f8>
	{
		*errno = ER_ERROR;
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	ab 81       	ldd	r26, Y+3	; 0x03
    3e66:	bc 81       	ldd	r27, Y+4	; 0x04
    3e68:	8c 93       	st	X, r24
		return 0;
    3e6a:	60 e0       	ldi	r22, 0x00	; 0
    3e6c:	70 e0       	ldi	r23, 0x00	; 0
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	23 c0       	rjmp	.+70     	; 0x3eba <_Z15string_to_int_pPKhPhS1_h+0x22e>
	{
		(*pend)++;
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    3e74:	eb 81       	ldd	r30, Y+3	; 0x03
    3e76:	fc 81       	ldd	r31, Y+4	; 0x04
    3e78:	10 82       	st	Z, r1
	return num;
    3e7a:	6c 2d       	mov	r22, r12
    3e7c:	7d 2d       	mov	r23, r13
    3e7e:	8e 2d       	mov	r24, r14
    3e80:	9f 2d       	mov	r25, r15
    3e82:	1b c0       	rjmp	.+54     	; 0x3eba <_Z15string_to_int_pPKhPhS1_h+0x22e>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3e84:	4f 2d       	mov	r20, r15
    3e86:	50 2f       	mov	r21, r16
    3e88:	6a 2d       	mov	r22, r10
    3e8a:	7b 2d       	mov	r23, r11
	
	//Convert to a negative number, if necessary.
	if(is_neg)
	{
		num *= -1;
    3e8c:	cc 24       	eor	r12, r12
    3e8e:	dd 24       	eor	r13, r13
    3e90:	76 01       	movw	r14, r12
    3e92:	c4 1a       	sub	r12, r20
    3e94:	d5 0a       	sbc	r13, r21
    3e96:	e6 0a       	sbc	r14, r22
    3e98:	f7 0a       	sbc	r15, r23
	
	//Update the pointer to the end of the number.
	*pend = index + 1;
	if(is_neg)
	{
		(*pend)++;
    3e9a:	83 e0       	ldi	r24, 0x03	; 3
    3e9c:	88 0d       	add	r24, r8
    3e9e:	ae 81       	ldd	r26, Y+6	; 0x06
    3ea0:	bf 81       	ldd	r27, Y+7	; 0x07
    3ea2:	8c 93       	st	X, r24
    3ea4:	e7 cf       	rjmp	.-50     	; 0x3e74 <_Z15string_to_int_pPKhPhS1_h+0x1e8>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    3ea6:	cf 2c       	mov	r12, r15
    3ea8:	d0 2e       	mov	r13, r16
    3eaa:	ea 2c       	mov	r14, r10
    3eac:	fb 2c       	mov	r15, r11
	{
		num *= -1;
	}
	
	//Update the pointer to the end of the number.
	*pend = index + 1;
    3eae:	83 94       	inc	r8
    3eb0:	83 94       	inc	r8
    3eb2:	ee 81       	ldd	r30, Y+6	; 0x06
    3eb4:	ff 81       	ldd	r31, Y+7	; 0x07
    3eb6:	80 82       	st	Z, r8
    3eb8:	dd cf       	rjmp	.-70     	; 0x3e74 <_Z15string_to_int_pPKhPhS1_h+0x1e8>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
	return num;
}
    3eba:	29 96       	adiw	r28, 0x09	; 9
    3ebc:	0f b6       	in	r0, 0x3f	; 63
    3ebe:	f8 94       	cli
    3ec0:	de bf       	out	0x3e, r29	; 62
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	ff 90       	pop	r15
    3ed0:	ef 90       	pop	r14
    3ed2:	df 90       	pop	r13
    3ed4:	cf 90       	pop	r12
    3ed6:	bf 90       	pop	r11
    3ed8:	af 90       	pop	r10
    3eda:	9f 90       	pop	r9
    3edc:	8f 90       	pop	r8
    3ede:	7f 90       	pop	r7
    3ee0:	6f 90       	pop	r6
    3ee2:	5f 90       	pop	r5
    3ee4:	4f 90       	pop	r4
    3ee6:	3f 90       	pop	r3
    3ee8:	2f 90       	pop	r2
    3eea:	08 95       	ret

00003eec <_Z8load_u32PKh>:
	return temp16;
}

//Takes a unit8_t array and takes the first 4 values and loads them into a uint32_t.
uint32_t load_u32(const uint8_t *array)
{
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	fc 01       	movw	r30, r24
	uint32_t temp32_1, temp32_2, temp32_3;
	
	temp32_1 = array[0];
    3ef2:	00 81       	ld	r16, Z
    3ef4:	10 e0       	ldi	r17, 0x00	; 0
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
	temp32_1 <<= 24;
	temp32_2 = array[1];
    3efa:	41 81       	ldd	r20, Z+1	; 0x01
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	70 e0       	ldi	r23, 0x00	; 0
	temp32_2 <<= 16;
	temp32_3 = array[2];
    3f02:	82 81       	ldd	r24, Z+2	; 0x02
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	a0 e0       	ldi	r26, 0x00	; 0
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
uint32_t load_u32(const uint8_t *array)
{
	uint32_t temp32_1, temp32_2, temp32_3;
	
	temp32_1 = array[0];
	temp32_1 <<= 24;
    3f0a:	30 2f       	mov	r19, r16
    3f0c:	22 27       	eor	r18, r18
    3f0e:	11 27       	eor	r17, r17
    3f10:	00 27       	eor	r16, r16
	temp32_2 = array[1];
	temp32_2 <<= 16;
    3f12:	ba 01       	movw	r22, r20
    3f14:	55 27       	eor	r21, r21
    3f16:	44 27       	eor	r20, r20
	temp32_3 = array[2];
	temp32_3 <<= 8;
	return temp32_1 + temp32_2 + temp32_3 + array[3];
    3f18:	40 0f       	add	r20, r16
    3f1a:	51 1f       	adc	r21, r17
    3f1c:	62 1f       	adc	r22, r18
    3f1e:	73 1f       	adc	r23, r19
    3f20:	23 81       	ldd	r18, Z+3	; 0x03
    3f22:	42 0f       	add	r20, r18
    3f24:	51 1d       	adc	r21, r1
    3f26:	61 1d       	adc	r22, r1
    3f28:	71 1d       	adc	r23, r1
	temp32_1 = array[0];
	temp32_1 <<= 24;
	temp32_2 = array[1];
	temp32_2 <<= 16;
	temp32_3 = array[2];
	temp32_3 <<= 8;
    3f2a:	ba 2f       	mov	r27, r26
    3f2c:	a9 2f       	mov	r26, r25
    3f2e:	98 2f       	mov	r25, r24
    3f30:	88 27       	eor	r24, r24
	return temp32_1 + temp32_2 + temp32_3 + array[3];
    3f32:	8a 01       	movw	r16, r20
    3f34:	9b 01       	movw	r18, r22
    3f36:	08 0f       	add	r16, r24
    3f38:	19 1f       	adc	r17, r25
    3f3a:	2a 1f       	adc	r18, r26
    3f3c:	3b 1f       	adc	r19, r27
    3f3e:	c9 01       	movw	r24, r18
    3f40:	b8 01       	movw	r22, r16
}
    3f42:	1f 91       	pop	r17
    3f44:	0f 91       	pop	r16
    3f46:	08 95       	ret

00003f48 <_Z11uart_yes_nob>:
}

//Write a Y or N character out the UART.
void uart_yes_no(bool yes_no)
{
	yes_no ? atmega_uart::tx_byte('Y') : atmega_uart::tx_byte('N');
    3f48:	88 23       	and	r24, r24
    3f4a:	21 f0       	breq	.+8      	; 0x3f54 <_Z11uart_yes_nob+0xc>
    3f4c:	89 e5       	ldi	r24, 0x59	; 89
    3f4e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    3f52:	03 c0       	rjmp	.+6      	; 0x3f5a <_Z11uart_yes_nob+0x12>
    3f54:	8e e4       	ldi	r24, 0x4E	; 78
    3f56:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    3f5a:	8d e0       	ldi	r24, 0x0D	; 13
    3f5c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    3f60:	08 95       	ret

00003f62 <_Z16uart_min_max_u32mm>:
}

//Write minimum and maximum unsigned range of value out the UART.
void uart_min_max_u32(uint32_t min, uint32_t max)
{
    3f62:	8f 92       	push	r8
    3f64:	9f 92       	push	r9
    3f66:	af 92       	push	r10
    3f68:	bf 92       	push	r11
    3f6a:	cf 92       	push	r12
    3f6c:	df 92       	push	r13
    3f6e:	ef 92       	push	r14
    3f70:	ff 92       	push	r15
    3f72:	4b 01       	movw	r8, r22
    3f74:	5c 01       	movw	r10, r24
    3f76:	69 01       	movw	r12, r18
    3f78:	7a 01       	movw	r14, r20
	atmega_uart::tx_string_p(PSTR(" ("));
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	9c e0       	ldi	r25, 0x0C	; 12
    3f7e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(min);
    3f82:	c5 01       	movw	r24, r10
    3f84:	b4 01       	movw	r22, r8
    3f86:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_string_p(PSTR(" to "));
    3f8a:	8c ef       	ldi	r24, 0xFC	; 252
    3f8c:	9b e0       	ldi	r25, 0x0B	; 11
    3f8e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(max);
    3f92:	c7 01       	movw	r24, r14
    3f94:	b6 01       	movw	r22, r12
    3f96:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_string_p(PSTR("): "));
    3f9a:	88 ef       	ldi	r24, 0xF8	; 248
    3f9c:	9b e0       	ldi	r25, 0x0B	; 11
    3f9e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
}
    3fa2:	ff 90       	pop	r15
    3fa4:	ef 90       	pop	r14
    3fa6:	df 90       	pop	r13
    3fa8:	cf 90       	pop	r12
    3faa:	bf 90       	pop	r11
    3fac:	af 90       	pop	r10
    3fae:	9f 90       	pop	r9
    3fb0:	8f 90       	pop	r8
    3fb2:	08 95       	ret

00003fb4 <_Z16uart_min_max_intii>:

//Write minimum and maximum signed range of value out the UART.
void uart_min_max_int(int min, int max)
{
    3fb4:	0f 93       	push	r16
    3fb6:	1f 93       	push	r17
    3fb8:	cf 93       	push	r28
    3fba:	df 93       	push	r29
    3fbc:	8c 01       	movw	r16, r24
    3fbe:	eb 01       	movw	r28, r22
	atmega_uart::tx_string_p(PSTR(" ("));
    3fc0:	85 ef       	ldi	r24, 0xF5	; 245
    3fc2:	9b e0       	ldi	r25, 0x0B	; 11
    3fc4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(min);
    3fc8:	b8 01       	movw	r22, r16
    3fca:	88 27       	eor	r24, r24
    3fcc:	77 fd       	sbrc	r23, 7
    3fce:	80 95       	com	r24
    3fd0:	98 2f       	mov	r25, r24
    3fd2:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
	atmega_uart::tx_string_p(PSTR(" to "));
    3fd6:	80 ef       	ldi	r24, 0xF0	; 240
    3fd8:	9b e0       	ldi	r25, 0x0B	; 11
    3fda:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(max);
    3fde:	be 01       	movw	r22, r28
    3fe0:	88 27       	eor	r24, r24
    3fe2:	77 fd       	sbrc	r23, 7
    3fe4:	80 95       	com	r24
    3fe6:	98 2f       	mov	r25, r24
    3fe8:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
	atmega_uart::tx_string_p(PSTR("): "));
    3fec:	8c ee       	ldi	r24, 0xEC	; 236
    3fee:	9b e0       	ldi	r25, 0x0B	; 11
    3ff0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
}
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	08 95       	ret

00003ffe <_Z15uart_true_falseb>:

//Print "true" or "false" out the UART.
void uart_true_false(bool t_f)
{
	t_f ? atmega_uart::tx_string_p(PSTR("true")) : atmega_uart::tx_string_p(PSTR("false"));
    3ffe:	88 23       	and	r24, r24
    4000:	29 f0       	breq	.+10     	; 0x400c <_Z15uart_true_falseb+0xe>
    4002:	87 ee       	ldi	r24, 0xE7	; 231
    4004:	9b e0       	ldi	r25, 0x0B	; 11
    4006:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    400a:	04 c0       	rjmp	.+8      	; 0x4014 <_Z15uart_true_falseb+0x16>
    400c:	81 ee       	ldi	r24, 0xE1	; 225
    400e:	9b e0       	ldi	r25, 0x0B	; 11
    4010:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	atmega_uart::tx_byte(';');
    4014:	8b e3       	ldi	r24, 0x3B	; 59
    4016:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    401a:	8d e0       	ldi	r24, 0x0D	; 13
    401c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4020:	08 95       	ret

00004022 <_Z19uart_print_settingsP8as_class>:
}

/*****************************************************Menu Writing Rountines*************************************************/
//Print device settings.
void uart_print_settings(as_class *as)
{
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	ec 01       	movw	r28, r24
	uint8_t temp;
	uint16_t arb_num;
	bool t_f;
	
	arb_num = atmega_eeprom::read_word_no_cli((uint16_t *)ARB_NUM);
    402c:	86 e0       	ldi	r24, 0x06	; 6
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	0e 94 e6 14 	call	0x29cc	; 0x29cc <_ZN13atmega_eeprom16read_word_no_cliEPj>
    4034:	8c 01       	movw	r16, r24
	
	atmega_uart::tx_string_p(PSTR("tx_m=\'"));
    4036:	85 ed       	ldi	r24, 0xD5	; 213
    4038:	9c e0       	ldi	r25, 0x0C	; 12
    403a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	temp = as->get_tx_mode();
    403e:	ce 01       	movw	r24, r28
    4040:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
	if(temp == TX_MODE_ASCII)
    4044:	81 11       	cpse	r24, r1
    4046:	04 c0       	rjmp	.+8      	; 0x4050 <_Z19uart_print_settingsP8as_class+0x2e>
	{
		atmega_uart::tx_byte('A');
    4048:	81 e4       	ldi	r24, 0x41	; 65
    404a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    404e:	09 c0       	rjmp	.+18     	; 0x4062 <_Z19uart_print_settingsP8as_class+0x40>
	}
	else if(temp == TX_MODE_MATLAB)
    4050:	81 30       	cpi	r24, 0x01	; 1
    4052:	21 f4       	brne	.+8      	; 0x405c <_Z19uart_print_settingsP8as_class+0x3a>
	{
		atmega_uart::tx_byte('M');
    4054:	8d e4       	ldi	r24, 0x4D	; 77
    4056:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    405a:	03 c0       	rjmp	.+6      	; 0x4062 <_Z19uart_print_settingsP8as_class+0x40>
	}
	else
	{
		atmega_uart::tx_byte('B');
    405c:	82 e4       	ldi	r24, 0x42	; 66
    405e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	}
	atmega_uart::tx_string_p(PSTR("\';\r"));
    4062:	81 ed       	ldi	r24, 0xD1	; 209
    4064:	9c e0       	ldi	r25, 0x0C	; 12
    4066:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	
	atmega_uart::tx_string_p(PSTR("num_e="));
    406a:	8a ec       	ldi	r24, 0xCA	; 202
    406c:	9c e0       	ldi	r25, 0x0C	; 12
    406e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	temp = as->get_num_electrodes();
    4072:	ce 01       	movw	r24, r28
    4074:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN8as_class18get_num_electrodesEv>
	
	(temp == ELEC_2) ? atmega_uart::tx_byte('2') : atmega_uart::tx_byte('3');
    4078:	81 11       	cpse	r24, r1
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <_Z19uart_print_settingsP8as_class+0x62>
    407c:	82 e3       	ldi	r24, 0x32	; 50
    407e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4082:	03 c0       	rjmp	.+6      	; 0x408a <_Z19uart_print_settingsP8as_class+0x68>
    4084:	83 e3       	ldi	r24, 0x33	; 51
    4086:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte(';');
    408a:	8b e3       	ldi	r24, 0x3B	; 59
    408c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4090:	8d e0       	ldi	r24, 0x0D	; 13
    4092:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("adc_r="));
    4096:	83 ec       	ldi	r24, 0xC3	; 195
    4098:	9c e0       	ldi	r25, 0x0C	; 12
    409a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_adc_rate());
    409e:	ce 01       	movw	r24, r28
    40a0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN8as_class12get_adc_rateEv>
    40a4:	bc 01       	movw	r22, r24
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    40ae:	8b e3       	ldi	r24, 0x3B	; 59
    40b0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    40b4:	8d e0       	ldi	r24, 0x0D	; 13
    40b6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("tia_rt="));
    40ba:	8b eb       	ldi	r24, 0xBB	; 187
    40bc:	9c e0       	ldi	r25, 0x0C	; 12
    40be:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_tia_res_tap());
    40c2:	ce 01       	movw	r24, r28
    40c4:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN8as_class15get_tia_res_tapEv>
    40c8:	bc 01       	movw	r22, r24
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    40d2:	8b e3       	ldi	r24, 0x3B	; 59
    40d4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    40d8:	8d e0       	ldi	r24, 0x0D	; 13
    40da:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("tia_cm="));
    40de:	83 eb       	ldi	r24, 0xB3	; 179
    40e0:	9c e0       	ldi	r25, 0x0C	; 12
    40e2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_tia_cap_mask());
    40e6:	ce 01       	movw	r24, r28
    40e8:	0e 94 93 13 	call	0x2726	; 0x2726 <_ZN8as_class16get_tia_cap_maskEv>
    40ec:	68 2f       	mov	r22, r24
    40ee:	70 e0       	ldi	r23, 0x00	; 0
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    40f8:	8b e3       	ldi	r24, 0x3B	; 59
    40fa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    40fe:	8d e0       	ldi	r24, 0x0D	; 13
    4100:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_e="));
    4104:	8c ea       	ldi	r24, 0xAC	; 172
    4106:	9c e0       	ldi	r25, 0x0C	; 12
    4108:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_dep_enable();
    410c:	ce 01       	movw	r24, r28
    410e:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN8as_class14get_dep_enableEv>
	uart_true_false(t_f);
    4112:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("dep_t="));
    4116:	85 ea       	ldi	r24, 0xA5	; 165
    4118:	9c e0       	ldi	r25, 0x0C	; 12
    411a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_dep_time());
    411e:	ce 01       	movw	r24, r28
    4120:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN8as_class12get_dep_timeEv>
    4124:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4128:	8b e3       	ldi	r24, 0x3B	; 59
    412a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    412e:	8d e0       	ldi	r24, 0x0D	; 13
    4130:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_v="));
    4134:	8e e9       	ldi	r24, 0x9E	; 158
    4136:	9c e0       	ldi	r25, 0x0C	; 12
    4138:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_dep_volt());
    413c:	ce 01       	movw	r24, r28
    413e:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN8as_class12get_dep_voltEv>
    4142:	bc 01       	movw	r22, r24
    4144:	88 27       	eor	r24, r24
    4146:	77 fd       	sbrc	r23, 7
    4148:	80 95       	com	r24
    414a:	98 2f       	mov	r25, r24
    414c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    4150:	8b e3       	ldi	r24, 0x3B	; 59
    4152:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4156:	8d e0       	ldi	r24, 0x0D	; 13
    4158:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("quiet_t="));
    415c:	85 e9       	ldi	r24, 0x95	; 149
    415e:	9c e0       	ldi	r25, 0x0C	; 12
    4160:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_quiet_time());
    4164:	ce 01       	movw	r24, r28
    4166:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN8as_class14get_quiet_timeEv>
    416a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    416e:	8b e3       	ldi	r24, 0x3B	; 59
    4170:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4174:	8d e0       	ldi	r24, 0x0D	; 13
    4176:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_r="));
    417a:	8e e8       	ldi	r24, 0x8E	; 142
    417c:	9c e0       	ldi	r25, 0x0C	; 12
    417e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_dep_rec();
    4182:	ce 01       	movw	r24, r28
    4184:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
	uart_true_false(t_f);
    4188:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("sweep_vs="));
    418c:	84 e8       	ldi	r24, 0x84	; 132
    418e:	9c e0       	ldi	r25, 0x0C	; 12
    4190:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_sweep_volt_start());
    4194:	ce 01       	movw	r24, r28
    4196:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN8as_class20get_sweep_volt_startEv>
    419a:	bc 01       	movw	r22, r24
    419c:	88 27       	eor	r24, r24
    419e:	77 fd       	sbrc	r23, 7
    41a0:	80 95       	com	r24
    41a2:	98 2f       	mov	r25, r24
    41a4:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    41a8:	8b e3       	ldi	r24, 0x3B	; 59
    41aa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    41ae:	8d e0       	ldi	r24, 0x0D	; 13
    41b0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_ve="));
    41b4:	8a e7       	ldi	r24, 0x7A	; 122
    41b6:	9c e0       	ldi	r25, 0x0C	; 12
    41b8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_sweep_volt_end());
    41bc:	ce 01       	movw	r24, r28
    41be:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN8as_class18get_sweep_volt_endEv>
    41c2:	bc 01       	movw	r22, r24
    41c4:	88 27       	eor	r24, r24
    41c6:	77 fd       	sbrc	r23, 7
    41c8:	80 95       	com	r24
    41ca:	98 2f       	mov	r25, r24
    41cc:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    41d0:	8b e3       	ldi	r24, 0x3B	; 59
    41d2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    41d6:	8d e0       	ldi	r24, 0x0D	; 13
    41d8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_r="));
    41dc:	81 e7       	ldi	r24, 0x71	; 113
    41de:	9c e0       	ldi	r25, 0x0C	; 12
    41e0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_sweep_rate());
    41e4:	ce 01       	movw	r24, r28
    41e6:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN8as_class14get_sweep_rateEv>
    41ea:	bc 01       	movw	r22, r24
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    41f4:	8b e3       	ldi	r24, 0x3B	; 59
    41f6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    41fa:	8d e0       	ldi	r24, 0x0D	; 13
    41fc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_c="));
    4200:	88 e6       	ldi	r24, 0x68	; 104
    4202:	9c e0       	ldi	r25, 0x0C	; 12
    4204:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_sweep_cyclic();
    4208:	ce 01       	movw	r24, r28
    420a:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8as_class16get_sweep_cyclicEv>
	uart_true_false(t_f);
    420e:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("sweep_cs="));
    4212:	8e e5       	ldi	r24, 0x5E	; 94
    4214:	9c e0       	ldi	r25, 0x0C	; 12
    4216:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_sweep_cycles());
    421a:	ce 01       	movw	r24, r28
    421c:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN8as_class16get_sweep_cyclesEv>
    4220:	68 2f       	mov	r22, r24
    4222:	70 e0       	ldi	r23, 0x00	; 0
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    422c:	8b e3       	ldi	r24, 0x3B	; 59
    422e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4232:	8d e0       	ldi	r24, 0x0D	; 13
    4234:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_vs="));
    4238:	83 e5       	ldi	r24, 0x53	; 83
    423a:	9c e0       	ldi	r25, 0x0C	; 12
    423c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_square_volt_start());
    4240:	ce 01       	movw	r24, r28
    4242:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    4246:	bc 01       	movw	r22, r24
    4248:	88 27       	eor	r24, r24
    424a:	77 fd       	sbrc	r23, 7
    424c:	80 95       	com	r24
    424e:	98 2f       	mov	r25, r24
    4250:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    4254:	8b e3       	ldi	r24, 0x3B	; 59
    4256:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    425a:	8d e0       	ldi	r24, 0x0D	; 13
    425c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_ve="));
    4260:	88 e4       	ldi	r24, 0x48	; 72
    4262:	9c e0       	ldi	r25, 0x0C	; 12
    4264:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_square_volt_end());
    4268:	ce 01       	movw	r24, r28
    426a:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    426e:	bc 01       	movw	r22, r24
    4270:	88 27       	eor	r24, r24
    4272:	77 fd       	sbrc	r23, 7
    4274:	80 95       	com	r24
    4276:	98 2f       	mov	r25, r24
    4278:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    427c:	8b e3       	ldi	r24, 0x3B	; 59
    427e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4282:	8d e0       	ldi	r24, 0x0D	; 13
    4284:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_a="));
    4288:	8e e3       	ldi	r24, 0x3E	; 62
    428a:	9c e0       	ldi	r25, 0x0C	; 12
    428c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_square_amp());
    4290:	ce 01       	movw	r24, r28
    4292:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    4296:	bc 01       	movw	r22, r24
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    42a0:	8b e3       	ldi	r24, 0x3B	; 59
    42a2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    42a6:	8d e0       	ldi	r24, 0x0D	; 13
    42a8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_i="));
    42ac:	84 e3       	ldi	r24, 0x34	; 52
    42ae:	9c e0       	ldi	r25, 0x0C	; 12
    42b0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_square_inc());
    42b4:	ce 01       	movw	r24, r28
    42b6:	0e 94 84 14 	call	0x2908	; 0x2908 <_ZN8as_class14get_square_incEv>
    42ba:	bc 01       	movw	r22, r24
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    42c4:	8b e3       	ldi	r24, 0x3B	; 59
    42c6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    42ca:	8d e0       	ldi	r24, 0x0D	; 13
    42cc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("square_p="));
    42d0:	8a e2       	ldi	r24, 0x2A	; 42
    42d2:	9c e0       	ldi	r25, 0x0C	; 12
    42d4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_square_period());
    42d8:	ce 01       	movw	r24, r28
    42da:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8as_class17get_square_periodEv>
    42de:	bc 01       	movw	r22, r24
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    42e8:	8b e3       	ldi	r24, 0x3B	; 59
    42ea:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    42ee:	8d e0       	ldi	r24, 0x0D	; 13
    42f0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("arb_n="));
    42f4:	83 e2       	ldi	r24, 0x23	; 35
    42f6:	9c e0       	ldi	r25, 0x0C	; 12
    42f8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(arb_num);
    42fc:	b8 01       	movw	r22, r16
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4306:	8b e3       	ldi	r24, 0x3B	; 59
    4308:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    430c:	8d e0       	ldi	r24, 0x0D	; 13
    430e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("arb_c="));
    4312:	8c e1       	ldi	r24, 0x1C	; 28
    4314:	9c e0       	ldi	r25, 0x0C	; 12
    4316:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_arb_cyclic();
    431a:	ce 01       	movw	r24, r28
    431c:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN8as_class14get_arb_cyclicEv>
    4320:	91 e0       	ldi	r25, 0x01	; 1
    4322:	81 11       	cpse	r24, r1
    4324:	01 c0       	rjmp	.+2      	; 0x4328 <_Z19uart_print_settingsP8as_class+0x306>
    4326:	90 e0       	ldi	r25, 0x00	; 0
	uart_true_false(t_f);
    4328:	89 2f       	mov	r24, r25
    432a:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("arb_cs="));
    432e:	84 e1       	ldi	r24, 0x14	; 20
    4330:	9c e0       	ldi	r25, 0x0C	; 12
    4332:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_arb_cycles());
    4336:	ce 01       	movw	r24, r28
    4338:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN8as_class14get_arb_cyclesEv>
    433c:	68 2f       	mov	r22, r24
    433e:	70 e0       	ldi	r23, 0x00	; 0
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4348:	8b e3       	ldi	r24, 0x3B	; 59
    434a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    434e:	8d e0       	ldi	r24, 0x0D	; 13
    4350:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("filt_e="));
    4354:	8c e0       	ldi	r24, 0x0C	; 12
    4356:	9c e0       	ldi	r25, 0x0C	; 12
    4358:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_soft_filt();
    435c:	ce 01       	movw	r24, r28
    435e:	0e 94 b6 14 	call	0x296c	; 0x296c <_ZN8as_class13get_soft_filtEv>
	uart_true_false(t_f);
    4362:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("filt_s="));
    4366:	84 e0       	ldi	r24, 0x04	; 4
    4368:	9c e0       	ldi	r25, 0x0C	; 12
    436a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_soft_sel());
    436e:	ce 01       	movw	r24, r28
    4370:	0e 94 c5 14 	call	0x298a	; 0x298a <_ZN8as_class12get_soft_selEv>
    4374:	68 2f       	mov	r22, r24
    4376:	70 e0       	ldi	r23, 0x00	; 0
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4380:	8b e3       	ldi	r24, 0x3B	; 59
    4382:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4386:	8d e0       	ldi	r24, 0x0D	; 13
    4388:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    438c:	8d e0       	ldi	r24, 0x0D	; 13
    438e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
}
    4392:	df 91       	pop	r29
    4394:	cf 91       	pop	r28
    4396:	1f 91       	pop	r17
    4398:	0f 91       	pop	r16
    439a:	08 95       	ret

0000439c <_Z17uart_print_spacesv>:
	atmega_uart::tx_byte('\r');
}

//Print 8 spaces out the UART for indenting.
void uart_print_spaces()
{
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	c8 e0       	ldi	r28, 0x08	; 8
    43a2:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		atmega_uart::tx_byte(' ');
    43a4:	80 e2       	ldi	r24, 0x20	; 32
    43a6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    43aa:	21 97       	sbiw	r28, 0x01	; 1
}

//Print 8 spaces out the UART for indenting.
void uart_print_spaces()
{
	for(int i = 0; i < 8; i++)
    43ac:	20 97       	sbiw	r28, 0x00	; 0
    43ae:	d1 f7       	brne	.-12     	; 0x43a4 <_Z17uart_print_spacesv+0x8>
	{
		atmega_uart::tx_byte(' ');
	}
}
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	08 95       	ret

000043b6 <_Z8uart_errv>:

//Write "ERR" in the terminal window.
void uart_err()
{
	atmega_uart::tx_string_p(PSTR("ERR\r"));
    43b6:	8c ed       	ldi	r24, 0xDC	; 220
    43b8:	9b e0       	ldi	r25, 0x0B	; 11
    43ba:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    43be:	08 95       	ret

000043c0 <_Z7uart_okv>:
}

//Write "OK" in the terminal window.
void uart_ok()
{
	atmega_uart::tx_string_p(PSTR("OK\r"));
    43c0:	88 ed       	ldi	r24, 0xD8	; 216
    43c2:	9b e0       	ldi	r25, 0x0B	; 11
    43c4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    43c8:	08 95       	ret

000043ca <_Z10arb_appendPKh>:
	return;
}

//Append arbitrary waveform data to end of saved list.
uint8_t arb_append(const uint8_t *rx_array)
{
    43ca:	2f 92       	push	r2
    43cc:	3f 92       	push	r3
    43ce:	4f 92       	push	r4
    43d0:	5f 92       	push	r5
    43d2:	6f 92       	push	r6
    43d4:	7f 92       	push	r7
    43d6:	8f 92       	push	r8
    43d8:	9f 92       	push	r9
    43da:	af 92       	push	r10
    43dc:	bf 92       	push	r11
    43de:	cf 92       	push	r12
    43e0:	df 92       	push	r13
    43e2:	ef 92       	push	r14
    43e4:	ff 92       	push	r15
    43e6:	0f 93       	push	r16
    43e8:	1f 93       	push	r17
    43ea:	cf 93       	push	r28
    43ec:	df 93       	push	r29
    43ee:	00 d0       	rcall	.+0      	; 0x43f0 <_Z10arb_appendPKh+0x26>
    43f0:	1f 92       	push	r1
    43f2:	cd b7       	in	r28, 0x3d	; 61
    43f4:	de b7       	in	r29, 0x3e	; 62
    43f6:	8c 01       	movw	r16, r24
	int16_t start_v, end_v;
	uint16_t rate, entries;
	uint8_t errno, pend1, pend2;
	
	//Get number of entries already in list.
	entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    43f8:	86 e0       	ldi	r24, 0x06	; 6
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    4400:	1c 01       	movw	r2, r24
	
	//Error out if memory is already full.
	if(entries >= ARB_ENTRIES_MAX)
    4402:	86 39       	cpi	r24, 0x96	; 150
    4404:	91 05       	cpc	r25, r1
    4406:	30 f0       	brcs	.+12     	; 0x4414 <_Z10arb_appendPKh+0x4a>
	{
		atmega_uart::tx_string_p(PSTR("Memory Full\r"));
    4408:	8c ea       	ldi	r24, 0xAC	; 172
    440a:	94 e0       	ldi	r25, 0x04	; 4
    440c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return ER_ERROR;
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	74 c0       	rjmp	.+232    	; 0x44fc <_Z10arb_appendPKh+0x132>
	}
	
	//Attempt to convert first user input to number.
	start_v = string_to_int_p(rx_array, &errno, &pend1, ' ');
    4414:	20 e2       	ldi	r18, 0x20	; 32
    4416:	ae 01       	movw	r20, r28
    4418:	4e 5f       	subi	r20, 0xFE	; 254
    441a:	5f 4f       	sbci	r21, 0xFF	; 255
    441c:	be 01       	movw	r22, r28
    441e:	6d 5f       	subi	r22, 0xFD	; 253
    4420:	7f 4f       	sbci	r23, 0xFF	; 255
    4422:	c8 01       	movw	r24, r16
    4424:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z15string_to_int_pPKhPhS1_h>
    4428:	6b 01       	movw	r12, r22
    442a:	7c 01       	movw	r14, r24
	
	if(errno)
    442c:	8b 81       	ldd	r24, Y+3	; 0x03
    442e:	81 11       	cpse	r24, r1
    4430:	5a c0       	rjmp	.+180    	; 0x44e6 <_Z10arb_appendPKh+0x11c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
    4432:	c6 01       	movw	r24, r12
    4434:	8e 58       	subi	r24, 0x8E	; 142
    4436:	99 4f       	sbci	r25, 0xF9	; 249
    4438:	85 3e       	cpi	r24, 0xE5	; 229
    443a:	9c 40       	sbci	r25, 0x0C	; 12
    443c:	08 f0       	brcs	.+2      	; 0x4440 <_Z10arb_appendPKh+0x76>
    443e:	55 c0       	rjmp	.+170    	; 0x44ea <_Z10arb_appendPKh+0x120>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert second user input to number.
	end_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
    4440:	8a 81       	ldd	r24, Y+2	; 0x02
    4442:	20 e2       	ldi	r18, 0x20	; 32
    4444:	ae 01       	movw	r20, r28
    4446:	4f 5f       	subi	r20, 0xFF	; 255
    4448:	5f 4f       	sbci	r21, 0xFF	; 255
    444a:	be 01       	movw	r22, r28
    444c:	6d 5f       	subi	r22, 0xFD	; 253
    444e:	7f 4f       	sbci	r23, 0xFF	; 255
    4450:	f8 01       	movw	r30, r16
    4452:	e8 0f       	add	r30, r24
    4454:	f1 1d       	adc	r31, r1
    4456:	cf 01       	movw	r24, r30
    4458:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z15string_to_int_pPKhPhS1_h>
    445c:	4b 01       	movw	r8, r22
    445e:	5c 01       	movw	r10, r24
	
	if(errno)
    4460:	8b 81       	ldd	r24, Y+3	; 0x03
    4462:	81 11       	cpse	r24, r1
    4464:	44 c0       	rjmp	.+136    	; 0x44ee <_Z10arb_appendPKh+0x124>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
    4466:	c4 01       	movw	r24, r8
    4468:	8e 58       	subi	r24, 0x8E	; 142
    446a:	99 4f       	sbci	r25, 0xF9	; 249
    446c:	85 3e       	cpi	r24, 0xE5	; 229
    446e:	9c 40       	sbci	r25, 0x0C	; 12
    4470:	08 f0       	brcs	.+2      	; 0x4474 <_Z10arb_appendPKh+0xaa>
    4472:	3f c0       	rjmp	.+126    	; 0x44f2 <_Z10arb_appendPKh+0x128>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert third user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend2, '\r');
    4474:	29 81       	ldd	r18, Y+1	; 0x01
    4476:	8a 81       	ldd	r24, Y+2	; 0x02
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	82 0f       	add	r24, r18
    447c:	91 1d       	adc	r25, r1
    447e:	2d e0       	ldi	r18, 0x0D	; 13
    4480:	ae 01       	movw	r20, r28
    4482:	4f 5f       	subi	r20, 0xFF	; 255
    4484:	5f 4f       	sbci	r21, 0xFF	; 255
    4486:	be 01       	movw	r22, r28
    4488:	6d 5f       	subi	r22, 0xFD	; 253
    448a:	7f 4f       	sbci	r23, 0xFF	; 255
    448c:	80 0f       	add	r24, r16
    448e:	91 1f       	adc	r25, r17
    4490:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z15string_to_int_pPKhPhS1_h>
    4494:	2b 01       	movw	r4, r22
    4496:	3c 01       	movw	r6, r24
	
	if(errno)
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	81 11       	cpse	r24, r1
    449c:	2c c0       	rjmp	.+88     	; 0x44f6 <_Z10arb_appendPKh+0x12c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
    449e:	c2 01       	movw	r24, r4
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	80 3d       	cpi	r24, 0xD0	; 208
    44a4:	97 40       	sbci	r25, 0x07	; 7
    44a6:	48 f5       	brcc	.+82     	; 0x44fa <_Z10arb_appendPKh+0x130>
	{
		return ER_ERROR;
	}
	
	//Save values in the EEPROM.
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * entries), start_v);
    44a8:	81 01       	movw	r16, r2
    44aa:	00 0f       	add	r16, r16
    44ac:	11 1f       	adc	r17, r17
    44ae:	02 0d       	add	r16, r2
    44b0:	13 1d       	adc	r17, r3
    44b2:	00 0f       	add	r16, r16
    44b4:	11 1f       	adc	r17, r17
    44b6:	b6 01       	movw	r22, r12
    44b8:	c8 01       	movw	r24, r16
    44ba:	08 96       	adiw	r24, 0x08	; 8
    44bc:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * entries), end_v);
    44c0:	b4 01       	movw	r22, r8
    44c2:	c8 01       	movw	r24, r16
    44c4:	0a 96       	adiw	r24, 0x0a	; 10
    44c6:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * entries), rate);
    44ca:	b2 01       	movw	r22, r4
    44cc:	c8 01       	movw	r24, r16
    44ce:	0c 96       	adiw	r24, 0x0c	; 12
    44d0:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
	
	//Update number of entries stored.
	atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries + 1);
    44d4:	b1 01       	movw	r22, r2
    44d6:	6f 5f       	subi	r22, 0xFF	; 255
    44d8:	7f 4f       	sbci	r23, 0xFF	; 255
    44da:	86 e0       	ldi	r24, 0x06	; 6
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
	
	return ER_NO_ERROR;
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	0b c0       	rjmp	.+22     	; 0x44fc <_Z10arb_appendPKh+0x132>
	//Attempt to convert first user input to number.
	start_v = string_to_int_p(rx_array, &errno, &pend1, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	09 c0       	rjmp	.+18     	; 0x44fc <_Z10arb_appendPKh+0x132>
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	07 c0       	rjmp	.+14     	; 0x44fc <_Z10arb_appendPKh+0x132>
	//Attempt to convert second user input to number.
	end_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	05 c0       	rjmp	.+10     	; 0x44fc <_Z10arb_appendPKh+0x132>
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	03 c0       	rjmp	.+6      	; 0x44fc <_Z10arb_appendPKh+0x132>
	//Attempt to convert third user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend2, '\r');
	
	if(errno)
	{
		return ER_ERROR;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	01 c0       	rjmp	.+2      	; 0x44fc <_Z10arb_appendPKh+0x132>
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
	{
		return ER_ERROR;
    44fa:	81 e0       	ldi	r24, 0x01	; 1
	
	//Update number of entries stored.
	atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries + 1);
	
	return ER_NO_ERROR;
}
    44fc:	0f 90       	pop	r0
    44fe:	0f 90       	pop	r0
    4500:	0f 90       	pop	r0
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	ff 90       	pop	r15
    450c:	ef 90       	pop	r14
    450e:	df 90       	pop	r13
    4510:	cf 90       	pop	r12
    4512:	bf 90       	pop	r11
    4514:	af 90       	pop	r10
    4516:	9f 90       	pop	r9
    4518:	8f 90       	pop	r8
    451a:	7f 90       	pop	r7
    451c:	6f 90       	pop	r6
    451e:	5f 90       	pop	r5
    4520:	4f 90       	pop	r4
    4522:	3f 90       	pop	r3
    4524:	2f 90       	pop	r2
    4526:	08 95       	ret

00004528 <_Z11arb_replacePKh>:

//Replace arbitrary waveform data at specified location.
uint8_t arb_replace(const uint8_t *rx_array)
{
    4528:	4f 92       	push	r4
    452a:	5f 92       	push	r5
    452c:	6f 92       	push	r6
    452e:	7f 92       	push	r7
    4530:	8f 92       	push	r8
    4532:	9f 92       	push	r9
    4534:	af 92       	push	r10
    4536:	bf 92       	push	r11
    4538:	cf 92       	push	r12
    453a:	df 92       	push	r13
    453c:	ef 92       	push	r14
    453e:	ff 92       	push	r15
    4540:	0f 93       	push	r16
    4542:	1f 93       	push	r17
    4544:	cf 93       	push	r28
    4546:	df 93       	push	r29
    4548:	cd b7       	in	r28, 0x3d	; 61
    454a:	de b7       	in	r29, 0x3e	; 62
    454c:	28 97       	sbiw	r28, 0x08	; 8
    454e:	0f b6       	in	r0, 0x3f	; 63
    4550:	f8 94       	cli
    4552:	de bf       	out	0x3e, r29	; 62
    4554:	0f be       	out	0x3f, r0	; 63
    4556:	cd bf       	out	0x3d, r28	; 61
    4558:	8c 01       	movw	r16, r24
	int16_t start_v, end_v;
	uint16_t ent, rate, entries;
	uint8_t errno, pend1, pend2, pend3;
	
	//Get number of entries already in list.
	entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    455a:	86 e0       	ldi	r24, 0x06	; 6
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    4562:	5c 01       	movw	r10, r24
	
	//Attempt to convert first user input to number.
	ent = string_to_int_p(rx_array, &errno, &pend1, ' ');
    4564:	20 e2       	ldi	r18, 0x20	; 32
    4566:	ae 01       	movw	r20, r28
    4568:	4d 5f       	subi	r20, 0xFD	; 253
    456a:	5f 4f       	sbci	r21, 0xFF	; 255
    456c:	be 01       	movw	r22, r28
    456e:	6c 5f       	subi	r22, 0xFC	; 252
    4570:	7f 4f       	sbci	r23, 0xFF	; 255
    4572:	c8 01       	movw	r24, r16
    4574:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z15string_to_int_pPKhPhS1_h>
    4578:	6b 01       	movw	r12, r22
    457a:	7c 01       	movw	r14, r24
	
	if(errno)
    457c:	8c 81       	ldd	r24, Y+4	; 0x04
    457e:	81 11       	cpse	r24, r1
    4580:	79 c0       	rjmp	.+242    	; 0x4674 <_Z11arb_replacePKh+0x14c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(ent > entries)
    4582:	ac 14       	cp	r10, r12
    4584:	bd 04       	cpc	r11, r13
    4586:	30 f4       	brcc	.+12     	; 0x4594 <_Z11arb_replacePKh+0x6c>
	{
		atmega_uart::tx_string_p(PSTR("Entry Out of Range\r"));
    4588:	88 e9       	ldi	r24, 0x98	; 152
    458a:	94 e0       	ldi	r25, 0x04	; 4
    458c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return ER_ERROR;
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	7d c0       	rjmp	.+250    	; 0x468e <_Z11arb_replacePKh+0x166>
	}
	
	//Attempt to convert second user input to number.
	start_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	20 e2       	ldi	r18, 0x20	; 32
    4598:	ae 01       	movw	r20, r28
    459a:	4e 5f       	subi	r20, 0xFE	; 254
    459c:	5f 4f       	sbci	r21, 0xFF	; 255
    459e:	be 01       	movw	r22, r28
    45a0:	6c 5f       	subi	r22, 0xFC	; 252
    45a2:	7f 4f       	sbci	r23, 0xFF	; 255
    45a4:	f8 01       	movw	r30, r16
    45a6:	e8 0f       	add	r30, r24
    45a8:	f1 1d       	adc	r31, r1
    45aa:	cf 01       	movw	r24, r30
    45ac:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z15string_to_int_pPKhPhS1_h>
    45b0:	4b 01       	movw	r8, r22
    45b2:	5c 01       	movw	r10, r24
	
	if(errno)
    45b4:	8c 81       	ldd	r24, Y+4	; 0x04
    45b6:	81 11       	cpse	r24, r1
    45b8:	5f c0       	rjmp	.+190    	; 0x4678 <_Z11arb_replacePKh+0x150>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
    45ba:	c4 01       	movw	r24, r8
    45bc:	8e 58       	subi	r24, 0x8E	; 142
    45be:	99 4f       	sbci	r25, 0xF9	; 249
    45c0:	85 3e       	cpi	r24, 0xE5	; 229
    45c2:	9c 40       	sbci	r25, 0x0C	; 12
    45c4:	08 f0       	brcs	.+2      	; 0x45c8 <_Z11arb_replacePKh+0xa0>
    45c6:	5a c0       	rjmp	.+180    	; 0x467c <_Z11arb_replacePKh+0x154>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert third user input to number.
	end_v = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend3, ' ');
    45c8:	2a 81       	ldd	r18, Y+2	; 0x02
    45ca:	8b 81       	ldd	r24, Y+3	; 0x03
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	82 0f       	add	r24, r18
    45d0:	91 1d       	adc	r25, r1
    45d2:	20 e2       	ldi	r18, 0x20	; 32
    45d4:	ae 01       	movw	r20, r28
    45d6:	4f 5f       	subi	r20, 0xFF	; 255
    45d8:	5f 4f       	sbci	r21, 0xFF	; 255
    45da:	be 01       	movw	r22, r28
    45dc:	6c 5f       	subi	r22, 0xFC	; 252
    45de:	7f 4f       	sbci	r23, 0xFF	; 255
    45e0:	80 0f       	add	r24, r16
    45e2:	91 1f       	adc	r25, r17
    45e4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z15string_to_int_pPKhPhS1_h>
    45e8:	2b 01       	movw	r4, r22
    45ea:	3c 01       	movw	r6, r24
	
	if(errno)
    45ec:	8c 81       	ldd	r24, Y+4	; 0x04
    45ee:	81 11       	cpse	r24, r1
    45f0:	47 c0       	rjmp	.+142    	; 0x4680 <_Z11arb_replacePKh+0x158>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
    45f2:	c2 01       	movw	r24, r4
    45f4:	8e 58       	subi	r24, 0x8E	; 142
    45f6:	99 4f       	sbci	r25, 0xF9	; 249
    45f8:	85 3e       	cpi	r24, 0xE5	; 229
    45fa:	9c 40       	sbci	r25, 0x0C	; 12
    45fc:	08 f0       	brcs	.+2      	; 0x4600 <_Z11arb_replacePKh+0xd8>
    45fe:	42 c0       	rjmp	.+132    	; 0x4684 <_Z11arb_replacePKh+0x15c>
		return ER_ERROR;
	}
	
	
	//Attempt to convert fourth user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2 + pend3, &errno, &pend2, '\r');
    4600:	2a 81       	ldd	r18, Y+2	; 0x02
    4602:	8b 81       	ldd	r24, Y+3	; 0x03
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	82 0f       	add	r24, r18
    4608:	91 1d       	adc	r25, r1
    460a:	29 81       	ldd	r18, Y+1	; 0x01
    460c:	82 0f       	add	r24, r18
    460e:	91 1d       	adc	r25, r1
    4610:	2d e0       	ldi	r18, 0x0D	; 13
    4612:	ae 01       	movw	r20, r28
    4614:	4e 5f       	subi	r20, 0xFE	; 254
    4616:	5f 4f       	sbci	r21, 0xFF	; 255
    4618:	be 01       	movw	r22, r28
    461a:	6c 5f       	subi	r22, 0xFC	; 252
    461c:	7f 4f       	sbci	r23, 0xFF	; 255
    461e:	80 0f       	add	r24, r16
    4620:	91 1f       	adc	r25, r17
    4622:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z15string_to_int_pPKhPhS1_h>
    4626:	6d 83       	std	Y+5, r22	; 0x05
    4628:	7e 83       	std	Y+6, r23	; 0x06
    462a:	8f 83       	std	Y+7, r24	; 0x07
    462c:	98 87       	std	Y+8, r25	; 0x08
	
	if(errno)
    462e:	8c 81       	ldd	r24, Y+4	; 0x04
    4630:	81 11       	cpse	r24, r1
    4632:	2a c0       	rjmp	.+84     	; 0x4688 <_Z11arb_replacePKh+0x160>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
    4634:	8d 81       	ldd	r24, Y+5	; 0x05
    4636:	9e 81       	ldd	r25, Y+6	; 0x06
    4638:	01 97       	sbiw	r24, 0x01	; 1
    463a:	80 3d       	cpi	r24, 0xD0	; 208
    463c:	97 40       	sbci	r25, 0x07	; 7
    463e:	30 f5       	brcc	.+76     	; 0x468c <_Z11arb_replacePKh+0x164>
	{
		return ER_ERROR;
	}
	
	//Save values in the EEPROM.
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * (ent - 1)), start_v);
    4640:	c6 01       	movw	r24, r12
    4642:	88 0f       	add	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	c8 0e       	add	r12, r24
    4648:	d9 1e       	adc	r13, r25
    464a:	86 01       	movw	r16, r12
    464c:	00 0f       	add	r16, r16
    464e:	11 1f       	adc	r17, r17
    4650:	b4 01       	movw	r22, r8
    4652:	c8 01       	movw	r24, r16
    4654:	02 96       	adiw	r24, 0x02	; 2
    4656:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * (ent - 1)), end_v);
    465a:	b2 01       	movw	r22, r4
    465c:	c8 01       	movw	r24, r16
    465e:	04 96       	adiw	r24, 0x04	; 4
    4660:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * (ent - 1)), rate);
    4664:	6d 81       	ldd	r22, Y+5	; 0x05
    4666:	7e 81       	ldd	r23, Y+6	; 0x06
    4668:	c8 01       	movw	r24, r16
    466a:	06 96       	adiw	r24, 0x06	; 6
    466c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
	
	return ER_NO_ERROR;
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	0d c0       	rjmp	.+26     	; 0x468e <_Z11arb_replacePKh+0x166>
	//Attempt to convert first user input to number.
	ent = string_to_int_p(rx_array, &errno, &pend1, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	0b c0       	rjmp	.+22     	; 0x468e <_Z11arb_replacePKh+0x166>
	//Attempt to convert second user input to number.
	start_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	09 c0       	rjmp	.+18     	; 0x468e <_Z11arb_replacePKh+0x166>
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	07 c0       	rjmp	.+14     	; 0x468e <_Z11arb_replacePKh+0x166>
	//Attempt to convert third user input to number.
	end_v = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend3, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	05 c0       	rjmp	.+10     	; 0x468e <_Z11arb_replacePKh+0x166>
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	03 c0       	rjmp	.+6      	; 0x468e <_Z11arb_replacePKh+0x166>
	//Attempt to convert fourth user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2 + pend3, &errno, &pend2, '\r');
	
	if(errno)
	{
		return ER_ERROR;
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	01 c0       	rjmp	.+2      	; 0x468e <_Z11arb_replacePKh+0x166>
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
	{
		return ER_ERROR;
    468c:	81 e0       	ldi	r24, 0x01	; 1
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * (ent - 1)), start_v);
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * (ent - 1)), end_v);
	atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * (ent - 1)), rate);
	
	return ER_NO_ERROR;
}
    468e:	28 96       	adiw	r28, 0x08	; 8
    4690:	0f b6       	in	r0, 0x3f	; 63
    4692:	f8 94       	cli
    4694:	de bf       	out	0x3e, r29	; 62
    4696:	0f be       	out	0x3f, r0	; 63
    4698:	cd bf       	out	0x3d, r28	; 61
    469a:	df 91       	pop	r29
    469c:	cf 91       	pop	r28
    469e:	1f 91       	pop	r17
    46a0:	0f 91       	pop	r16
    46a2:	ff 90       	pop	r15
    46a4:	ef 90       	pop	r14
    46a6:	df 90       	pop	r13
    46a8:	cf 90       	pop	r12
    46aa:	bf 90       	pop	r11
    46ac:	af 90       	pop	r10
    46ae:	9f 90       	pop	r9
    46b0:	8f 90       	pop	r8
    46b2:	7f 90       	pop	r7
    46b4:	6f 90       	pop	r6
    46b6:	5f 90       	pop	r5
    46b8:	4f 90       	pop	r4
    46ba:	08 95       	ret

000046bc <_Z8set_boolPKhP8as_classMS1_FhbE>:

//Set value in as_class object that is a bool value (ASCII).
uint8_t set_bool(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_tf)(bool))
{
    46bc:	cf 92       	push	r12
    46be:	df 92       	push	r13
    46c0:	ef 92       	push	r14
    46c2:	ff 92       	push	r15
    46c4:	0f 93       	push	r16
    46c6:	1f 93       	push	r17
    46c8:	cf 93       	push	r28
    46ca:	df 93       	push	r29
    46cc:	8c 01       	movw	r16, r24
    46ce:	eb 01       	movw	r28, r22
    46d0:	69 01       	movw	r12, r18
    46d2:	7a 01       	movw	r14, r20
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    46d4:	cb 01       	movw	r24, r22
    46d6:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    46da:	82 30       	cpi	r24, 0x02	; 2
    46dc:	09 f0       	breq	.+2      	; 0x46e0 <_Z8set_boolPKhP8as_classMS1_FhbE+0x24>
    46de:	4f c0       	rjmp	.+158    	; 0x477e <_Z8set_boolPKhP8as_classMS1_FhbE+0xc2>
	{
		if(bin_index == 2)
    46e0:	80 91 7b 01 	lds	r24, 0x017B
    46e4:	82 30       	cpi	r24, 0x02	; 2
    46e6:	09 f0       	breq	.+2      	; 0x46ea <_Z8set_boolPKhP8as_classMS1_FhbE+0x2e>
    46e8:	45 c0       	rjmp	.+138    	; 0x4774 <_Z8set_boolPKhP8as_classMS1_FhbE+0xb8>
		{
			if(arr.bin_rx[1] == 0x00)
    46ea:	80 91 7d 01 	lds	r24, 0x017D
    46ee:	81 11       	cpse	r24, r1
    46f0:	1d c0       	rjmp	.+58     	; 0x472c <_Z8set_boolPKhP8as_classMS1_FhbE+0x70>
			{
				(as->*func_tf)(false);
    46f2:	e0 fe       	sbrs	r14, 0
    46f4:	0e c0       	rjmp	.+28     	; 0x4712 <_Z8set_boolPKhP8as_classMS1_FhbE+0x56>
    46f6:	f7 01       	movw	r30, r14
    46f8:	f5 95       	asr	r31
    46fa:	e7 95       	ror	r30
    46fc:	ec 0f       	add	r30, r28
    46fe:	fd 1f       	adc	r31, r29
    4700:	01 90       	ld	r0, Z+
    4702:	f0 81       	ld	r31, Z
    4704:	e0 2d       	mov	r30, r0
    4706:	ec 0d       	add	r30, r12
    4708:	fd 1d       	adc	r31, r13
    470a:	01 90       	ld	r0, Z+
    470c:	f0 81       	ld	r31, Z
    470e:	e0 2d       	mov	r30, r0
    4710:	01 c0       	rjmp	.+2      	; 0x4714 <_Z8set_boolPKhP8as_classMS1_FhbE+0x58>
    4712:	f6 01       	movw	r30, r12
    4714:	c7 01       	movw	r24, r14
    4716:	95 95       	asr	r25
    4718:	87 95       	ror	r24
    471a:	60 e0       	ldi	r22, 0x00	; 0
    471c:	8c 0f       	add	r24, r28
    471e:	9d 1f       	adc	r25, r29
    4720:	09 95       	icall
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	6f c0       	rjmp	.+222    	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
			{
				(as->*func_tf)(false);
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
				
			}
			else if(arr.bin_rx[1] == 0x01)
    472c:	81 30       	cpi	r24, 0x01	; 1
    472e:	e9 f4       	brne	.+58     	; 0x476a <_Z8set_boolPKhP8as_classMS1_FhbE+0xae>
			{
				(as->*func_tf)(true);
    4730:	e0 fe       	sbrs	r14, 0
    4732:	0e c0       	rjmp	.+28     	; 0x4750 <_Z8set_boolPKhP8as_classMS1_FhbE+0x94>
    4734:	f7 01       	movw	r30, r14
    4736:	f5 95       	asr	r31
    4738:	e7 95       	ror	r30
    473a:	ec 0f       	add	r30, r28
    473c:	fd 1f       	adc	r31, r29
    473e:	01 90       	ld	r0, Z+
    4740:	f0 81       	ld	r31, Z
    4742:	e0 2d       	mov	r30, r0
    4744:	ec 0d       	add	r30, r12
    4746:	fd 1d       	adc	r31, r13
    4748:	01 90       	ld	r0, Z+
    474a:	f0 81       	ld	r31, Z
    474c:	e0 2d       	mov	r30, r0
    474e:	01 c0       	rjmp	.+2      	; 0x4752 <_Z8set_boolPKhP8as_classMS1_FhbE+0x96>
    4750:	f6 01       	movw	r30, r12
    4752:	c7 01       	movw	r24, r14
    4754:	95 95       	asr	r25
    4756:	87 95       	ror	r24
    4758:	61 e0       	ldi	r22, 0x01	; 1
    475a:	8c 0f       	add	r24, r28
    475c:	9d 1f       	adc	r25, r29
    475e:	09 95       	icall
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	50 c0       	rjmp	.+160    	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
				(as->*func_tf)(true);
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
			}
			else
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    476a:	83 e0       	ldi	r24, 0x03	; 3
    476c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    4770:	80 e0       	ldi	r24, 0x00	; 0
    4772:	4b c0       	rjmp	.+150    	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
			}
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4774:	83 e0       	ldi	r24, 0x03	; 3
    4776:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		}
		return ER_NO_ERROR;
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	46 c0       	rjmp	.+140    	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
	}
	else//ASCII or MatLab mode.
	{
		if(rx_array[0] == 'Y' && rx_array[1] == '\r')
    477e:	f8 01       	movw	r30, r16
    4780:	80 81       	ld	r24, Z
    4782:	89 35       	cpi	r24, 0x59	; 89
    4784:	e9 f4       	brne	.+58     	; 0x47c0 <_Z8set_boolPKhP8as_classMS1_FhbE+0x104>
    4786:	81 81       	ldd	r24, Z+1	; 0x01
    4788:	8d 30       	cpi	r24, 0x0D	; 13
    478a:	d1 f5       	brne	.+116    	; 0x4800 <_Z8set_boolPKhP8as_classMS1_FhbE+0x144>
		{
			(as->*func_tf)(true);
    478c:	e0 fe       	sbrs	r14, 0
    478e:	0e c0       	rjmp	.+28     	; 0x47ac <_Z8set_boolPKhP8as_classMS1_FhbE+0xf0>
    4790:	f7 01       	movw	r30, r14
    4792:	f5 95       	asr	r31
    4794:	e7 95       	ror	r30
    4796:	ec 0f       	add	r30, r28
    4798:	fd 1f       	adc	r31, r29
    479a:	01 90       	ld	r0, Z+
    479c:	f0 81       	ld	r31, Z
    479e:	e0 2d       	mov	r30, r0
    47a0:	ec 0d       	add	r30, r12
    47a2:	fd 1d       	adc	r31, r13
    47a4:	01 90       	ld	r0, Z+
    47a6:	f0 81       	ld	r31, Z
    47a8:	e0 2d       	mov	r30, r0
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <_Z8set_boolPKhP8as_classMS1_FhbE+0xf2>
    47ac:	f6 01       	movw	r30, r12
    47ae:	c7 01       	movw	r24, r14
    47b0:	95 95       	asr	r25
    47b2:	87 95       	ror	r24
    47b4:	61 e0       	ldi	r22, 0x01	; 1
    47b6:	8c 0f       	add	r24, r28
    47b8:	9d 1f       	adc	r25, r29
    47ba:	09 95       	icall
			return ER_NO_ERROR;
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	25 c0       	rjmp	.+74     	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
		}
		
		if(rx_array[0] == 'N' && rx_array[1] == '\r')
    47c0:	8e 34       	cpi	r24, 0x4E	; 78
    47c2:	01 f5       	brne	.+64     	; 0x4804 <_Z8set_boolPKhP8as_classMS1_FhbE+0x148>
    47c4:	f8 01       	movw	r30, r16
    47c6:	81 81       	ldd	r24, Z+1	; 0x01
    47c8:	8d 30       	cpi	r24, 0x0D	; 13
    47ca:	f1 f4       	brne	.+60     	; 0x4808 <_Z8set_boolPKhP8as_classMS1_FhbE+0x14c>
		{
			(as->*func_tf)(false);
    47cc:	e0 fe       	sbrs	r14, 0
    47ce:	0e c0       	rjmp	.+28     	; 0x47ec <_Z8set_boolPKhP8as_classMS1_FhbE+0x130>
    47d0:	f7 01       	movw	r30, r14
    47d2:	f5 95       	asr	r31
    47d4:	e7 95       	ror	r30
    47d6:	ec 0f       	add	r30, r28
    47d8:	fd 1f       	adc	r31, r29
    47da:	01 90       	ld	r0, Z+
    47dc:	f0 81       	ld	r31, Z
    47de:	e0 2d       	mov	r30, r0
    47e0:	ec 0d       	add	r30, r12
    47e2:	fd 1d       	adc	r31, r13
    47e4:	01 90       	ld	r0, Z+
    47e6:	f0 81       	ld	r31, Z
    47e8:	e0 2d       	mov	r30, r0
    47ea:	01 c0       	rjmp	.+2      	; 0x47ee <_Z8set_boolPKhP8as_classMS1_FhbE+0x132>
    47ec:	f6 01       	movw	r30, r12
    47ee:	c7 01       	movw	r24, r14
    47f0:	95 95       	asr	r25
    47f2:	87 95       	ror	r24
    47f4:	60 e0       	ldi	r22, 0x00	; 0
    47f6:	8c 0f       	add	r24, r28
    47f8:	9d 1f       	adc	r25, r29
    47fa:	09 95       	icall
			return ER_NO_ERROR;
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	05 c0       	rjmp	.+10     	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
		}
		
		return ER_ERROR;
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	03 c0       	rjmp	.+6      	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	01 c0       	rjmp	.+2      	; 0x480a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
    4808:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	1f 91       	pop	r17
    4810:	0f 91       	pop	r16
    4812:	ff 90       	pop	r15
    4814:	ef 90       	pop	r14
    4816:	df 90       	pop	r13
    4818:	cf 90       	pop	r12
    481a:	08 95       	ret

0000481c <_Z6set_u8PKhP8as_classMS1_FhhE>:

//Set value in as_class object that is an unsigned 8 bit value (ASCII).
uint8_t set_u8(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u8)(uint8_t))
{
    481c:	af 92       	push	r10
    481e:	bf 92       	push	r11
    4820:	cf 92       	push	r12
    4822:	df 92       	push	r13
    4824:	ef 92       	push	r14
    4826:	ff 92       	push	r15
    4828:	0f 93       	push	r16
    482a:	1f 93       	push	r17
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	1f 92       	push	r1
    4832:	cd b7       	in	r28, 0x3d	; 61
    4834:	de b7       	in	r29, 0x3e	; 62
    4836:	5c 01       	movw	r10, r24
    4838:	8b 01       	movw	r16, r22
    483a:	69 01       	movw	r12, r18
    483c:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    483e:	cb 01       	movw	r24, r22
    4840:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    4844:	82 30       	cpi	r24, 0x02	; 2
    4846:	31 f5       	brne	.+76     	; 0x4894 <_Z6set_u8PKhP8as_classMS1_FhhE+0x78>
	{
		if(bin_index == 2)
    4848:	80 91 7b 01 	lds	r24, 0x017B
    484c:	82 30       	cpi	r24, 0x02	; 2
    484e:	e9 f4       	brne	.+58     	; 0x488a <_Z6set_u8PKhP8as_classMS1_FhhE+0x6e>
		{
			errno = (as->*func_u8)(arr.bin_rx[1]);
    4850:	e0 fe       	sbrs	r14, 0
    4852:	0e c0       	rjmp	.+28     	; 0x4870 <_Z6set_u8PKhP8as_classMS1_FhhE+0x54>
    4854:	f7 01       	movw	r30, r14
    4856:	f5 95       	asr	r31
    4858:	e7 95       	ror	r30
    485a:	e0 0f       	add	r30, r16
    485c:	f1 1f       	adc	r31, r17
    485e:	01 90       	ld	r0, Z+
    4860:	f0 81       	ld	r31, Z
    4862:	e0 2d       	mov	r30, r0
    4864:	ec 0d       	add	r30, r12
    4866:	fd 1d       	adc	r31, r13
    4868:	01 90       	ld	r0, Z+
    486a:	f0 81       	ld	r31, Z
    486c:	e0 2d       	mov	r30, r0
    486e:	01 c0       	rjmp	.+2      	; 0x4872 <_Z6set_u8PKhP8as_classMS1_FhhE+0x56>
    4870:	f6 01       	movw	r30, r12
    4872:	c7 01       	movw	r24, r14
    4874:	95 95       	asr	r25
    4876:	87 95       	ror	r24
    4878:	60 91 7d 01 	lds	r22, 0x017D
    487c:	80 0f       	add	r24, r16
    487e:	91 1f       	adc	r25, r17
    4880:	09 95       	icall
    4882:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    4884:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4888:	03 c0       	rjmp	.+6      	; 0x4890 <_Z6set_u8PKhP8as_classMS1_FhhE+0x74>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    488a:	83 e0       	ldi	r24, 0x03	; 3
    488c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    4890:	99 81       	ldd	r25, Y+1	; 0x01
    4892:	27 c0       	rjmp	.+78     	; 0x48e2 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
	}
	else//ASCII or MatLab mode;
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    4894:	4d e0       	ldi	r20, 0x0D	; 13
    4896:	be 01       	movw	r22, r28
    4898:	6f 5f       	subi	r22, 0xFF	; 255
    489a:	7f 4f       	sbci	r23, 0xFF	; 255
    489c:	c5 01       	movw	r24, r10
    489e:	0e 94 3a 1c 	call	0x3874	; 0x3874 <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	81 11       	cpse	r24, r1
    48a6:	1c c0       	rjmp	.+56     	; 0x48e0 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc4>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_u8)(number);
    48a8:	e0 fe       	sbrs	r14, 0
    48aa:	0e c0       	rjmp	.+28     	; 0x48c8 <_Z6set_u8PKhP8as_classMS1_FhhE+0xac>
    48ac:	f7 01       	movw	r30, r14
    48ae:	f5 95       	asr	r31
    48b0:	e7 95       	ror	r30
    48b2:	e0 0f       	add	r30, r16
    48b4:	f1 1f       	adc	r31, r17
    48b6:	01 90       	ld	r0, Z+
    48b8:	f0 81       	ld	r31, Z
    48ba:	e0 2d       	mov	r30, r0
    48bc:	ec 0d       	add	r30, r12
    48be:	fd 1d       	adc	r31, r13
    48c0:	01 90       	ld	r0, Z+
    48c2:	f0 81       	ld	r31, Z
    48c4:	e0 2d       	mov	r30, r0
    48c6:	01 c0       	rjmp	.+2      	; 0x48ca <_Z6set_u8PKhP8as_classMS1_FhhE+0xae>
    48c8:	f6 01       	movw	r30, r12
    48ca:	c7 01       	movw	r24, r14
    48cc:	95 95       	asr	r25
    48ce:	87 95       	ror	r24
    48d0:	80 0f       	add	r24, r16
    48d2:	91 1f       	adc	r25, r17
    48d4:	09 95       	icall
		
		if(errno)
    48d6:	91 e0       	ldi	r25, 0x01	; 1
    48d8:	81 11       	cpse	r24, r1
    48da:	03 c0       	rjmp	.+6      	; 0x48e2 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	01 c0       	rjmp	.+2      	; 0x48e2 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
		{
			return ER_ERROR;
    48e0:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    48e2:	89 2f       	mov	r24, r25
    48e4:	0f 90       	pop	r0
    48e6:	df 91       	pop	r29
    48e8:	cf 91       	pop	r28
    48ea:	1f 91       	pop	r17
    48ec:	0f 91       	pop	r16
    48ee:	ff 90       	pop	r15
    48f0:	ef 90       	pop	r14
    48f2:	df 90       	pop	r13
    48f4:	cf 90       	pop	r12
    48f6:	bf 90       	pop	r11
    48f8:	af 90       	pop	r10
    48fa:	08 95       	ret

000048fc <_Z9set_int16PKhP8as_classMS1_FhiE>:

//Set value in as_class object that is a signed 16 bit value (ASCII).
uint8_t set_int16(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_int16)(int16_t))
{
    48fc:	af 92       	push	r10
    48fe:	bf 92       	push	r11
    4900:	cf 92       	push	r12
    4902:	df 92       	push	r13
    4904:	ef 92       	push	r14
    4906:	ff 92       	push	r15
    4908:	0f 93       	push	r16
    490a:	1f 93       	push	r17
    490c:	cf 93       	push	r28
    490e:	df 93       	push	r29
    4910:	1f 92       	push	r1
    4912:	cd b7       	in	r28, 0x3d	; 61
    4914:	de b7       	in	r29, 0x3e	; 62
    4916:	5c 01       	movw	r10, r24
    4918:	8b 01       	movw	r16, r22
    491a:	69 01       	movw	r12, r18
    491c:	7a 01       	movw	r14, r20
	uint8_t errno;
	int16_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    491e:	cb 01       	movw	r24, r22
    4920:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    4924:	82 30       	cpi	r24, 0x02	; 2
    4926:	81 f5       	brne	.+96     	; 0x4988 <_Z9set_int16PKhP8as_classMS1_FhiE+0x8c>
	{
		if(bin_index == 3)
    4928:	80 91 7b 01 	lds	r24, 0x017B
    492c:	83 30       	cpi	r24, 0x03	; 3
    492e:	39 f5       	brne	.+78     	; 0x497e <_Z9set_int16PKhP8as_classMS1_FhiE+0x82>
		{
			errno = (as->*func_int16)(load_u16(&(arr.bin_rx[1])));
    4930:	e0 fe       	sbrs	r14, 0
    4932:	0e c0       	rjmp	.+28     	; 0x4950 <_Z9set_int16PKhP8as_classMS1_FhiE+0x54>
    4934:	f7 01       	movw	r30, r14
    4936:	f5 95       	asr	r31
    4938:	e7 95       	ror	r30
    493a:	e0 0f       	add	r30, r16
    493c:	f1 1f       	adc	r31, r17
    493e:	01 90       	ld	r0, Z+
    4940:	f0 81       	ld	r31, Z
    4942:	e0 2d       	mov	r30, r0
    4944:	ec 0d       	add	r30, r12
    4946:	fd 1d       	adc	r31, r13
    4948:	01 90       	ld	r0, Z+
    494a:	f0 81       	ld	r31, Z
    494c:	e0 2d       	mov	r30, r0
    494e:	01 c0       	rjmp	.+2      	; 0x4952 <_Z9set_int16PKhP8as_classMS1_FhiE+0x56>
    4950:	f6 01       	movw	r30, r12
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    4952:	ac e7       	ldi	r26, 0x7C	; 124
    4954:	b1 e0       	ldi	r27, 0x01	; 1
    4956:	11 96       	adiw	r26, 0x01	; 1
    4958:	6c 91       	ld	r22, X
    495a:	11 97       	sbiw	r26, 0x01	; 1
    495c:	70 e0       	ldi	r23, 0x00	; 0
	temp16 <<= 8;
    495e:	76 2f       	mov	r23, r22
    4960:	66 27       	eor	r22, r22
	temp16 += array[1];
    4962:	12 96       	adiw	r26, 0x02	; 2
    4964:	8c 91       	ld	r24, X
    4966:	68 0f       	add	r22, r24
    4968:	71 1d       	adc	r23, r1
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
	{
		if(bin_index == 3)
		{
			errno = (as->*func_int16)(load_u16(&(arr.bin_rx[1])));
    496a:	c7 01       	movw	r24, r14
    496c:	95 95       	asr	r25
    496e:	87 95       	ror	r24
    4970:	80 0f       	add	r24, r16
    4972:	91 1f       	adc	r25, r17
    4974:	09 95       	icall
    4976:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    4978:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    497c:	03 c0       	rjmp	.+6      	; 0x4984 <_Z9set_int16PKhP8as_classMS1_FhiE+0x88>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    497e:	83 e0       	ldi	r24, 0x03	; 3
    4980:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    4984:	99 81       	ldd	r25, Y+1	; 0x01
    4986:	28 c0       	rjmp	.+80     	; 0x49d8 <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_int(rx_array, &errno);
    4988:	4d e0       	ldi	r20, 0x0D	; 13
    498a:	be 01       	movw	r22, r28
    498c:	6f 5f       	subi	r22, 0xFF	; 255
    498e:	7f 4f       	sbci	r23, 0xFF	; 255
    4990:	c5 01       	movw	r24, r10
    4992:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_Z13string_to_intPKhPhh>
		
		if(errno)	//Exit if invalid integer detected.
    4996:	29 81       	ldd	r18, Y+1	; 0x01
    4998:	21 11       	cpse	r18, r1
    499a:	1d c0       	rjmp	.+58     	; 0x49d6 <_Z9set_int16PKhP8as_classMS1_FhiE+0xda>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_int16)(number);
    499c:	e0 fe       	sbrs	r14, 0
    499e:	0e c0       	rjmp	.+28     	; 0x49bc <_Z9set_int16PKhP8as_classMS1_FhiE+0xc0>
    49a0:	f7 01       	movw	r30, r14
    49a2:	f5 95       	asr	r31
    49a4:	e7 95       	ror	r30
    49a6:	e0 0f       	add	r30, r16
    49a8:	f1 1f       	adc	r31, r17
    49aa:	01 90       	ld	r0, Z+
    49ac:	f0 81       	ld	r31, Z
    49ae:	e0 2d       	mov	r30, r0
    49b0:	ec 0d       	add	r30, r12
    49b2:	fd 1d       	adc	r31, r13
    49b4:	01 90       	ld	r0, Z+
    49b6:	f0 81       	ld	r31, Z
    49b8:	e0 2d       	mov	r30, r0
    49ba:	01 c0       	rjmp	.+2      	; 0x49be <_Z9set_int16PKhP8as_classMS1_FhiE+0xc2>
    49bc:	f6 01       	movw	r30, r12
    49be:	97 01       	movw	r18, r14
    49c0:	35 95       	asr	r19
    49c2:	27 95       	ror	r18
    49c4:	c8 01       	movw	r24, r16
    49c6:	82 0f       	add	r24, r18
    49c8:	93 1f       	adc	r25, r19
    49ca:	09 95       	icall
		
		if(errno)
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	81 11       	cpse	r24, r1
    49d0:	03 c0       	rjmp	.+6      	; 0x49d8 <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	01 c0       	rjmp	.+2      	; 0x49d8 <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
		//Attempt to convert user input to number.
		number = string_to_int(rx_array, &errno);
		
		if(errno)	//Exit if invalid integer detected.
		{
			return ER_ERROR;
    49d6:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    49d8:	89 2f       	mov	r24, r25
    49da:	0f 90       	pop	r0
    49dc:	df 91       	pop	r29
    49de:	cf 91       	pop	r28
    49e0:	1f 91       	pop	r17
    49e2:	0f 91       	pop	r16
    49e4:	ff 90       	pop	r15
    49e6:	ef 90       	pop	r14
    49e8:	df 90       	pop	r13
    49ea:	cf 90       	pop	r12
    49ec:	bf 90       	pop	r11
    49ee:	af 90       	pop	r10
    49f0:	08 95       	ret

000049f2 <_Z7set_u16PKhP8as_classMS1_FhjE>:

//Set value in as_class object that is an unsigned 16 bit value (ASCII).
uint8_t set_u16(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u16)(uint16_t))
{
    49f2:	af 92       	push	r10
    49f4:	bf 92       	push	r11
    49f6:	cf 92       	push	r12
    49f8:	df 92       	push	r13
    49fa:	ef 92       	push	r14
    49fc:	ff 92       	push	r15
    49fe:	0f 93       	push	r16
    4a00:	1f 93       	push	r17
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	1f 92       	push	r1
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
    4a0c:	5c 01       	movw	r10, r24
    4a0e:	8b 01       	movw	r16, r22
    4a10:	69 01       	movw	r12, r18
    4a12:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    4a14:	cb 01       	movw	r24, r22
    4a16:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    4a1a:	82 30       	cpi	r24, 0x02	; 2
    4a1c:	81 f5       	brne	.+96     	; 0x4a7e <_Z7set_u16PKhP8as_classMS1_FhjE+0x8c>
	{
		if(bin_index == 3)
    4a1e:	80 91 7b 01 	lds	r24, 0x017B
    4a22:	83 30       	cpi	r24, 0x03	; 3
    4a24:	39 f5       	brne	.+78     	; 0x4a74 <_Z7set_u16PKhP8as_classMS1_FhjE+0x82>
		{
			errno = (as->*func_u16)(load_u16(&(arr.bin_rx[1])));
    4a26:	e0 fe       	sbrs	r14, 0
    4a28:	0e c0       	rjmp	.+28     	; 0x4a46 <_Z7set_u16PKhP8as_classMS1_FhjE+0x54>
    4a2a:	f7 01       	movw	r30, r14
    4a2c:	f5 95       	asr	r31
    4a2e:	e7 95       	ror	r30
    4a30:	e0 0f       	add	r30, r16
    4a32:	f1 1f       	adc	r31, r17
    4a34:	01 90       	ld	r0, Z+
    4a36:	f0 81       	ld	r31, Z
    4a38:	e0 2d       	mov	r30, r0
    4a3a:	ec 0d       	add	r30, r12
    4a3c:	fd 1d       	adc	r31, r13
    4a3e:	01 90       	ld	r0, Z+
    4a40:	f0 81       	ld	r31, Z
    4a42:	e0 2d       	mov	r30, r0
    4a44:	01 c0       	rjmp	.+2      	; 0x4a48 <_Z7set_u16PKhP8as_classMS1_FhjE+0x56>
    4a46:	f6 01       	movw	r30, r12
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    4a48:	ac e7       	ldi	r26, 0x7C	; 124
    4a4a:	b1 e0       	ldi	r27, 0x01	; 1
    4a4c:	11 96       	adiw	r26, 0x01	; 1
    4a4e:	6c 91       	ld	r22, X
    4a50:	11 97       	sbiw	r26, 0x01	; 1
    4a52:	70 e0       	ldi	r23, 0x00	; 0
	temp16 <<= 8;
    4a54:	76 2f       	mov	r23, r22
    4a56:	66 27       	eor	r22, r22
	temp16 += array[1];
    4a58:	12 96       	adiw	r26, 0x02	; 2
    4a5a:	8c 91       	ld	r24, X
    4a5c:	68 0f       	add	r22, r24
    4a5e:	71 1d       	adc	r23, r1
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
	{
		if(bin_index == 3)
		{
			errno = (as->*func_u16)(load_u16(&(arr.bin_rx[1])));
    4a60:	c7 01       	movw	r24, r14
    4a62:	95 95       	asr	r25
    4a64:	87 95       	ror	r24
    4a66:	80 0f       	add	r24, r16
    4a68:	91 1f       	adc	r25, r17
    4a6a:	09 95       	icall
    4a6c:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    4a6e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4a72:	03 c0       	rjmp	.+6      	; 0x4a7a <_Z7set_u16PKhP8as_classMS1_FhjE+0x88>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4a74:	83 e0       	ldi	r24, 0x03	; 3
    4a76:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    4a7a:	99 81       	ldd	r25, Y+1	; 0x01
    4a7c:	28 c0       	rjmp	.+80     	; 0x4ace <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    4a7e:	4d e0       	ldi	r20, 0x0D	; 13
    4a80:	be 01       	movw	r22, r28
    4a82:	6f 5f       	subi	r22, 0xFF	; 255
    4a84:	7f 4f       	sbci	r23, 0xFF	; 255
    4a86:	c5 01       	movw	r24, r10
    4a88:	0e 94 3a 1c 	call	0x3874	; 0x3874 <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    4a8c:	29 81       	ldd	r18, Y+1	; 0x01
    4a8e:	21 11       	cpse	r18, r1
    4a90:	1d c0       	rjmp	.+58     	; 0x4acc <_Z7set_u16PKhP8as_classMS1_FhjE+0xda>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_u16)(number);
    4a92:	e0 fe       	sbrs	r14, 0
    4a94:	0e c0       	rjmp	.+28     	; 0x4ab2 <_Z7set_u16PKhP8as_classMS1_FhjE+0xc0>
    4a96:	f7 01       	movw	r30, r14
    4a98:	f5 95       	asr	r31
    4a9a:	e7 95       	ror	r30
    4a9c:	e0 0f       	add	r30, r16
    4a9e:	f1 1f       	adc	r31, r17
    4aa0:	01 90       	ld	r0, Z+
    4aa2:	f0 81       	ld	r31, Z
    4aa4:	e0 2d       	mov	r30, r0
    4aa6:	ec 0d       	add	r30, r12
    4aa8:	fd 1d       	adc	r31, r13
    4aaa:	01 90       	ld	r0, Z+
    4aac:	f0 81       	ld	r31, Z
    4aae:	e0 2d       	mov	r30, r0
    4ab0:	01 c0       	rjmp	.+2      	; 0x4ab4 <_Z7set_u16PKhP8as_classMS1_FhjE+0xc2>
    4ab2:	f6 01       	movw	r30, r12
    4ab4:	97 01       	movw	r18, r14
    4ab6:	35 95       	asr	r19
    4ab8:	27 95       	ror	r18
    4aba:	c8 01       	movw	r24, r16
    4abc:	82 0f       	add	r24, r18
    4abe:	93 1f       	adc	r25, r19
    4ac0:	09 95       	icall
		
		if(errno)
    4ac2:	91 e0       	ldi	r25, 0x01	; 1
    4ac4:	81 11       	cpse	r24, r1
    4ac6:	03 c0       	rjmp	.+6      	; 0x4ace <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	01 c0       	rjmp	.+2      	; 0x4ace <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
		{
			return ER_ERROR;
    4acc:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    4ace:	89 2f       	mov	r24, r25
    4ad0:	0f 90       	pop	r0
    4ad2:	df 91       	pop	r29
    4ad4:	cf 91       	pop	r28
    4ad6:	1f 91       	pop	r17
    4ad8:	0f 91       	pop	r16
    4ada:	ff 90       	pop	r15
    4adc:	ef 90       	pop	r14
    4ade:	df 90       	pop	r13
    4ae0:	cf 90       	pop	r12
    4ae2:	bf 90       	pop	r11
    4ae4:	af 90       	pop	r10
    4ae6:	08 95       	ret

00004ae8 <_Z7set_u32PKhP8as_classMS1_FhmE>:

//Set value in as_class object that is an unsigned 32 bit value (ASCII).
uint8_t set_u32(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u32)(uint32_t))
{
    4ae8:	af 92       	push	r10
    4aea:	bf 92       	push	r11
    4aec:	cf 92       	push	r12
    4aee:	df 92       	push	r13
    4af0:	ef 92       	push	r14
    4af2:	ff 92       	push	r15
    4af4:	0f 93       	push	r16
    4af6:	1f 93       	push	r17
    4af8:	cf 93       	push	r28
    4afa:	df 93       	push	r29
    4afc:	1f 92       	push	r1
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	5c 01       	movw	r10, r24
    4b04:	8b 01       	movw	r16, r22
    4b06:	69 01       	movw	r12, r18
    4b08:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    4b10:	82 30       	cpi	r24, 0x02	; 2
    4b12:	51 f5       	brne	.+84     	; 0x4b68 <_Z7set_u32PKhP8as_classMS1_FhmE+0x80>
	{
		if(bin_index == 5)
    4b14:	80 91 7b 01 	lds	r24, 0x017B
    4b18:	85 30       	cpi	r24, 0x05	; 5
    4b1a:	09 f5       	brne	.+66     	; 0x4b5e <_Z7set_u32PKhP8as_classMS1_FhmE+0x76>
		{
			errno = (as->*func_u32)(load_u32(&(arr.bin_rx[1])));
    4b1c:	e0 fe       	sbrs	r14, 0
    4b1e:	0d c0       	rjmp	.+26     	; 0x4b3a <_Z7set_u32PKhP8as_classMS1_FhmE+0x52>
    4b20:	f7 01       	movw	r30, r14
    4b22:	f5 95       	asr	r31
    4b24:	e7 95       	ror	r30
    4b26:	e0 0f       	add	r30, r16
    4b28:	f1 1f       	adc	r31, r17
    4b2a:	01 90       	ld	r0, Z+
    4b2c:	f0 81       	ld	r31, Z
    4b2e:	e0 2d       	mov	r30, r0
    4b30:	ec 0d       	add	r30, r12
    4b32:	fd 1d       	adc	r31, r13
    4b34:	a0 80       	ld	r10, Z
    4b36:	b1 80       	ldd	r11, Z+1	; 0x01
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <_Z7set_u32PKhP8as_classMS1_FhmE+0x54>
    4b3a:	56 01       	movw	r10, r12
    4b3c:	8d e7       	ldi	r24, 0x7D	; 125
    4b3e:	91 e0       	ldi	r25, 0x01	; 1
    4b40:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_Z8load_u32PKh>
    4b44:	ab 01       	movw	r20, r22
    4b46:	bc 01       	movw	r22, r24
    4b48:	c7 01       	movw	r24, r14
    4b4a:	95 95       	asr	r25
    4b4c:	87 95       	ror	r24
    4b4e:	80 0f       	add	r24, r16
    4b50:	91 1f       	adc	r25, r17
    4b52:	f5 01       	movw	r30, r10
    4b54:	09 95       	icall
    4b56:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    4b58:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4b5c:	03 c0       	rjmp	.+6      	; 0x4b64 <_Z7set_u32PKhP8as_classMS1_FhmE+0x7c>
		}
		else//Transmit error.
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    4b5e:	83 e0       	ldi	r24, 0x03	; 3
    4b60:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		return errno;
    4b64:	99 81       	ldd	r25, Y+1	; 0x01
    4b66:	2a c0       	rjmp	.+84     	; 0x4bbc <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    4b68:	4d e0       	ldi	r20, 0x0D	; 13
    4b6a:	be 01       	movw	r22, r28
    4b6c:	6f 5f       	subi	r22, 0xFF	; 255
    4b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b70:	c5 01       	movw	r24, r10
    4b72:	0e 94 3a 1c 	call	0x3874	; 0x3874 <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    4b76:	29 81       	ldd	r18, Y+1	; 0x01
    4b78:	21 11       	cpse	r18, r1
    4b7a:	1f c0       	rjmp	.+62     	; 0x4bba <_Z7set_u32PKhP8as_classMS1_FhmE+0xd2>
			return ER_ERROR;
		
		//Update parameter.
		errno = (as->*func_u32)(number);
    4b7c:	e0 fe       	sbrs	r14, 0
    4b7e:	0e c0       	rjmp	.+28     	; 0x4b9c <_Z7set_u32PKhP8as_classMS1_FhmE+0xb4>
    4b80:	f7 01       	movw	r30, r14
    4b82:	f5 95       	asr	r31
    4b84:	e7 95       	ror	r30
    4b86:	e0 0f       	add	r30, r16
    4b88:	f1 1f       	adc	r31, r17
    4b8a:	01 90       	ld	r0, Z+
    4b8c:	f0 81       	ld	r31, Z
    4b8e:	e0 2d       	mov	r30, r0
    4b90:	ec 0d       	add	r30, r12
    4b92:	fd 1d       	adc	r31, r13
    4b94:	01 90       	ld	r0, Z+
    4b96:	f0 81       	ld	r31, Z
    4b98:	e0 2d       	mov	r30, r0
    4b9a:	01 c0       	rjmp	.+2      	; 0x4b9e <_Z7set_u32PKhP8as_classMS1_FhmE+0xb6>
    4b9c:	f6 01       	movw	r30, r12
    4b9e:	97 01       	movw	r18, r14
    4ba0:	35 95       	asr	r19
    4ba2:	27 95       	ror	r18
    4ba4:	ab 01       	movw	r20, r22
    4ba6:	bc 01       	movw	r22, r24
    4ba8:	c8 01       	movw	r24, r16
    4baa:	82 0f       	add	r24, r18
    4bac:	93 1f       	adc	r25, r19
    4bae:	09 95       	icall
		
		if(errno)
    4bb0:	91 e0       	ldi	r25, 0x01	; 1
    4bb2:	81 11       	cpse	r24, r1
    4bb4:	03 c0       	rjmp	.+6      	; 0x4bbc <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	01 c0       	rjmp	.+2      	; 0x4bbc <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
			return ER_ERROR;
    4bba:	91 e0       	ldi	r25, 0x01	; 1
		if(errno)
			return ER_ERROR;
		
		return ER_NO_ERROR;
	}
}
    4bbc:	89 2f       	mov	r24, r25
    4bbe:	0f 90       	pop	r0
    4bc0:	df 91       	pop	r29
    4bc2:	cf 91       	pop	r28
    4bc4:	1f 91       	pop	r17
    4bc6:	0f 91       	pop	r16
    4bc8:	ff 90       	pop	r15
    4bca:	ef 90       	pop	r14
    4bcc:	df 90       	pop	r13
    4bce:	cf 90       	pop	r12
    4bd0:	bf 90       	pop	r11
    4bd2:	af 90       	pop	r10
    4bd4:	08 95       	ret

00004bd6 <_Z14uart_tokenizerhP8as_class>:
}

/**************************************************Update Menu Items Rountines***********************************************/
//Tokenize the user input.
void uart_tokenizer(uint8_t rx_byte, as_class *as)
{
    4bd6:	8f 92       	push	r8
    4bd8:	9f 92       	push	r9
    4bda:	bf 92       	push	r11
    4bdc:	cf 92       	push	r12
    4bde:	df 92       	push	r13
    4be0:	ef 92       	push	r14
    4be2:	ff 92       	push	r15
    4be4:	0f 93       	push	r16
    4be6:	1f 93       	push	r17
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
    4bec:	1f 92       	push	r1
    4bee:	cd b7       	in	r28, 0x3d	; 61
    4bf0:	de b7       	in	r29, 0x3e	; 62
    4bf2:	f8 2e       	mov	r15, r24
    4bf4:	8b 01       	movw	r16, r22
	uint8_t errno = ER_ERROR;
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	89 83       	std	Y+1, r24	; 0x01
	
	//Look for single byte commands. when input array is empty.
	if(!array_index && (rx_byte == 't' || rx_byte == 'T'))
    4bfa:	80 91 7a 01 	lds	r24, 0x017A
    4bfe:	81 11       	cpse	r24, r1
    4c00:	32 c0       	rjmp	.+100    	; 0x4c66 <_Z14uart_tokenizerhP8as_class+0x90>
    4c02:	8f 2d       	mov	r24, r15
    4c04:	8f 7d       	andi	r24, 0xDF	; 223
    4c06:	84 35       	cpi	r24, 0x54	; 84
    4c08:	69 f4       	brne	.+26     	; 0x4c24 <_Z14uart_tokenizerhP8as_class+0x4e>
	{
		//Send transmission type byte.
		if(as->get_tx_mode() == TX_MODE_ASCII)
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    4c10:	81 11       	cpse	r24, r1
    4c12:	04 c0       	rjmp	.+8      	; 0x4c1c <_Z14uart_tokenizerhP8as_class+0x46>
			atmega_uart::tx_byte('A');
    4c14:	81 e4       	ldi	r24, 0x41	; 65
    4c16:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4c1a:	7f c7       	rjmp	.+3838   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
		else
			atmega_uart::tx_byte('M');
    4c1c:	8d e4       	ldi	r24, 0x4D	; 77
    4c1e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4c22:	7b c7       	rjmp	.+3830   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
		return;
	}
	
	//Start linear sweep test.
	else if(!array_index && (rx_byte == 'l' || rx_byte == 'L'))
    4c24:	8c 34       	cpi	r24, 0x4C	; 76
    4c26:	49 f4       	brne	.+18     	; 0x4c3a <_Z14uart_tokenizerhP8as_class+0x64>
	{
		as->set_test_type(TEST_LIN);
    4c28:	60 e0       	ldi	r22, 0x00	; 0
    4c2a:	c8 01       	movw	r24, r16
    4c2c:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    4c30:	61 e0       	ldi	r22, 0x01	; 1
    4c32:	c8 01       	movw	r24, r16
    4c34:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		return;
    4c38:	70 c7       	rjmp	.+3808   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Start square wave test.
	else if(!array_index && (rx_byte == 's' || rx_byte == 'S'))
    4c3a:	83 35       	cpi	r24, 0x53	; 83
    4c3c:	49 f4       	brne	.+18     	; 0x4c50 <_Z14uart_tokenizerhP8as_class+0x7a>
	{
		as->set_test_type(TEST_SQR);
    4c3e:	61 e0       	ldi	r22, 0x01	; 1
    4c40:	c8 01       	movw	r24, r16
    4c42:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    4c46:	61 e0       	ldi	r22, 0x01	; 1
    4c48:	c8 01       	movw	r24, r16
    4c4a:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		return;
    4c4e:	65 c7       	rjmp	.+3786   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Start arbitrary waveform test.
	else if(!array_index && (rx_byte == 'a' || rx_byte == 'A'))
    4c50:	81 34       	cpi	r24, 0x41	; 65
    4c52:	49 f4       	brne	.+18     	; 0x4c66 <_Z14uart_tokenizerhP8as_class+0x90>
	{
		as->set_test_type(TEST_ARB);
    4c54:	62 e0       	ldi	r22, 0x02	; 2
    4c56:	c8 01       	movw	r24, r16
    4c58:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    4c5c:	61 e0       	ldi	r22, 0x01	; 1
    4c5e:	c8 01       	movw	r24, r16
    4c60:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
		return;
    4c64:	5a c7       	rjmp	.+3764   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Keep building input string.
	atmega_uart::tx_byte(rx_byte);//Echo byte.
    4c66:	8f 2d       	mov	r24, r15
    4c68:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
	
	//Save byte from UART.
	arr.rx_array[array_index++] = rx_byte;
    4c6c:	e0 91 7a 01 	lds	r30, 0x017A
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	8e 0f       	add	r24, r30
    4c74:	80 93 7a 01 	sts	0x017A, r24
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	e4 58       	subi	r30, 0x84	; 132
    4c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c7e:	f0 82       	st	Z, r15
	
	//Check if array is going to overflow.
	if((array_index >= RX_ARRAY_LENGTH) && (arr.rx_array[RX_ARRAY_LENGTH - 1] != '\r'))
    4c80:	89 31       	cpi	r24, 0x19	; 25
    4c82:	48 f0       	brcs	.+18     	; 0x4c96 <_Z14uart_tokenizerhP8as_class+0xc0>
    4c84:	90 91 94 01 	lds	r25, 0x0194
    4c88:	9d 30       	cpi	r25, 0x0D	; 13
    4c8a:	29 f0       	breq	.+10     	; 0x4c96 <_Z14uart_tokenizerhP8as_class+0xc0>
	{
		array_index = 0;
    4c8c:	10 92 7a 01 	sts	0x017A, r1
		uart_err();
    4c90:	0e 94 db 21 	call	0x43b6	; 0x43b6 <_Z8uart_errv>
		return;
    4c94:	42 c7       	rjmp	.+3716   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Special case. empty array prints the menu.
	if(arr.rx_array[0] == '\r')
    4c96:	90 91 7c 01 	lds	r25, 0x017C
    4c9a:	9d 30       	cpi	r25, 0x0D	; 13
    4c9c:	09 f0       	breq	.+2      	; 0x4ca0 <_Z14uart_tokenizerhP8as_class+0xca>
    4c9e:	91 c0       	rjmp	.+290    	; 0x4dc2 <_Z14uart_tokenizerhP8as_class+0x1ec>
	{
		array_index = 0;
    4ca0:	10 92 7a 01 	sts	0x017A, r1
		
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---MAIN MENU---\r"));
    4ca4:	87 ec       	ldi	r24, 0xC7	; 199
    4ca6:	9b e0       	ldi	r25, 0x0B	; 11
    4ca8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Transmission mode.
		atmega_uart::tx_string_p(PSTR("1.  Transmission Mode (A)SCII, (M)atLab, (B)inary: "));
    4cac:	83 e9       	ldi	r24, 0x93	; 147
    4cae:	9b e0       	ldi	r25, 0x0B	; 11
    4cb0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		if(as->get_tx_mode() == TX_MODE_ASCII)
    4cb4:	c8 01       	movw	r24, r16
    4cb6:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    4cba:	81 11       	cpse	r24, r1
    4cbc:	04 c0       	rjmp	.+8      	; 0x4cc6 <_Z14uart_tokenizerhP8as_class+0xf0>
			atmega_uart::tx_byte('A');
    4cbe:	81 e4       	ldi	r24, 0x41	; 65
    4cc0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4cc4:	0c c0       	rjmp	.+24     	; 0x4cde <_Z14uart_tokenizerhP8as_class+0x108>
		else if(as->get_tx_mode() == TX_MODE_MATLAB)
    4cc6:	c8 01       	movw	r24, r16
    4cc8:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN8as_class11get_tx_modeEv>
    4ccc:	81 30       	cpi	r24, 0x01	; 1
    4cce:	21 f4       	brne	.+8      	; 0x4cd8 <_Z14uart_tokenizerhP8as_class+0x102>
			atmega_uart::tx_byte('M');
    4cd0:	8d e4       	ldi	r24, 0x4D	; 77
    4cd2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4cd6:	03 c0       	rjmp	.+6      	; 0x4cde <_Z14uart_tokenizerhP8as_class+0x108>
		else
			atmega_uart::tx_byte('B');
    4cd8:	82 e4       	ldi	r24, 0x42	; 66
    4cda:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_byte('\r');
    4cde:	8d e0       	ldi	r24, 0x0D	; 13
    4ce0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Number of electrodes.
		atmega_uart::tx_string_p(PSTR("2.  Number of Electrodes (2 or 3): "));
    4ce4:	8f e6       	ldi	r24, 0x6F	; 111
    4ce6:	9b e0       	ldi	r25, 0x0B	; 11
    4ce8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		(as->get_num_electrodes() == ELEC_2) ? atmega_uart::tx_byte('2') : atmega_uart::tx_byte('3');
    4cec:	c8 01       	movw	r24, r16
    4cee:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN8as_class18get_num_electrodesEv>
    4cf2:	81 11       	cpse	r24, r1
    4cf4:	04 c0       	rjmp	.+8      	; 0x4cfe <_Z14uart_tokenizerhP8as_class+0x128>
    4cf6:	82 e3       	ldi	r24, 0x32	; 50
    4cf8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4cfc:	03 c0       	rjmp	.+6      	; 0x4d04 <_Z14uart_tokenizerhP8as_class+0x12e>
    4cfe:	83 e3       	ldi	r24, 0x33	; 51
    4d00:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_byte('\r');
    4d04:	8d e0       	ldi	r24, 0x0D	; 13
    4d06:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//ADC sample interval.
		atmega_uart::tx_string_p(PSTR("3.  ADC Sample Interval ms"));
    4d0a:	84 e5       	ldi	r24, 0x54	; 84
    4d0c:	9b e0       	ldi	r25, 0x0B	; 11
    4d0e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(ADC_RATE_MIN, ADC_RATE_MAX);
    4d12:	28 ee       	ldi	r18, 0xE8	; 232
    4d14:	33 e0       	ldi	r19, 0x03	; 3
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	50 e0       	ldi	r21, 0x00	; 0
    4d1a:	61 e0       	ldi	r22, 0x01	; 1
    4d1c:	70 e0       	ldi	r23, 0x00	; 0
    4d1e:	80 e0       	ldi	r24, 0x00	; 0
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_adc_rate());
    4d26:	c8 01       	movw	r24, r16
    4d28:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN8as_class12get_adc_rateEv>
    4d2c:	bc 01       	movw	r22, r24
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    4d36:	8d e0       	ldi	r24, 0x0D	; 13
    4d38:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Menus.
		atmega_uart::tx_string_p(PSTR("4.  Transimpedance Amplifier Menu\r"));
    4d3c:	81 e3       	ldi	r24, 0x31	; 49
    4d3e:	9b e0       	ldi	r25, 0x0B	; 11
    4d40:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("5.  Deposition Menu\r"));
    4d44:	8c e1       	ldi	r24, 0x1C	; 28
    4d46:	9b e0       	ldi	r25, 0x0B	; 11
    4d48:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("6.  Linear Sweep Menu\r"));
    4d4c:	85 e0       	ldi	r24, 0x05	; 5
    4d4e:	9b e0       	ldi	r25, 0x0B	; 11
    4d50:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("7.  Square Wave Menu\r"));
    4d54:	8f ee       	ldi	r24, 0xEF	; 239
    4d56:	9a e0       	ldi	r25, 0x0A	; 10
    4d58:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("8.  Arbitrary Waveform Menu\r"));
    4d5c:	82 ed       	ldi	r24, 0xD2	; 210
    4d5e:	9a e0       	ldi	r25, 0x0A	; 10
    4d60:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("9.  Low-pass Filter Menu\r"));
    4d64:	88 eb       	ldi	r24, 0xB8	; 184
    4d66:	9a e0       	ldi	r25, 0x0A	; 10
    4d68:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Get settings.
		atmega_uart::tx_string_p(PSTR("10. Get settings\r\r"));
    4d6c:	85 ea       	ldi	r24, 0xA5	; 165
    4d6e:	9a e0       	ldi	r25, 0x0A	; 10
    4d70:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Unique identifier info.
		atmega_uart::tx_string_p(PSTR("Firmware Revision: "));
    4d74:	81 e9       	ldi	r24, 0x91	; 145
    4d76:	9a e0       	ldi	r25, 0x0A	; 10
    4d78:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string(FIRMWARE);
    4d7c:	84 e1       	ldi	r24, 0x14	; 20
    4d7e:	91 e0       	ldi	r25, 0x01	; 1
    4d80:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN11atmega_uart9tx_stringEPKc>
		atmega_uart::tx_byte('\r');
    4d84:	8d e0       	ldi	r24, 0x0D	; 13
    4d86:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_string_p(PSTR("Product ID: "));
    4d8a:	84 e8       	ldi	r24, 0x84	; 132
    4d8c:	9a e0       	ldi	r25, 0x0A	; 10
    4d8e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string(PRODUCT_ID);
    4d92:	8a e1       	ldi	r24, 0x1A	; 26
    4d94:	91 e0       	ldi	r25, 0x01	; 1
    4d96:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN11atmega_uart9tx_stringEPKc>
		atmega_uart::tx_byte('\r');
    4d9a:	8d e0       	ldi	r24, 0x0D	; 13
    4d9c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Start and stop tests.
		atmega_uart::tx_string_p(PSTR("\rL Start Linear Sweep Test\r"));
    4da0:	88 e6       	ldi	r24, 0x68	; 104
    4da2:	9a e0       	ldi	r25, 0x0A	; 10
    4da4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("S Start Square Wave Test\r"));
    4da8:	8e e4       	ldi	r24, 0x4E	; 78
    4daa:	9a e0       	ldi	r25, 0x0A	; 10
    4dac:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("A Start Arbitrary Waveform Test\r"));
    4db0:	8d e2       	ldi	r24, 0x2D	; 45
    4db2:	9a e0       	ldi	r25, 0x0A	; 10
    4db4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("X Abort Test\r\r\r\r\r"));
    4db8:	8b e1       	ldi	r24, 0x1B	; 27
    4dba:	9a e0       	ldi	r25, 0x0A	; 10
    4dbc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    4dc0:	ac c6       	rjmp	.+3416   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//If enter not pressed, keep building array.
	if(arr.rx_array[array_index - 1] != '\r')
    4dc2:	28 2f       	mov	r18, r24
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	f9 01       	movw	r30, r18
    4dc8:	e5 58       	subi	r30, 0x85	; 133
    4dca:	fe 4f       	sbci	r31, 0xFE	; 254
    4dcc:	90 81       	ld	r25, Z
    4dce:	9d 30       	cpi	r25, 0x0D	; 13
    4dd0:	09 f0       	breq	.+2      	; 0x4dd4 <_Z14uart_tokenizerhP8as_class+0x1fe>
    4dd2:	a3 c6       	rjmp	.+3398   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
		return;
	
	//At this point, enter has been pressed and array is ready for processing.
	//Convert array hex values to uppercase.
	for(int i = 0; i < array_index; i++)
    4dd4:	12 16       	cp	r1, r18
    4dd6:	13 06       	cpc	r1, r19
    4dd8:	84 f4       	brge	.+32     	; 0x4dfa <_Z14uart_tokenizerhP8as_class+0x224>
    4dda:	ec e7       	ldi	r30, 0x7C	; 124
    4ddc:	f1 e0       	ldi	r31, 0x01	; 1
    4dde:	c9 01       	movw	r24, r18
    4de0:	84 58       	subi	r24, 0x84	; 132
    4de2:	9e 4f       	sbci	r25, 0xFE	; 254
		if(arr.rx_array[i] >= 'a' && arr.rx_array[i] <= 'z')
    4de4:	20 81       	ld	r18, Z
    4de6:	3f e9       	ldi	r19, 0x9F	; 159
    4de8:	32 0f       	add	r19, r18
    4dea:	3a 31       	cpi	r19, 0x1A	; 26
    4dec:	10 f4       	brcc	.+4      	; 0x4df2 <_Z14uart_tokenizerhP8as_class+0x21c>
			arr.rx_array[i] -= 0x20;
    4dee:	20 52       	subi	r18, 0x20	; 32
    4df0:	20 83       	st	Z, r18
    4df2:	31 96       	adiw	r30, 0x01	; 1
	if(arr.rx_array[array_index - 1] != '\r')
		return;
	
	//At this point, enter has been pressed and array is ready for processing.
	//Convert array hex values to uppercase.
	for(int i = 0; i < array_index; i++)
    4df4:	e8 17       	cp	r30, r24
    4df6:	f9 07       	cpc	r31, r25
    4df8:	a9 f7       	brne	.-22     	; 0x4de4 <_Z14uart_tokenizerhP8as_class+0x20e>
		if(arr.rx_array[i] >= 'a' && arr.rx_array[i] <= 'z')
			arr.rx_array[i] -= 0x20;
	
	//Reset array index for next input string.
	array_index = 0;
    4dfa:	10 92 7a 01 	sts	0x017A, r1
	
	//Get number selection from user input and call appropriate function.
	//Change tx mode.
	if(arr.rx_array[0] == '1' && arr.rx_array[1] == ' ')
    4dfe:	80 91 7c 01 	lds	r24, 0x017C
    4e02:	81 33       	cpi	r24, 0x31	; 49
    4e04:	69 f5       	brne	.+90     	; 0x4e60 <_Z14uart_tokenizerhP8as_class+0x28a>
    4e06:	90 91 7d 01 	lds	r25, 0x017D
    4e0a:	90 32       	cpi	r25, 0x20	; 32
    4e0c:	09 f0       	breq	.+2      	; 0x4e10 <_Z14uart_tokenizerhP8as_class+0x23a>
    4e0e:	64 c0       	rjmp	.+200    	; 0x4ed8 <_Z14uart_tokenizerhP8as_class+0x302>
	{		
		//Check if setting to ASCII mode.
		if(arr.rx_array[2] == 'A' && arr.rx_array[3] == '\r')
    4e10:	80 91 7e 01 	lds	r24, 0x017E
    4e14:	81 34       	cpi	r24, 0x41	; 65
    4e16:	51 f4       	brne	.+20     	; 0x4e2c <_Z14uart_tokenizerhP8as_class+0x256>
    4e18:	80 91 7f 01 	lds	r24, 0x017F
    4e1c:	8d 30       	cpi	r24, 0x0D	; 13
    4e1e:	e9 f4       	brne	.+58     	; 0x4e5a <_Z14uart_tokenizerhP8as_class+0x284>
		{
			as->set_tx_mode(TX_MODE_ASCII);
    4e20:	60 e0       	ldi	r22, 0x00	; 0
    4e22:	c8 01       	movw	r24, r16
    4e24:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN8as_class11set_tx_modeE8tx_modes>
			errno = ER_NO_ERROR;
    4e28:	19 82       	std	Y+1, r1	; 0x01
    4e2a:	75 c6       	rjmp	.+3306   	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		
		//Check if setting to MatLab mode.
		else if(arr.rx_array[2] == 'M' && arr.rx_array[3] == '\r')
    4e2c:	8d 34       	cpi	r24, 0x4D	; 77
    4e2e:	51 f4       	brne	.+20     	; 0x4e44 <_Z14uart_tokenizerhP8as_class+0x26e>
    4e30:	80 91 7f 01 	lds	r24, 0x017F
    4e34:	8d 30       	cpi	r24, 0x0D	; 13
    4e36:	89 f4       	brne	.+34     	; 0x4e5a <_Z14uart_tokenizerhP8as_class+0x284>
		{
			as->set_tx_mode(TX_MODE_MATLAB);
    4e38:	61 e0       	ldi	r22, 0x01	; 1
    4e3a:	c8 01       	movw	r24, r16
    4e3c:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN8as_class11set_tx_modeE8tx_modes>
			errno = ER_NO_ERROR;
    4e40:	19 82       	std	Y+1, r1	; 0x01
    4e42:	69 c6       	rjmp	.+3282   	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		
		//Check if setting to binary mode.
		else if(arr.rx_array[2] == 'B' && arr.rx_array[3] == '\r')
    4e44:	82 34       	cpi	r24, 0x42	; 66
    4e46:	49 f4       	brne	.+18     	; 0x4e5a <_Z14uart_tokenizerhP8as_class+0x284>
    4e48:	80 91 7f 01 	lds	r24, 0x017F
    4e4c:	8d 30       	cpi	r24, 0x0D	; 13
    4e4e:	29 f4       	brne	.+10     	; 0x4e5a <_Z14uart_tokenizerhP8as_class+0x284>
		{
			as->set_tx_mode(TX_MODE_BIN);
    4e50:	62 e0       	ldi	r22, 0x02	; 2
    4e52:	c8 01       	movw	r24, r16
    4e54:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN8as_class11set_tx_modeE8tx_modes>
			return; //Do not print "OK" if just switched to binary mode.
    4e58:	60 c6       	rjmp	.+3264   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
		}
		else errno = ER_ERROR;//Invalid input.
    4e5a:	81 e0       	ldi	r24, 0x01	; 1
    4e5c:	89 83       	std	Y+1, r24	; 0x01
    4e5e:	58 c6       	rjmp	.+3248   	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
	}
	
	//Change number of electrodes.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == ' ')
    4e60:	82 33       	cpi	r24, 0x32	; 50
    4e62:	41 f5       	brne	.+80     	; 0x4eb4 <_Z14uart_tokenizerhP8as_class+0x2de>
    4e64:	90 91 7d 01 	lds	r25, 0x017D
    4e68:	90 32       	cpi	r25, 0x20	; 32
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <_Z14uart_tokenizerhP8as_class+0x298>
    4e6c:	c5 c0       	rjmp	.+394    	; 0x4ff8 <_Z14uart_tokenizerhP8as_class+0x422>
	{
		//errno = change_electrodes(&rx_array[2], as);
		//Check if changing to 2 electrode configuration.
		if(arr.rx_array[2] == '2' && arr.rx_array[3] == '\r')
    4e6e:	80 91 7e 01 	lds	r24, 0x017E
    4e72:	82 33       	cpi	r24, 0x32	; 50
    4e74:	69 f4       	brne	.+26     	; 0x4e90 <_Z14uart_tokenizerhP8as_class+0x2ba>
    4e76:	80 91 7f 01 	lds	r24, 0x017F
    4e7a:	8d 30       	cpi	r24, 0x0D	; 13
    4e7c:	c1 f4       	brne	.+48     	; 0x4eae <_Z14uart_tokenizerhP8as_class+0x2d8>
		{
			as->set_num_electrodes(ELEC_2);
    4e7e:	60 e0       	ldi	r22, 0x00	; 0
    4e80:	c8 01       	movw	r24, r16
    4e82:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN8as_class18set_num_electrodesE9num_elecs>
			i2c_load_electrodes(as);
    4e86:	c8 01       	movw	r24, r16
    4e88:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z19i2c_load_electrodesP8as_class>
			errno = ER_NO_ERROR;
    4e8c:	19 82       	std	Y+1, r1	; 0x01
    4e8e:	43 c6       	rjmp	.+3206   	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		
		//Check if changing to 3 electrode configuration.
		else if(arr.rx_array[2] == '3' && arr.rx_array[3] == '\r')
    4e90:	83 33       	cpi	r24, 0x33	; 51
    4e92:	69 f4       	brne	.+26     	; 0x4eae <_Z14uart_tokenizerhP8as_class+0x2d8>
    4e94:	80 91 7f 01 	lds	r24, 0x017F
    4e98:	8d 30       	cpi	r24, 0x0D	; 13
    4e9a:	49 f4       	brne	.+18     	; 0x4eae <_Z14uart_tokenizerhP8as_class+0x2d8>
		{
			as->set_num_electrodes(ELEC_3);
    4e9c:	61 e0       	ldi	r22, 0x01	; 1
    4e9e:	c8 01       	movw	r24, r16
    4ea0:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN8as_class18set_num_electrodesE9num_elecs>
			i2c_load_electrodes(as);
    4ea4:	c8 01       	movw	r24, r16
    4ea6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z19i2c_load_electrodesP8as_class>
			errno = ER_NO_ERROR;
    4eaa:	19 82       	std	Y+1, r1	; 0x01
    4eac:	34 c6       	rjmp	.+3176   	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xf40>
		}
		else errno = ER_ERROR;//Invalid input.
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	89 83       	std	Y+1, r24	; 0x01
    4eb2:	2e c6       	rjmp	.+3164   	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
	}
	
	//Change ADC sample interval.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == ' ')
    4eb4:	83 33       	cpi	r24, 0x33	; 51
    4eb6:	81 f4       	brne	.+32     	; 0x4ed8 <_Z14uart_tokenizerhP8as_class+0x302>
    4eb8:	90 91 7d 01 	lds	r25, 0x017D
    4ebc:	90 32       	cpi	r25, 0x20	; 32
    4ebe:	09 f0       	breq	.+2      	; 0x4ec2 <_Z14uart_tokenizerhP8as_class+0x2ec>
    4ec0:	00 c1       	rjmp	.+512    	; 0x50c2 <_Z14uart_tokenizerhP8as_class+0x4ec>
		errno = set_u16(&(arr.rx_array[2]), as, &as_class::set_adc_rate);
    4ec2:	23 e4       	ldi	r18, 0x43	; 67
    4ec4:	33 e1       	ldi	r19, 0x13	; 19
    4ec6:	40 e0       	ldi	r20, 0x00	; 0
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	b8 01       	movw	r22, r16
    4ecc:	8e e7       	ldi	r24, 0x7E	; 126
    4ece:	91 e0       	ldi	r25, 0x01	; 1
    4ed0:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
    4ed4:	89 83       	std	Y+1, r24	; 0x01
    4ed6:	19 c6       	rjmp	.+3122   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Print TIA menu.
	else if(arr.rx_array[0] == '4' && arr.rx_array[1] == '\r')
    4ed8:	84 33       	cpi	r24, 0x34	; 52
    4eda:	09 f0       	breq	.+2      	; 0x4ede <_Z14uart_tokenizerhP8as_class+0x308>
    4edc:	8d c0       	rjmp	.+282    	; 0x4ff8 <_Z14uart_tokenizerhP8as_class+0x422>
    4ede:	90 91 7d 01 	lds	r25, 0x017D
    4ee2:	9d 30       	cpi	r25, 0x0D	; 13
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <_Z14uart_tokenizerhP8as_class+0x312>
    4ee6:	65 c1       	rjmp	.+714    	; 0x51b2 <_Z14uart_tokenizerhP8as_class+0x5dc>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---TIA MENU---\r"));
    4ee8:	8b e0       	ldi	r24, 0x0B	; 11
    4eea:	9a e0       	ldi	r25, 0x0A	; 10
    4eec:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Resistor tap.
		atmega_uart::tx_string_p(PSTR("11. TIA Resistor Tap"));
    4ef0:	86 ef       	ldi	r24, 0xF6	; 246
    4ef2:	99 e0       	ldi	r25, 0x09	; 9
    4ef4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(TAP_MIN, TAP_MAX);
    4ef8:	2f ef       	ldi	r18, 0xFF	; 255
    4efa:	33 e0       	ldi	r19, 0x03	; 3
    4efc:	40 e0       	ldi	r20, 0x00	; 0
    4efe:	50 e0       	ldi	r21, 0x00	; 0
    4f00:	61 e0       	ldi	r22, 0x01	; 1
    4f02:	70 e0       	ldi	r23, 0x00	; 0
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_tia_res_tap());
    4f0c:	c8 01       	movw	r24, r16
    4f0e:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN8as_class15get_tia_res_tapEv>
    4f12:	bc 01       	movw	r22, r24
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    4f1c:	8d e0       	ldi	r24, 0x0D	; 13
    4f1e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		uart_print_spaces();
    4f22:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Resistance = "));
    4f26:	88 ee       	ldi	r24, 0xE8	; 232
    4f28:	99 e0       	ldi	r25, 0x09	; 9
    4f2a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(as->get_tia_res_tap() * 100000L / 1023);
    4f2e:	c8 01       	movw	r24, r16
    4f30:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN8as_class15get_tia_res_tapEv>
    4f34:	dc 01       	movw	r26, r24
    4f36:	20 ea       	ldi	r18, 0xA0	; 160
    4f38:	36 e8       	ldi	r19, 0x86	; 134
    4f3a:	41 e0       	ldi	r20, 0x01	; 1
    4f3c:	50 e0       	ldi	r21, 0x00	; 0
    4f3e:	0e 94 ab 34 	call	0x6956	; 0x6956 <__muluhisi3>
    4f42:	2f ef       	ldi	r18, 0xFF	; 255
    4f44:	33 e0       	ldi	r19, 0x03	; 3
    4f46:	40 e0       	ldi	r20, 0x00	; 0
    4f48:	50 e0       	ldi	r21, 0x00	; 0
    4f4a:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__divmodsi4>
    4f4e:	ca 01       	movw	r24, r20
    4f50:	b9 01       	movw	r22, r18
    4f52:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR(" Ohms\r"));
    4f56:	81 ee       	ldi	r24, 0xE1	; 225
    4f58:	99 e0       	ldi	r25, 0x09	; 9
    4f5a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4f5e:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("R = Tap * 100000 / 1023 Ohms\r"));
    4f62:	83 ec       	ldi	r24, 0xC3	; 195
    4f64:	99 e0       	ldi	r25, 0x09	; 9
    4f66:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Capacitor mask.
		atmega_uart::tx_string_p(PSTR("12. TIA 6-bit Capacitor Mask (XXXXXX): "));
    4f6a:	8b e9       	ldi	r24, 0x9B	; 155
    4f6c:	99 e0       	ldi	r25, 0x09	; 9
    4f6e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
    4f72:	0f 2e       	mov	r0, r31
    4f74:	f6 e0       	ldi	r31, 0x06	; 6
    4f76:	ef 2e       	mov	r14, r31
    4f78:	f1 2c       	mov	r15, r1
    4f7a:	f0 2d       	mov	r31, r0
		
		//Display individual bits in the mask variable.
		for(uint8_t mask = 0x20; mask > 0; mask >>= 1)
    4f7c:	68 94       	set
    4f7e:	dd 24       	eor	r13, r13
    4f80:	d5 f8       	bld	r13, 5
		{
			(as->get_tia_cap_mask() & mask) ? atmega_uart::tx_byte('1') : atmega_uart::tx_byte('0');
    4f82:	c8 01       	movw	r24, r16
    4f84:	0e 94 93 13 	call	0x2726	; 0x2726 <_ZN8as_class16get_tia_cap_maskEv>
    4f88:	8d 21       	and	r24, r13
    4f8a:	21 f0       	breq	.+8      	; 0x4f94 <_Z14uart_tokenizerhP8as_class+0x3be>
    4f8c:	81 e3       	ldi	r24, 0x31	; 49
    4f8e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    4f92:	03 c0       	rjmp	.+6      	; 0x4f9a <_Z14uart_tokenizerhP8as_class+0x3c4>
    4f94:	80 e3       	ldi	r24, 0x30	; 48
    4f96:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Capacitor mask.
		atmega_uart::tx_string_p(PSTR("12. TIA 6-bit Capacitor Mask (XXXXXX): "));
		
		//Display individual bits in the mask variable.
		for(uint8_t mask = 0x20; mask > 0; mask >>= 1)
    4f9a:	d6 94       	lsr	r13
    4f9c:	21 e0       	ldi	r18, 0x01	; 1
    4f9e:	e2 1a       	sub	r14, r18
    4fa0:	f1 08       	sbc	r15, r1
    4fa2:	e1 14       	cp	r14, r1
    4fa4:	f1 04       	cpc	r15, r1
    4fa6:	69 f7       	brne	.-38     	; 0x4f82 <_Z14uart_tokenizerhP8as_class+0x3ac>
		{
			(as->get_tia_cap_mask() & mask) ? atmega_uart::tx_byte('1') : atmega_uart::tx_byte('0');
		}
		atmega_uart::tx_byte('\r');
    4fa8:	8d e0       	ldi	r24, 0x0D	; 13
    4faa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		uart_print_spaces();
    4fae:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 5: 100pf\r"));
    4fb2:	8d e8       	ldi	r24, 0x8D	; 141
    4fb4:	99 e0       	ldi	r25, 0x09	; 9
    4fb6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4fba:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 4: 1000pf\r"));
    4fbe:	8e e7       	ldi	r24, 0x7E	; 126
    4fc0:	99 e0       	ldi	r25, 0x09	; 9
    4fc2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4fc6:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 3: .01uf\r"));
    4fca:	80 e7       	ldi	r24, 0x70	; 112
    4fcc:	99 e0       	ldi	r25, 0x09	; 9
    4fce:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4fd2:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 2: .1uf\r"));
    4fd6:	83 e6       	ldi	r24, 0x63	; 99
    4fd8:	99 e0       	ldi	r25, 0x09	; 9
    4fda:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4fde:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 1: 1uf\r"));
    4fe2:	87 e5       	ldi	r24, 0x57	; 87
    4fe4:	99 e0       	ldi	r25, 0x09	; 9
    4fe6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    4fea:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Bit 0: 10uf\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    4fee:	8e e3       	ldi	r24, 0x3E	; 62
    4ff0:	99 e0       	ldi	r25, 0x09	; 9
    4ff2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    4ff6:	91 c5       	rjmp	.+2850   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print deposition menu.
	else if(arr.rx_array[0] == '5' && arr.rx_array[1] == '\r')
    4ff8:	85 33       	cpi	r24, 0x35	; 53
    4ffa:	09 f0       	breq	.+2      	; 0x4ffe <_Z14uart_tokenizerhP8as_class+0x428>
    4ffc:	62 c0       	rjmp	.+196    	; 0x50c2 <_Z14uart_tokenizerhP8as_class+0x4ec>
    4ffe:	90 91 7d 01 	lds	r25, 0x017D
    5002:	9d 30       	cpi	r25, 0x0D	; 13
    5004:	09 f0       	breq	.+2      	; 0x5008 <_Z14uart_tokenizerhP8as_class+0x432>
    5006:	5a c1       	rjmp	.+692    	; 0x52bc <_Z14uart_tokenizerhP8as_class+0x6e6>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---DEPOSITION MENU---\r"));
    5008:	87 e2       	ldi	r24, 0x27	; 39
    500a:	99 e0       	ldi	r25, 0x09	; 9
    500c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Enable deposition.
		atmega_uart::tx_string_p(PSTR("13. Enable Deposition (Y/N): "));
    5010:	89 e0       	ldi	r24, 0x09	; 9
    5012:	99 e0       	ldi	r25, 0x09	; 9
    5014:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_dep_enable());
    5018:	c8 01       	movw	r24, r16
    501a:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN8as_class14get_dep_enableEv>
    501e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <_Z11uart_yes_nob>
		
		//Deposition time.
		atmega_uart::tx_string_p(PSTR("14. Deposition Time ms"));
    5022:	82 ef       	ldi	r24, 0xF2	; 242
    5024:	98 e0       	ldi	r25, 0x08	; 8
    5026:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(DEP_TIME_MIN, DEP_TIME_MAX);
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	35 e3       	ldi	r19, 0x35	; 53
    502e:	4c e0       	ldi	r20, 0x0C	; 12
    5030:	50 e0       	ldi	r21, 0x00	; 0
    5032:	61 e0       	ldi	r22, 0x01	; 1
    5034:	70 e0       	ldi	r23, 0x00	; 0
    5036:	80 e0       	ldi	r24, 0x00	; 0
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_dep_time());
    503e:	c8 01       	movw	r24, r16
    5040:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN8as_class12get_dep_timeEv>
    5044:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5048:	8d e0       	ldi	r24, 0x0D	; 13
    504a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Deposition Voltage.
		atmega_uart::tx_string_p(PSTR("15. Deposition Voltage mV"));
    504e:	88 ed       	ldi	r24, 0xD8	; 216
    5050:	98 e0       	ldi	r25, 0x08	; 8
    5052:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(DEP_VOLT_MIN, DEP_VOLT_MAX);
    5056:	62 e7       	ldi	r22, 0x72	; 114
    5058:	76 e0       	ldi	r23, 0x06	; 6
    505a:	8e e8       	ldi	r24, 0x8E	; 142
    505c:	99 ef       	ldi	r25, 0xF9	; 249
    505e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_dep_volt());
    5062:	c8 01       	movw	r24, r16
    5064:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN8as_class12get_dep_voltEv>
    5068:	bc 01       	movw	r22, r24
    506a:	88 27       	eor	r24, r24
    506c:	77 fd       	sbrc	r23, 7
    506e:	80 95       	com	r24
    5070:	98 2f       	mov	r25, r24
    5072:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5076:	8d e0       	ldi	r24, 0x0D	; 13
    5078:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Quiet time.
		atmega_uart::tx_string_p(PSTR("16. Quiet Time ms"));
    507c:	86 ec       	ldi	r24, 0xC6	; 198
    507e:	98 e0       	ldi	r25, 0x08	; 8
    5080:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(QUIET_TIME_MIN, QUIET_TIME_MAX);
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	35 e3       	ldi	r19, 0x35	; 53
    5088:	4c e0       	ldi	r20, 0x0C	; 12
    508a:	50 e0       	ldi	r21, 0x00	; 0
    508c:	60 e0       	ldi	r22, 0x00	; 0
    508e:	70 e0       	ldi	r23, 0x00	; 0
    5090:	cb 01       	movw	r24, r22
    5092:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_quiet_time());
    5096:	c8 01       	movw	r24, r16
    5098:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN8as_class14get_quiet_timeEv>
    509c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    50a0:	8d e0       	ldi	r24, 0x0D	; 13
    50a2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Record deposition sequence.
		atmega_uart::tx_string_p(PSTR("17. Record Deposition Sequence (Y/N): "));
    50a6:	8f e9       	ldi	r24, 0x9F	; 159
    50a8:	98 e0       	ldi	r25, 0x08	; 8
    50aa:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_dep_rec());
    50ae:	c8 01       	movw	r24, r16
    50b0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    50b4:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <_Z11uart_yes_nob>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    50b8:	8d e8       	ldi	r24, 0x8D	; 141
    50ba:	98 e0       	ldi	r25, 0x08	; 8
    50bc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    50c0:	2c c5       	rjmp	.+2648   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print linear sweep menu.
	else if(arr.rx_array[0] == '6' && arr.rx_array[1] == '\r')
    50c2:	86 33       	cpi	r24, 0x36	; 54
    50c4:	09 f0       	breq	.+2      	; 0x50c8 <_Z14uart_tokenizerhP8as_class+0x4f2>
    50c6:	75 c0       	rjmp	.+234    	; 0x51b2 <_Z14uart_tokenizerhP8as_class+0x5dc>
    50c8:	90 91 7d 01 	lds	r25, 0x017D
    50cc:	9d 30       	cpi	r25, 0x0D	; 13
    50ce:	09 f0       	breq	.+2      	; 0x50d2 <_Z14uart_tokenizerhP8as_class+0x4fc>
    50d0:	96 c1       	rjmp	.+812    	; 0x53fe <_Z14uart_tokenizerhP8as_class+0x828>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---LINEAR SWEEP MENU---\r"));
    50d2:	84 e7       	ldi	r24, 0x74	; 116
    50d4:	98 e0       	ldi	r25, 0x08	; 8
    50d6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Start Voltage.
		atmega_uart::tx_string_p(PSTR("18. Start Voltage mV"));
    50da:	8f e5       	ldi	r24, 0x5F	; 95
    50dc:	98 e0       	ldi	r25, 0x08	; 8
    50de:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SWEEP_VOLT_MIN, SWEEP_VOLT_MAX);
    50e2:	62 e7       	ldi	r22, 0x72	; 114
    50e4:	76 e0       	ldi	r23, 0x06	; 6
    50e6:	8e e8       	ldi	r24, 0x8E	; 142
    50e8:	99 ef       	ldi	r25, 0xF9	; 249
    50ea:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_sweep_volt_start());
    50ee:	c8 01       	movw	r24, r16
    50f0:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN8as_class20get_sweep_volt_startEv>
    50f4:	bc 01       	movw	r22, r24
    50f6:	88 27       	eor	r24, r24
    50f8:	77 fd       	sbrc	r23, 7
    50fa:	80 95       	com	r24
    50fc:	98 2f       	mov	r25, r24
    50fe:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5102:	8d e0       	ldi	r24, 0x0D	; 13
    5104:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//End voltage.
		atmega_uart::tx_string_p(PSTR("19. End Voltage mV"));
    5108:	8c e4       	ldi	r24, 0x4C	; 76
    510a:	98 e0       	ldi	r25, 0x08	; 8
    510c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SWEEP_VOLT_MIN, SWEEP_VOLT_MAX);
    5110:	62 e7       	ldi	r22, 0x72	; 114
    5112:	76 e0       	ldi	r23, 0x06	; 6
    5114:	8e e8       	ldi	r24, 0x8E	; 142
    5116:	99 ef       	ldi	r25, 0xF9	; 249
    5118:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_sweep_volt_end());
    511c:	c8 01       	movw	r24, r16
    511e:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN8as_class18get_sweep_volt_endEv>
    5122:	bc 01       	movw	r22, r24
    5124:	88 27       	eor	r24, r24
    5126:	77 fd       	sbrc	r23, 7
    5128:	80 95       	com	r24
    512a:	98 2f       	mov	r25, r24
    512c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5130:	8d e0       	ldi	r24, 0x0D	; 13
    5132:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Sweep rate.
		atmega_uart::tx_string_p(PSTR("20. Sweep Rate mV/s"));
    5136:	88 e3       	ldi	r24, 0x38	; 56
    5138:	98 e0       	ldi	r25, 0x08	; 8
    513a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SWEEP_RATE_MIN, SWEEP_RATE_MAX);
    513e:	20 ed       	ldi	r18, 0xD0	; 208
    5140:	37 e0       	ldi	r19, 0x07	; 7
    5142:	40 e0       	ldi	r20, 0x00	; 0
    5144:	50 e0       	ldi	r21, 0x00	; 0
    5146:	61 e0       	ldi	r22, 0x01	; 1
    5148:	70 e0       	ldi	r23, 0x00	; 0
    514a:	80 e0       	ldi	r24, 0x00	; 0
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_sweep_rate());
    5152:	c8 01       	movw	r24, r16
    5154:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN8as_class14get_sweep_rateEv>
    5158:	bc 01       	movw	r22, r24
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5162:	8d e0       	ldi	r24, 0x0D	; 13
    5164:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Cyclic.
		atmega_uart::tx_string_p(PSTR("21. Cyclic (Y/N): "));
    5168:	85 e2       	ldi	r24, 0x25	; 37
    516a:	98 e0       	ldi	r25, 0x08	; 8
    516c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_sweep_cyclic());
    5170:	c8 01       	movw	r24, r16
    5172:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8as_class16get_sweep_cyclicEv>
    5176:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <_Z11uart_yes_nob>
		
		//Number of cycles.
		atmega_uart::tx_string_p(PSTR("22. Number of Cycles"));
    517a:	80 e1       	ldi	r24, 0x10	; 16
    517c:	98 e0       	ldi	r25, 0x08	; 8
    517e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SWEEP_CYCLES_MIN, SWEEP_CYCLES_MAX);
    5182:	24 e6       	ldi	r18, 0x64	; 100
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	40 e0       	ldi	r20, 0x00	; 0
    5188:	50 e0       	ldi	r21, 0x00	; 0
    518a:	61 e0       	ldi	r22, 0x01	; 1
    518c:	70 e0       	ldi	r23, 0x00	; 0
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_sweep_cycles());
    5196:	c8 01       	movw	r24, r16
    5198:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN8as_class16get_sweep_cyclesEv>
    519c:	68 2f       	mov	r22, r24
    519e:	70 e0       	ldi	r23, 0x00	; 0
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    51a8:	8d ef       	ldi	r24, 0xFD	; 253
    51aa:	97 e0       	ldi	r25, 0x07	; 7
    51ac:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    51b0:	b4 c4       	rjmp	.+2408   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print square wave menu.
	else if(arr.rx_array[0] == '7' && arr.rx_array[1] == '\r')
    51b2:	87 33       	cpi	r24, 0x37	; 55
    51b4:	09 f0       	breq	.+2      	; 0x51b8 <_Z14uart_tokenizerhP8as_class+0x5e2>
    51b6:	82 c0       	rjmp	.+260    	; 0x52bc <_Z14uart_tokenizerhP8as_class+0x6e6>
    51b8:	90 91 7d 01 	lds	r25, 0x017D
    51bc:	9d 30       	cpi	r25, 0x0D	; 13
    51be:	09 f0       	breq	.+2      	; 0x51c2 <_Z14uart_tokenizerhP8as_class+0x5ec>
    51c0:	7e c1       	rjmp	.+764    	; 0x54be <_Z14uart_tokenizerhP8as_class+0x8e8>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---SQUARE WAVE MENU---\r"));
    51c2:	85 ee       	ldi	r24, 0xE5	; 229
    51c4:	97 e0       	ldi	r25, 0x07	; 7
    51c6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Start voltage.
		atmega_uart::tx_string_p(PSTR("23. Start Voltage mV"));
    51ca:	80 ed       	ldi	r24, 0xD0	; 208
    51cc:	97 e0       	ldi	r25, 0x07	; 7
    51ce:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SQUARE_VOLT_MIN, SQUARE_VOLT_MAX);
    51d2:	62 e7       	ldi	r22, 0x72	; 114
    51d4:	76 e0       	ldi	r23, 0x06	; 6
    51d6:	8e e8       	ldi	r24, 0x8E	; 142
    51d8:	99 ef       	ldi	r25, 0xF9	; 249
    51da:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_square_volt_start());
    51de:	c8 01       	movw	r24, r16
    51e0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    51e4:	bc 01       	movw	r22, r24
    51e6:	88 27       	eor	r24, r24
    51e8:	77 fd       	sbrc	r23, 7
    51ea:	80 95       	com	r24
    51ec:	98 2f       	mov	r25, r24
    51ee:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    51f2:	8d e0       	ldi	r24, 0x0D	; 13
    51f4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//End voltage.
		atmega_uart::tx_string_p(PSTR("24. End Voltage mV"));
    51f8:	8d eb       	ldi	r24, 0xBD	; 189
    51fa:	97 e0       	ldi	r25, 0x07	; 7
    51fc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SQUARE_VOLT_MIN, SQUARE_VOLT_MAX);
    5200:	62 e7       	ldi	r22, 0x72	; 114
    5202:	76 e0       	ldi	r23, 0x06	; 6
    5204:	8e e8       	ldi	r24, 0x8E	; 142
    5206:	99 ef       	ldi	r25, 0xF9	; 249
    5208:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_square_volt_end());
    520c:	c8 01       	movw	r24, r16
    520e:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    5212:	bc 01       	movw	r22, r24
    5214:	88 27       	eor	r24, r24
    5216:	77 fd       	sbrc	r23, 7
    5218:	80 95       	com	r24
    521a:	98 2f       	mov	r25, r24
    521c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5220:	8d e0       	ldi	r24, 0x0D	; 13
    5222:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Square wave amplitude.
		atmega_uart::tx_string_p(PSTR("25. Square Wave Amplitude mV"));
    5226:	80 ea       	ldi	r24, 0xA0	; 160
    5228:	97 e0       	ldi	r25, 0x07	; 7
    522a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SQUARE_AMP_MIN, SQUARE_AMP_MAX);
    522e:	22 e7       	ldi	r18, 0x72	; 114
    5230:	36 e0       	ldi	r19, 0x06	; 6
    5232:	40 e0       	ldi	r20, 0x00	; 0
    5234:	50 e0       	ldi	r21, 0x00	; 0
    5236:	60 e0       	ldi	r22, 0x00	; 0
    5238:	70 e0       	ldi	r23, 0x00	; 0
    523a:	cb 01       	movw	r24, r22
    523c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_square_amp());
    5240:	c8 01       	movw	r24, r16
    5242:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5246:	bc 01       	movw	r22, r24
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	90 e0       	ldi	r25, 0x00	; 0
    524c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5250:	8d e0       	ldi	r24, 0x0D	; 13
    5252:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Square wave increment.
		atmega_uart::tx_string_p(PSTR("26. Square Wave Increment mV"));
    5256:	83 e8       	ldi	r24, 0x83	; 131
    5258:	97 e0       	ldi	r25, 0x07	; 7
    525a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SQUARE_INC_MIN, SQUARE_INC_MAX);
    525e:	22 e7       	ldi	r18, 0x72	; 114
    5260:	36 e0       	ldi	r19, 0x06	; 6
    5262:	40 e0       	ldi	r20, 0x00	; 0
    5264:	50 e0       	ldi	r21, 0x00	; 0
    5266:	60 e0       	ldi	r22, 0x00	; 0
    5268:	70 e0       	ldi	r23, 0x00	; 0
    526a:	cb 01       	movw	r24, r22
    526c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_square_inc());
    5270:	c8 01       	movw	r24, r16
    5272:	0e 94 84 14 	call	0x2908	; 0x2908 <_ZN8as_class14get_square_incEv>
    5276:	bc 01       	movw	r22, r24
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5280:	8d e0       	ldi	r24, 0x0D	; 13
    5282:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Square wave period.
		atmega_uart::tx_string_p(PSTR("27. Square Wave Half Period ms"));
    5286:	84 e6       	ldi	r24, 0x64	; 100
    5288:	97 e0       	ldi	r25, 0x07	; 7
    528a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SQUARE_PER_MIN, SQUARE_PER_MAX);
    528e:	20 e1       	ldi	r18, 0x10	; 16
    5290:	37 e2       	ldi	r19, 0x27	; 39
    5292:	40 e0       	ldi	r20, 0x00	; 0
    5294:	50 e0       	ldi	r21, 0x00	; 0
    5296:	61 e0       	ldi	r22, 0x01	; 1
    5298:	70 e0       	ldi	r23, 0x00	; 0
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_square_period());
    52a2:	c8 01       	movw	r24, r16
    52a4:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8as_class17get_square_periodEv>
    52a8:	bc 01       	movw	r22, r24
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    52b2:	81 e5       	ldi	r24, 0x51	; 81
    52b4:	97 e0       	ldi	r25, 0x07	; 7
    52b6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    52ba:	2f c4       	rjmp	.+2142   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print arbitrary waveform menu.
	else if(arr.rx_array[0] == '8' && arr.rx_array[1] == '\r')
    52bc:	88 33       	cpi	r24, 0x38	; 56
    52be:	09 f0       	breq	.+2      	; 0x52c2 <_Z14uart_tokenizerhP8as_class+0x6ec>
    52c0:	9e c0       	rjmp	.+316    	; 0x53fe <_Z14uart_tokenizerhP8as_class+0x828>
    52c2:	90 91 7d 01 	lds	r25, 0x017D
    52c6:	9d 30       	cpi	r25, 0x0D	; 13
    52c8:	09 f0       	breq	.+2      	; 0x52cc <_Z14uart_tokenizerhP8as_class+0x6f6>
    52ca:	ca c1       	rjmp	.+916    	; 0x5660 <_Z14uart_tokenizerhP8as_class+0xa8a>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---ARBITRARY WAVEFORM MENU---\r"));
    52cc:	82 e3       	ldi	r24, 0x32	; 50
    52ce:	97 e0       	ldi	r25, 0x07	; 7
    52d0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Append entry.
		atmega_uart::tx_string_p(PSTR("28. Append Entry (StartmV StopmV RatemV/s)\r"));
    52d4:	86 e0       	ldi	r24, 0x06	; 6
    52d6:	97 e0       	ldi	r25, 0x07	; 7
    52d8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Replace entry.
		atmega_uart::tx_string_p(PSTR("29. Replace Entry (Entry# StartmV StopmV RatemV/s)\r"));
    52dc:	82 ed       	ldi	r24, 0xD2	; 210
    52de:	96 e0       	ldi	r25, 0x06	; 6
    52e0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Delete last entry.
		atmega_uart::tx_string_p(PSTR("30. Delete Last Entry\r"));
    52e4:	8b eb       	ldi	r24, 0xBB	; 187
    52e6:	96 e0       	ldi	r25, 0x06	; 6
    52e8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Delete all entries.
		atmega_uart::tx_string_p(PSTR("31. Delete All Entries\r"));
    52ec:	83 ea       	ldi	r24, 0xA3	; 163
    52ee:	96 e0       	ldi	r25, 0x06	; 6
    52f0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Show stored values
		atmega_uart::tx_string_p(PSTR("32. Get Stored Values\r"));
    52f4:	8c e8       	ldi	r24, 0x8C	; 140
    52f6:	96 e0       	ldi	r25, 0x06	; 6
    52f8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Cyclic.
		atmega_uart::tx_string_p(PSTR("33. Cyclic (Y/N): "));
    52fc:	89 e7       	ldi	r24, 0x79	; 121
    52fe:	96 e0       	ldi	r25, 0x06	; 6
    5300:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_arb_cyclic());
    5304:	c8 01       	movw	r24, r16
    5306:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN8as_class14get_arb_cyclicEv>
    530a:	91 e0       	ldi	r25, 0x01	; 1
    530c:	81 11       	cpse	r24, r1
    530e:	01 c0       	rjmp	.+2      	; 0x5312 <_Z14uart_tokenizerhP8as_class+0x73c>
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	89 2f       	mov	r24, r25
    5314:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <_Z11uart_yes_nob>
		
		//Number of cycles.
		atmega_uart::tx_string_p(PSTR("34. Number of Cycles"));
    5318:	84 e6       	ldi	r24, 0x64	; 100
    531a:	96 e0       	ldi	r25, 0x06	; 6
    531c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(ARB_CYCLES_MIN, ARB_CYCLES_MAX);
    5320:	24 e6       	ldi	r18, 0x64	; 100
    5322:	30 e0       	ldi	r19, 0x00	; 0
    5324:	40 e0       	ldi	r20, 0x00	; 0
    5326:	50 e0       	ldi	r21, 0x00	; 0
    5328:	61 e0       	ldi	r22, 0x01	; 1
    532a:	70 e0       	ldi	r23, 0x00	; 0
    532c:	80 e0       	ldi	r24, 0x00	; 0
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_arb_cycles());
    5334:	c8 01       	movw	r24, r16
    5336:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN8as_class14get_arb_cyclesEv>
    533a:	68 2f       	mov	r22, r24
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	80 e0       	ldi	r24, 0x00	; 0
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r"));
    5346:	81 e6       	ldi	r24, 0x61	; 97
    5348:	96 e0       	ldi	r25, 0x06	; 6
    534a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Stored entries.
		atmega_uart::tx_string_p(PSTR("Number of Stored Entries (Up to "));
    534e:	80 e4       	ldi	r24, 0x40	; 64
    5350:	96 e0       	ldi	r25, 0x06	; 6
    5352:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_ENTRIES_MAX);
    5356:	66 e9       	ldi	r22, 0x96	; 150
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("): "));
    5362:	8c e3       	ldi	r24, 0x3C	; 60
    5364:	96 e0       	ldi	r25, 0x06	; 6
    5366:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(atmega_eeprom::read_word((uint16_t *)ARB_NUM));
    536a:	86 e0       	ldi	r24, 0x06	; 6
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    5372:	bc 01       	movw	r22, r24
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		
		//Arbitrary waveform value limits.
		atmega_uart::tx_string_p(PSTR("\r\rStartmV: "));
    537c:	80 e3       	ldi	r24, 0x30	; 48
    537e:	96 e0       	ldi	r25, 0x06	; 6
    5380:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MIN);
    5384:	6e e8       	ldi	r22, 0x8E	; 142
    5386:	79 ef       	ldi	r23, 0xF9	; 249
    5388:	8f ef       	ldi	r24, 0xFF	; 255
    538a:	9f ef       	ldi	r25, 0xFF	; 255
    538c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR(" to "));
    5390:	8b e2       	ldi	r24, 0x2B	; 43
    5392:	96 e0       	ldi	r25, 0x06	; 6
    5394:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MAX);
    5398:	62 e7       	ldi	r22, 0x72	; 114
    539a:	76 e0       	ldi	r23, 0x06	; 6
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("\rEndmV:   "));
    53a4:	80 e2       	ldi	r24, 0x20	; 32
    53a6:	96 e0       	ldi	r25, 0x06	; 6
    53a8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MIN);
    53ac:	6e e8       	ldi	r22, 0x8E	; 142
    53ae:	79 ef       	ldi	r23, 0xF9	; 249
    53b0:	8f ef       	ldi	r24, 0xFF	; 255
    53b2:	9f ef       	ldi	r25, 0xFF	; 255
    53b4:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR(" to "));
    53b8:	8b e1       	ldi	r24, 0x1B	; 27
    53ba:	96 e0       	ldi	r25, 0x06	; 6
    53bc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MAX);
    53c0:	62 e7       	ldi	r22, 0x72	; 114
    53c2:	76 e0       	ldi	r23, 0x06	; 6
    53c4:	80 e0       	ldi	r24, 0x00	; 0
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("\rRatemV/s: "));
    53cc:	8f e0       	ldi	r24, 0x0F	; 15
    53ce:	96 e0       	ldi	r25, 0x06	; 6
    53d0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(ARB_RATE_MIN);
    53d4:	61 e0       	ldi	r22, 0x01	; 1
    53d6:	70 e0       	ldi	r23, 0x00	; 0
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR(" to "));
    53e0:	8a e0       	ldi	r24, 0x0A	; 10
    53e2:	96 e0       	ldi	r25, 0x06	; 6
    53e4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(ARB_RATE_MAX);
    53e8:	60 ed       	ldi	r22, 0xD0	; 208
    53ea:	77 e0       	ldi	r23, 0x07	; 7
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r"));
    53f4:	8f ef       	ldi	r24, 0xFF	; 255
    53f6:	95 e0       	ldi	r25, 0x05	; 5
    53f8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    53fc:	8e c3       	rjmp	.+1820   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print low-pass filter menu.
	else if(arr.rx_array[0] == '9' && arr.rx_array[1] == '\r')
    53fe:	89 33       	cpi	r24, 0x39	; 57
    5400:	09 f0       	breq	.+2      	; 0x5404 <_Z14uart_tokenizerhP8as_class+0x82e>
    5402:	5d c0       	rjmp	.+186    	; 0x54be <_Z14uart_tokenizerhP8as_class+0x8e8>
    5404:	90 91 7d 01 	lds	r25, 0x017D
    5408:	9d 30       	cpi	r25, 0x0D	; 13
    540a:	09 f0       	breq	.+2      	; 0x540e <_Z14uart_tokenizerhP8as_class+0x838>
    540c:	b9 c2       	rjmp	.+1394   	; 0x5980 <_Z14uart_tokenizerhP8as_class+0xdaa>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---LOW-PASS FILTER MENU---\r"));
    540e:	83 ee       	ldi	r24, 0xE3	; 227
    5410:	95 e0       	ldi	r25, 0x05	; 5
    5412:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Enable filter.
		atmega_uart::tx_string_p(PSTR("35. Enable Software Filter (Y/N): "));
    5416:	80 ec       	ldi	r24, 0xC0	; 192
    5418:	95 e0       	ldi	r25, 0x05	; 5
    541a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_soft_filt());
    541e:	c8 01       	movw	r24, r16
    5420:	0e 94 b6 14 	call	0x296c	; 0x296c <_ZN8as_class13get_soft_filtEv>
    5424:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <_Z11uart_yes_nob>
		
		//Selected software filter.
		atmega_uart::tx_string_p(PSTR("36. Selected Filter"));
    5428:	8c ea       	ldi	r24, 0xAC	; 172
    542a:	95 e0       	ldi	r25, 0x05	; 5
    542c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(LPF_FILT_MIN, LPF_FILT_MAX);
    5430:	27 e0       	ldi	r18, 0x07	; 7
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	40 e0       	ldi	r20, 0x00	; 0
    5436:	50 e0       	ldi	r21, 0x00	; 0
    5438:	61 e0       	ldi	r22, 0x01	; 1
    543a:	70 e0       	ldi	r23, 0x00	; 0
    543c:	80 e0       	ldi	r24, 0x00	; 0
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_soft_sel());
    5444:	c8 01       	movw	r24, r16
    5446:	0e 94 c5 14 	call	0x298a	; 0x298a <_ZN8as_class12get_soft_selEv>
    544a:	68 2f       	mov	r22, r24
    544c:	70 e0       	ldi	r23, 0x00	; 0
    544e:	80 e0       	ldi	r24, 0x00	; 0
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5456:	8d e0       	ldi	r24, 0x0D	; 13
    5458:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		uart_print_spaces();
    545c:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("   Cutoff\r"));
    5460:	81 ea       	ldi	r24, 0xA1	; 161
    5462:	95 e0       	ldi	r25, 0x05	; 5
    5464:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5468:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("1:   1Hz\r"));
    546c:	87 e9       	ldi	r24, 0x97	; 151
    546e:	95 e0       	ldi	r25, 0x05	; 5
    5470:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5474:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("2:   5Hz\r"));
    5478:	8d e8       	ldi	r24, 0x8D	; 141
    547a:	95 e0       	ldi	r25, 0x05	; 5
    547c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5480:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("3:  10Hz\r"));
    5484:	83 e8       	ldi	r24, 0x83	; 131
    5486:	95 e0       	ldi	r25, 0x05	; 5
    5488:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    548c:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("4:  50Hz\r"));
    5490:	89 e7       	ldi	r24, 0x79	; 121
    5492:	95 e0       	ldi	r25, 0x05	; 5
    5494:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5498:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("5: 100Hz\r"));
    549c:	8f e6       	ldi	r24, 0x6F	; 111
    549e:	95 e0       	ldi	r25, 0x05	; 5
    54a0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    54a4:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("6: 150Hz\r"));
    54a8:	85 e6       	ldi	r24, 0x65	; 101
    54aa:	95 e0       	ldi	r25, 0x05	; 5
    54ac:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    54b0:	0e 94 ce 21 	call	0x439c	; 0x439c <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("7: 200Hz\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    54b4:	8f e4       	ldi	r24, 0x4F	; 79
    54b6:	95 e0       	ldi	r25, 0x05	; 5
    54b8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    54bc:	2e c3       	rjmp	.+1628   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Print settings.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '0' && arr.rx_array[2] == '\r')
    54be:	81 33       	cpi	r24, 0x31	; 49
    54c0:	09 f0       	breq	.+2      	; 0x54c4 <_Z14uart_tokenizerhP8as_class+0x8ee>
    54c2:	ce c0       	rjmp	.+412    	; 0x5660 <_Z14uart_tokenizerhP8as_class+0xa8a>
    54c4:	80 91 7d 01 	lds	r24, 0x017D
    54c8:	80 33       	cpi	r24, 0x30	; 48
    54ca:	41 f4       	brne	.+16     	; 0x54dc <_Z14uart_tokenizerhP8as_class+0x906>
    54cc:	90 91 7e 01 	lds	r25, 0x017E
    54d0:	9d 30       	cpi	r25, 0x0D	; 13
    54d2:	c9 f4       	brne	.+50     	; 0x5506 <_Z14uart_tokenizerhP8as_class+0x930>
	{
		uart_print_settings(as);
    54d4:	c8 01       	movw	r24, r16
    54d6:	0e 94 11 20 	call	0x4022	; 0x4022 <_Z19uart_print_settingsP8as_class>
		return;
    54da:	1f c3       	rjmp	.+1598   	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	//Change digital potentiometer wiper tap.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '1' && arr.rx_array[2] == ' ')
    54dc:	81 33       	cpi	r24, 0x31	; 49
    54de:	99 f4       	brne	.+38     	; 0x5506 <_Z14uart_tokenizerhP8as_class+0x930>
    54e0:	90 91 7e 01 	lds	r25, 0x017E
    54e4:	90 32       	cpi	r25, 0x20	; 32
    54e6:	09 f0       	breq	.+2      	; 0x54ea <_Z14uart_tokenizerhP8as_class+0x914>
    54e8:	41 c0       	rjmp	.+130    	; 0x556c <_Z14uart_tokenizerhP8as_class+0x996>
	{
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_tia_res_tap);
    54ea:	27 e5       	ldi	r18, 0x57	; 87
    54ec:	33 e1       	ldi	r19, 0x13	; 19
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	50 e0       	ldi	r21, 0x00	; 0
    54f2:	b8 01       	movw	r22, r16
    54f4:	8f e7       	ldi	r24, 0x7F	; 127
    54f6:	91 e0       	ldi	r25, 0x01	; 1
    54f8:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
    54fc:	89 83       	std	Y+1, r24	; 0x01
		
		//Update digital potentiometer.
		i2c_load_pot(as);
    54fe:	c8 01       	movw	r24, r16
    5500:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_Z12i2c_load_potP8as_class>
    5504:	02 c3       	rjmp	.+1540   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	}
	
	//Change capacitor mask.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '2' && arr.rx_array[2] == ' ')
    5506:	82 33       	cpi	r24, 0x32	; 50
    5508:	89 f5       	brne	.+98     	; 0x556c <_Z14uart_tokenizerhP8as_class+0x996>
    550a:	90 91 7e 01 	lds	r25, 0x017E
    550e:	90 32       	cpi	r25, 0x20	; 32
    5510:	09 f0       	breq	.+2      	; 0x5514 <_Z14uart_tokenizerhP8as_class+0x93e>
    5512:	3d c0       	rjmp	.+122    	; 0x558e <_Z14uart_tokenizerhP8as_class+0x9b8>
	{
		uint8_t number = 0;
		errno = ER_NO_ERROR;
		
		//Check to make sure there is exactly 6 characters.
		if(arr.rx_array[9] != '\r')
    5514:	80 91 85 01 	lds	r24, 0x0185
    5518:	8d 30       	cpi	r24, 0x0D	; 13
    551a:	19 f0       	breq	.+6      	; 0x5522 <_Z14uart_tokenizerhP8as_class+0x94c>
			errno = ER_ERROR;
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	89 83       	std	Y+1, r24	; 0x01
    5520:	21 c0       	rjmp	.+66     	; 0x5564 <_Z14uart_tokenizerhP8as_class+0x98e>
    5522:	ef e7       	ldi	r30, 0x7F	; 127
    5524:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t number = 0;
		errno = ER_NO_ERROR;
		
		//Check to make sure there is exactly 6 characters.
		if(arr.rx_array[9] != '\r')
    5526:	85 e0       	ldi	r24, 0x05	; 5
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	70 e0       	ldi	r23, 0x00	; 0
    552c:	60 e0       	ldi	r22, 0x00	; 0
				if(arr.rx_array[i] == '1')
					number |= (1 << (8 - i));	//Set bit.
				else if(arr.rx_array[i] == '0');
				//Do nothing.  Default bit is zero.
				else
					errno = ER_ERROR;
    552e:	a1 e0       	ldi	r26, 0x01	; 1
		else
			//Loop through all 6 bits of the capacitor mask.
			for(int i = 3; i < 9; i++)
			{
				if(arr.rx_array[i] == '1')
					number |= (1 << (8 - i));	//Set bit.
    5530:	21 e0       	ldi	r18, 0x01	; 1
    5532:	30 e0       	ldi	r19, 0x00	; 0
			errno = ER_ERROR;
		else
			//Loop through all 6 bits of the capacitor mask.
			for(int i = 3; i < 9; i++)
			{
				if(arr.rx_array[i] == '1')
    5534:	41 91       	ld	r20, Z+
    5536:	41 33       	cpi	r20, 0x31	; 49
    5538:	49 f4       	brne	.+18     	; 0x554c <_Z14uart_tokenizerhP8as_class+0x976>
					number |= (1 << (8 - i));	//Set bit.
    553a:	a9 01       	movw	r20, r18
    553c:	08 2e       	mov	r0, r24
    553e:	02 c0       	rjmp	.+4      	; 0x5544 <_Z14uart_tokenizerhP8as_class+0x96e>
    5540:	44 0f       	add	r20, r20
    5542:	55 1f       	adc	r21, r21
    5544:	0a 94       	dec	r0
    5546:	e2 f7       	brpl	.-8      	; 0x5540 <_Z14uart_tokenizerhP8as_class+0x96a>
    5548:	64 2b       	or	r22, r20
    554a:	03 c0       	rjmp	.+6      	; 0x5552 <_Z14uart_tokenizerhP8as_class+0x97c>
				else if(arr.rx_array[i] == '0');
    554c:	40 33       	cpi	r20, 0x30	; 48
    554e:	09 f0       	breq	.+2      	; 0x5552 <_Z14uart_tokenizerhP8as_class+0x97c>
				//Do nothing.  Default bit is zero.
				else
					errno = ER_ERROR;
    5550:	7a 2f       	mov	r23, r26
    5552:	01 97       	sbiw	r24, 0x01	; 1
    5554:	78 f7       	brcc	.-34     	; 0x5534 <_Z14uart_tokenizerhP8as_class+0x95e>
    5556:	79 83       	std	Y+1, r23	; 0x01
			}
		
		//Save value.
		if(!errno)
    5558:	71 11       	cpse	r23, r1
    555a:	04 c0       	rjmp	.+8      	; 0x5564 <_Z14uart_tokenizerhP8as_class+0x98e>
			errno = as->set_tia_cap_mask(number);
    555c:	c8 01       	movw	r24, r16
    555e:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN8as_class16set_tia_cap_maskEh>
    5562:	89 83       	std	Y+1, r24	; 0x01
		
		//Update analog switch.
		i2c_load_cap_mask(as);
    5564:	c8 01       	movw	r24, r16
    5566:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_Z17i2c_load_cap_maskP8as_class>
    556a:	cf c2       	rjmp	.+1438   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	}
	
	//Enable deposition sequence.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    556c:	83 33       	cpi	r24, 0x33	; 51
    556e:	79 f4       	brne	.+30     	; 0x558e <_Z14uart_tokenizerhP8as_class+0x9b8>
    5570:	90 91 7e 01 	lds	r25, 0x017E
    5574:	90 32       	cpi	r25, 0x20	; 32
    5576:	e1 f4       	brne	.+56     	; 0x55b0 <_Z14uart_tokenizerhP8as_class+0x9da>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_dep_enable);
    5578:	26 e9       	ldi	r18, 0x96	; 150
    557a:	33 e1       	ldi	r19, 0x13	; 19
    557c:	40 e0       	ldi	r20, 0x00	; 0
    557e:	50 e0       	ldi	r21, 0x00	; 0
    5580:	b8 01       	movw	r22, r16
    5582:	8f e7       	ldi	r24, 0x7F	; 127
    5584:	91 e0       	ldi	r25, 0x01	; 1
    5586:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
    558a:	89 83       	std	Y+1, r24	; 0x01
    558c:	be c2       	rjmp	.+1404   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//change deposition time.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    558e:	84 33       	cpi	r24, 0x34	; 52
    5590:	79 f4       	brne	.+30     	; 0x55b0 <_Z14uart_tokenizerhP8as_class+0x9da>
    5592:	90 91 7e 01 	lds	r25, 0x017E
    5596:	90 32       	cpi	r25, 0x20	; 32
    5598:	e1 f4       	brne	.+56     	; 0x55d2 <_Z14uart_tokenizerhP8as_class+0x9fc>
		errno = set_u32(&(arr.rx_array[3]), as, &as_class::set_dep_time);
    559a:	2d e9       	ldi	r18, 0x9D	; 157
    559c:	33 e1       	ldi	r19, 0x13	; 19
    559e:	40 e0       	ldi	r20, 0x00	; 0
    55a0:	50 e0       	ldi	r21, 0x00	; 0
    55a2:	b8 01       	movw	r22, r16
    55a4:	8f e7       	ldi	r24, 0x7F	; 127
    55a6:	91 e0       	ldi	r25, 0x01	; 1
    55a8:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <_Z7set_u32PKhP8as_classMS1_FhmE>
    55ac:	89 83       	std	Y+1, r24	; 0x01
    55ae:	ad c2       	rjmp	.+1370   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change deposition voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    55b0:	85 33       	cpi	r24, 0x35	; 53
    55b2:	79 f4       	brne	.+30     	; 0x55d2 <_Z14uart_tokenizerhP8as_class+0x9fc>
    55b4:	90 91 7e 01 	lds	r25, 0x017E
    55b8:	90 32       	cpi	r25, 0x20	; 32
    55ba:	e1 f4       	brne	.+56     	; 0x55f4 <_Z14uart_tokenizerhP8as_class+0xa1e>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_dep_volt);
    55bc:	2a eb       	ldi	r18, 0xBA	; 186
    55be:	33 e1       	ldi	r19, 0x13	; 19
    55c0:	40 e0       	ldi	r20, 0x00	; 0
    55c2:	50 e0       	ldi	r21, 0x00	; 0
    55c4:	b8 01       	movw	r22, r16
    55c6:	8f e7       	ldi	r24, 0x7F	; 127
    55c8:	91 e0       	ldi	r25, 0x01	; 1
    55ca:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_Z9set_int16PKhP8as_classMS1_FhiE>
    55ce:	89 83       	std	Y+1, r24	; 0x01
    55d0:	9c c2       	rjmp	.+1336   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change quiet time.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    55d2:	86 33       	cpi	r24, 0x36	; 54
    55d4:	79 f4       	brne	.+30     	; 0x55f4 <_Z14uart_tokenizerhP8as_class+0xa1e>
    55d6:	90 91 7e 01 	lds	r25, 0x017E
    55da:	90 32       	cpi	r25, 0x20	; 32
    55dc:	e1 f4       	brne	.+56     	; 0x5616 <_Z14uart_tokenizerhP8as_class+0xa40>
		errno = set_u32(&(arr.rx_array[3]), as, &as_class::set_quiet_time);
    55de:	2f ec       	ldi	r18, 0xCF	; 207
    55e0:	33 e1       	ldi	r19, 0x13	; 19
    55e2:	40 e0       	ldi	r20, 0x00	; 0
    55e4:	50 e0       	ldi	r21, 0x00	; 0
    55e6:	b8 01       	movw	r22, r16
    55e8:	8f e7       	ldi	r24, 0x7F	; 127
    55ea:	91 e0       	ldi	r25, 0x01	; 1
    55ec:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <_Z7set_u32PKhP8as_classMS1_FhmE>
    55f0:	89 83       	std	Y+1, r24	; 0x01
    55f2:	8b c2       	rjmp	.+1302   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Record deposition sequence.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '7' && arr.rx_array[2] == ' ')
    55f4:	87 33       	cpi	r24, 0x37	; 55
    55f6:	79 f4       	brne	.+30     	; 0x5616 <_Z14uart_tokenizerhP8as_class+0xa40>
    55f8:	90 91 7e 01 	lds	r25, 0x017E
    55fc:	90 32       	cpi	r25, 0x20	; 32
    55fe:	e9 f4       	brne	.+58     	; 0x563a <_Z14uart_tokenizerhP8as_class+0xa64>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_dep_rec);
    5600:	25 ee       	ldi	r18, 0xE5	; 229
    5602:	33 e1       	ldi	r19, 0x13	; 19
    5604:	40 e0       	ldi	r20, 0x00	; 0
    5606:	50 e0       	ldi	r21, 0x00	; 0
    5608:	b8 01       	movw	r22, r16
    560a:	8f e7       	ldi	r24, 0x7F	; 127
    560c:	91 e0       	ldi	r25, 0x01	; 1
    560e:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
    5612:	89 83       	std	Y+1, r24	; 0x01
    5614:	7a c2       	rjmp	.+1268   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change sweep start voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '8' && arr.rx_array[2] == ' ')
    5616:	88 33       	cpi	r24, 0x38	; 56
    5618:	81 f4       	brne	.+32     	; 0x563a <_Z14uart_tokenizerhP8as_class+0xa64>
    561a:	80 91 7e 01 	lds	r24, 0x017E
    561e:	80 32       	cpi	r24, 0x20	; 32
    5620:	09 f0       	breq	.+2      	; 0x5624 <_Z14uart_tokenizerhP8as_class+0xa4e>
    5622:	70 c2       	rjmp	.+1248   	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_sweep_volt_start);
    5624:	2c ee       	ldi	r18, 0xEC	; 236
    5626:	33 e1       	ldi	r19, 0x13	; 19
    5628:	40 e0       	ldi	r20, 0x00	; 0
    562a:	50 e0       	ldi	r21, 0x00	; 0
    562c:	b8 01       	movw	r22, r16
    562e:	8f e7       	ldi	r24, 0x7F	; 127
    5630:	91 e0       	ldi	r25, 0x01	; 1
    5632:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_Z9set_int16PKhP8as_classMS1_FhiE>
    5636:	89 83       	std	Y+1, r24	; 0x01
    5638:	68 c2       	rjmp	.+1232   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change sweep end voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '9' && arr.rx_array[2] == ' ')
    563a:	89 33       	cpi	r24, 0x39	; 57
    563c:	09 f0       	breq	.+2      	; 0x5640 <_Z14uart_tokenizerhP8as_class+0xa6a>
    563e:	62 c2       	rjmp	.+1220   	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
    5640:	80 91 7e 01 	lds	r24, 0x017E
    5644:	80 32       	cpi	r24, 0x20	; 32
    5646:	09 f0       	breq	.+2      	; 0x564a <_Z14uart_tokenizerhP8as_class+0xa74>
    5648:	5d c2       	rjmp	.+1210   	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_sweep_volt_end);
    564a:	21 e0       	ldi	r18, 0x01	; 1
    564c:	34 e1       	ldi	r19, 0x14	; 20
    564e:	40 e0       	ldi	r20, 0x00	; 0
    5650:	50 e0       	ldi	r21, 0x00	; 0
    5652:	b8 01       	movw	r22, r16
    5654:	8f e7       	ldi	r24, 0x7F	; 127
    5656:	91 e0       	ldi	r25, 0x01	; 1
    5658:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_Z9set_int16PKhP8as_classMS1_FhiE>
    565c:	89 83       	std	Y+1, r24	; 0x01
    565e:	55 c2       	rjmp	.+1194   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change sweep rate.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '0' && arr.rx_array[2] == ' ')
    5660:	82 33       	cpi	r24, 0x32	; 50
    5662:	09 f0       	breq	.+2      	; 0x5666 <_Z14uart_tokenizerhP8as_class+0xa90>
    5664:	8d c1       	rjmp	.+794    	; 0x5980 <_Z14uart_tokenizerhP8as_class+0xdaa>
    5666:	80 91 7d 01 	lds	r24, 0x017D
    566a:	80 33       	cpi	r24, 0x30	; 48
    566c:	79 f4       	brne	.+30     	; 0x568c <_Z14uart_tokenizerhP8as_class+0xab6>
    566e:	90 91 7e 01 	lds	r25, 0x017E
    5672:	90 32       	cpi	r25, 0x20	; 32
    5674:	e1 f4       	brne	.+56     	; 0x56ae <_Z14uart_tokenizerhP8as_class+0xad8>
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_sweep_rate);
    5676:	26 e1       	ldi	r18, 0x16	; 22
    5678:	34 e1       	ldi	r19, 0x14	; 20
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	50 e0       	ldi	r21, 0x00	; 0
    567e:	b8 01       	movw	r22, r16
    5680:	8f e7       	ldi	r24, 0x7F	; 127
    5682:	91 e0       	ldi	r25, 0x01	; 1
    5684:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
    5688:	89 83       	std	Y+1, r24	; 0x01
    568a:	3f c2       	rjmp	.+1150   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change if sweep function is cyclic.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '1' && arr.rx_array[2] == ' ')
    568c:	81 33       	cpi	r24, 0x31	; 49
    568e:	79 f4       	brne	.+30     	; 0x56ae <_Z14uart_tokenizerhP8as_class+0xad8>
    5690:	90 91 7e 01 	lds	r25, 0x017E
    5694:	90 32       	cpi	r25, 0x20	; 32
    5696:	e9 f4       	brne	.+58     	; 0x56d2 <_Z14uart_tokenizerhP8as_class+0xafc>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_sweep_cyclic);
    5698:	2a e2       	ldi	r18, 0x2A	; 42
    569a:	34 e1       	ldi	r19, 0x14	; 20
    569c:	40 e0       	ldi	r20, 0x00	; 0
    569e:	50 e0       	ldi	r21, 0x00	; 0
    56a0:	b8 01       	movw	r22, r16
    56a2:	8f e7       	ldi	r24, 0x7F	; 127
    56a4:	91 e0       	ldi	r25, 0x01	; 1
    56a6:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
    56aa:	89 83       	std	Y+1, r24	; 0x01
    56ac:	2e c2       	rjmp	.+1116   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change number of sweep cycles.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '2' && arr.rx_array[2] == ' ')
    56ae:	82 33       	cpi	r24, 0x32	; 50
    56b0:	81 f4       	brne	.+32     	; 0x56d2 <_Z14uart_tokenizerhP8as_class+0xafc>
    56b2:	90 91 7e 01 	lds	r25, 0x017E
    56b6:	90 32       	cpi	r25, 0x20	; 32
    56b8:	09 f0       	breq	.+2      	; 0x56bc <_Z14uart_tokenizerhP8as_class+0xae6>
    56ba:	5b c0       	rjmp	.+182    	; 0x5772 <_Z14uart_tokenizerhP8as_class+0xb9c>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_sweep_cycles);
    56bc:	21 e3       	ldi	r18, 0x31	; 49
    56be:	34 e1       	ldi	r19, 0x14	; 20
    56c0:	40 e0       	ldi	r20, 0x00	; 0
    56c2:	50 e0       	ldi	r21, 0x00	; 0
    56c4:	b8 01       	movw	r22, r16
    56c6:	8f e7       	ldi	r24, 0x7F	; 127
    56c8:	91 e0       	ldi	r25, 0x01	; 1
    56ca:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z6set_u8PKhP8as_classMS1_FhhE>
    56ce:	89 83       	std	Y+1, r24	; 0x01
    56d0:	1c c2       	rjmp	.+1080   	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change square wave start voltage.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    56d2:	83 33       	cpi	r24, 0x33	; 51
    56d4:	09 f0       	breq	.+2      	; 0x56d8 <_Z14uart_tokenizerhP8as_class+0xb02>
    56d6:	4d c0       	rjmp	.+154    	; 0x5772 <_Z14uart_tokenizerhP8as_class+0xb9c>
    56d8:	90 91 7e 01 	lds	r25, 0x017E
    56dc:	90 32       	cpi	r25, 0x20	; 32
    56de:	09 f0       	breq	.+2      	; 0x56e2 <_Z14uart_tokenizerhP8as_class+0xb0c>
    56e0:	98 c0       	rjmp	.+304    	; 0x5812 <_Z14uart_tokenizerhP8as_class+0xc3c>
	{
		int32_t start_v;
		
		//Attempt to convert user input to number.
		start_v = string_to_int(&arr.rx_array[3], &errno);
    56e2:	4d e0       	ldi	r20, 0x0D	; 13
    56e4:	be 01       	movw	r22, r28
    56e6:	6f 5f       	subi	r22, 0xFF	; 255
    56e8:	7f 4f       	sbci	r23, 0xFF	; 255
    56ea:	8f e7       	ldi	r24, 0x7F	; 127
    56ec:	91 e0       	ldi	r25, 0x01	; 1
    56ee:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_Z13string_to_intPKhPhh>
    56f2:	6b 01       	movw	r12, r22
    56f4:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
    56f8:	88 23       	and	r24, r24
    56fa:	19 f0       	breq	.+6      	; 0x5702 <_Z14uart_tokenizerhP8as_class+0xb2c>
		{
			errno = ER_ERROR;	
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	89 83       	std	Y+1, r24	; 0x01
    5700:	07 c2       	rjmp	.+1038   	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		//Check to make sure range is valid.
		else if(start_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    5702:	c8 01       	movw	r24, r16
    5704:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5708:	aa 27       	eor	r26, r26
    570a:	97 fd       	sbrc	r25, 7
    570c:	a0 95       	com	r26
    570e:	ba 2f       	mov	r27, r26
    5710:	8c 0d       	add	r24, r12
    5712:	9d 1d       	adc	r25, r13
    5714:	ae 1d       	adc	r26, r14
    5716:	bf 1d       	adc	r27, r15
    5718:	83 37       	cpi	r24, 0x73	; 115
    571a:	96 40       	sbci	r25, 0x06	; 6
    571c:	a1 05       	cpc	r26, r1
    571e:	b1 05       	cpc	r27, r1
    5720:	3c f0       	brlt	.+14     	; 0x5730 <_Z14uart_tokenizerhP8as_class+0xb5a>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp High "));
    5722:	8f e3       	ldi	r24, 0x3F	; 63
    5724:	95 e0       	ldi	r25, 0x05	; 5
    5726:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    572a:	81 e0       	ldi	r24, 0x01	; 1
    572c:	89 83       	std	Y+1, r24	; 0x01
    572e:	f0 c1       	rjmp	.+992    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(start_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    5730:	c8 01       	movw	r24, r16
    5732:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5736:	aa 27       	eor	r26, r26
    5738:	97 fd       	sbrc	r25, 7
    573a:	a0 95       	com	r26
    573c:	ba 2f       	mov	r27, r26
    573e:	a7 01       	movw	r20, r14
    5740:	96 01       	movw	r18, r12
    5742:	28 1b       	sub	r18, r24
    5744:	39 0b       	sbc	r19, r25
    5746:	4a 0b       	sbc	r20, r26
    5748:	5b 0b       	sbc	r21, r27
    574a:	da 01       	movw	r26, r20
    574c:	c9 01       	movw	r24, r18
    574e:	8e 38       	cpi	r24, 0x8E	; 142
    5750:	99 4f       	sbci	r25, 0xF9	; 249
    5752:	af 4f       	sbci	r26, 0xFF	; 255
    5754:	bf 4f       	sbci	r27, 0xFF	; 255
    5756:	3c f4       	brge	.+14     	; 0x5766 <_Z14uart_tokenizerhP8as_class+0xb90>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp Low "));
    5758:	80 e3       	ldi	r24, 0x30	; 48
    575a:	95 e0       	ldi	r25, 0x05	; 5
    575c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	89 83       	std	Y+1, r24	; 0x01
    5764:	d5 c1       	rjmp	.+938    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else
		{
			errno = as->set_square_volt_start(start_v);
    5766:	b6 01       	movw	r22, r12
    5768:	c8 01       	movw	r24, r16
    576a:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN8as_class21set_square_volt_startEi>
    576e:	89 83       	std	Y+1, r24	; 0x01
    5770:	cc c1       	rjmp	.+920    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
		}
	}
	
	//Change square wave end voltage.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    5772:	84 33       	cpi	r24, 0x34	; 52
    5774:	09 f0       	breq	.+2      	; 0x5778 <_Z14uart_tokenizerhP8as_class+0xba2>
    5776:	4d c0       	rjmp	.+154    	; 0x5812 <_Z14uart_tokenizerhP8as_class+0xc3c>
    5778:	90 91 7e 01 	lds	r25, 0x017E
    577c:	90 32       	cpi	r25, 0x20	; 32
    577e:	09 f0       	breq	.+2      	; 0x5782 <_Z14uart_tokenizerhP8as_class+0xbac>
    5780:	c2 c0       	rjmp	.+388    	; 0x5906 <_Z14uart_tokenizerhP8as_class+0xd30>
	{
		int32_t end_v;
		
		//Attempt to convert user input to number.
		end_v = string_to_int(&arr.rx_array[3], &errno);
    5782:	4d e0       	ldi	r20, 0x0D	; 13
    5784:	be 01       	movw	r22, r28
    5786:	6f 5f       	subi	r22, 0xFF	; 255
    5788:	7f 4f       	sbci	r23, 0xFF	; 255
    578a:	8f e7       	ldi	r24, 0x7F	; 127
    578c:	91 e0       	ldi	r25, 0x01	; 1
    578e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_Z13string_to_intPKhPhh>
    5792:	6b 01       	movw	r12, r22
    5794:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    5796:	89 81       	ldd	r24, Y+1	; 0x01
    5798:	88 23       	and	r24, r24
    579a:	19 f0       	breq	.+6      	; 0x57a2 <_Z14uart_tokenizerhP8as_class+0xbcc>
		{
			errno = ER_ERROR;
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	89 83       	std	Y+1, r24	; 0x01
    57a0:	b7 c1       	rjmp	.+878    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		//Check to make sure range is valid.
		else if(end_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    57a2:	c8 01       	movw	r24, r16
    57a4:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    57a8:	aa 27       	eor	r26, r26
    57aa:	97 fd       	sbrc	r25, 7
    57ac:	a0 95       	com	r26
    57ae:	ba 2f       	mov	r27, r26
    57b0:	8c 0d       	add	r24, r12
    57b2:	9d 1d       	adc	r25, r13
    57b4:	ae 1d       	adc	r26, r14
    57b6:	bf 1d       	adc	r27, r15
    57b8:	83 37       	cpi	r24, 0x73	; 115
    57ba:	96 40       	sbci	r25, 0x06	; 6
    57bc:	a1 05       	cpc	r26, r1
    57be:	b1 05       	cpc	r27, r1
    57c0:	3c f0       	brlt	.+14     	; 0x57d0 <_Z14uart_tokenizerhP8as_class+0xbfa>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp High "));
    57c2:	82 e2       	ldi	r24, 0x22	; 34
    57c4:	95 e0       	ldi	r25, 0x05	; 5
    57c6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	89 83       	std	Y+1, r24	; 0x01
    57ce:	a0 c1       	rjmp	.+832    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(end_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    57d0:	c8 01       	movw	r24, r16
    57d2:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    57d6:	aa 27       	eor	r26, r26
    57d8:	97 fd       	sbrc	r25, 7
    57da:	a0 95       	com	r26
    57dc:	ba 2f       	mov	r27, r26
    57de:	a7 01       	movw	r20, r14
    57e0:	96 01       	movw	r18, r12
    57e2:	28 1b       	sub	r18, r24
    57e4:	39 0b       	sbc	r19, r25
    57e6:	4a 0b       	sbc	r20, r26
    57e8:	5b 0b       	sbc	r21, r27
    57ea:	da 01       	movw	r26, r20
    57ec:	c9 01       	movw	r24, r18
    57ee:	8e 38       	cpi	r24, 0x8E	; 142
    57f0:	99 4f       	sbci	r25, 0xF9	; 249
    57f2:	af 4f       	sbci	r26, 0xFF	; 255
    57f4:	bf 4f       	sbci	r27, 0xFF	; 255
    57f6:	3c f4       	brge	.+14     	; 0x5806 <_Z14uart_tokenizerhP8as_class+0xc30>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp Low "));
    57f8:	85 e1       	ldi	r24, 0x15	; 21
    57fa:	95 e0       	ldi	r25, 0x05	; 5
    57fc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    5800:	81 e0       	ldi	r24, 0x01	; 1
    5802:	89 83       	std	Y+1, r24	; 0x01
    5804:	85 c1       	rjmp	.+778    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else
		{
			errno = as->set_square_volt_end(end_v);
    5806:	b6 01       	movw	r22, r12
    5808:	c8 01       	movw	r24, r16
    580a:	0e 94 55 14 	call	0x28aa	; 0x28aa <_ZN8as_class19set_square_volt_endEi>
    580e:	89 83       	std	Y+1, r24	; 0x01
    5810:	7c c1       	rjmp	.+760    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
		}
	}
	
	//Change square wave amplitude.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    5812:	85 33       	cpi	r24, 0x35	; 53
    5814:	09 f0       	breq	.+2      	; 0x5818 <_Z14uart_tokenizerhP8as_class+0xc42>
    5816:	77 c0       	rjmp	.+238    	; 0x5906 <_Z14uart_tokenizerhP8as_class+0xd30>
    5818:	90 91 7e 01 	lds	r25, 0x017E
    581c:	90 32       	cpi	r25, 0x20	; 32
    581e:	09 f0       	breq	.+2      	; 0x5822 <_Z14uart_tokenizerhP8as_class+0xc4c>
    5820:	83 c0       	rjmp	.+262    	; 0x5928 <_Z14uart_tokenizerhP8as_class+0xd52>
	{
		uint32_t amp;
		
		//Attempt to convert user input to number.
		amp = string_to_u32(&arr.rx_array[3], &errno);
    5822:	4d e0       	ldi	r20, 0x0D	; 13
    5824:	be 01       	movw	r22, r28
    5826:	6f 5f       	subi	r22, 0xFF	; 255
    5828:	7f 4f       	sbci	r23, 0xFF	; 255
    582a:	8f e7       	ldi	r24, 0x7F	; 127
    582c:	91 e0       	ldi	r25, 0x01	; 1
    582e:	0e 94 3a 1c 	call	0x3874	; 0x3874 <_Z13string_to_u32PKhPhh>
    5832:	6b 01       	movw	r12, r22
    5834:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    5836:	89 81       	ldd	r24, Y+1	; 0x01
    5838:	88 23       	and	r24, r24
    583a:	19 f0       	breq	.+6      	; 0x5842 <_Z14uart_tokenizerhP8as_class+0xc6c>
		{
			errno = ER_ERROR;
    583c:	81 e0       	ldi	r24, 0x01	; 1
    583e:	89 83       	std	Y+1, r24	; 0x01
    5840:	67 c1       	rjmp	.+718    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		//Check to make sure range is valid.
		else if(as->get_square_volt_start() + (int32_t)amp > SQUARE_VOLT_MAX)
    5842:	c8 01       	movw	r24, r16
    5844:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    5848:	aa 27       	eor	r26, r26
    584a:	97 fd       	sbrc	r25, 7
    584c:	a0 95       	com	r26
    584e:	ba 2f       	mov	r27, r26
    5850:	8c 0d       	add	r24, r12
    5852:	9d 1d       	adc	r25, r13
    5854:	ae 1d       	adc	r26, r14
    5856:	bf 1d       	adc	r27, r15
    5858:	83 37       	cpi	r24, 0x73	; 115
    585a:	96 40       	sbci	r25, 0x06	; 6
    585c:	a1 05       	cpc	r26, r1
    585e:	b1 05       	cpc	r27, r1
    5860:	3c f0       	brlt	.+14     	; 0x5870 <_Z14uart_tokenizerhP8as_class+0xc9a>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp High "));
    5862:	85 e0       	ldi	r24, 0x05	; 5
    5864:	95 e0       	ldi	r25, 0x05	; 5
    5866:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	89 83       	std	Y+1, r24	; 0x01
    586e:	50 c1       	rjmp	.+672    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(as->get_square_volt_start() - (int32_t)amp < SQUARE_VOLT_MIN)
    5870:	c8 01       	movw	r24, r16
    5872:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    5876:	aa 27       	eor	r26, r26
    5878:	97 fd       	sbrc	r25, 7
    587a:	a0 95       	com	r26
    587c:	ba 2f       	mov	r27, r26
    587e:	8c 19       	sub	r24, r12
    5880:	9d 09       	sbc	r25, r13
    5882:	ae 09       	sbc	r26, r14
    5884:	bf 09       	sbc	r27, r15
    5886:	8e 38       	cpi	r24, 0x8E	; 142
    5888:	99 4f       	sbci	r25, 0xF9	; 249
    588a:	af 4f       	sbci	r26, 0xFF	; 255
    588c:	bf 4f       	sbci	r27, 0xFF	; 255
    588e:	3c f4       	brge	.+14     	; 0x589e <_Z14uart_tokenizerhP8as_class+0xcc8>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp Low "));
    5890:	86 ef       	ldi	r24, 0xF6	; 246
    5892:	94 e0       	ldi	r25, 0x04	; 4
    5894:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	89 83       	std	Y+1, r24	; 0x01
    589c:	39 c1       	rjmp	.+626    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(as->get_square_volt_end() + (int32_t)amp > SQUARE_VOLT_MAX)
    589e:	c8 01       	movw	r24, r16
    58a0:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    58a4:	aa 27       	eor	r26, r26
    58a6:	97 fd       	sbrc	r25, 7
    58a8:	a0 95       	com	r26
    58aa:	ba 2f       	mov	r27, r26
    58ac:	8c 0d       	add	r24, r12
    58ae:	9d 1d       	adc	r25, r13
    58b0:	ae 1d       	adc	r26, r14
    58b2:	bf 1d       	adc	r27, r15
    58b4:	83 37       	cpi	r24, 0x73	; 115
    58b6:	96 40       	sbci	r25, 0x06	; 6
    58b8:	a1 05       	cpc	r26, r1
    58ba:	b1 05       	cpc	r27, r1
    58bc:	3c f0       	brlt	.+14     	; 0x58cc <_Z14uart_tokenizerhP8as_class+0xcf6>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp High "));
    58be:	88 ee       	ldi	r24, 0xE8	; 232
    58c0:	94 e0       	ldi	r25, 0x04	; 4
    58c2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    58c6:	81 e0       	ldi	r24, 0x01	; 1
    58c8:	89 83       	std	Y+1, r24	; 0x01
    58ca:	22 c1       	rjmp	.+580    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else if(as->get_square_volt_end() - (int32_t)amp < SQUARE_VOLT_MIN)
    58cc:	c8 01       	movw	r24, r16
    58ce:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    58d2:	aa 27       	eor	r26, r26
    58d4:	97 fd       	sbrc	r25, 7
    58d6:	a0 95       	com	r26
    58d8:	ba 2f       	mov	r27, r26
    58da:	8c 19       	sub	r24, r12
    58dc:	9d 09       	sbc	r25, r13
    58de:	ae 09       	sbc	r26, r14
    58e0:	bf 09       	sbc	r27, r15
    58e2:	8e 38       	cpi	r24, 0x8E	; 142
    58e4:	99 4f       	sbci	r25, 0xF9	; 249
    58e6:	af 4f       	sbci	r26, 0xFF	; 255
    58e8:	bf 4f       	sbci	r27, 0xFF	; 255
    58ea:	3c f4       	brge	.+14     	; 0x58fa <_Z14uart_tokenizerhP8as_class+0xd24>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp Low "));
    58ec:	8b ed       	ldi	r24, 0xDB	; 219
    58ee:	94 e0       	ldi	r25, 0x04	; 4
    58f0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	89 83       	std	Y+1, r24	; 0x01
    58f8:	0b c1       	rjmp	.+534    	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
		}
		else
		{
			errno = as->set_square_amp(amp);
    58fa:	b6 01       	movw	r22, r12
    58fc:	c8 01       	movw	r24, r16
    58fe:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN8as_class14set_square_ampEj>
    5902:	89 83       	std	Y+1, r24	; 0x01
    5904:	02 c1       	rjmp	.+516    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
		}
	}
	
	//Change square wave increment.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    5906:	86 33       	cpi	r24, 0x36	; 54
    5908:	79 f4       	brne	.+30     	; 0x5928 <_Z14uart_tokenizerhP8as_class+0xd52>
    590a:	90 91 7e 01 	lds	r25, 0x017E
    590e:	90 32       	cpi	r25, 0x20	; 32
    5910:	e1 f4       	brne	.+56     	; 0x594a <_Z14uart_tokenizerhP8as_class+0xd74>
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_square_inc);
    5912:	29 e7       	ldi	r18, 0x79	; 121
    5914:	34 e1       	ldi	r19, 0x14	; 20
    5916:	40 e0       	ldi	r20, 0x00	; 0
    5918:	50 e0       	ldi	r21, 0x00	; 0
    591a:	b8 01       	movw	r22, r16
    591c:	8f e7       	ldi	r24, 0x7F	; 127
    591e:	91 e0       	ldi	r25, 0x01	; 1
    5920:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
    5924:	89 83       	std	Y+1, r24	; 0x01
    5926:	f1 c0       	rjmp	.+482    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>

	//Change square wave period.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '7' && arr.rx_array[2] == ' ')
    5928:	87 33       	cpi	r24, 0x37	; 55
    592a:	79 f4       	brne	.+30     	; 0x594a <_Z14uart_tokenizerhP8as_class+0xd74>
    592c:	90 91 7e 01 	lds	r25, 0x017E
    5930:	90 32       	cpi	r25, 0x20	; 32
    5932:	c1 f4       	brne	.+48     	; 0x5964 <_Z14uart_tokenizerhP8as_class+0xd8e>
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_square_period);
    5934:	28 e8       	ldi	r18, 0x88	; 136
    5936:	34 e1       	ldi	r19, 0x14	; 20
    5938:	40 e0       	ldi	r20, 0x00	; 0
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	b8 01       	movw	r22, r16
    593e:	8f e7       	ldi	r24, 0x7F	; 127
    5940:	91 e0       	ldi	r25, 0x01	; 1
    5942:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
    5946:	89 83       	std	Y+1, r24	; 0x01
    5948:	e0 c0       	rjmp	.+448    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Append arbitrary waveform data to end of saved list.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '8' && arr.rx_array[2] == ' ')
    594a:	88 33       	cpi	r24, 0x38	; 56
    594c:	59 f4       	brne	.+22     	; 0x5964 <_Z14uart_tokenizerhP8as_class+0xd8e>
    594e:	80 91 7e 01 	lds	r24, 0x017E
    5952:	80 32       	cpi	r24, 0x20	; 32
    5954:	09 f0       	breq	.+2      	; 0x5958 <_Z14uart_tokenizerhP8as_class+0xd82>
    5956:	d6 c0       	rjmp	.+428    	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = arb_append(&(arr.rx_array[3]));
    5958:	8f e7       	ldi	r24, 0x7F	; 127
    595a:	91 e0       	ldi	r25, 0x01	; 1
    595c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <_Z10arb_appendPKh>
    5960:	89 83       	std	Y+1, r24	; 0x01
    5962:	d3 c0       	rjmp	.+422    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Replace arbitrary waveform data at specified location.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '9' && arr.rx_array[2] == ' ')
    5964:	89 33       	cpi	r24, 0x39	; 57
    5966:	09 f0       	breq	.+2      	; 0x596a <_Z14uart_tokenizerhP8as_class+0xd94>
    5968:	cd c0       	rjmp	.+410    	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
    596a:	80 91 7e 01 	lds	r24, 0x017E
    596e:	80 32       	cpi	r24, 0x20	; 32
    5970:	09 f0       	breq	.+2      	; 0x5974 <_Z14uart_tokenizerhP8as_class+0xd9e>
    5972:	c8 c0       	rjmp	.+400    	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = arb_replace(&(arr.rx_array[3]));
    5974:	8f e7       	ldi	r24, 0x7F	; 127
    5976:	91 e0       	ldi	r25, 0x01	; 1
    5978:	0e 94 94 22 	call	0x4528	; 0x4528 <_Z11arb_replacePKh>
    597c:	89 83       	std	Y+1, r24	; 0x01
    597e:	c5 c0       	rjmp	.+394    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Delete last entry in arbitrary waveform data list.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '0' && arr.rx_array[2] == '\r')
    5980:	83 33       	cpi	r24, 0x33	; 51
    5982:	09 f0       	breq	.+2      	; 0x5986 <_Z14uart_tokenizerhP8as_class+0xdb0>
    5984:	bf c0       	rjmp	.+382    	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
    5986:	80 91 7d 01 	lds	r24, 0x017D
    598a:	80 33       	cpi	r24, 0x30	; 48
    598c:	a1 f4       	brne	.+40     	; 0x59b6 <_Z14uart_tokenizerhP8as_class+0xde0>
    598e:	90 91 7e 01 	lds	r25, 0x017E
    5992:	9d 30       	cpi	r25, 0x0D	; 13
    5994:	f9 f4       	brne	.+62     	; 0x59d4 <_Z14uart_tokenizerhP8as_class+0xdfe>
	{
		uint8_t entries;
		
		//Get number of entries already in list.
		entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    5996:	86 e0       	ldi	r24, 0x06	; 6
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
		
		if(entries)//decrement and save.
    599e:	88 23       	and	r24, r24
    59a0:	41 f0       	breq	.+16     	; 0x59b2 <_Z14uart_tokenizerhP8as_class+0xddc>
    59a2:	99 27       	eor	r25, r25
			atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries - 1);
    59a4:	bc 01       	movw	r22, r24
    59a6:	61 50       	subi	r22, 0x01	; 1
    59a8:	71 09       	sbc	r23, r1
    59aa:	86 e0       	ldi	r24, 0x06	; 6
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
		
		errno = ER_NO_ERROR;
    59b2:	19 82       	std	Y+1, r1	; 0x01
    59b4:	b0 c0       	rjmp	.+352    	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xf40>
	}
	
	//Delete all stored arbitrary waveform data.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '1' && arr.rx_array[2] == '\r')
    59b6:	81 33       	cpi	r24, 0x31	; 49
    59b8:	69 f4       	brne	.+26     	; 0x59d4 <_Z14uart_tokenizerhP8as_class+0xdfe>
    59ba:	90 91 7e 01 	lds	r25, 0x017E
    59be:	9d 30       	cpi	r25, 0x0D	; 13
    59c0:	09 f0       	breq	.+2      	; 0x59c4 <_Z14uart_tokenizerhP8as_class+0xdee>
    59c2:	5c c0       	rjmp	.+184    	; 0x5a7c <_Z14uart_tokenizerhP8as_class+0xea6>
	{
		atmega_eeprom::write_word((uint16_t *)ARB_NUM, 0);
    59c4:	60 e0       	ldi	r22, 0x00	; 0
    59c6:	70 e0       	ldi	r23, 0x00	; 0
    59c8:	86 e0       	ldi	r24, 0x06	; 6
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
		errno = ER_NO_ERROR;
    59d0:	19 82       	std	Y+1, r1	; 0x01
    59d2:	a1 c0       	rjmp	.+322    	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xf40>
	}
	
	//Print all saved arbitrary waveform data.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '2' && arr.rx_array[2] == '\r')
    59d4:	82 33       	cpi	r24, 0x32	; 50
    59d6:	09 f0       	breq	.+2      	; 0x59da <_Z14uart_tokenizerhP8as_class+0xe04>
    59d8:	51 c0       	rjmp	.+162    	; 0x5a7c <_Z14uart_tokenizerhP8as_class+0xea6>
    59da:	90 91 7e 01 	lds	r25, 0x017E
    59de:	9d 30       	cpi	r25, 0x0D	; 13
    59e0:	09 f0       	breq	.+2      	; 0x59e4 <_Z14uart_tokenizerhP8as_class+0xe0e>
    59e2:	5d c0       	rjmp	.+186    	; 0x5a9e <_Z14uart_tokenizerhP8as_class+0xec8>
	{
		uint16_t entries;
		int16_t val1, val2;
		
		//Get number of entries already in list.
		entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    59e4:	86 e0       	ldi	r24, 0x06	; 6
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    59ec:	8c 01       	movw	r16, r24
		
		if(!entries)
    59ee:	00 97       	sbiw	r24, 0x00	; 0
    59f0:	29 f4       	brne	.+10     	; 0x59fc <_Z14uart_tokenizerhP8as_class+0xe26>
		{
			atmega_uart::tx_string_p(PSTR("Memory Empty\r"));
    59f2:	8d ec       	ldi	r24, 0xCD	; 205
    59f4:	94 e0       	ldi	r25, 0x04	; 4
    59f6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
			return;
    59fa:	8f c0       	rjmp	.+286    	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
		}
		
		//Put header at top of data.
		atmega_uart::tx_string_p(PSTR("StartmV EndmV Rate\r"));
    59fc:	89 eb       	ldi	r24, 0xB9	; 185
    59fe:	94 e0       	ldi	r25, 0x04	; 4
    5a00:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Get values from memory.
		for (uint8_t i = 0; i < entries; i++)
    5a04:	b1 2c       	mov	r11, r1
		{
			val1 = atmega_eeprom::read_word((uint16_t *)(ARB_START + 6 * i));
    5a06:	8b 2d       	mov	r24, r11
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	9c 01       	movw	r18, r24
    5a0c:	22 0f       	add	r18, r18
    5a0e:	33 1f       	adc	r19, r19
    5a10:	82 0f       	add	r24, r18
    5a12:	93 1f       	adc	r25, r19
    5a14:	7c 01       	movw	r14, r24
    5a16:	ee 0c       	add	r14, r14
    5a18:	ff 1c       	adc	r15, r15
    5a1a:	c7 01       	movw	r24, r14
    5a1c:	08 96       	adiw	r24, 0x08	; 8
    5a1e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    5a22:	4c 01       	movw	r8, r24
			val2 = atmega_eeprom::read_word((uint16_t *)(ARB_START + 2 + 6 * i));
    5a24:	c7 01       	movw	r24, r14
    5a26:	0a 96       	adiw	r24, 0x0a	; 10
    5a28:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    5a2c:	6c 01       	movw	r12, r24
			tx_int_to_ascii(val1);
    5a2e:	b4 01       	movw	r22, r8
    5a30:	88 27       	eor	r24, r24
    5a32:	77 fd       	sbrc	r23, 7
    5a34:	80 95       	com	r24
    5a36:	98 2f       	mov	r25, r24
    5a38:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
			atmega_uart::tx_byte(' ');
    5a3c:	80 e2       	ldi	r24, 0x20	; 32
    5a3e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
			tx_int_to_ascii(val2);
    5a42:	b6 01       	movw	r22, r12
    5a44:	88 27       	eor	r24, r24
    5a46:	77 fd       	sbrc	r23, 7
    5a48:	80 95       	com	r24
    5a4a:	98 2f       	mov	r25, r24
    5a4c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_Z15tx_int_to_asciil>
			atmega_uart::tx_byte(' ');
    5a50:	80 e2       	ldi	r24, 0x20	; 32
    5a52:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
			tx_u32_to_ascii(atmega_eeprom::read_word((uint16_t *)(ARB_START + 4 + 6 * i)));
    5a56:	c7 01       	movw	r24, r14
    5a58:	0c 96       	adiw	r24, 0x0c	; 12
    5a5a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    5a5e:	bc 01       	movw	r22, r24
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_Z15tx_u32_to_asciim>
			atmega_uart::tx_byte('\r');
    5a68:	8d e0       	ldi	r24, 0x0D	; 13
    5a6a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		
		//Put header at top of data.
		atmega_uart::tx_string_p(PSTR("StartmV EndmV Rate\r"));
		
		//Get values from memory.
		for (uint8_t i = 0; i < entries; i++)
    5a6e:	b3 94       	inc	r11
    5a70:	8b 2d       	mov	r24, r11
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	80 17       	cp	r24, r16
    5a76:	91 07       	cpc	r25, r17
    5a78:	30 f2       	brcs	.-116    	; 0x5a06 <_Z14uart_tokenizerhP8as_class+0xe30>
    5a7a:	4f c0       	rjmp	.+158    	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
		}
		return;
	}
	
	//Set if arbitrary waveform test is cyclic or not.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    5a7c:	83 33       	cpi	r24, 0x33	; 51
    5a7e:	79 f4       	brne	.+30     	; 0x5a9e <_Z14uart_tokenizerhP8as_class+0xec8>
    5a80:	90 91 7e 01 	lds	r25, 0x017E
    5a84:	90 32       	cpi	r25, 0x20	; 32
    5a86:	e1 f4       	brne	.+56     	; 0x5ac0 <_Z14uart_tokenizerhP8as_class+0xeea>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_arb_cyclic);
    5a88:	2c e9       	ldi	r18, 0x9C	; 156
    5a8a:	34 e1       	ldi	r19, 0x14	; 20
    5a8c:	40 e0       	ldi	r20, 0x00	; 0
    5a8e:	50 e0       	ldi	r21, 0x00	; 0
    5a90:	b8 01       	movw	r22, r16
    5a92:	8f e7       	ldi	r24, 0x7F	; 127
    5a94:	91 e0       	ldi	r25, 0x01	; 1
    5a96:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
    5a9a:	89 83       	std	Y+1, r24	; 0x01
    5a9c:	36 c0       	rjmp	.+108    	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Change number of arbitrary waveform cycles.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    5a9e:	84 33       	cpi	r24, 0x34	; 52
    5aa0:	79 f4       	brne	.+30     	; 0x5ac0 <_Z14uart_tokenizerhP8as_class+0xeea>
    5aa2:	90 91 7e 01 	lds	r25, 0x017E
    5aa6:	90 32       	cpi	r25, 0x20	; 32
    5aa8:	e1 f4       	brne	.+56     	; 0x5ae2 <_Z14uart_tokenizerhP8as_class+0xf0c>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_arb_cycles);
    5aaa:	23 ea       	ldi	r18, 0xA3	; 163
    5aac:	34 e1       	ldi	r19, 0x14	; 20
    5aae:	40 e0       	ldi	r20, 0x00	; 0
    5ab0:	50 e0       	ldi	r21, 0x00	; 0
    5ab2:	b8 01       	movw	r22, r16
    5ab4:	8f e7       	ldi	r24, 0x7F	; 127
    5ab6:	91 e0       	ldi	r25, 0x01	; 1
    5ab8:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z6set_u8PKhP8as_classMS1_FhhE>
    5abc:	89 83       	std	Y+1, r24	; 0x01
    5abe:	25 c0       	rjmp	.+74     	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Enable software filter.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    5ac0:	85 33       	cpi	r24, 0x35	; 53
    5ac2:	79 f4       	brne	.+30     	; 0x5ae2 <_Z14uart_tokenizerhP8as_class+0xf0c>
    5ac4:	80 91 7e 01 	lds	r24, 0x017E
    5ac8:	80 32       	cpi	r24, 0x20	; 32
    5aca:	e1 f4       	brne	.+56     	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_soft_filt);
    5acc:	22 eb       	ldi	r18, 0xB2	; 178
    5ace:	34 e1       	ldi	r19, 0x14	; 20
    5ad0:	40 e0       	ldi	r20, 0x00	; 0
    5ad2:	50 e0       	ldi	r21, 0x00	; 0
    5ad4:	b8 01       	movw	r22, r16
    5ad6:	8f e7       	ldi	r24, 0x7F	; 127
    5ad8:	91 e0       	ldi	r25, 0x01	; 1
    5ada:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
    5ade:	89 83       	std	Y+1, r24	; 0x01
    5ae0:	14 c0       	rjmp	.+40     	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	//Select which software filter to use.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    5ae2:	86 33       	cpi	r24, 0x36	; 54
    5ae4:	79 f4       	brne	.+30     	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
    5ae6:	80 91 7e 01 	lds	r24, 0x017E
    5aea:	80 32       	cpi	r24, 0x20	; 32
    5aec:	59 f4       	brne	.+22     	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xf2e>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_soft_sel);
    5aee:	29 eb       	ldi	r18, 0xB9	; 185
    5af0:	34 e1       	ldi	r19, 0x14	; 20
    5af2:	40 e0       	ldi	r20, 0x00	; 0
    5af4:	50 e0       	ldi	r21, 0x00	; 0
    5af6:	b8 01       	movw	r22, r16
    5af8:	8f e7       	ldi	r24, 0x7F	; 127
    5afa:	91 e0       	ldi	r25, 0x01	; 1
    5afc:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z6set_u8PKhP8as_classMS1_FhhE>
    5b00:	89 83       	std	Y+1, r24	; 0x01
    5b02:	03 c0       	rjmp	.+6      	; 0x5b0a <_Z14uart_tokenizerhP8as_class+0xf34>
	
	else //Invalid selection.
		errno = ER_ERROR;
    5b04:	81 e0       	ldi	r24, 0x01	; 1
    5b06:	89 83       	std	Y+1, r24	; 0x01
    5b08:	03 c0       	rjmp	.+6      	; 0x5b10 <_Z14uart_tokenizerhP8as_class+0xf3a>
	
	if(errno)	//Error out if there was a problem.
    5b0a:	89 81       	ldd	r24, Y+1	; 0x01
    5b0c:	88 23       	and	r24, r24
    5b0e:	19 f0       	breq	.+6      	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xf40>
	{
		uart_err();
    5b10:	0e 94 db 21 	call	0x43b6	; 0x43b6 <_Z8uart_errv>
		return;
    5b14:	02 c0       	rjmp	.+4      	; 0x5b1a <_Z14uart_tokenizerhP8as_class+0xf44>
	}
	
	uart_ok();	
    5b16:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <_Z7uart_okv>
	return;
}
    5b1a:	0f 90       	pop	r0
    5b1c:	df 91       	pop	r29
    5b1e:	cf 91       	pop	r28
    5b20:	1f 91       	pop	r17
    5b22:	0f 91       	pop	r16
    5b24:	ff 90       	pop	r15
    5b26:	ef 90       	pop	r14
    5b28:	df 90       	pop	r13
    5b2a:	cf 90       	pop	r12
    5b2c:	bf 90       	pop	r11
    5b2e:	9f 90       	pop	r9
    5b30:	8f 90       	pop	r8
    5b32:	08 95       	ret

00005b34 <_Z15bin_build_arrayh>:
//Update input array function(binary).
void bin_build_array(uint8_t rx_byte)
{
	//Exit if an overflow occurred.  The tokenizer needs to clear it
	//before any new data can be processed.
	if(bin_overflowed)
    5b34:	90 91 79 01 	lds	r25, 0x0179
    5b38:	91 11       	cpse	r25, r1
    5b3a:	14 c0       	rjmp	.+40     	; 0x5b64 <_Z15bin_build_arrayh+0x30>
	{
		return;
	}
	
	//Add byte to array.
	arr.bin_rx[bin_index++] = rx_byte;
    5b3c:	e0 91 7b 01 	lds	r30, 0x017B
    5b40:	91 e0       	ldi	r25, 0x01	; 1
    5b42:	9e 0f       	add	r25, r30
    5b44:	90 93 7b 01 	sts	0x017B, r25
    5b48:	f0 e0       	ldi	r31, 0x00	; 0
    5b4a:	e4 58       	subi	r30, 0x84	; 132
    5b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    5b4e:	80 83       	st	Z, r24
	
	//Array overflow, error and reset array.
	if(bin_index >= BIN_RX_LENGTH)
    5b50:	99 30       	cpi	r25, 0x09	; 9
    5b52:	40 f0       	brcs	.+16     	; 0x5b64 <_Z15bin_build_arrayh+0x30>
	{
		bin_index = 0;
    5b54:	10 92 7b 01 	sts	0x017B, r1
		atmega_uart::tx_byte(ER_BIN_AR_OVERFLOW);
    5b58:	84 e0       	ldi	r24, 0x04	; 4
    5b5a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		bin_overflowed = true;
    5b5e:	81 e0       	ldi	r24, 0x01	; 1
    5b60:	80 93 79 01 	sts	0x0179, r24
    5b64:	08 95       	ret

00005b66 <_Z12bin_tokenizeP8as_class>:
	}
}

//Tokenize binary array function.
void bin_tokenize(as_class *as)
{	
    5b66:	cf 92       	push	r12
    5b68:	df 92       	push	r13
    5b6a:	ef 92       	push	r14
    5b6c:	ff 92       	push	r15
    5b6e:	0f 93       	push	r16
    5b70:	1f 93       	push	r17
    5b72:	cf 93       	push	r28
    5b74:	df 93       	push	r29
    5b76:	ec 01       	movw	r28, r24
	int16_t start_v, end_v;
	uint16_t rate, entries, ent;
	
	//Reset overflow and exit. This prevents partial
	//strings from corrupting the settings.
	if(bin_overflowed)
    5b78:	80 91 79 01 	lds	r24, 0x0179
    5b7c:	88 23       	and	r24, r24
    5b7e:	19 f0       	breq	.+6      	; 0x5b86 <_Z12bin_tokenizeP8as_class+0x20>
	{
		bin_overflowed = false;
    5b80:	10 92 79 01 	sts	0x0179, r1
		return;
    5b84:	0a c4       	rjmp	.+2068   	; 0x639a <_Z12bin_tokenizeP8as_class+0x834>
	}
	
	//Get command byte and act accordingly.
	switch (arr.bin_rx[0])
    5b86:	40 91 7c 01 	lds	r20, 0x017C
    5b8a:	50 e0       	ldi	r21, 0x00	; 0
    5b8c:	fa 01       	movw	r30, r20
    5b8e:	31 97       	sbiw	r30, 0x01	; 1
    5b90:	e4 37       	cpi	r30, 0x74	; 116
    5b92:	f1 05       	cpc	r31, r1
    5b94:	08 f0       	brcs	.+2      	; 0x5b98 <_Z12bin_tokenizeP8as_class+0x32>
    5b96:	fc c3       	rjmp	.+2040   	; 0x6390 <_Z12bin_tokenizeP8as_class+0x82a>
    5b98:	ea 5b       	subi	r30, 0xBA	; 186
    5b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9c:	0c 94 8f 34 	jmp	0x691e	; 0x691e <__tablejump2__>
	{
		case BIN_GET_TX1://Transmit tx mode character.
		case BIN_GET_TX2:
			if(bin_index == 1)
    5ba0:	80 91 7b 01 	lds	r24, 0x017B
    5ba4:	81 30       	cpi	r24, 0x01	; 1
    5ba6:	21 f4       	brne	.+8      	; 0x5bb0 <_Z12bin_tokenizeP8as_class+0x4a>
				atmega_uart::tx_byte('B');
    5ba8:	82 e4       	ldi	r24, 0x42	; 66
    5baa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5bae:	f3 c3       	rjmp	.+2022   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5bb0:	83 e0       	ldi	r24, 0x03	; 3
    5bb2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5bb6:	ef c3       	rjmp	.+2014   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_STRT_LIN1://Start linear sweep test.
		case BIN_STRT_LIN2:
			if(bin_index == 1)
    5bb8:	80 91 7b 01 	lds	r24, 0x017B
    5bbc:	81 30       	cpi	r24, 0x01	; 1
    5bbe:	49 f4       	brne	.+18     	; 0x5bd2 <_Z12bin_tokenizeP8as_class+0x6c>
			{
				as->set_test_type(TEST_LIN);
    5bc0:	60 e0       	ldi	r22, 0x00	; 0
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    5bc8:	61 e0       	ldi	r22, 0x01	; 1
    5bca:	ce 01       	movw	r24, r28
    5bcc:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    5bd0:	e2 c3       	rjmp	.+1988   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5bd2:	83 e0       	ldi	r24, 0x03	; 3
    5bd4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5bd8:	de c3       	rjmp	.+1980   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_STRT_SQR1://Start square wave test.
		case BIN_STRT_SQR2:
			if(bin_index == 1)
    5bda:	80 91 7b 01 	lds	r24, 0x017B
    5bde:	81 30       	cpi	r24, 0x01	; 1
    5be0:	49 f4       	brne	.+18     	; 0x5bf4 <_Z12bin_tokenizeP8as_class+0x8e>
			{
				as->set_test_type(TEST_SQR);
    5be2:	61 e0       	ldi	r22, 0x01	; 1
    5be4:	ce 01       	movw	r24, r28
    5be6:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    5bea:	61 e0       	ldi	r22, 0x01	; 1
    5bec:	ce 01       	movw	r24, r28
    5bee:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    5bf2:	d1 c3       	rjmp	.+1954   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5bf4:	83 e0       	ldi	r24, 0x03	; 3
    5bf6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5bfa:	cd c3       	rjmp	.+1946   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_STRT_ARB1://Start arbitrary waveform test.
		case BIN_STRT_ARB2:
			if(bin_index == 1)
    5bfc:	80 91 7b 01 	lds	r24, 0x017B
    5c00:	81 30       	cpi	r24, 0x01	; 1
    5c02:	49 f4       	brne	.+18     	; 0x5c16 <_Z12bin_tokenizeP8as_class+0xb0>
			{
				as->set_test_type(TEST_ARB);
    5c04:	62 e0       	ldi	r22, 0x02	; 2
    5c06:	ce 01       	movw	r24, r28
    5c08:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    5c0c:	61 e0       	ldi	r22, 0x01	; 1
    5c0e:	ce 01       	movw	r24, r28
    5c10:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN8as_class14set_test_stateE11test_states>
    5c14:	c0 c3       	rjmp	.+1920   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5c16:	83 e0       	ldi	r24, 0x03	; 3
    5c18:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5c1c:	bc c3       	rjmp	.+1912   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_TX://Change transmission mode.
			if(bin_index == 2)
    5c1e:	80 91 7b 01 	lds	r24, 0x017B
    5c22:	82 30       	cpi	r24, 0x02	; 2
    5c24:	41 f5       	brne	.+80     	; 0x5c76 <_Z12bin_tokenizeP8as_class+0x110>
				switch (arr.bin_rx[1])
    5c26:	80 91 7d 01 	lds	r24, 0x017D
    5c2a:	8d 34       	cpi	r24, 0x4D	; 77
    5c2c:	a1 f0       	breq	.+40     	; 0x5c56 <_Z12bin_tokenizeP8as_class+0xf0>
    5c2e:	28 f4       	brcc	.+10     	; 0x5c3a <_Z12bin_tokenizeP8as_class+0xd4>
    5c30:	81 34       	cpi	r24, 0x41	; 65
    5c32:	49 f0       	breq	.+18     	; 0x5c46 <_Z12bin_tokenizeP8as_class+0xe0>
    5c34:	82 34       	cpi	r24, 0x42	; 66
    5c36:	b9 f0       	breq	.+46     	; 0x5c66 <_Z12bin_tokenizeP8as_class+0x100>
    5c38:	1a c0       	rjmp	.+52     	; 0x5c6e <_Z12bin_tokenizeP8as_class+0x108>
    5c3a:	82 36       	cpi	r24, 0x62	; 98
    5c3c:	a1 f0       	breq	.+40     	; 0x5c66 <_Z12bin_tokenizeP8as_class+0x100>
    5c3e:	8d 36       	cpi	r24, 0x6D	; 109
    5c40:	51 f0       	breq	.+20     	; 0x5c56 <_Z12bin_tokenizeP8as_class+0xf0>
    5c42:	81 36       	cpi	r24, 0x61	; 97
    5c44:	a1 f4       	brne	.+40     	; 0x5c6e <_Z12bin_tokenizeP8as_class+0x108>
				{
					case 'A'://Set to ASCII mode.
					case 'a':
						as->set_tx_mode(TX_MODE_ASCII);
    5c46:	60 e0       	ldi	r22, 0x00	; 0
    5c48:	ce 01       	movw	r24, r28
    5c4a:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN8as_class11set_tx_modeE8tx_modes>
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5c4e:	80 e0       	ldi	r24, 0x00	; 0
    5c50:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5c54:	a0 c3       	rjmp	.+1856   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
					case 'M'://Set to MatLab mode.
					case 'm':
						as->set_tx_mode(TX_MODE_MATLAB);
    5c56:	61 e0       	ldi	r22, 0x01	; 1
    5c58:	ce 01       	movw	r24, r28
    5c5a:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN8as_class11set_tx_modeE8tx_modes>
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5c64:	98 c3       	rjmp	.+1840   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
					case 'B'://Set to binary mode.
					case 'b':
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5c66:	80 e0       	ldi	r24, 0x00	; 0
    5c68:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5c6c:	94 c3       	rjmp	.+1832   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
					default:
						atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5c6e:	83 e0       	ldi	r24, 0x03	; 3
    5c70:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5c74:	90 c3       	rjmp	.+1824   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5c76:	83 e0       	ldi	r24, 0x03	; 3
    5c78:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5c7c:	8c c3       	rjmp	.+1816   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ELECS://Change number of electrodes.
			if(bin_index == 2)
    5c7e:	80 91 7b 01 	lds	r24, 0x017B
    5c82:	82 30       	cpi	r24, 0x02	; 2
    5c84:	d1 f4       	brne	.+52     	; 0x5cba <_Z12bin_tokenizeP8as_class+0x154>
			{
				if(arr.bin_rx[1] == 0x02)
    5c86:	80 91 7d 01 	lds	r24, 0x017D
    5c8a:	82 30       	cpi	r24, 0x02	; 2
    5c8c:	41 f4       	brne	.+16     	; 0x5c9e <_Z12bin_tokenizeP8as_class+0x138>
				{
					as->set_num_electrodes(ELEC_2);
    5c8e:	60 e0       	ldi	r22, 0x00	; 0
    5c90:	ce 01       	movw	r24, r28
    5c92:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN8as_class18set_num_electrodesE9num_elecs>
					void i2c_load_electrodes(as_class *as);
					atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5c96:	80 e0       	ldi	r24, 0x00	; 0
    5c98:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5c9c:	7c c3       	rjmp	.+1784   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(arr.bin_rx[1] == 0x03)
    5c9e:	83 30       	cpi	r24, 0x03	; 3
    5ca0:	41 f4       	brne	.+16     	; 0x5cb2 <_Z12bin_tokenizeP8as_class+0x14c>
				{
					as->set_num_electrodes(ELEC_3);
    5ca2:	61 e0       	ldi	r22, 0x01	; 1
    5ca4:	ce 01       	movw	r24, r28
    5ca6:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN8as_class18set_num_electrodesE9num_elecs>
					void i2c_load_electrodes(as_class *as);
					atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5caa:	80 e0       	ldi	r24, 0x00	; 0
    5cac:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5cb0:	72 c3       	rjmp	.+1764   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else//Transmit error.
				{
					atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5cb2:	83 e0       	ldi	r24, 0x03	; 3
    5cb4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5cb8:	6e c3       	rjmp	.+1756   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5cba:	83 e0       	ldi	r24, 0x03	; 3
    5cbc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5cc0:	6a c3       	rjmp	.+1748   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ADC:
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_adc_rate);
    5cc2:	23 e4       	ldi	r18, 0x43	; 67
    5cc4:	33 e1       	ldi	r19, 0x13	; 19
    5cc6:	40 e0       	ldi	r20, 0x00	; 0
    5cc8:	50 e0       	ldi	r21, 0x00	; 0
    5cca:	be 01       	movw	r22, r28
    5ccc:	8d e7       	ldi	r24, 0x7D	; 125
    5cce:	91 e0       	ldi	r25, 0x01	; 1
    5cd0:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    5cd4:	60 c3       	rjmp	.+1728   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_SET://Transmit settings.
			if(bin_index == 1)
    5cd6:	80 91 7b 01 	lds	r24, 0x017B
    5cda:	81 30       	cpi	r24, 0x01	; 1
    5cdc:	09 f0       	breq	.+2      	; 0x5ce0 <_Z12bin_tokenizeP8as_class+0x17a>
    5cde:	98 c0       	rjmp	.+304    	; 0x5e10 <_Z12bin_tokenizeP8as_class+0x2aa>
			{
				atmega_uart::tx_byte(BIN_FIRM_HI);
    5ce0:	80 e0       	ldi	r24, 0x00	; 0
    5ce2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_FIRM_LO);
    5ce6:	80 e1       	ldi	r24, 0x10	; 16
    5ce8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID1);
    5cec:	81 e4       	ldi	r24, 0x41	; 65
    5cee:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID2);
    5cf2:	81 e5       	ldi	r24, 0x51	; 81
    5cf4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID3);
    5cf8:	83 e5       	ldi	r24, 0x53	; 83
    5cfa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID4);
    5cfe:	81 e3       	ldi	r24, 0x31	; 49
    5d00:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				(as->get_num_electrodes() == ELEC_2) ? atmega_uart::tx_byte(0x02) : atmega_uart::tx_byte(0x03);
    5d04:	ce 01       	movw	r24, r28
    5d06:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN8as_class18get_num_electrodesEv>
    5d0a:	81 11       	cpse	r24, r1
    5d0c:	04 c0       	rjmp	.+8      	; 0x5d16 <_Z12bin_tokenizeP8as_class+0x1b0>
    5d0e:	82 e0       	ldi	r24, 0x02	; 2
    5d10:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5d14:	03 c0       	rjmp	.+6      	; 0x5d1c <_Z12bin_tokenizeP8as_class+0x1b6>
    5d16:	83 e0       	ldi	r24, 0x03	; 3
    5d18:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_word(as->get_adc_rate());
    5d1c:	ce 01       	movw	r24, r28
    5d1e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN8as_class12get_adc_rateEv>
    5d22:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_tia_res_tap());
    5d26:	ce 01       	movw	r24, r28
    5d28:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN8as_class15get_tia_res_tapEv>
    5d2c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_byte(as->get_tia_cap_mask());
    5d30:	ce 01       	movw	r24, r28
    5d32:	0e 94 93 13 	call	0x2726	; 0x2726 <_ZN8as_class16get_tia_cap_maskEv>
    5d36:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_tf(as->get_dep_enable());
    5d3a:	ce 01       	movw	r24, r28
    5d3c:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN8as_class14get_dep_enableEv>
    5d40:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_dword(as->get_dep_time());
    5d44:	ce 01       	movw	r24, r28
    5d46:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN8as_class12get_dep_timeEv>
    5d4a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN11atmega_uart8tx_dwordEm>
				atmega_uart::tx_word(as->get_dep_volt());
    5d4e:	ce 01       	movw	r24, r28
    5d50:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN8as_class12get_dep_voltEv>
    5d54:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_dword(as->get_quiet_time());
    5d58:	ce 01       	movw	r24, r28
    5d5a:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN8as_class14get_quiet_timeEv>
    5d5e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN11atmega_uart8tx_dwordEm>
				atmega_uart::tx_tf(as->get_dep_rec());
    5d62:	ce 01       	movw	r24, r28
    5d64:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8as_class11get_dep_recEv>
    5d68:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_word(as->get_sweep_volt_start());
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN8as_class20get_sweep_volt_startEv>
    5d72:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_sweep_volt_end());
    5d76:	ce 01       	movw	r24, r28
    5d78:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN8as_class18get_sweep_volt_endEv>
    5d7c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_sweep_rate());
    5d80:	ce 01       	movw	r24, r28
    5d82:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN8as_class14get_sweep_rateEv>
    5d86:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_tf(as->get_sweep_cyclic());
    5d8a:	ce 01       	movw	r24, r28
    5d8c:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8as_class16get_sweep_cyclicEv>
    5d90:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_byte(as->get_sweep_cycles());
    5d94:	ce 01       	movw	r24, r28
    5d96:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN8as_class16get_sweep_cyclesEv>
    5d9a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_word(as->get_square_volt_start());
    5d9e:	ce 01       	movw	r24, r28
    5da0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    5da4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_volt_end());
    5da8:	ce 01       	movw	r24, r28
    5daa:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    5dae:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_amp());
    5db2:	ce 01       	movw	r24, r28
    5db4:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5db8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_inc());
    5dbc:	ce 01       	movw	r24, r28
    5dbe:	0e 94 84 14 	call	0x2908	; 0x2908 <_ZN8as_class14get_square_incEv>
    5dc2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_square_period());
    5dc6:	ce 01       	movw	r24, r28
    5dc8:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8as_class17get_square_periodEv>
    5dcc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_tf(as->get_arb_cyclic());
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN8as_class14get_arb_cyclicEv>
    5dd6:	91 e0       	ldi	r25, 0x01	; 1
    5dd8:	81 11       	cpse	r24, r1
    5dda:	01 c0       	rjmp	.+2      	; 0x5dde <_Z12bin_tokenizeP8as_class+0x278>
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	89 2f       	mov	r24, r25
    5de0:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_byte(as->get_arb_cycles());
    5de4:	ce 01       	movw	r24, r28
    5de6:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN8as_class14get_arb_cyclesEv>
    5dea:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(atmega_eeprom::read_word((uint16_t *)ARB_NUM));
    5dee:	86 e0       	ldi	r24, 0x06	; 6
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    5df6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_tf(as->get_soft_filt());
    5dfa:	ce 01       	movw	r24, r28
    5dfc:	0e 94 b6 14 	call	0x296c	; 0x296c <_ZN8as_class13get_soft_filtEv>
    5e00:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_byte(as->get_soft_sel());	
    5e04:	ce 01       	movw	r24, r28
    5e06:	0e 94 c5 14 	call	0x298a	; 0x298a <_ZN8as_class12get_soft_selEv>
    5e0a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5e0e:	c3 c2       	rjmp	.+1414   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5e10:	83 e0       	ldi	r24, 0x03	; 3
    5e12:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5e16:	bf c2       	rjmp	.+1406   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_TAP://Set resistor tap.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_tia_res_tap);
    5e18:	27 e5       	ldi	r18, 0x57	; 87
    5e1a:	33 e1       	ldi	r19, 0x13	; 19
    5e1c:	40 e0       	ldi	r20, 0x00	; 0
    5e1e:	50 e0       	ldi	r21, 0x00	; 0
    5e20:	be 01       	movw	r22, r28
    5e22:	8d e7       	ldi	r24, 0x7D	; 125
    5e24:	91 e0       	ldi	r25, 0x01	; 1
    5e26:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
			i2c_load_pot(as);
    5e2a:	ce 01       	movw	r24, r28
    5e2c:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_Z12i2c_load_potP8as_class>
		break;
    5e30:	b2 c2       	rjmp	.+1380   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_CAP://Set capacitor mask
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_tia_cap_mask);
    5e32:	2b e8       	ldi	r18, 0x8B	; 139
    5e34:	33 e1       	ldi	r19, 0x13	; 19
    5e36:	40 e0       	ldi	r20, 0x00	; 0
    5e38:	50 e0       	ldi	r21, 0x00	; 0
    5e3a:	be 01       	movw	r22, r28
    5e3c:	8d e7       	ldi	r24, 0x7D	; 125
    5e3e:	91 e0       	ldi	r25, 0x01	; 1
    5e40:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z6set_u8PKhP8as_classMS1_FhhE>
			i2c_load_cap_mask(as);
    5e44:	ce 01       	movw	r24, r28
    5e46:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_Z17i2c_load_cap_maskP8as_class>
		break;
    5e4a:	a5 c2       	rjmp	.+1354   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_EN://Enable deposition sequence.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_dep_enable);
    5e4c:	26 e9       	ldi	r18, 0x96	; 150
    5e4e:	33 e1       	ldi	r19, 0x13	; 19
    5e50:	40 e0       	ldi	r20, 0x00	; 0
    5e52:	50 e0       	ldi	r21, 0x00	; 0
    5e54:	be 01       	movw	r22, r28
    5e56:	8d e7       	ldi	r24, 0x7D	; 125
    5e58:	91 e0       	ldi	r25, 0x01	; 1
    5e5a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    5e5e:	9b c2       	rjmp	.+1334   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_T://Change deposition time.
			set_u32(&(arr.bin_rx[1]), as, &as_class::set_dep_time);
    5e60:	2d e9       	ldi	r18, 0x9D	; 157
    5e62:	33 e1       	ldi	r19, 0x13	; 19
    5e64:	40 e0       	ldi	r20, 0x00	; 0
    5e66:	50 e0       	ldi	r21, 0x00	; 0
    5e68:	be 01       	movw	r22, r28
    5e6a:	8d e7       	ldi	r24, 0x7D	; 125
    5e6c:	91 e0       	ldi	r25, 0x01	; 1
    5e6e:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <_Z7set_u32PKhP8as_classMS1_FhmE>
		break;
    5e72:	91 c2       	rjmp	.+1314   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_V://Set deposition voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_dep_volt);
    5e74:	2a eb       	ldi	r18, 0xBA	; 186
    5e76:	33 e1       	ldi	r19, 0x13	; 19
    5e78:	40 e0       	ldi	r20, 0x00	; 0
    5e7a:	50 e0       	ldi	r21, 0x00	; 0
    5e7c:	be 01       	movw	r22, r28
    5e7e:	8d e7       	ldi	r24, 0x7D	; 125
    5e80:	91 e0       	ldi	r25, 0x01	; 1
    5e82:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    5e86:	87 c2       	rjmp	.+1294   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_QUIET_T://Set quiet time.
			set_u32(&(arr.bin_rx[1]), as, &as_class::set_quiet_time);
    5e88:	2f ec       	ldi	r18, 0xCF	; 207
    5e8a:	33 e1       	ldi	r19, 0x13	; 19
    5e8c:	40 e0       	ldi	r20, 0x00	; 0
    5e8e:	50 e0       	ldi	r21, 0x00	; 0
    5e90:	be 01       	movw	r22, r28
    5e92:	8d e7       	ldi	r24, 0x7D	; 125
    5e94:	91 e0       	ldi	r25, 0x01	; 1
    5e96:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <_Z7set_u32PKhP8as_classMS1_FhmE>
		break;
    5e9a:	7d c2       	rjmp	.+1274   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_DEP_REC://Enable deposition recording.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_dep_rec);
    5e9c:	25 ee       	ldi	r18, 0xE5	; 229
    5e9e:	33 e1       	ldi	r19, 0x13	; 19
    5ea0:	40 e0       	ldi	r20, 0x00	; 0
    5ea2:	50 e0       	ldi	r21, 0x00	; 0
    5ea4:	be 01       	movw	r22, r28
    5ea6:	8d e7       	ldi	r24, 0x7D	; 125
    5ea8:	91 e0       	ldi	r25, 0x01	; 1
    5eaa:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    5eae:	73 c2       	rjmp	.+1254   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_SV://Set linear sweep start voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_sweep_volt_start);
    5eb0:	2c ee       	ldi	r18, 0xEC	; 236
    5eb2:	33 e1       	ldi	r19, 0x13	; 19
    5eb4:	40 e0       	ldi	r20, 0x00	; 0
    5eb6:	50 e0       	ldi	r21, 0x00	; 0
    5eb8:	be 01       	movw	r22, r28
    5eba:	8d e7       	ldi	r24, 0x7D	; 125
    5ebc:	91 e0       	ldi	r25, 0x01	; 1
    5ebe:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    5ec2:	69 c2       	rjmp	.+1234   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_EV://Set linear sweep end voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_sweep_volt_end);
    5ec4:	21 e0       	ldi	r18, 0x01	; 1
    5ec6:	34 e1       	ldi	r19, 0x14	; 20
    5ec8:	40 e0       	ldi	r20, 0x00	; 0
    5eca:	50 e0       	ldi	r21, 0x00	; 0
    5ecc:	be 01       	movw	r22, r28
    5ece:	8d e7       	ldi	r24, 0x7D	; 125
    5ed0:	91 e0       	ldi	r25, 0x01	; 1
    5ed2:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    5ed6:	5f c2       	rjmp	.+1214   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_SR://Set linear sweep rate.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_sweep_rate);
    5ed8:	26 e1       	ldi	r18, 0x16	; 22
    5eda:	34 e1       	ldi	r19, 0x14	; 20
    5edc:	40 e0       	ldi	r20, 0x00	; 0
    5ede:	50 e0       	ldi	r21, 0x00	; 0
    5ee0:	be 01       	movw	r22, r28
    5ee2:	8d e7       	ldi	r24, 0x7D	; 125
    5ee4:	91 e0       	ldi	r25, 0x01	; 1
    5ee6:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    5eea:	55 c2       	rjmp	.+1194   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_C://Enable linear sweep cyclic voltammetry.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_sweep_cyclic);
    5eec:	2a e2       	ldi	r18, 0x2A	; 42
    5eee:	34 e1       	ldi	r19, 0x14	; 20
    5ef0:	40 e0       	ldi	r20, 0x00	; 0
    5ef2:	50 e0       	ldi	r21, 0x00	; 0
    5ef4:	be 01       	movw	r22, r28
    5ef6:	8d e7       	ldi	r24, 0x7D	; 125
    5ef8:	91 e0       	ldi	r25, 0x01	; 1
    5efa:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    5efe:	4b c2       	rjmp	.+1174   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LIN_CS://Set number of linear sweep cycles.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_sweep_cycles);
    5f00:	21 e3       	ldi	r18, 0x31	; 49
    5f02:	34 e1       	ldi	r19, 0x14	; 20
    5f04:	40 e0       	ldi	r20, 0x00	; 0
    5f06:	50 e0       	ldi	r21, 0x00	; 0
    5f08:	be 01       	movw	r22, r28
    5f0a:	8d e7       	ldi	r24, 0x7D	; 125
    5f0c:	91 e0       	ldi	r25, 0x01	; 1
    5f0e:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    5f12:	41 c2       	rjmp	.+1154   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_SQR_SV://Set square wave start voltage.
			if(bin_index == 3)
    5f14:	80 91 7b 01 	lds	r24, 0x017B
    5f18:	83 30       	cpi	r24, 0x03	; 3
    5f1a:	61 f5       	brne	.+88     	; 0x5f74 <_Z12bin_tokenizeP8as_class+0x40e>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    5f1c:	ec e7       	ldi	r30, 0x7C	; 124
    5f1e:	f1 e0       	ldi	r31, 0x01	; 1
    5f20:	01 81       	ldd	r16, Z+1	; 0x01
    5f22:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    5f24:	10 2f       	mov	r17, r16
    5f26:	00 27       	eor	r16, r16
	temp16 += array[1];
    5f28:	82 81       	ldd	r24, Z+2	; 0x02
    5f2a:	08 0f       	add	r16, r24
    5f2c:	11 1d       	adc	r17, r1
		case BIN_SQR_SV://Set square wave start voltage.
			if(bin_index == 3)
			{
				start_v = load_int16(&arr.bin_rx[1]);
				//Check to make sure range is valid.
				if(start_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    5f2e:	ce 01       	movw	r24, r28
    5f30:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5f34:	80 0f       	add	r24, r16
    5f36:	91 1f       	adc	r25, r17
    5f38:	83 37       	cpi	r24, 0x73	; 115
    5f3a:	96 40       	sbci	r25, 0x06	; 6
    5f3c:	24 f0       	brlt	.+8      	; 0x5f46 <_Z12bin_tokenizeP8as_class+0x3e0>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5f3e:	87 e0       	ldi	r24, 0x07	; 7
    5f40:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5f44:	28 c2       	rjmp	.+1104   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(start_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    5f46:	ce 01       	movw	r24, r28
    5f48:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5f4c:	98 01       	movw	r18, r16
    5f4e:	28 1b       	sub	r18, r24
    5f50:	39 0b       	sbc	r19, r25
    5f52:	c9 01       	movw	r24, r18
    5f54:	8e 38       	cpi	r24, 0x8E	; 142
    5f56:	99 4f       	sbci	r25, 0xF9	; 249
    5f58:	24 f4       	brge	.+8      	; 0x5f62 <_Z12bin_tokenizeP8as_class+0x3fc>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5f5a:	87 e0       	ldi	r24, 0x07	; 7
    5f5c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5f60:	1a c2       	rjmp	.+1076   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else
				{
					errno = as->set_square_volt_start(start_v);
    5f62:	b8 01       	movw	r22, r16
    5f64:	ce 01       	movw	r24, r28
    5f66:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN8as_class21set_square_volt_startEi>
    5f6a:	80 93 95 01 	sts	0x0195, r24
					atmega_uart::tx_byte(errno);
    5f6e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5f72:	11 c2       	rjmp	.+1058   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
			}
			else//Transmit error.
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5f74:	83 e0       	ldi	r24, 0x03	; 3
    5f76:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5f7a:	0d c2       	rjmp	.+1050   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
		break;
		
		case BIN_SQR_EV://Set square wave end voltage.
			if(bin_index == 3)
    5f7c:	80 91 7b 01 	lds	r24, 0x017B
    5f80:	83 30       	cpi	r24, 0x03	; 3
    5f82:	61 f5       	brne	.+88     	; 0x5fdc <_Z12bin_tokenizeP8as_class+0x476>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    5f84:	ec e7       	ldi	r30, 0x7C	; 124
    5f86:	f1 e0       	ldi	r31, 0x01	; 1
    5f88:	01 81       	ldd	r16, Z+1	; 0x01
    5f8a:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    5f8c:	10 2f       	mov	r17, r16
    5f8e:	00 27       	eor	r16, r16
	temp16 += array[1];
    5f90:	82 81       	ldd	r24, Z+2	; 0x02
    5f92:	08 0f       	add	r16, r24
    5f94:	11 1d       	adc	r17, r1
		case BIN_SQR_EV://Set square wave end voltage.
			if(bin_index == 3)
			{
				end_v = load_int16(&arr.bin_rx[1]);
				//Check to make sure range is valid.
				if(end_v + (int16_t)as->get_square_amp() > SQUARE_VOLT_MAX)
    5f96:	ce 01       	movw	r24, r28
    5f98:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5f9c:	80 0f       	add	r24, r16
    5f9e:	91 1f       	adc	r25, r17
    5fa0:	83 37       	cpi	r24, 0x73	; 115
    5fa2:	96 40       	sbci	r25, 0x06	; 6
    5fa4:	24 f0       	brlt	.+8      	; 0x5fae <_Z12bin_tokenizeP8as_class+0x448>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5fa6:	87 e0       	ldi	r24, 0x07	; 7
    5fa8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5fac:	f4 c1       	rjmp	.+1000   	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(end_v - (int16_t)as->get_square_amp() < SQUARE_VOLT_MIN)
    5fae:	ce 01       	movw	r24, r28
    5fb0:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN8as_class14get_square_ampEv>
    5fb4:	98 01       	movw	r18, r16
    5fb6:	28 1b       	sub	r18, r24
    5fb8:	39 0b       	sbc	r19, r25
    5fba:	c9 01       	movw	r24, r18
    5fbc:	8e 38       	cpi	r24, 0x8E	; 142
    5fbe:	99 4f       	sbci	r25, 0xF9	; 249
    5fc0:	24 f4       	brge	.+8      	; 0x5fca <_Z12bin_tokenizeP8as_class+0x464>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    5fc2:	87 e0       	ldi	r24, 0x07	; 7
    5fc4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    5fc8:	e6 c1       	rjmp	.+972    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else
				{
					errno = as->set_square_volt_start(end_v);
    5fca:	b8 01       	movw	r22, r16
    5fcc:	ce 01       	movw	r24, r28
    5fce:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN8as_class21set_square_volt_startEi>
    5fd2:	80 93 95 01 	sts	0x0195, r24
					atmega_uart::tx_byte(errno);
    5fd6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5fda:	dd c1       	rjmp	.+954    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
			}
			else//Transmit error.
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    5fdc:	83 e0       	ldi	r24, 0x03	; 3
    5fde:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    5fe2:	d9 c1       	rjmp	.+946    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
		break;
		
		case BIN_SQR_AMP://Set square wave amplitude.
			if(bin_index == 3)
    5fe4:	80 91 7b 01 	lds	r24, 0x017B
    5fe8:	83 30       	cpi	r24, 0x03	; 3
    5fea:	09 f0       	breq	.+2      	; 0x5fee <_Z12bin_tokenizeP8as_class+0x488>
    5fec:	4a c0       	rjmp	.+148    	; 0x6082 <_Z12bin_tokenizeP8as_class+0x51c>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    5fee:	ec e7       	ldi	r30, 0x7C	; 124
    5ff0:	f1 e0       	ldi	r31, 0x01	; 1
    5ff2:	01 81       	ldd	r16, Z+1	; 0x01
    5ff4:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    5ff6:	10 2f       	mov	r17, r16
    5ff8:	00 27       	eor	r16, r16
	temp16 += array[1];
    5ffa:	82 81       	ldd	r24, Z+2	; 0x02
    5ffc:	08 0f       	add	r16, r24
    5ffe:	11 1d       	adc	r17, r1
				if(rate < SQUARE_AMP_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > SQUARE_AMP_MAX)
    6000:	03 37       	cpi	r16, 0x73	; 115
    6002:	86 e0       	ldi	r24, 0x06	; 6
    6004:	18 07       	cpc	r17, r24
    6006:	20 f0       	brcs	.+8      	; 0x6010 <_Z12bin_tokenizeP8as_class+0x4aa>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    6008:	82 e0       	ldi	r24, 0x02	; 2
    600a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    600e:	c3 c1       	rjmp	.+902    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_start() + (int16_t)rate > SQUARE_VOLT_MAX)
    6010:	ce 01       	movw	r24, r28
    6012:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    6016:	80 0f       	add	r24, r16
    6018:	91 1f       	adc	r25, r17
    601a:	83 37       	cpi	r24, 0x73	; 115
    601c:	96 40       	sbci	r25, 0x06	; 6
    601e:	24 f0       	brlt	.+8      	; 0x6028 <_Z12bin_tokenizeP8as_class+0x4c2>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    6020:	87 e0       	ldi	r24, 0x07	; 7
    6022:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6026:	b7 c1       	rjmp	.+878    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_start() - (int16_t)rate < SQUARE_VOLT_MIN)
    6028:	ce 01       	movw	r24, r28
    602a:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN8as_class21get_square_volt_startEv>
    602e:	80 1b       	sub	r24, r16
    6030:	91 0b       	sbc	r25, r17
    6032:	8e 38       	cpi	r24, 0x8E	; 142
    6034:	99 4f       	sbci	r25, 0xF9	; 249
    6036:	24 f4       	brge	.+8      	; 0x6040 <_Z12bin_tokenizeP8as_class+0x4da>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    6038:	87 e0       	ldi	r24, 0x07	; 7
    603a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    603e:	ab c1       	rjmp	.+854    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_end() + (int16_t)rate > SQUARE_VOLT_MAX)
    6040:	ce 01       	movw	r24, r28
    6042:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    6046:	80 0f       	add	r24, r16
    6048:	91 1f       	adc	r25, r17
    604a:	83 37       	cpi	r24, 0x73	; 115
    604c:	96 40       	sbci	r25, 0x06	; 6
    604e:	24 f0       	brlt	.+8      	; 0x6058 <_Z12bin_tokenizeP8as_class+0x4f2>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    6050:	87 e0       	ldi	r24, 0x07	; 7
    6052:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6056:	9f c1       	rjmp	.+830    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(as->get_square_volt_end() - (int16_t)rate < SQUARE_VOLT_MIN)
    6058:	ce 01       	movw	r24, r28
    605a:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN8as_class19get_square_volt_endEv>
    605e:	80 1b       	sub	r24, r16
    6060:	91 0b       	sbc	r25, r17
    6062:	8e 38       	cpi	r24, 0x8E	; 142
    6064:	99 4f       	sbci	r25, 0xF9	; 249
    6066:	24 f4       	brge	.+8      	; 0x6070 <_Z12bin_tokenizeP8as_class+0x50a>
				{
					atmega_uart::tx_byte(ER_BIN_SQR_RANGE);
    6068:	87 e0       	ldi	r24, 0x07	; 7
    606a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    606e:	93 c1       	rjmp	.+806    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				errno = as->set_square_amp(rate);
    6070:	b8 01       	movw	r22, r16
    6072:	ce 01       	movw	r24, r28
    6074:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN8as_class14set_square_ampEj>
    6078:	80 93 95 01 	sts	0x0195, r24
				atmega_uart::tx_byte(errno);
    607c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    6080:	8a c1       	rjmp	.+788    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6082:	83 e0       	ldi	r24, 0x03	; 3
    6084:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    6088:	86 c1       	rjmp	.+780    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
		break;
		
		case BIN_SQR_INC://Set square wave increment.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_square_inc);
    608a:	29 e7       	ldi	r18, 0x79	; 121
    608c:	34 e1       	ldi	r19, 0x14	; 20
    608e:	40 e0       	ldi	r20, 0x00	; 0
    6090:	50 e0       	ldi	r21, 0x00	; 0
    6092:	be 01       	movw	r22, r28
    6094:	8d e7       	ldi	r24, 0x7D	; 125
    6096:	91 e0       	ldi	r25, 0x01	; 1
    6098:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    609c:	7c c1       	rjmp	.+760    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_SQR_PER://Set square wave period.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_square_period);
    609e:	28 e8       	ldi	r18, 0x88	; 136
    60a0:	34 e1       	ldi	r19, 0x14	; 20
    60a2:	40 e0       	ldi	r20, 0x00	; 0
    60a4:	50 e0       	ldi	r21, 0x00	; 0
    60a6:	be 01       	movw	r22, r28
    60a8:	8d e7       	ldi	r24, 0x7D	; 125
    60aa:	91 e0       	ldi	r25, 0x01	; 1
    60ac:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    60b0:	72 c1       	rjmp	.+740    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_AE://Append arbitrary waveform entry
			
			if(bin_index == 7)
    60b2:	80 91 7b 01 	lds	r24, 0x017B
    60b6:	87 30       	cpi	r24, 0x07	; 7
    60b8:	09 f0       	breq	.+2      	; 0x60bc <_Z12bin_tokenizeP8as_class+0x556>
    60ba:	75 c0       	rjmp	.+234    	; 0x61a6 <_Z12bin_tokenizeP8as_class+0x640>
			{
				//Get number of entries already in list.
				entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    60bc:	86 e0       	ldi	r24, 0x06	; 6
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    60c4:	ec 01       	movw	r28, r24
				
				//Error out if memory is already full.
				if(entries >= ARB_ENTRIES_MAX)
    60c6:	86 39       	cpi	r24, 0x96	; 150
    60c8:	91 05       	cpc	r25, r1
    60ca:	20 f0       	brcs	.+8      	; 0x60d4 <_Z12bin_tokenizeP8as_class+0x56e>
				{
					atmega_uart::tx_byte(ER_BIN_MEM_FULL);
    60cc:	85 e0       	ldi	r24, 0x05	; 5
    60ce:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    60d2:	61 c1       	rjmp	.+706    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    60d4:	ec e7       	ldi	r30, 0x7C	; 124
    60d6:	f1 e0       	ldi	r31, 0x01	; 1
    60d8:	21 81       	ldd	r18, Z+1	; 0x01
    60da:	30 e0       	ldi	r19, 0x00	; 0
	temp16 <<= 8;
    60dc:	32 2f       	mov	r19, r18
    60de:	22 27       	eor	r18, r18
	temp16 += array[1];
    60e0:	82 81       	ldd	r24, Z+2	; 0x02
    60e2:	b9 01       	movw	r22, r18
    60e4:	68 0f       	add	r22, r24
    60e6:	71 1d       	adc	r23, r1
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    60e8:	c3 80       	ldd	r12, Z+3	; 0x03
	temp16 <<= 8;
	temp16 += array[1];
    60ea:	94 81       	ldd	r25, Z+4	; 0x04
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    60ec:	e5 80       	ldd	r14, Z+5	; 0x05
	temp16 <<= 8;
	temp16 += array[1];
    60ee:	86 81       	ldd	r24, Z+6	; 0x06
				start_v = load_int16(&arr.bin_rx[1]);
				end_v = load_int16(&arr.bin_rx[3]);
				rate = load_u16(&arr.bin_rx[5]);
				
				//Make sure the number falls within the proper range.
				if(start_v > ARB_VOLT_MAX)
    60f0:	63 37       	cpi	r22, 0x73	; 115
    60f2:	26 e0       	ldi	r18, 0x06	; 6
    60f4:	72 07       	cpc	r23, r18
    60f6:	24 f0       	brlt	.+8      	; 0x6100 <_Z12bin_tokenizeP8as_class+0x59a>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    60f8:	82 e0       	ldi	r24, 0x02	; 2
    60fa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    60fe:	4b c1       	rjmp	.+662    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(start_v < ARB_VOLT_MIN)
    6100:	6e 38       	cpi	r22, 0x8E	; 142
    6102:	39 ef       	ldi	r19, 0xF9	; 249
    6104:	73 07       	cpc	r23, r19
    6106:	24 f4       	brge	.+8      	; 0x6110 <_Z12bin_tokenizeP8as_class+0x5aa>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6108:	81 e0       	ldi	r24, 0x01	; 1
    610a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    610e:	43 c1       	rjmp	.+646    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    6110:	d1 2c       	mov	r13, r1
	temp16 <<= 8;
    6112:	dc 2c       	mov	r13, r12
    6114:	cc 24       	eor	r12, r12
	temp16 += array[1];
    6116:	c9 0e       	add	r12, r25
    6118:	d1 1c       	adc	r13, r1
				else if(start_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(end_v > ARB_VOLT_MAX)
    611a:	93 e7       	ldi	r25, 0x73	; 115
    611c:	c9 16       	cp	r12, r25
    611e:	96 e0       	ldi	r25, 0x06	; 6
    6120:	d9 06       	cpc	r13, r25
    6122:	24 f0       	brlt	.+8      	; 0x612c <_Z12bin_tokenizeP8as_class+0x5c6>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    6124:	82 e0       	ldi	r24, 0x02	; 2
    6126:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    612a:	35 c1       	rjmp	.+618    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(end_v < ARB_VOLT_MIN)
    612c:	2e e8       	ldi	r18, 0x8E	; 142
    612e:	c2 16       	cp	r12, r18
    6130:	29 ef       	ldi	r18, 0xF9	; 249
    6132:	d2 06       	cpc	r13, r18
    6134:	24 f4       	brge	.+8      	; 0x613e <_Z12bin_tokenizeP8as_class+0x5d8>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6136:	81 e0       	ldi	r24, 0x01	; 1
    6138:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    613c:	2c c1       	rjmp	.+600    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    613e:	f1 2c       	mov	r15, r1
	temp16 <<= 8;
    6140:	fe 2c       	mov	r15, r14
    6142:	ee 24       	eor	r14, r14
	temp16 += array[1];
    6144:	e8 0e       	add	r14, r24
    6146:	f1 1c       	adc	r15, r1
				else if(end_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > ARB_RATE_MAX)
    6148:	31 ed       	ldi	r19, 0xD1	; 209
    614a:	e3 16       	cp	r14, r19
    614c:	37 e0       	ldi	r19, 0x07	; 7
    614e:	f3 06       	cpc	r15, r19
    6150:	20 f0       	brcs	.+8      	; 0x615a <_Z12bin_tokenizeP8as_class+0x5f4>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    6152:	82 e0       	ldi	r24, 0x02	; 2
    6154:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6158:	1e c1       	rjmp	.+572    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(rate < ARB_RATE_MIN)
    615a:	e1 14       	cp	r14, r1
    615c:	f1 04       	cpc	r15, r1
    615e:	21 f4       	brne	.+8      	; 0x6168 <_Z12bin_tokenizeP8as_class+0x602>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6166:	17 c1       	rjmp	.+558    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				
				//Save values in the EEPROM.
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * entries), start_v);
    6168:	86 e0       	ldi	r24, 0x06	; 6
    616a:	8c 9f       	mul	r24, r28
    616c:	80 01       	movw	r16, r0
    616e:	8d 9f       	mul	r24, r29
    6170:	10 0d       	add	r17, r0
    6172:	11 24       	eor	r1, r1
    6174:	c8 01       	movw	r24, r16
    6176:	08 96       	adiw	r24, 0x08	; 8
    6178:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * entries), end_v);
    617c:	b6 01       	movw	r22, r12
    617e:	c8 01       	movw	r24, r16
    6180:	0a 96       	adiw	r24, 0x0a	; 10
    6182:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * entries), rate);
    6186:	b7 01       	movw	r22, r14
    6188:	c8 01       	movw	r24, r16
    618a:	0c 96       	adiw	r24, 0x0c	; 12
    618c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
				
				//Update number of entries stored.
				atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries + 1);
    6190:	be 01       	movw	r22, r28
    6192:	6f 5f       	subi	r22, 0xFF	; 255
    6194:	7f 4f       	sbci	r23, 0xFF	; 255
    6196:	86 e0       	ldi	r24, 0x06	; 6
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
				
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    61a4:	f8 c0       	rjmp	.+496    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    61a6:	83 e0       	ldi	r24, 0x03	; 3
    61a8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    61ac:	f4 c0       	rjmp	.+488    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ARB_RE://Replace arbitrary waveform entry.
			if(bin_index == 8)
    61ae:	80 91 7b 01 	lds	r24, 0x017B
    61b2:	88 30       	cpi	r24, 0x08	; 8
    61b4:	09 f0       	breq	.+2      	; 0x61b8 <_Z12bin_tokenizeP8as_class+0x652>
    61b6:	76 c0       	rjmp	.+236    	; 0x62a4 <_Z12bin_tokenizeP8as_class+0x73e>
			{
				//Get number of entries already in list.
				entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    61b8:	86 e0       	ldi	r24, 0x06	; 6
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
				
				//Get numbers out of the array.
				ent = arr.bin_rx[1];
    61c0:	20 91 7d 01 	lds	r18, 0x017D
    61c4:	30 e0       	ldi	r19, 0x00	; 0
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    61c6:	ec e7       	ldi	r30, 0x7C	; 124
    61c8:	f1 e0       	ldi	r31, 0x01	; 1
    61ca:	42 81       	ldd	r20, Z+2	; 0x02
	temp16 <<= 8;
	temp16 += array[1];
    61cc:	63 81       	ldd	r22, Z+3	; 0x03
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    61ce:	e4 80       	ldd	r14, Z+4	; 0x04
	temp16 <<= 8;
	temp16 += array[1];
    61d0:	a5 81       	ldd	r26, Z+5	; 0x05
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    61d2:	06 81       	ldd	r16, Z+6	; 0x06
	temp16 <<= 8;
	temp16 += array[1];
    61d4:	77 81       	ldd	r23, Z+7	; 0x07
				start_v = load_int16(&arr.bin_rx[2]);
				end_v = load_int16(&arr.bin_rx[4]);
				rate = load_u16(&arr.bin_rx[6]);
				
				//Make sure the number falls within the proper range.
				if(ent < 1)
    61d6:	21 15       	cp	r18, r1
    61d8:	31 05       	cpc	r19, r1
    61da:	21 f4       	brne	.+8      	; 0x61e4 <_Z12bin_tokenizeP8as_class+0x67e>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    61dc:	81 e0       	ldi	r24, 0x01	; 1
    61de:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    61e2:	d9 c0       	rjmp	.+434    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				if(ent > entries)
    61e4:	82 17       	cp	r24, r18
    61e6:	93 07       	cpc	r25, r19
    61e8:	20 f4       	brcc	.+8      	; 0x61f2 <_Z12bin_tokenizeP8as_class+0x68c>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    61ea:	82 e0       	ldi	r24, 0x02	; 2
    61ec:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    61f0:	d2 c0       	rjmp	.+420    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    61f2:	50 e0       	ldi	r21, 0x00	; 0
	temp16 <<= 8;
    61f4:	54 2f       	mov	r21, r20
    61f6:	44 27       	eor	r20, r20
	temp16 += array[1];
    61f8:	46 0f       	add	r20, r22
    61fa:	51 1d       	adc	r21, r1
				if(ent > entries)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
					break;
				}
				if(start_v > ARB_VOLT_MAX)
    61fc:	43 37       	cpi	r20, 0x73	; 115
    61fe:	86 e0       	ldi	r24, 0x06	; 6
    6200:	58 07       	cpc	r21, r24
    6202:	24 f0       	brlt	.+8      	; 0x620c <_Z12bin_tokenizeP8as_class+0x6a6>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    6204:	82 e0       	ldi	r24, 0x02	; 2
    6206:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    620a:	c5 c0       	rjmp	.+394    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(start_v < ARB_VOLT_MIN)
    620c:	4e 38       	cpi	r20, 0x8E	; 142
    620e:	99 ef       	ldi	r25, 0xF9	; 249
    6210:	59 07       	cpc	r21, r25
    6212:	24 f4       	brge	.+8      	; 0x621c <_Z12bin_tokenizeP8as_class+0x6b6>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6214:	81 e0       	ldi	r24, 0x01	; 1
    6216:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    621a:	bd c0       	rjmp	.+378    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    621c:	f1 2c       	mov	r15, r1
	temp16 <<= 8;
    621e:	fe 2c       	mov	r15, r14
    6220:	ee 24       	eor	r14, r14
	temp16 += array[1];
    6222:	ea 0e       	add	r14, r26
    6224:	f1 1c       	adc	r15, r1
				else if(start_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(end_v > ARB_VOLT_MAX)
    6226:	83 e7       	ldi	r24, 0x73	; 115
    6228:	e8 16       	cp	r14, r24
    622a:	86 e0       	ldi	r24, 0x06	; 6
    622c:	f8 06       	cpc	r15, r24
    622e:	24 f0       	brlt	.+8      	; 0x6238 <_Z12bin_tokenizeP8as_class+0x6d2>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    6230:	82 e0       	ldi	r24, 0x02	; 2
    6232:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6236:	af c0       	rjmp	.+350    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(end_v < ARB_VOLT_MIN)
    6238:	9e e8       	ldi	r25, 0x8E	; 142
    623a:	e9 16       	cp	r14, r25
    623c:	99 ef       	ldi	r25, 0xF9	; 249
    623e:	f9 06       	cpc	r15, r25
    6240:	24 f4       	brge	.+8      	; 0x624a <_Z12bin_tokenizeP8as_class+0x6e4>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    6242:	81 e0       	ldi	r24, 0x01	; 1
    6244:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6248:	a6 c0       	rjmp	.+332    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    624a:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    624c:	10 2f       	mov	r17, r16
    624e:	00 27       	eor	r16, r16
	temp16 += array[1];
    6250:	07 0f       	add	r16, r23
    6252:	11 1d       	adc	r17, r1
				else if(end_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > ARB_RATE_MAX)
    6254:	01 3d       	cpi	r16, 0xD1	; 209
    6256:	87 e0       	ldi	r24, 0x07	; 7
    6258:	18 07       	cpc	r17, r24
    625a:	20 f0       	brcs	.+8      	; 0x6264 <_Z12bin_tokenizeP8as_class+0x6fe>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    625c:	82 e0       	ldi	r24, 0x02	; 2
    625e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6262:	99 c0       	rjmp	.+306    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				else if(rate < ARB_RATE_MIN)
    6264:	01 15       	cp	r16, r1
    6266:	11 05       	cpc	r17, r1
    6268:	21 f4       	brne	.+8      	; 0x6272 <_Z12bin_tokenizeP8as_class+0x70c>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    626a:	81 e0       	ldi	r24, 0x01	; 1
    626c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
					break;
    6270:	92 c0       	rjmp	.+292    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				}
				
				//Save values in the EEPROM.
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 6 * (ent - 1)), start_v);
    6272:	86 e0       	ldi	r24, 0x06	; 6
    6274:	82 9f       	mul	r24, r18
    6276:	e0 01       	movw	r28, r0
    6278:	83 9f       	mul	r24, r19
    627a:	d0 0d       	add	r29, r0
    627c:	11 24       	eor	r1, r1
    627e:	ba 01       	movw	r22, r20
    6280:	ce 01       	movw	r24, r28
    6282:	02 96       	adiw	r24, 0x02	; 2
    6284:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 2 + 6 * (ent - 1)), end_v);
    6288:	b7 01       	movw	r22, r14
    628a:	ce 01       	movw	r24, r28
    628c:	04 96       	adiw	r24, 0x04	; 4
    628e:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
				atmega_eeprom::write_word((uint16_t *)(ARB_START + 4 + 6 * (ent - 1)), rate);
    6292:	b8 01       	movw	r22, r16
    6294:	ce 01       	movw	r24, r28
    6296:	06 96       	adiw	r24, 0x06	; 6
    6298:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
				
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    629c:	80 e0       	ldi	r24, 0x00	; 0
    629e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    62a2:	79 c0       	rjmp	.+242    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    62a4:	83 e0       	ldi	r24, 0x03	; 3
    62a6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
    62aa:	75 c0       	rjmp	.+234    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		break;
		
		case BIN_ARB_DLE://Delete last arbitrary waveform entry.
					
			//Get number of entries already in list.
			entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    62ac:	86 e0       	ldi	r24, 0x06	; 6
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
			
			if(entries)//decrement and save.
    62b4:	00 97       	sbiw	r24, 0x00	; 0
    62b6:	39 f0       	breq	.+14     	; 0x62c6 <_Z12bin_tokenizeP8as_class+0x760>
				atmega_eeprom::write_word((uint16_t *)ARB_NUM, entries - 1);
    62b8:	bc 01       	movw	r22, r24
    62ba:	61 50       	subi	r22, 0x01	; 1
    62bc:	71 09       	sbc	r23, r1
    62be:	86 e0       	ldi	r24, 0x06	; 6
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
			
			atmega_uart::tx_byte(ER_BIN_NO_ERR);
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		break;
    62cc:	64 c0       	rjmp	.+200    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_DAE://Delete all arbitrary waveform entries.
			atmega_eeprom::write_word((uint16_t *)ARB_NUM, 0);
    62ce:	60 e0       	ldi	r22, 0x00	; 0
    62d0:	70 e0       	ldi	r23, 0x00	; 0
    62d2:	86 e0       	ldi	r24, 0x06	; 6
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN13atmega_eeprom10write_wordEPjj>
			atmega_uart::tx_byte(ER_BIN_NO_ERR);
    62da:	80 e0       	ldi	r24, 0x00	; 0
    62dc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		break;
    62e0:	5a c0       	rjmp	.+180    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_SV://Get stored arbitrary waveform entries.
					
			//Get number of entries already in list.
			entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
    62e2:	86 e0       	ldi	r24, 0x06	; 6
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    62ea:	8c 01       	movw	r16, r24
			
			if(!entries)//If no entries, exit.
    62ec:	00 97       	sbiw	r24, 0x00	; 0
    62ee:	21 f4       	brne	.+8      	; 0x62f8 <_Z12bin_tokenizeP8as_class+0x792>
			{
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    62f0:	80 e0       	ldi	r24, 0x00	; 0
    62f2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
				break;
    62f6:	4f c0       	rjmp	.+158    	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		case BIN_ARB_SV://Get stored arbitrary waveform entries.
					
			//Get number of entries already in list.
			entries = atmega_eeprom::read_word((uint16_t *)ARB_NUM);
			
			if(!entries)//If no entries, exit.
    62f8:	f1 2c       	mov	r15, r1
				break;
			}
			
			for (uint8_t i = 0; i < entries; i++)//Transmit stored contents.
			{
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 6 * i)));
    62fa:	2f 2d       	mov	r18, r15
    62fc:	30 e0       	ldi	r19, 0x00	; 0
    62fe:	e9 01       	movw	r28, r18
    6300:	cc 0f       	add	r28, r28
    6302:	dd 1f       	adc	r29, r29
    6304:	2c 0f       	add	r18, r28
    6306:	3d 1f       	adc	r19, r29
    6308:	e9 01       	movw	r28, r18
    630a:	cc 0f       	add	r28, r28
    630c:	dd 1f       	adc	r29, r29
    630e:	ce 01       	movw	r24, r28
    6310:	08 96       	adiw	r24, 0x08	; 8
    6312:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    6316:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 2 + 6 * i)));
    631a:	ce 01       	movw	r24, r28
    631c:	0a 96       	adiw	r24, 0x0a	; 10
    631e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    6322:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 4 + 6 * i)));
    6326:	ce 01       	movw	r24, r28
    6328:	0c 96       	adiw	r24, 0x0c	; 12
    632a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN13atmega_eeprom9read_wordEPj>
    632e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN11atmega_uart7tx_wordEj>
			{
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
				break;
			}
			
			for (uint8_t i = 0; i < entries; i++)//Transmit stored contents.
    6332:	f3 94       	inc	r15
    6334:	2f 2d       	mov	r18, r15
    6336:	30 e0       	ldi	r19, 0x00	; 0
    6338:	20 17       	cp	r18, r16
    633a:	31 07       	cpc	r19, r17
    633c:	f0 f2       	brcs	.-68     	; 0x62fa <_Z12bin_tokenizeP8as_class+0x794>
    633e:	2b c0       	rjmp	.+86     	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
				atmega_uart::tx_word(atmega_eeprom::read_word((uint16_t *)(ARB_START + 4 + 6 * i)));
			}
		break;
		
		case BIN_ARB_C:///Enable cyclic arbitrary waveforms.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_arb_cyclic);
    6340:	2c e9       	ldi	r18, 0x9C	; 156
    6342:	34 e1       	ldi	r19, 0x14	; 20
    6344:	40 e0       	ldi	r20, 0x00	; 0
    6346:	50 e0       	ldi	r21, 0x00	; 0
    6348:	be 01       	movw	r22, r28
    634a:	8d e7       	ldi	r24, 0x7D	; 125
    634c:	91 e0       	ldi	r25, 0x01	; 1
    634e:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    6352:	21 c0       	rjmp	.+66     	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_ARB_CS://Set number of arbitrary waveform cycles.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_arb_cycles);
    6354:	23 ea       	ldi	r18, 0xA3	; 163
    6356:	34 e1       	ldi	r19, 0x14	; 20
    6358:	40 e0       	ldi	r20, 0x00	; 0
    635a:	50 e0       	ldi	r21, 0x00	; 0
    635c:	be 01       	movw	r22, r28
    635e:	8d e7       	ldi	r24, 0x7D	; 125
    6360:	91 e0       	ldi	r25, 0x01	; 1
    6362:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    6366:	17 c0       	rjmp	.+46     	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LPF_EN://Enable low-pass filter.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_soft_filt);
    6368:	22 eb       	ldi	r18, 0xB2	; 178
    636a:	34 e1       	ldi	r19, 0x14	; 20
    636c:	40 e0       	ldi	r20, 0x00	; 0
    636e:	50 e0       	ldi	r21, 0x00	; 0
    6370:	be 01       	movw	r22, r28
    6372:	8d e7       	ldi	r24, 0x7D	; 125
    6374:	91 e0       	ldi	r25, 0x01	; 1
    6376:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    637a:	0d c0       	rjmp	.+26     	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		case BIN_LPF_SF://Set low-pass filter selection.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_soft_sel);
    637c:	29 eb       	ldi	r18, 0xB9	; 185
    637e:	34 e1       	ldi	r19, 0x14	; 20
    6380:	40 e0       	ldi	r20, 0x00	; 0
    6382:	50 e0       	ldi	r21, 0x00	; 0
    6384:	be 01       	movw	r22, r28
    6386:	8d e7       	ldi	r24, 0x7D	; 125
    6388:	91 e0       	ldi	r25, 0x01	; 1
    638a:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    638e:	03 c0       	rjmp	.+6      	; 0x6396 <_Z12bin_tokenizeP8as_class+0x830>
		
		default://Unrecognized command.
			atmega_uart::tx_byte(ER_BIN_INV_CMD);
    6390:	86 e0       	ldi	r24, 0x06	; 6
    6392:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN11atmega_uart7tx_byteEh>
		break;
	}
	
	//Reset index for next string.
	bin_index = 0;
    6396:	10 92 7b 01 	sts	0x017B, r1
}
    639a:	df 91       	pop	r29
    639c:	cf 91       	pop	r28
    639e:	1f 91       	pop	r17
    63a0:	0f 91       	pop	r16
    63a2:	ff 90       	pop	r15
    63a4:	ef 90       	pop	r14
    63a6:	df 90       	pop	r13
    63a8:	cf 90       	pop	r12
    63aa:	08 95       	ret

000063ac <__subsf3>:
    63ac:	50 58       	subi	r21, 0x80	; 128

000063ae <__addsf3>:
    63ae:	bb 27       	eor	r27, r27
    63b0:	aa 27       	eor	r26, r26
    63b2:	0e d0       	rcall	.+28     	; 0x63d0 <__addsf3x>
    63b4:	75 c1       	rjmp	.+746    	; 0x66a0 <__fp_round>
    63b6:	66 d1       	rcall	.+716    	; 0x6684 <__fp_pscA>
    63b8:	30 f0       	brcs	.+12     	; 0x63c6 <__addsf3+0x18>
    63ba:	6b d1       	rcall	.+726    	; 0x6692 <__fp_pscB>
    63bc:	20 f0       	brcs	.+8      	; 0x63c6 <__addsf3+0x18>
    63be:	31 f4       	brne	.+12     	; 0x63cc <__addsf3+0x1e>
    63c0:	9f 3f       	cpi	r25, 0xFF	; 255
    63c2:	11 f4       	brne	.+4      	; 0x63c8 <__addsf3+0x1a>
    63c4:	1e f4       	brtc	.+6      	; 0x63cc <__addsf3+0x1e>
    63c6:	5b c1       	rjmp	.+694    	; 0x667e <__fp_nan>
    63c8:	0e f4       	brtc	.+2      	; 0x63cc <__addsf3+0x1e>
    63ca:	e0 95       	com	r30
    63cc:	e7 fb       	bst	r30, 7
    63ce:	51 c1       	rjmp	.+674    	; 0x6672 <__fp_inf>

000063d0 <__addsf3x>:
    63d0:	e9 2f       	mov	r30, r25
    63d2:	77 d1       	rcall	.+750    	; 0x66c2 <__fp_split3>
    63d4:	80 f3       	brcs	.-32     	; 0x63b6 <__addsf3+0x8>
    63d6:	ba 17       	cp	r27, r26
    63d8:	62 07       	cpc	r22, r18
    63da:	73 07       	cpc	r23, r19
    63dc:	84 07       	cpc	r24, r20
    63de:	95 07       	cpc	r25, r21
    63e0:	18 f0       	brcs	.+6      	; 0x63e8 <__addsf3x+0x18>
    63e2:	71 f4       	brne	.+28     	; 0x6400 <__addsf3x+0x30>
    63e4:	9e f5       	brtc	.+102    	; 0x644c <__addsf3x+0x7c>
    63e6:	8f c1       	rjmp	.+798    	; 0x6706 <__fp_zero>
    63e8:	0e f4       	brtc	.+2      	; 0x63ec <__addsf3x+0x1c>
    63ea:	e0 95       	com	r30
    63ec:	0b 2e       	mov	r0, r27
    63ee:	ba 2f       	mov	r27, r26
    63f0:	a0 2d       	mov	r26, r0
    63f2:	0b 01       	movw	r0, r22
    63f4:	b9 01       	movw	r22, r18
    63f6:	90 01       	movw	r18, r0
    63f8:	0c 01       	movw	r0, r24
    63fa:	ca 01       	movw	r24, r20
    63fc:	a0 01       	movw	r20, r0
    63fe:	11 24       	eor	r1, r1
    6400:	ff 27       	eor	r31, r31
    6402:	59 1b       	sub	r21, r25
    6404:	99 f0       	breq	.+38     	; 0x642c <__addsf3x+0x5c>
    6406:	59 3f       	cpi	r21, 0xF9	; 249
    6408:	50 f4       	brcc	.+20     	; 0x641e <__addsf3x+0x4e>
    640a:	50 3e       	cpi	r21, 0xE0	; 224
    640c:	68 f1       	brcs	.+90     	; 0x6468 <__addsf3x+0x98>
    640e:	1a 16       	cp	r1, r26
    6410:	f0 40       	sbci	r31, 0x00	; 0
    6412:	a2 2f       	mov	r26, r18
    6414:	23 2f       	mov	r18, r19
    6416:	34 2f       	mov	r19, r20
    6418:	44 27       	eor	r20, r20
    641a:	58 5f       	subi	r21, 0xF8	; 248
    641c:	f3 cf       	rjmp	.-26     	; 0x6404 <__addsf3x+0x34>
    641e:	46 95       	lsr	r20
    6420:	37 95       	ror	r19
    6422:	27 95       	ror	r18
    6424:	a7 95       	ror	r26
    6426:	f0 40       	sbci	r31, 0x00	; 0
    6428:	53 95       	inc	r21
    642a:	c9 f7       	brne	.-14     	; 0x641e <__addsf3x+0x4e>
    642c:	7e f4       	brtc	.+30     	; 0x644c <__addsf3x+0x7c>
    642e:	1f 16       	cp	r1, r31
    6430:	ba 0b       	sbc	r27, r26
    6432:	62 0b       	sbc	r22, r18
    6434:	73 0b       	sbc	r23, r19
    6436:	84 0b       	sbc	r24, r20
    6438:	ba f0       	brmi	.+46     	; 0x6468 <__addsf3x+0x98>
    643a:	91 50       	subi	r25, 0x01	; 1
    643c:	a1 f0       	breq	.+40     	; 0x6466 <__addsf3x+0x96>
    643e:	ff 0f       	add	r31, r31
    6440:	bb 1f       	adc	r27, r27
    6442:	66 1f       	adc	r22, r22
    6444:	77 1f       	adc	r23, r23
    6446:	88 1f       	adc	r24, r24
    6448:	c2 f7       	brpl	.-16     	; 0x643a <__addsf3x+0x6a>
    644a:	0e c0       	rjmp	.+28     	; 0x6468 <__addsf3x+0x98>
    644c:	ba 0f       	add	r27, r26
    644e:	62 1f       	adc	r22, r18
    6450:	73 1f       	adc	r23, r19
    6452:	84 1f       	adc	r24, r20
    6454:	48 f4       	brcc	.+18     	; 0x6468 <__addsf3x+0x98>
    6456:	87 95       	ror	r24
    6458:	77 95       	ror	r23
    645a:	67 95       	ror	r22
    645c:	b7 95       	ror	r27
    645e:	f7 95       	ror	r31
    6460:	9e 3f       	cpi	r25, 0xFE	; 254
    6462:	08 f0       	brcs	.+2      	; 0x6466 <__addsf3x+0x96>
    6464:	b3 cf       	rjmp	.-154    	; 0x63cc <__addsf3+0x1e>
    6466:	93 95       	inc	r25
    6468:	88 0f       	add	r24, r24
    646a:	08 f0       	brcs	.+2      	; 0x646e <__addsf3x+0x9e>
    646c:	99 27       	eor	r25, r25
    646e:	ee 0f       	add	r30, r30
    6470:	97 95       	ror	r25
    6472:	87 95       	ror	r24
    6474:	08 95       	ret

00006476 <__cmpsf2>:
    6476:	d9 d0       	rcall	.+434    	; 0x662a <__fp_cmp>
    6478:	08 f4       	brcc	.+2      	; 0x647c <__cmpsf2+0x6>
    647a:	81 e0       	ldi	r24, 0x01	; 1
    647c:	08 95       	ret

0000647e <__divsf3>:
    647e:	0c d0       	rcall	.+24     	; 0x6498 <__divsf3x>
    6480:	0f c1       	rjmp	.+542    	; 0x66a0 <__fp_round>
    6482:	07 d1       	rcall	.+526    	; 0x6692 <__fp_pscB>
    6484:	40 f0       	brcs	.+16     	; 0x6496 <__divsf3+0x18>
    6486:	fe d0       	rcall	.+508    	; 0x6684 <__fp_pscA>
    6488:	30 f0       	brcs	.+12     	; 0x6496 <__divsf3+0x18>
    648a:	21 f4       	brne	.+8      	; 0x6494 <__divsf3+0x16>
    648c:	5f 3f       	cpi	r21, 0xFF	; 255
    648e:	19 f0       	breq	.+6      	; 0x6496 <__divsf3+0x18>
    6490:	f0 c0       	rjmp	.+480    	; 0x6672 <__fp_inf>
    6492:	51 11       	cpse	r21, r1
    6494:	39 c1       	rjmp	.+626    	; 0x6708 <__fp_szero>
    6496:	f3 c0       	rjmp	.+486    	; 0x667e <__fp_nan>

00006498 <__divsf3x>:
    6498:	14 d1       	rcall	.+552    	; 0x66c2 <__fp_split3>
    649a:	98 f3       	brcs	.-26     	; 0x6482 <__divsf3+0x4>

0000649c <__divsf3_pse>:
    649c:	99 23       	and	r25, r25
    649e:	c9 f3       	breq	.-14     	; 0x6492 <__divsf3+0x14>
    64a0:	55 23       	and	r21, r21
    64a2:	b1 f3       	breq	.-20     	; 0x6490 <__divsf3+0x12>
    64a4:	95 1b       	sub	r25, r21
    64a6:	55 0b       	sbc	r21, r21
    64a8:	bb 27       	eor	r27, r27
    64aa:	aa 27       	eor	r26, r26
    64ac:	62 17       	cp	r22, r18
    64ae:	73 07       	cpc	r23, r19
    64b0:	84 07       	cpc	r24, r20
    64b2:	38 f0       	brcs	.+14     	; 0x64c2 <__divsf3_pse+0x26>
    64b4:	9f 5f       	subi	r25, 0xFF	; 255
    64b6:	5f 4f       	sbci	r21, 0xFF	; 255
    64b8:	22 0f       	add	r18, r18
    64ba:	33 1f       	adc	r19, r19
    64bc:	44 1f       	adc	r20, r20
    64be:	aa 1f       	adc	r26, r26
    64c0:	a9 f3       	breq	.-22     	; 0x64ac <__divsf3_pse+0x10>
    64c2:	33 d0       	rcall	.+102    	; 0x652a <__divsf3_pse+0x8e>
    64c4:	0e 2e       	mov	r0, r30
    64c6:	3a f0       	brmi	.+14     	; 0x64d6 <__divsf3_pse+0x3a>
    64c8:	e0 e8       	ldi	r30, 0x80	; 128
    64ca:	30 d0       	rcall	.+96     	; 0x652c <__divsf3_pse+0x90>
    64cc:	91 50       	subi	r25, 0x01	; 1
    64ce:	50 40       	sbci	r21, 0x00	; 0
    64d0:	e6 95       	lsr	r30
    64d2:	00 1c       	adc	r0, r0
    64d4:	ca f7       	brpl	.-14     	; 0x64c8 <__divsf3_pse+0x2c>
    64d6:	29 d0       	rcall	.+82     	; 0x652a <__divsf3_pse+0x8e>
    64d8:	fe 2f       	mov	r31, r30
    64da:	27 d0       	rcall	.+78     	; 0x652a <__divsf3_pse+0x8e>
    64dc:	66 0f       	add	r22, r22
    64de:	77 1f       	adc	r23, r23
    64e0:	88 1f       	adc	r24, r24
    64e2:	bb 1f       	adc	r27, r27
    64e4:	26 17       	cp	r18, r22
    64e6:	37 07       	cpc	r19, r23
    64e8:	48 07       	cpc	r20, r24
    64ea:	ab 07       	cpc	r26, r27
    64ec:	b0 e8       	ldi	r27, 0x80	; 128
    64ee:	09 f0       	breq	.+2      	; 0x64f2 <__divsf3_pse+0x56>
    64f0:	bb 0b       	sbc	r27, r27
    64f2:	80 2d       	mov	r24, r0
    64f4:	bf 01       	movw	r22, r30
    64f6:	ff 27       	eor	r31, r31
    64f8:	93 58       	subi	r25, 0x83	; 131
    64fa:	5f 4f       	sbci	r21, 0xFF	; 255
    64fc:	2a f0       	brmi	.+10     	; 0x6508 <__divsf3_pse+0x6c>
    64fe:	9e 3f       	cpi	r25, 0xFE	; 254
    6500:	51 05       	cpc	r21, r1
    6502:	68 f0       	brcs	.+26     	; 0x651e <__divsf3_pse+0x82>
    6504:	b6 c0       	rjmp	.+364    	; 0x6672 <__fp_inf>
    6506:	00 c1       	rjmp	.+512    	; 0x6708 <__fp_szero>
    6508:	5f 3f       	cpi	r21, 0xFF	; 255
    650a:	ec f3       	brlt	.-6      	; 0x6506 <__divsf3_pse+0x6a>
    650c:	98 3e       	cpi	r25, 0xE8	; 232
    650e:	dc f3       	brlt	.-10     	; 0x6506 <__divsf3_pse+0x6a>
    6510:	86 95       	lsr	r24
    6512:	77 95       	ror	r23
    6514:	67 95       	ror	r22
    6516:	b7 95       	ror	r27
    6518:	f7 95       	ror	r31
    651a:	9f 5f       	subi	r25, 0xFF	; 255
    651c:	c9 f7       	brne	.-14     	; 0x6510 <__divsf3_pse+0x74>
    651e:	88 0f       	add	r24, r24
    6520:	91 1d       	adc	r25, r1
    6522:	96 95       	lsr	r25
    6524:	87 95       	ror	r24
    6526:	97 f9       	bld	r25, 7
    6528:	08 95       	ret
    652a:	e1 e0       	ldi	r30, 0x01	; 1
    652c:	66 0f       	add	r22, r22
    652e:	77 1f       	adc	r23, r23
    6530:	88 1f       	adc	r24, r24
    6532:	bb 1f       	adc	r27, r27
    6534:	62 17       	cp	r22, r18
    6536:	73 07       	cpc	r23, r19
    6538:	84 07       	cpc	r24, r20
    653a:	ba 07       	cpc	r27, r26
    653c:	20 f0       	brcs	.+8      	; 0x6546 <__divsf3_pse+0xaa>
    653e:	62 1b       	sub	r22, r18
    6540:	73 0b       	sbc	r23, r19
    6542:	84 0b       	sbc	r24, r20
    6544:	ba 0b       	sbc	r27, r26
    6546:	ee 1f       	adc	r30, r30
    6548:	88 f7       	brcc	.-30     	; 0x652c <__divsf3_pse+0x90>
    654a:	e0 95       	com	r30
    654c:	08 95       	ret

0000654e <__fixsfsi>:
    654e:	04 d0       	rcall	.+8      	; 0x6558 <__fixunssfsi>
    6550:	68 94       	set
    6552:	b1 11       	cpse	r27, r1
    6554:	d9 c0       	rjmp	.+434    	; 0x6708 <__fp_szero>
    6556:	08 95       	ret

00006558 <__fixunssfsi>:
    6558:	bc d0       	rcall	.+376    	; 0x66d2 <__fp_splitA>
    655a:	88 f0       	brcs	.+34     	; 0x657e <__fixunssfsi+0x26>
    655c:	9f 57       	subi	r25, 0x7F	; 127
    655e:	90 f0       	brcs	.+36     	; 0x6584 <__fixunssfsi+0x2c>
    6560:	b9 2f       	mov	r27, r25
    6562:	99 27       	eor	r25, r25
    6564:	b7 51       	subi	r27, 0x17	; 23
    6566:	a0 f0       	brcs	.+40     	; 0x6590 <__fixunssfsi+0x38>
    6568:	d1 f0       	breq	.+52     	; 0x659e <__fixunssfsi+0x46>
    656a:	66 0f       	add	r22, r22
    656c:	77 1f       	adc	r23, r23
    656e:	88 1f       	adc	r24, r24
    6570:	99 1f       	adc	r25, r25
    6572:	1a f0       	brmi	.+6      	; 0x657a <__fixunssfsi+0x22>
    6574:	ba 95       	dec	r27
    6576:	c9 f7       	brne	.-14     	; 0x656a <__fixunssfsi+0x12>
    6578:	12 c0       	rjmp	.+36     	; 0x659e <__fixunssfsi+0x46>
    657a:	b1 30       	cpi	r27, 0x01	; 1
    657c:	81 f0       	breq	.+32     	; 0x659e <__fixunssfsi+0x46>
    657e:	c3 d0       	rcall	.+390    	; 0x6706 <__fp_zero>
    6580:	b1 e0       	ldi	r27, 0x01	; 1
    6582:	08 95       	ret
    6584:	c0 c0       	rjmp	.+384    	; 0x6706 <__fp_zero>
    6586:	67 2f       	mov	r22, r23
    6588:	78 2f       	mov	r23, r24
    658a:	88 27       	eor	r24, r24
    658c:	b8 5f       	subi	r27, 0xF8	; 248
    658e:	39 f0       	breq	.+14     	; 0x659e <__fixunssfsi+0x46>
    6590:	b9 3f       	cpi	r27, 0xF9	; 249
    6592:	cc f3       	brlt	.-14     	; 0x6586 <__fixunssfsi+0x2e>
    6594:	86 95       	lsr	r24
    6596:	77 95       	ror	r23
    6598:	67 95       	ror	r22
    659a:	b3 95       	inc	r27
    659c:	d9 f7       	brne	.-10     	; 0x6594 <__fixunssfsi+0x3c>
    659e:	3e f4       	brtc	.+14     	; 0x65ae <__fixunssfsi+0x56>
    65a0:	90 95       	com	r25
    65a2:	80 95       	com	r24
    65a4:	70 95       	com	r23
    65a6:	61 95       	neg	r22
    65a8:	7f 4f       	sbci	r23, 0xFF	; 255
    65aa:	8f 4f       	sbci	r24, 0xFF	; 255
    65ac:	9f 4f       	sbci	r25, 0xFF	; 255
    65ae:	08 95       	ret

000065b0 <__floatunsisf>:
    65b0:	e8 94       	clt
    65b2:	09 c0       	rjmp	.+18     	; 0x65c6 <__floatsisf+0x12>

000065b4 <__floatsisf>:
    65b4:	97 fb       	bst	r25, 7
    65b6:	3e f4       	brtc	.+14     	; 0x65c6 <__floatsisf+0x12>
    65b8:	90 95       	com	r25
    65ba:	80 95       	com	r24
    65bc:	70 95       	com	r23
    65be:	61 95       	neg	r22
    65c0:	7f 4f       	sbci	r23, 0xFF	; 255
    65c2:	8f 4f       	sbci	r24, 0xFF	; 255
    65c4:	9f 4f       	sbci	r25, 0xFF	; 255
    65c6:	99 23       	and	r25, r25
    65c8:	a9 f0       	breq	.+42     	; 0x65f4 <__floatsisf+0x40>
    65ca:	f9 2f       	mov	r31, r25
    65cc:	96 e9       	ldi	r25, 0x96	; 150
    65ce:	bb 27       	eor	r27, r27
    65d0:	93 95       	inc	r25
    65d2:	f6 95       	lsr	r31
    65d4:	87 95       	ror	r24
    65d6:	77 95       	ror	r23
    65d8:	67 95       	ror	r22
    65da:	b7 95       	ror	r27
    65dc:	f1 11       	cpse	r31, r1
    65de:	f8 cf       	rjmp	.-16     	; 0x65d0 <__floatsisf+0x1c>
    65e0:	fa f4       	brpl	.+62     	; 0x6620 <__floatsisf+0x6c>
    65e2:	bb 0f       	add	r27, r27
    65e4:	11 f4       	brne	.+4      	; 0x65ea <__floatsisf+0x36>
    65e6:	60 ff       	sbrs	r22, 0
    65e8:	1b c0       	rjmp	.+54     	; 0x6620 <__floatsisf+0x6c>
    65ea:	6f 5f       	subi	r22, 0xFF	; 255
    65ec:	7f 4f       	sbci	r23, 0xFF	; 255
    65ee:	8f 4f       	sbci	r24, 0xFF	; 255
    65f0:	9f 4f       	sbci	r25, 0xFF	; 255
    65f2:	16 c0       	rjmp	.+44     	; 0x6620 <__floatsisf+0x6c>
    65f4:	88 23       	and	r24, r24
    65f6:	11 f0       	breq	.+4      	; 0x65fc <__floatsisf+0x48>
    65f8:	96 e9       	ldi	r25, 0x96	; 150
    65fa:	11 c0       	rjmp	.+34     	; 0x661e <__floatsisf+0x6a>
    65fc:	77 23       	and	r23, r23
    65fe:	21 f0       	breq	.+8      	; 0x6608 <__floatsisf+0x54>
    6600:	9e e8       	ldi	r25, 0x8E	; 142
    6602:	87 2f       	mov	r24, r23
    6604:	76 2f       	mov	r23, r22
    6606:	05 c0       	rjmp	.+10     	; 0x6612 <__floatsisf+0x5e>
    6608:	66 23       	and	r22, r22
    660a:	71 f0       	breq	.+28     	; 0x6628 <__floatsisf+0x74>
    660c:	96 e8       	ldi	r25, 0x86	; 134
    660e:	86 2f       	mov	r24, r22
    6610:	70 e0       	ldi	r23, 0x00	; 0
    6612:	60 e0       	ldi	r22, 0x00	; 0
    6614:	2a f0       	brmi	.+10     	; 0x6620 <__floatsisf+0x6c>
    6616:	9a 95       	dec	r25
    6618:	66 0f       	add	r22, r22
    661a:	77 1f       	adc	r23, r23
    661c:	88 1f       	adc	r24, r24
    661e:	da f7       	brpl	.-10     	; 0x6616 <__floatsisf+0x62>
    6620:	88 0f       	add	r24, r24
    6622:	96 95       	lsr	r25
    6624:	87 95       	ror	r24
    6626:	97 f9       	bld	r25, 7
    6628:	08 95       	ret

0000662a <__fp_cmp>:
    662a:	99 0f       	add	r25, r25
    662c:	00 08       	sbc	r0, r0
    662e:	55 0f       	add	r21, r21
    6630:	aa 0b       	sbc	r26, r26
    6632:	e0 e8       	ldi	r30, 0x80	; 128
    6634:	fe ef       	ldi	r31, 0xFE	; 254
    6636:	16 16       	cp	r1, r22
    6638:	17 06       	cpc	r1, r23
    663a:	e8 07       	cpc	r30, r24
    663c:	f9 07       	cpc	r31, r25
    663e:	c0 f0       	brcs	.+48     	; 0x6670 <__fp_cmp+0x46>
    6640:	12 16       	cp	r1, r18
    6642:	13 06       	cpc	r1, r19
    6644:	e4 07       	cpc	r30, r20
    6646:	f5 07       	cpc	r31, r21
    6648:	98 f0       	brcs	.+38     	; 0x6670 <__fp_cmp+0x46>
    664a:	62 1b       	sub	r22, r18
    664c:	73 0b       	sbc	r23, r19
    664e:	84 0b       	sbc	r24, r20
    6650:	95 0b       	sbc	r25, r21
    6652:	39 f4       	brne	.+14     	; 0x6662 <__fp_cmp+0x38>
    6654:	0a 26       	eor	r0, r26
    6656:	61 f0       	breq	.+24     	; 0x6670 <__fp_cmp+0x46>
    6658:	23 2b       	or	r18, r19
    665a:	24 2b       	or	r18, r20
    665c:	25 2b       	or	r18, r21
    665e:	21 f4       	brne	.+8      	; 0x6668 <__fp_cmp+0x3e>
    6660:	08 95       	ret
    6662:	0a 26       	eor	r0, r26
    6664:	09 f4       	brne	.+2      	; 0x6668 <__fp_cmp+0x3e>
    6666:	a1 40       	sbci	r26, 0x01	; 1
    6668:	a6 95       	lsr	r26
    666a:	8f ef       	ldi	r24, 0xFF	; 255
    666c:	81 1d       	adc	r24, r1
    666e:	81 1d       	adc	r24, r1
    6670:	08 95       	ret

00006672 <__fp_inf>:
    6672:	97 f9       	bld	r25, 7
    6674:	9f 67       	ori	r25, 0x7F	; 127
    6676:	80 e8       	ldi	r24, 0x80	; 128
    6678:	70 e0       	ldi	r23, 0x00	; 0
    667a:	60 e0       	ldi	r22, 0x00	; 0
    667c:	08 95       	ret

0000667e <__fp_nan>:
    667e:	9f ef       	ldi	r25, 0xFF	; 255
    6680:	80 ec       	ldi	r24, 0xC0	; 192
    6682:	08 95       	ret

00006684 <__fp_pscA>:
    6684:	00 24       	eor	r0, r0
    6686:	0a 94       	dec	r0
    6688:	16 16       	cp	r1, r22
    668a:	17 06       	cpc	r1, r23
    668c:	18 06       	cpc	r1, r24
    668e:	09 06       	cpc	r0, r25
    6690:	08 95       	ret

00006692 <__fp_pscB>:
    6692:	00 24       	eor	r0, r0
    6694:	0a 94       	dec	r0
    6696:	12 16       	cp	r1, r18
    6698:	13 06       	cpc	r1, r19
    669a:	14 06       	cpc	r1, r20
    669c:	05 06       	cpc	r0, r21
    669e:	08 95       	ret

000066a0 <__fp_round>:
    66a0:	09 2e       	mov	r0, r25
    66a2:	03 94       	inc	r0
    66a4:	00 0c       	add	r0, r0
    66a6:	11 f4       	brne	.+4      	; 0x66ac <__fp_round+0xc>
    66a8:	88 23       	and	r24, r24
    66aa:	52 f0       	brmi	.+20     	; 0x66c0 <__fp_round+0x20>
    66ac:	bb 0f       	add	r27, r27
    66ae:	40 f4       	brcc	.+16     	; 0x66c0 <__fp_round+0x20>
    66b0:	bf 2b       	or	r27, r31
    66b2:	11 f4       	brne	.+4      	; 0x66b8 <__fp_round+0x18>
    66b4:	60 ff       	sbrs	r22, 0
    66b6:	04 c0       	rjmp	.+8      	; 0x66c0 <__fp_round+0x20>
    66b8:	6f 5f       	subi	r22, 0xFF	; 255
    66ba:	7f 4f       	sbci	r23, 0xFF	; 255
    66bc:	8f 4f       	sbci	r24, 0xFF	; 255
    66be:	9f 4f       	sbci	r25, 0xFF	; 255
    66c0:	08 95       	ret

000066c2 <__fp_split3>:
    66c2:	57 fd       	sbrc	r21, 7
    66c4:	90 58       	subi	r25, 0x80	; 128
    66c6:	44 0f       	add	r20, r20
    66c8:	55 1f       	adc	r21, r21
    66ca:	59 f0       	breq	.+22     	; 0x66e2 <__fp_splitA+0x10>
    66cc:	5f 3f       	cpi	r21, 0xFF	; 255
    66ce:	71 f0       	breq	.+28     	; 0x66ec <__fp_splitA+0x1a>
    66d0:	47 95       	ror	r20

000066d2 <__fp_splitA>:
    66d2:	88 0f       	add	r24, r24
    66d4:	97 fb       	bst	r25, 7
    66d6:	99 1f       	adc	r25, r25
    66d8:	61 f0       	breq	.+24     	; 0x66f2 <__fp_splitA+0x20>
    66da:	9f 3f       	cpi	r25, 0xFF	; 255
    66dc:	79 f0       	breq	.+30     	; 0x66fc <__fp_splitA+0x2a>
    66de:	87 95       	ror	r24
    66e0:	08 95       	ret
    66e2:	12 16       	cp	r1, r18
    66e4:	13 06       	cpc	r1, r19
    66e6:	14 06       	cpc	r1, r20
    66e8:	55 1f       	adc	r21, r21
    66ea:	f2 cf       	rjmp	.-28     	; 0x66d0 <__fp_split3+0xe>
    66ec:	46 95       	lsr	r20
    66ee:	f1 df       	rcall	.-30     	; 0x66d2 <__fp_splitA>
    66f0:	08 c0       	rjmp	.+16     	; 0x6702 <__fp_splitA+0x30>
    66f2:	16 16       	cp	r1, r22
    66f4:	17 06       	cpc	r1, r23
    66f6:	18 06       	cpc	r1, r24
    66f8:	99 1f       	adc	r25, r25
    66fa:	f1 cf       	rjmp	.-30     	; 0x66de <__fp_splitA+0xc>
    66fc:	86 95       	lsr	r24
    66fe:	71 05       	cpc	r23, r1
    6700:	61 05       	cpc	r22, r1
    6702:	08 94       	sec
    6704:	08 95       	ret

00006706 <__fp_zero>:
    6706:	e8 94       	clt

00006708 <__fp_szero>:
    6708:	bb 27       	eor	r27, r27
    670a:	66 27       	eor	r22, r22
    670c:	77 27       	eor	r23, r23
    670e:	cb 01       	movw	r24, r22
    6710:	97 f9       	bld	r25, 7
    6712:	08 95       	ret

00006714 <__gesf2>:
    6714:	8a df       	rcall	.-236    	; 0x662a <__fp_cmp>
    6716:	08 f4       	brcc	.+2      	; 0x671a <__gesf2+0x6>
    6718:	8f ef       	ldi	r24, 0xFF	; 255
    671a:	08 95       	ret

0000671c <__mulsf3>:
    671c:	0b d0       	rcall	.+22     	; 0x6734 <__mulsf3x>
    671e:	c0 cf       	rjmp	.-128    	; 0x66a0 <__fp_round>
    6720:	b1 df       	rcall	.-158    	; 0x6684 <__fp_pscA>
    6722:	28 f0       	brcs	.+10     	; 0x672e <__mulsf3+0x12>
    6724:	b6 df       	rcall	.-148    	; 0x6692 <__fp_pscB>
    6726:	18 f0       	brcs	.+6      	; 0x672e <__mulsf3+0x12>
    6728:	95 23       	and	r25, r21
    672a:	09 f0       	breq	.+2      	; 0x672e <__mulsf3+0x12>
    672c:	a2 cf       	rjmp	.-188    	; 0x6672 <__fp_inf>
    672e:	a7 cf       	rjmp	.-178    	; 0x667e <__fp_nan>
    6730:	11 24       	eor	r1, r1
    6732:	ea cf       	rjmp	.-44     	; 0x6708 <__fp_szero>

00006734 <__mulsf3x>:
    6734:	c6 df       	rcall	.-116    	; 0x66c2 <__fp_split3>
    6736:	a0 f3       	brcs	.-24     	; 0x6720 <__mulsf3+0x4>

00006738 <__mulsf3_pse>:
    6738:	95 9f       	mul	r25, r21
    673a:	d1 f3       	breq	.-12     	; 0x6730 <__mulsf3+0x14>
    673c:	95 0f       	add	r25, r21
    673e:	50 e0       	ldi	r21, 0x00	; 0
    6740:	55 1f       	adc	r21, r21
    6742:	62 9f       	mul	r22, r18
    6744:	f0 01       	movw	r30, r0
    6746:	72 9f       	mul	r23, r18
    6748:	bb 27       	eor	r27, r27
    674a:	f0 0d       	add	r31, r0
    674c:	b1 1d       	adc	r27, r1
    674e:	63 9f       	mul	r22, r19
    6750:	aa 27       	eor	r26, r26
    6752:	f0 0d       	add	r31, r0
    6754:	b1 1d       	adc	r27, r1
    6756:	aa 1f       	adc	r26, r26
    6758:	64 9f       	mul	r22, r20
    675a:	66 27       	eor	r22, r22
    675c:	b0 0d       	add	r27, r0
    675e:	a1 1d       	adc	r26, r1
    6760:	66 1f       	adc	r22, r22
    6762:	82 9f       	mul	r24, r18
    6764:	22 27       	eor	r18, r18
    6766:	b0 0d       	add	r27, r0
    6768:	a1 1d       	adc	r26, r1
    676a:	62 1f       	adc	r22, r18
    676c:	73 9f       	mul	r23, r19
    676e:	b0 0d       	add	r27, r0
    6770:	a1 1d       	adc	r26, r1
    6772:	62 1f       	adc	r22, r18
    6774:	83 9f       	mul	r24, r19
    6776:	a0 0d       	add	r26, r0
    6778:	61 1d       	adc	r22, r1
    677a:	22 1f       	adc	r18, r18
    677c:	74 9f       	mul	r23, r20
    677e:	33 27       	eor	r19, r19
    6780:	a0 0d       	add	r26, r0
    6782:	61 1d       	adc	r22, r1
    6784:	23 1f       	adc	r18, r19
    6786:	84 9f       	mul	r24, r20
    6788:	60 0d       	add	r22, r0
    678a:	21 1d       	adc	r18, r1
    678c:	82 2f       	mov	r24, r18
    678e:	76 2f       	mov	r23, r22
    6790:	6a 2f       	mov	r22, r26
    6792:	11 24       	eor	r1, r1
    6794:	9f 57       	subi	r25, 0x7F	; 127
    6796:	50 40       	sbci	r21, 0x00	; 0
    6798:	8a f0       	brmi	.+34     	; 0x67bc <__mulsf3_pse+0x84>
    679a:	e1 f0       	breq	.+56     	; 0x67d4 <__mulsf3_pse+0x9c>
    679c:	88 23       	and	r24, r24
    679e:	4a f0       	brmi	.+18     	; 0x67b2 <__mulsf3_pse+0x7a>
    67a0:	ee 0f       	add	r30, r30
    67a2:	ff 1f       	adc	r31, r31
    67a4:	bb 1f       	adc	r27, r27
    67a6:	66 1f       	adc	r22, r22
    67a8:	77 1f       	adc	r23, r23
    67aa:	88 1f       	adc	r24, r24
    67ac:	91 50       	subi	r25, 0x01	; 1
    67ae:	50 40       	sbci	r21, 0x00	; 0
    67b0:	a9 f7       	brne	.-22     	; 0x679c <__mulsf3_pse+0x64>
    67b2:	9e 3f       	cpi	r25, 0xFE	; 254
    67b4:	51 05       	cpc	r21, r1
    67b6:	70 f0       	brcs	.+28     	; 0x67d4 <__mulsf3_pse+0x9c>
    67b8:	5c cf       	rjmp	.-328    	; 0x6672 <__fp_inf>
    67ba:	a6 cf       	rjmp	.-180    	; 0x6708 <__fp_szero>
    67bc:	5f 3f       	cpi	r21, 0xFF	; 255
    67be:	ec f3       	brlt	.-6      	; 0x67ba <__mulsf3_pse+0x82>
    67c0:	98 3e       	cpi	r25, 0xE8	; 232
    67c2:	dc f3       	brlt	.-10     	; 0x67ba <__mulsf3_pse+0x82>
    67c4:	86 95       	lsr	r24
    67c6:	77 95       	ror	r23
    67c8:	67 95       	ror	r22
    67ca:	b7 95       	ror	r27
    67cc:	f7 95       	ror	r31
    67ce:	e7 95       	ror	r30
    67d0:	9f 5f       	subi	r25, 0xFF	; 255
    67d2:	c1 f7       	brne	.-16     	; 0x67c4 <__mulsf3_pse+0x8c>
    67d4:	fe 2b       	or	r31, r30
    67d6:	88 0f       	add	r24, r24
    67d8:	91 1d       	adc	r25, r1
    67da:	96 95       	lsr	r25
    67dc:	87 95       	ror	r24
    67de:	97 f9       	bld	r25, 7
    67e0:	08 95       	ret

000067e2 <round>:
    67e2:	77 df       	rcall	.-274    	; 0x66d2 <__fp_splitA>
    67e4:	e0 f0       	brcs	.+56     	; 0x681e <round+0x3c>
    67e6:	9e 37       	cpi	r25, 0x7E	; 126
    67e8:	d8 f0       	brcs	.+54     	; 0x6820 <round+0x3e>
    67ea:	96 39       	cpi	r25, 0x96	; 150
    67ec:	b8 f4       	brcc	.+46     	; 0x681c <round+0x3a>
    67ee:	9e 38       	cpi	r25, 0x8E	; 142
    67f0:	48 f4       	brcc	.+18     	; 0x6804 <round+0x22>
    67f2:	67 2f       	mov	r22, r23
    67f4:	78 2f       	mov	r23, r24
    67f6:	88 27       	eor	r24, r24
    67f8:	98 5f       	subi	r25, 0xF8	; 248
    67fa:	f9 cf       	rjmp	.-14     	; 0x67ee <round+0xc>
    67fc:	86 95       	lsr	r24
    67fe:	77 95       	ror	r23
    6800:	67 95       	ror	r22
    6802:	93 95       	inc	r25
    6804:	95 39       	cpi	r25, 0x95	; 149
    6806:	d0 f3       	brcs	.-12     	; 0x67fc <round+0x1a>
    6808:	b6 2f       	mov	r27, r22
    680a:	b1 70       	andi	r27, 0x01	; 1
    680c:	6b 0f       	add	r22, r27
    680e:	71 1d       	adc	r23, r1
    6810:	81 1d       	adc	r24, r1
    6812:	20 f4       	brcc	.+8      	; 0x681c <round+0x3a>
    6814:	87 95       	ror	r24
    6816:	77 95       	ror	r23
    6818:	67 95       	ror	r22
    681a:	93 95       	inc	r25
    681c:	02 c0       	rjmp	.+4      	; 0x6822 <__fp_mintl>
    681e:	1c c0       	rjmp	.+56     	; 0x6858 <__fp_mpack>
    6820:	73 cf       	rjmp	.-282    	; 0x6708 <__fp_szero>

00006822 <__fp_mintl>:
    6822:	88 23       	and	r24, r24
    6824:	71 f4       	brne	.+28     	; 0x6842 <__fp_mintl+0x20>
    6826:	77 23       	and	r23, r23
    6828:	21 f0       	breq	.+8      	; 0x6832 <__fp_mintl+0x10>
    682a:	98 50       	subi	r25, 0x08	; 8
    682c:	87 2b       	or	r24, r23
    682e:	76 2f       	mov	r23, r22
    6830:	07 c0       	rjmp	.+14     	; 0x6840 <__fp_mintl+0x1e>
    6832:	66 23       	and	r22, r22
    6834:	11 f4       	brne	.+4      	; 0x683a <__fp_mintl+0x18>
    6836:	99 27       	eor	r25, r25
    6838:	0d c0       	rjmp	.+26     	; 0x6854 <__fp_mintl+0x32>
    683a:	90 51       	subi	r25, 0x10	; 16
    683c:	86 2b       	or	r24, r22
    683e:	70 e0       	ldi	r23, 0x00	; 0
    6840:	60 e0       	ldi	r22, 0x00	; 0
    6842:	2a f0       	brmi	.+10     	; 0x684e <__fp_mintl+0x2c>
    6844:	9a 95       	dec	r25
    6846:	66 0f       	add	r22, r22
    6848:	77 1f       	adc	r23, r23
    684a:	88 1f       	adc	r24, r24
    684c:	da f7       	brpl	.-10     	; 0x6844 <__fp_mintl+0x22>
    684e:	88 0f       	add	r24, r24
    6850:	96 95       	lsr	r25
    6852:	87 95       	ror	r24
    6854:	97 f9       	bld	r25, 7
    6856:	08 95       	ret

00006858 <__fp_mpack>:
    6858:	9f 3f       	cpi	r25, 0xFF	; 255
    685a:	31 f0       	breq	.+12     	; 0x6868 <__fp_mpack_finite+0xc>

0000685c <__fp_mpack_finite>:
    685c:	91 50       	subi	r25, 0x01	; 1
    685e:	20 f4       	brcc	.+8      	; 0x6868 <__fp_mpack_finite+0xc>
    6860:	87 95       	ror	r24
    6862:	77 95       	ror	r23
    6864:	67 95       	ror	r22
    6866:	b7 95       	ror	r27
    6868:	88 0f       	add	r24, r24
    686a:	91 1d       	adc	r25, r1
    686c:	96 95       	lsr	r25
    686e:	87 95       	ror	r24
    6870:	97 f9       	bld	r25, 7
    6872:	08 95       	ret

00006874 <__udivmodhi4>:
    6874:	aa 1b       	sub	r26, r26
    6876:	bb 1b       	sub	r27, r27
    6878:	51 e1       	ldi	r21, 0x11	; 17
    687a:	07 c0       	rjmp	.+14     	; 0x688a <__udivmodhi4_ep>

0000687c <__udivmodhi4_loop>:
    687c:	aa 1f       	adc	r26, r26
    687e:	bb 1f       	adc	r27, r27
    6880:	a6 17       	cp	r26, r22
    6882:	b7 07       	cpc	r27, r23
    6884:	10 f0       	brcs	.+4      	; 0x688a <__udivmodhi4_ep>
    6886:	a6 1b       	sub	r26, r22
    6888:	b7 0b       	sbc	r27, r23

0000688a <__udivmodhi4_ep>:
    688a:	88 1f       	adc	r24, r24
    688c:	99 1f       	adc	r25, r25
    688e:	5a 95       	dec	r21
    6890:	a9 f7       	brne	.-22     	; 0x687c <__udivmodhi4_loop>
    6892:	80 95       	com	r24
    6894:	90 95       	com	r25
    6896:	bc 01       	movw	r22, r24
    6898:	cd 01       	movw	r24, r26
    689a:	08 95       	ret

0000689c <__udivmodsi4>:
    689c:	a1 e2       	ldi	r26, 0x21	; 33
    689e:	1a 2e       	mov	r1, r26
    68a0:	aa 1b       	sub	r26, r26
    68a2:	bb 1b       	sub	r27, r27
    68a4:	fd 01       	movw	r30, r26
    68a6:	0d c0       	rjmp	.+26     	; 0x68c2 <__udivmodsi4_ep>

000068a8 <__udivmodsi4_loop>:
    68a8:	aa 1f       	adc	r26, r26
    68aa:	bb 1f       	adc	r27, r27
    68ac:	ee 1f       	adc	r30, r30
    68ae:	ff 1f       	adc	r31, r31
    68b0:	a2 17       	cp	r26, r18
    68b2:	b3 07       	cpc	r27, r19
    68b4:	e4 07       	cpc	r30, r20
    68b6:	f5 07       	cpc	r31, r21
    68b8:	20 f0       	brcs	.+8      	; 0x68c2 <__udivmodsi4_ep>
    68ba:	a2 1b       	sub	r26, r18
    68bc:	b3 0b       	sbc	r27, r19
    68be:	e4 0b       	sbc	r30, r20
    68c0:	f5 0b       	sbc	r31, r21

000068c2 <__udivmodsi4_ep>:
    68c2:	66 1f       	adc	r22, r22
    68c4:	77 1f       	adc	r23, r23
    68c6:	88 1f       	adc	r24, r24
    68c8:	99 1f       	adc	r25, r25
    68ca:	1a 94       	dec	r1
    68cc:	69 f7       	brne	.-38     	; 0x68a8 <__udivmodsi4_loop>
    68ce:	60 95       	com	r22
    68d0:	70 95       	com	r23
    68d2:	80 95       	com	r24
    68d4:	90 95       	com	r25
    68d6:	9b 01       	movw	r18, r22
    68d8:	ac 01       	movw	r20, r24
    68da:	bd 01       	movw	r22, r26
    68dc:	cf 01       	movw	r24, r30
    68de:	08 95       	ret

000068e0 <__divmodsi4>:
    68e0:	05 2e       	mov	r0, r21
    68e2:	97 fb       	bst	r25, 7
    68e4:	1e f4       	brtc	.+6      	; 0x68ec <__divmodsi4+0xc>
    68e6:	00 94       	com	r0
    68e8:	0e 94 87 34 	call	0x690e	; 0x690e <__negsi2>
    68ec:	57 fd       	sbrc	r21, 7
    68ee:	07 d0       	rcall	.+14     	; 0x68fe <__divmodsi4_neg2>
    68f0:	0e 94 4e 34 	call	0x689c	; 0x689c <__udivmodsi4>
    68f4:	07 fc       	sbrc	r0, 7
    68f6:	03 d0       	rcall	.+6      	; 0x68fe <__divmodsi4_neg2>
    68f8:	4e f4       	brtc	.+18     	; 0x690c <__divmodsi4_exit>
    68fa:	0c 94 87 34 	jmp	0x690e	; 0x690e <__negsi2>

000068fe <__divmodsi4_neg2>:
    68fe:	50 95       	com	r21
    6900:	40 95       	com	r20
    6902:	30 95       	com	r19
    6904:	21 95       	neg	r18
    6906:	3f 4f       	sbci	r19, 0xFF	; 255
    6908:	4f 4f       	sbci	r20, 0xFF	; 255
    690a:	5f 4f       	sbci	r21, 0xFF	; 255

0000690c <__divmodsi4_exit>:
    690c:	08 95       	ret

0000690e <__negsi2>:
    690e:	90 95       	com	r25
    6910:	80 95       	com	r24
    6912:	70 95       	com	r23
    6914:	61 95       	neg	r22
    6916:	7f 4f       	sbci	r23, 0xFF	; 255
    6918:	8f 4f       	sbci	r24, 0xFF	; 255
    691a:	9f 4f       	sbci	r25, 0xFF	; 255
    691c:	08 95       	ret

0000691e <__tablejump2__>:
    691e:	ee 0f       	add	r30, r30
    6920:	ff 1f       	adc	r31, r31

00006922 <__tablejump__>:
    6922:	05 90       	lpm	r0, Z+
    6924:	f4 91       	lpm	r31, Z
    6926:	e0 2d       	mov	r30, r0
    6928:	09 94       	ijmp

0000692a <__umulhisi3>:
    692a:	a2 9f       	mul	r26, r18
    692c:	b0 01       	movw	r22, r0
    692e:	b3 9f       	mul	r27, r19
    6930:	c0 01       	movw	r24, r0
    6932:	a3 9f       	mul	r26, r19
    6934:	70 0d       	add	r23, r0
    6936:	81 1d       	adc	r24, r1
    6938:	11 24       	eor	r1, r1
    693a:	91 1d       	adc	r25, r1
    693c:	b2 9f       	mul	r27, r18
    693e:	70 0d       	add	r23, r0
    6940:	81 1d       	adc	r24, r1
    6942:	11 24       	eor	r1, r1
    6944:	91 1d       	adc	r25, r1
    6946:	08 95       	ret

00006948 <__usmulhisi3>:
    6948:	0e 94 95 34 	call	0x692a	; 0x692a <__umulhisi3>

0000694c <__usmulhisi3_tail>:
    694c:	b7 ff       	sbrs	r27, 7
    694e:	08 95       	ret
    6950:	82 1b       	sub	r24, r18
    6952:	93 0b       	sbc	r25, r19
    6954:	08 95       	ret

00006956 <__muluhisi3>:
    6956:	0e 94 95 34 	call	0x692a	; 0x692a <__umulhisi3>
    695a:	a5 9f       	mul	r26, r21
    695c:	90 0d       	add	r25, r0
    695e:	b4 9f       	mul	r27, r20
    6960:	90 0d       	add	r25, r0
    6962:	a4 9f       	mul	r26, r20
    6964:	80 0d       	add	r24, r0
    6966:	91 1d       	adc	r25, r1
    6968:	11 24       	eor	r1, r1
    696a:	08 95       	ret

0000696c <__ashldi3>:
    696c:	0f 93       	push	r16
    696e:	08 30       	cpi	r16, 0x08	; 8
    6970:	90 f0       	brcs	.+36     	; 0x6996 <__ashldi3+0x2a>
    6972:	98 2f       	mov	r25, r24
    6974:	87 2f       	mov	r24, r23
    6976:	76 2f       	mov	r23, r22
    6978:	65 2f       	mov	r22, r21
    697a:	54 2f       	mov	r21, r20
    697c:	43 2f       	mov	r20, r19
    697e:	32 2f       	mov	r19, r18
    6980:	22 27       	eor	r18, r18
    6982:	08 50       	subi	r16, 0x08	; 8
    6984:	f4 cf       	rjmp	.-24     	; 0x696e <__ashldi3+0x2>
    6986:	22 0f       	add	r18, r18
    6988:	33 1f       	adc	r19, r19
    698a:	44 1f       	adc	r20, r20
    698c:	55 1f       	adc	r21, r21
    698e:	66 1f       	adc	r22, r22
    6990:	77 1f       	adc	r23, r23
    6992:	88 1f       	adc	r24, r24
    6994:	99 1f       	adc	r25, r25
    6996:	0a 95       	dec	r16
    6998:	b2 f7       	brpl	.-20     	; 0x6986 <__ashldi3+0x1a>
    699a:	0f 91       	pop	r16
    699c:	08 95       	ret

0000699e <__adddi3>:
    699e:	2a 0d       	add	r18, r10
    69a0:	3b 1d       	adc	r19, r11
    69a2:	4c 1d       	adc	r20, r12
    69a4:	5d 1d       	adc	r21, r13
    69a6:	6e 1d       	adc	r22, r14
    69a8:	7f 1d       	adc	r23, r15
    69aa:	80 1f       	adc	r24, r16
    69ac:	91 1f       	adc	r25, r17
    69ae:	08 95       	ret

000069b0 <__eerd_byte_m328>:
    69b0:	f9 99       	sbic	0x1f, 1	; 31
    69b2:	fe cf       	rjmp	.-4      	; 0x69b0 <__eerd_byte_m328>
    69b4:	92 bd       	out	0x22, r25	; 34
    69b6:	81 bd       	out	0x21, r24	; 33
    69b8:	f8 9a       	sbi	0x1f, 0	; 31
    69ba:	99 27       	eor	r25, r25
    69bc:	80 b5       	in	r24, 0x20	; 32
    69be:	08 95       	ret

000069c0 <__eerd_word_m328>:
    69c0:	a8 e1       	ldi	r26, 0x18	; 24
    69c2:	b0 e0       	ldi	r27, 0x00	; 0
    69c4:	42 e0       	ldi	r20, 0x02	; 2
    69c6:	50 e0       	ldi	r21, 0x00	; 0
    69c8:	0c 94 fb 34 	jmp	0x69f6	; 0x69f6 <__eerd_blraw_m328>

000069cc <__eewr_byte_m328>:
    69cc:	26 2f       	mov	r18, r22

000069ce <__eewr_r18_m328>:
    69ce:	f9 99       	sbic	0x1f, 1	; 31
    69d0:	fe cf       	rjmp	.-4      	; 0x69ce <__eewr_r18_m328>
    69d2:	1f ba       	out	0x1f, r1	; 31
    69d4:	92 bd       	out	0x22, r25	; 34
    69d6:	81 bd       	out	0x21, r24	; 33
    69d8:	20 bd       	out	0x20, r18	; 32
    69da:	0f b6       	in	r0, 0x3f	; 63
    69dc:	f8 94       	cli
    69de:	fa 9a       	sbi	0x1f, 2	; 31
    69e0:	f9 9a       	sbi	0x1f, 1	; 31
    69e2:	0f be       	out	0x3f, r0	; 63
    69e4:	01 96       	adiw	r24, 0x01	; 1
    69e6:	08 95       	ret

000069e8 <__eewr_word_m328>:
    69e8:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__eewr_byte_m328>
    69ec:	27 2f       	mov	r18, r23
    69ee:	0c 94 e7 34 	jmp	0x69ce	; 0x69ce <__eewr_r18_m328>

000069f2 <__eerd_block_m328>:
    69f2:	dc 01       	movw	r26, r24
    69f4:	cb 01       	movw	r24, r22

000069f6 <__eerd_blraw_m328>:
    69f6:	fc 01       	movw	r30, r24
    69f8:	f9 99       	sbic	0x1f, 1	; 31
    69fa:	fe cf       	rjmp	.-4      	; 0x69f8 <__eerd_blraw_m328+0x2>
    69fc:	06 c0       	rjmp	.+12     	; 0x6a0a <__eerd_blraw_m328+0x14>
    69fe:	f2 bd       	out	0x22, r31	; 34
    6a00:	e1 bd       	out	0x21, r30	; 33
    6a02:	f8 9a       	sbi	0x1f, 0	; 31
    6a04:	31 96       	adiw	r30, 0x01	; 1
    6a06:	00 b4       	in	r0, 0x20	; 32
    6a08:	0d 92       	st	X+, r0
    6a0a:	41 50       	subi	r20, 0x01	; 1
    6a0c:	50 40       	sbci	r21, 0x00	; 0
    6a0e:	b8 f7       	brcc	.-18     	; 0x69fe <__eerd_blraw_m328+0x8>
    6a10:	08 95       	ret

00006a12 <_exit>:
    6a12:	f8 94       	cli

00006a14 <__stop_program>:
    6a14:	ff cf       	rjmp	.-2      	; 0x6a14 <__stop_program>
