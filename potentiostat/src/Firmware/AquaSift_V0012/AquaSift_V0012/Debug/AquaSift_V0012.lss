
AquaSift_V0012.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000078c4  00007958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000078c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  00800120  00800120  00007978  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007978  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000420  00000000  00000000  000079a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000be46  00000000  00000000  00007dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b12  00000000  00000000  00013c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ace  00000000  00000000  00014720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e1c  00000000  00000000  000161f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000190c  00000000  00000000  0001700c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004f66  00000000  00000000  00018918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004b0  00000000  00000000  0001d87e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__ctors_end>
       4:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
       8:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
       c:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      10:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      14:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      18:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      1c:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      20:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      24:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      28:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      2c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_11>
      30:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      34:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      38:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      3c:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      40:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      44:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      48:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_18>
      4c:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      50:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      54:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      58:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      5c:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      60:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      64:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__bad_interrupt>
      68:	4b 08       	sbc	r4, r11
      6a:	72 08       	sbc	r7, r2
      6c:	0e 09       	sbc	r16, r14
      6e:	c1 09       	sbc	r28, r1
      70:	14 0a       	sbc	r1, r20
      72:	60 0a       	sbc	r6, r16
      74:	13 0b       	sbc	r17, r19
      76:	57 0b       	sbc	r21, r23
      78:	53 0c       	add	r5, r3
      7a:	c0 0d       	add	r28, r0
      7c:	11 0e       	add	r1, r17
      7e:	7c 0e       	add	r7, r28
      80:	1c 0f       	add	r17, r28
      82:	8e 0f       	add	r24, r30
      84:	7b 10       	cpse	r7, r11
      86:	88 10       	cpse	r8, r8
      88:	bd 11       	cpse	r27, r13
      8a:	d1 13       	cpse	r29, r17
      8c:	0b 16       	cp	r0, r27
      8e:	e0 18       	sub	r14, r0
      90:	9b 35       	cpi	r25, 0x5B	; 91
      92:	cb 35       	cpi	r28, 0x5B	; 91
      94:	ed 35       	cpi	r30, 0x5D	; 93
      96:	7a 39       	cpi	r23, 0x9A	; 154
      98:	7a 39       	cpi	r23, 0x9A	; 154
      9a:	7a 39       	cpi	r23, 0x9A	; 154
      9c:	7a 39       	cpi	r23, 0x9A	; 154
      9e:	7a 39       	cpi	r23, 0x9A	; 154
      a0:	7a 39       	cpi	r23, 0x9A	; 154
      a2:	f7 35       	cpi	r31, 0x57	; 87
      a4:	8b 36       	cpi	r24, 0x6B	; 107
      a6:	98 36       	cpi	r25, 0x68	; 104
      a8:	a2 36       	cpi	r26, 0x62	; 98
      aa:	ac 36       	cpi	r26, 0x6C	; 108
      ac:	b6 36       	cpi	r27, 0x66	; 102
      ae:	c0 36       	cpi	r28, 0x60	; 96
      b0:	ca 36       	cpi	r28, 0x6A	; 106
      b2:	d4 36       	cpi	r29, 0x64	; 100
      b4:	de 36       	cpi	r29, 0x6E	; 110
      b6:	e8 36       	cpi	r30, 0x68	; 104
      b8:	f2 36       	cpi	r31, 0x62	; 98
      ba:	fc 36       	cpi	r31, 0x6C	; 108
      bc:	27 37       	cpi	r18, 0x77	; 119
      be:	52 37       	cpi	r21, 0x72	; 114
      c0:	5c 37       	cpi	r21, 0x7C	; 124
      c2:	9f 37       	cpi	r25, 0x7F	; 127
      c4:	bc 37       	cpi	r27, 0x7C	; 124
      c6:	d9 37       	cpi	r29, 0x79	; 121
      c8:	00 38       	cpi	r16, 0x80	; 128
      ca:	89 38       	cpi	r24, 0x89	; 137
      cc:	11 39       	cpi	r17, 0x91	; 145
      ce:	26 39       	cpi	r18, 0x96	; 150
      d0:	32 39       	cpi	r19, 0x92	; 146
      d2:	70 39       	cpi	r23, 0x90	; 144
      d4:	7a 39       	cpi	r23, 0x9A	; 154
      d6:	7a 39       	cpi	r23, 0x9A	; 154
      d8:	7a 39       	cpi	r23, 0x9A	; 154
      da:	7a 39       	cpi	r23, 0x9A	; 154
      dc:	7a 39       	cpi	r23, 0x9A	; 154
      de:	7a 39       	cpi	r23, 0x9A	; 154
      e0:	7a 39       	cpi	r23, 0x9A	; 154
      e2:	7a 39       	cpi	r23, 0x9A	; 154
      e4:	7a 39       	cpi	r23, 0x9A	; 154
      e6:	7a 39       	cpi	r23, 0x9A	; 154
      e8:	7a 39       	cpi	r23, 0x9A	; 154
      ea:	7a 39       	cpi	r23, 0x9A	; 154
      ec:	7a 39       	cpi	r23, 0x9A	; 154
      ee:	7a 39       	cpi	r23, 0x9A	; 154
      f0:	7a 39       	cpi	r23, 0x9A	; 154
      f2:	7a 39       	cpi	r23, 0x9A	; 154
      f4:	7a 39       	cpi	r23, 0x9A	; 154
      f6:	7a 39       	cpi	r23, 0x9A	; 154
      f8:	7a 39       	cpi	r23, 0x9A	; 154
      fa:	7a 39       	cpi	r23, 0x9A	; 154
      fc:	7a 39       	cpi	r23, 0x9A	; 154
      fe:	7a 39       	cpi	r23, 0x9A	; 154
     100:	7a 39       	cpi	r23, 0x9A	; 154
     102:	7a 39       	cpi	r23, 0x9A	; 154
     104:	7a 39       	cpi	r23, 0x9A	; 154
     106:	7a 39       	cpi	r23, 0x9A	; 154
     108:	7a 39       	cpi	r23, 0x9A	; 154
     10a:	7a 39       	cpi	r23, 0x9A	; 154
     10c:	7a 39       	cpi	r23, 0x9A	; 154
     10e:	7a 39       	cpi	r23, 0x9A	; 154
     110:	8a 35       	cpi	r24, 0x5A	; 90
     112:	7a 39       	cpi	r23, 0x9A	; 154
     114:	7a 39       	cpi	r23, 0x9A	; 154
     116:	79 35       	cpi	r23, 0x59	; 89
     118:	7a 39       	cpi	r23, 0x9A	; 154
     11a:	7a 39       	cpi	r23, 0x9A	; 154
     11c:	7a 39       	cpi	r23, 0x9A	; 154
     11e:	7a 39       	cpi	r23, 0x9A	; 154
     120:	7a 39       	cpi	r23, 0x9A	; 154
     122:	7a 39       	cpi	r23, 0x9A	; 154
     124:	7a 39       	cpi	r23, 0x9A	; 154
     126:	68 35       	cpi	r22, 0x58	; 88
     128:	7a 39       	cpi	r23, 0x9A	; 154
     12a:	7a 39       	cpi	r23, 0x9A	; 154
     12c:	7a 39       	cpi	r23, 0x9A	; 154
     12e:	7a 39       	cpi	r23, 0x9A	; 154
     130:	7a 39       	cpi	r23, 0x9A	; 154
     132:	7a 39       	cpi	r23, 0x9A	; 154
     134:	7a 39       	cpi	r23, 0x9A	; 154
     136:	5c 35       	cpi	r21, 0x5C	; 92
     138:	7a 39       	cpi	r23, 0x9A	; 154
     13a:	7a 39       	cpi	r23, 0x9A	; 154
     13c:	7a 39       	cpi	r23, 0x9A	; 154
     13e:	7a 39       	cpi	r23, 0x9A	; 154
     140:	7a 39       	cpi	r23, 0x9A	; 154
     142:	7a 39       	cpi	r23, 0x9A	; 154
     144:	7a 39       	cpi	r23, 0x9A	; 154
     146:	7a 39       	cpi	r23, 0x9A	; 154
     148:	7a 39       	cpi	r23, 0x9A	; 154
     14a:	7a 39       	cpi	r23, 0x9A	; 154
     14c:	7a 39       	cpi	r23, 0x9A	; 154
     14e:	7a 39       	cpi	r23, 0x9A	; 154
     150:	8a 35       	cpi	r24, 0x5A	; 90
     152:	7a 39       	cpi	r23, 0x9A	; 154
     154:	7a 39       	cpi	r23, 0x9A	; 154
     156:	79 35       	cpi	r23, 0x59	; 89
     158:	7a 39       	cpi	r23, 0x9A	; 154
     15a:	7a 39       	cpi	r23, 0x9A	; 154
     15c:	7a 39       	cpi	r23, 0x9A	; 154
     15e:	7a 39       	cpi	r23, 0x9A	; 154
     160:	7a 39       	cpi	r23, 0x9A	; 154
     162:	7a 39       	cpi	r23, 0x9A	; 154
     164:	7a 39       	cpi	r23, 0x9A	; 154
     166:	68 35       	cpi	r22, 0x58	; 88
     168:	7a 39       	cpi	r23, 0x9A	; 154
     16a:	7a 39       	cpi	r23, 0x9A	; 154
     16c:	7a 39       	cpi	r23, 0x9A	; 154
     16e:	7a 39       	cpi	r23, 0x9A	; 154
     170:	7a 39       	cpi	r23, 0x9A	; 154
     172:	7a 39       	cpi	r23, 0x9A	; 154
     174:	7a 39       	cpi	r23, 0x9A	; 154
     176:	5c 35       	cpi	r21, 0x5C	; 92

00000178 <__trampolines_end>:
     178:	54 65       	ori	r21, 0x54	; 84
     17a:	73 74       	andi	r23, 0x43	; 67
     17c:	20 41       	sbci	r18, 0x10	; 16
     17e:	62 6f       	ori	r22, 0xF2	; 242
     180:	72 74       	andi	r23, 0x42	; 66
     182:	65 64       	ori	r22, 0x45	; 69
     184:	0d 00       	.word	0x000d	; ????

00000186 <_ZZ11__vector_11E3__c_124>:
     186:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

00000191 <_ZZ11__vector_11E3__c_123>:
     191:	74 69 74 6c 65 28 27 52 61 77 20 43 75 72 72 65     title('Raw Curre
     1a1:	6e 74 20 76 73 2e 20 53 61 6d 70 6c 65 73 27 29     nt vs. Samples')
     1b1:	3b 0d 00                                            ;..

000001b4 <_ZZ11__vector_11E3__c_122>:
     1b4:	78 6c 61 62 65 6c 28 27 53 61 6d 70 6c 65 73 27     xlabel('Samples'
     1c4:	29 3b 0d 00                                         );..

000001c8 <_ZZ11__vector_11E3__c_121>:
     1c8:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     1d8:	41 29 27 29 3b 0d 00                                A)');..

000001df <_ZZ11__vector_11E3__c_120>:
     1df:	70 6c 6f 74 28 70 29 3b 0d 00                       plot(p);..

000001e9 <_ZZ11__vector_11E3__c_119>:
     1e9:	66 69 67 75 72 65 28 33 29 3b 0d 00                 figure(3);..

000001f5 <_ZZ11__vector_11E3__c_118>:
     1f5:	5d 3b 0d 0d 00                                      ];...

000001fa <_ZZ11__vector_11E3__c_117>:
     1fa:	2e 2e 2e 0d 00                                      .....

000001ff <_ZZ11__vector_11E3__c_116>:
     1ff:	73 5f 61 00                                         s_a.

00000203 <_ZZ11__vector_11E3__c_115>:
     203:	70 3d 5b 00                                         p=[.

00000207 <_ZZ11__vector_11E3__c_114>:
     207:	29 2a 28 33 2e 33 2f 34 30 39 36 29 2f 74 69 61     )*(3.3/4096)/tia
     217:	5f 72 29 3b 0d 00                                   _r);..

0000021d <_ZZ11__vector_11E3__c_113>:
     21d:	2d 32 30 34 37 00                                   -2047.

00000223 <_ZZ11__vector_11E3__c_112>:
     223:	3d 28 28 61 00                                      =((a.

00000228 <_ZZ11__vector_11E3__c_111>:
     228:	73 5f 61 00                                         s_a.

0000022c <_ZZ11__vector_11E3__c_110>:
     22c:	67 72 69 64 20 6f 6e 3b 0d 00                       grid on;..

00000236 <_ZZ11__vector_11E3__c_109>:
     236:	74 69 74 6c 65 28 27 44 69 66 66 65 72 65 6e 74     title('Different
     246:	69 61 6c 20 50 75 6c 73 65 27 29 3b 0d 00           ial Pulse');..

00000254 <_ZZ11__vector_11E3__c_108>:
     254:	78 6c 61 62 65 6c 28 27 56 6f 6c 74 73 28 56 29     xlabel('Volts(V)
     264:	27 29 3b 0d 00                                      ');..

00000269 <_ZZ11__vector_11E3__c_107>:
     269:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     279:	41 29 27 29 3b 0d 00                                A)');..

00000280 <_ZZ11__vector_11E3__c_106>:
     280:	70 6c 6f 74 28 7a 2c 20 69 70 29 3b 0d 00           plot(z, ip);..

0000028e <_ZZ11__vector_11E3__c_105>:
     28e:	66 69 67 75 72 65 28 34 29 3b 0d 00                 figure(4);..

0000029a <_ZZ11__vector_11E3__c_104>:
     29a:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

000002a5 <_ZZ11__vector_11E3__c_103>:
     2a5:	74 69 74 6c 65 28 27 52 61 77 20 43 75 72 72 65     title('Raw Curre
     2b5:	6e 74 20 76 73 2e 20 53 61 6d 70 6c 65 73 27 29     nt vs. Samples')
     2c5:	3b 0d 00                                            ;..

000002c8 <_ZZ11__vector_11E3__c_102>:
     2c8:	78 6c 61 62 65 6c 28 27 53 61 6d 70 6c 65 73 27     xlabel('Samples'
     2d8:	29 3b 0d 00                                         );..

000002dc <_ZZ11__vector_11E3__c_101>:
     2dc:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     2ec:	41 29 27 29 3b 0d 00                                A)');..

000002f3 <_ZZ11__vector_11E3__c_100>:
     2f3:	70 6c 6f 74 28 70 29 3b 0d 00                       plot(p);..

000002fd <_ZZ11__vector_11E3__c_99>:
     2fd:	66 69 67 75 72 65 28 33 29 3b 0d 00                 figure(3);..

00000309 <_ZZ11__vector_11E3__c_98>:
     309:	5d 3b 0d 0d 00                                      ];...

0000030e <_ZZ11__vector_11E3__c_97>:
     30e:	2e 2e 2e 0d 00                                      .....

00000313 <_ZZ11__vector_11E3__c_96>:
     313:	73 5f 70 6c 00                                      s_pl.

00000318 <_ZZ11__vector_11E3__c_95>:
     318:	73 5f 70 72 00                                      s_pr.

0000031d <_ZZ11__vector_11E3__c_94>:
     31d:	70 3d 5b 00                                         p=[.

00000321 <_ZZ11__vector_11E3__c_93>:
     321:	64 69 66 5f 76 69 3b 0d 6a 3d 6a 2b 31 3b 0d 65     dif_vi;.j=j+1;.e
     331:	6e 64 0d 0d 00                                      nd...

00000336 <_ZZ11__vector_11E3__c_92>:
     336:	3d 64 69 66 5f 76 65 0d 7a 28 6a 29 3d 69 2f 31     =dif_ve.z(j)=i/1
     346:	30 30 30 3b 0d 69 3d 69 00                          000;.i=i.

0000034f <_ZZ11__vector_11E3__c_91>:
     34f:	69 3d 64 69 66 5f 76 73 3b 0d 6a 3d 31 3b 0d 0d     i=dif_vs;.j=1;..
     35f:	77 68 69 6c 65 20 69 00                             while i.

00000367 <_ZZ11__vector_11E3__c_90>:
     367:	5d 3b 0d 0d 00                                      ];...

0000036c <_ZZ11__vector_11E3__c_89>:
     36c:	29 29 29 2c 2e 2e 2e 0d 00                          ))),.....

00000375 <_ZZ11__vector_11E3__c_88>:
     375:	29 2d 64 77 3a 31 3a 6c 65 6e 67 74 68 28 73 5f     )-dw:1:length(s_
     385:	70 72 00                                            pr.

00000388 <_ZZ11__vector_11E3__c_87>:
     388:	28 6c 65 6e 67 74 68 28 73 5f 70 72 00              (length(s_pr.

00000395 <_ZZ11__vector_11E3__c_86>:
     395:	29 29 29 2d 2e 2e 2e 0d 6d 65 61 6e 28 73 5f 70     )))-....mean(s_p
     3a5:	72 00                                               r.

000003a7 <_ZZ11__vector_11E3__c_85>:
     3a7:	29 2d 64 77 3a 31 3a 6c 65 6e 67 74 68 28 73 5f     )-dw:1:length(s_
     3b7:	70 6c 00                                            pl.

000003ba <_ZZ11__vector_11E3__c_84>:
     3ba:	28 6c 65 6e 67 74 68 28 73 5f 70 6c 00              (length(s_pl.

000003c7 <_ZZ11__vector_11E3__c_83>:
     3c7:	6d 65 61 6e 28 73 5f 70 6c 00                       mean(s_pl.

000003d1 <_ZZ11__vector_11E3__c_82>:
     3d1:	0d 69 70 3d 5b 00                                   .ip=[.

000003d7 <_ZZ11__vector_11E3__c_81>:
     3d7:	0d 64 77 20 3d 20 64 69 66 5f 77 69 6e 2d 31 3b     .dw = dif_win-1;
     3e7:	0d 00                                               ..

000003e9 <_ZZ11__vector_11E3__c_80>:
     3e9:	29 2a 28 33 2e 33 2f 34 30 39 36 29 2f 74 69 61     )*(3.3/4096)/tia
     3f9:	5f 72 29 3b 0d 00                                   _r);..

000003ff <_ZZ11__vector_11E3__c_79>:
     3ff:	2d 32 30 34 37 00                                   -2047.

00000405 <_ZZ11__vector_11E3__c_78>:
     405:	3d 28 28 70 6c 00                                   =((pl.

0000040b <_ZZ11__vector_11E3__c_77>:
     40b:	73 5f 70 6c 00                                      s_pl.

00000410 <_ZZ11__vector_11E3__c_76>:
     410:	29 2a 28 33 2e 33 2f 34 30 39 36 29 2f 74 69 61     )*(3.3/4096)/tia
     420:	5f 72 29 3b 0d 00                                   _r);..

00000426 <_ZZ11__vector_11E3__c_75>:
     426:	2d 32 30 34 37 00                                   -2047.

0000042c <_ZZ11__vector_11E3__c_74>:
     42c:	3d 28 28 70 72 00                                   =((pr.

00000432 <_ZZ11__vector_11E3__c_73>:
     432:	73 5f 70 72 00                                      s_pr.

00000437 <_ZZ11__vector_11E3__c_72>:
     437:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

00000442 <_ZZ11__vector_11E3__c_71>:
     442:	27 29 0d 00                                         ')..

00000446 <_ZZ11__vector_11E3__c_70>:
     446:	43 79 63 6c 65 73 29 00                             Cycles).

0000044e <_ZZ11__vector_11E3__c_69>:
     44e:	20 00                                                .

00000450 <_ZZ11__vector_11E3__c_68>:
     450:	20 28 00                                             (.

00000453 <_ZZ11__vector_11E3__c_67>:
     453:	4c 69 6e 65 61 72 20 53 77 65 65 70 00              Linear Sweep.

00000460 <_ZZ11__vector_11E3__c_66>:
     460:	43 79 63 6c 69 63 20 00                             Cyclic .

00000468 <_ZZ11__vector_11E3__c_65>:
     468:	74 69 74 6c 65 28 27 00                             title('.

00000470 <_ZZ11__vector_11E3__c_64>:
     470:	78 6c 61 62 65 6c 28 27 56 6f 6c 74 73 28 56 29     xlabel('Volts(V)
     480:	27 29 3b 0d 00                                      ');..

00000485 <_ZZ11__vector_11E3__c_63>:
     485:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     495:	41 29 27 29 3b 0d 00                                A)');..

0000049c <_ZZ11__vector_11E3__c_62>:
     49c:	29 3b 0d 00                                         );..

000004a0 <_ZZ11__vector_11E3__c_61>:
     4a0:	2e 2e 2e 0d 00                                      .....

000004a5 <_ZZ11__vector_11E3__c_60>:
     4a5:	73 5f 75 61 00                                      s_ua.

000004aa <_ZZ11__vector_11E3__c_59>:
     4aa:	70 6c 6f 74 28 00                                   plot(.

000004b0 <_ZZ11__vector_11E3__c_58>:
     4b0:	66 69 67 75 72 65 28 33 29 3b 0d 00                 figure(3);..

000004bc <_ZZ11__vector_11E3__c_57>:
     4bc:	29 3b 0d 00                                         );..

000004c0 <_ZZ11__vector_11E3__c_56>:
     4c0:	3d 66 6c 69 70 6c 72 28 73 5f 75 61 00              =fliplr(s_ua.

000004cd <_ZZ11__vector_11E3__c_55>:
     4cd:	73 5f 75 61 00                                      s_ua.

000004d2 <_ZZ11__vector_11E3__c_54>:
     4d2:	29 29 3b 0d 00                                      ));..

000004d7 <_ZZ11__vector_11E3__c_53>:
     4d7:	2c 6c 65 6e 67 74 68 28 73 5f 75 61 00              ,length(s_ua.

000004e4 <_ZZ11__vector_11E3__c_52>:
     4e4:	73 77 65 65 70 5f 76 73 2f 31 30 30 30 2c 73 77     sweep_vs/1000,sw
     4f4:	65 65 70 5f 76 65 2f 31 30 30 30 00                 eep_ve/1000.

00000500 <_ZZ11__vector_11E3__c_51>:
     500:	3d 6c 69 6e 73 70 61 63 65 28 00                    =linspace(.

0000050b <_ZZ11__vector_11E3__c_50>:
     50b:	29 2a 28 33 2e 33 2f 34 30 39 36 29 2f 74 69 61     )*(3.3/4096)/tia
     51b:	5f 72 29 3b 0d 00                                   _r);..

00000521 <_ZZ11__vector_11E3__c_49>:
     521:	2d 32 30 34 37 00                                   -2047.

00000527 <_ZZ11__vector_11E3__c_48>:
     527:	3d 28 28 73 00                                      =((s.

0000052c <_ZZ11__vector_11E3__c_47>:
     52c:	73 5f 75 61 00                                      s_ua.

00000531 <_ZZ11__vector_11E3__c_46>:
     531:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

0000053c <_ZZ11__vector_11E3__c_45>:
     53c:	74 69 74 6c 65 28 27 51 75 69 65 74 20 54 69 6d     title('Quiet Tim
     54c:	65 20 53 65 71 75 65 6e 63 65 27 29 3b 0d 00        e Sequence');..

0000055b <_ZZ11__vector_11E3__c_44>:
     55b:	78 6c 61 62 65 6c 28 27 54 69 6d 65 20 28 73 29     xlabel('Time (s)
     56b:	27 29 3b 0d 00                                      ');..

00000570 <_ZZ11__vector_11E3__c_43>:
     570:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     580:	41 29 27 29 3b 0d 00                                A)');..

00000587 <_ZZ11__vector_11E3__c_42>:
     587:	70 6c 6f 74 28 74 71 2c 71 5f 75 61 29 3b 0d 00     plot(tq,q_ua);..

00000597 <_ZZ11__vector_11E3__c_41>:
     597:	66 69 67 75 72 65 28 32 29 3b 0d 00                 figure(2);..

000005a3 <_ZZ11__vector_11E3__c_40>:
     5a3:	74 71 3d 6c 69 6e 73 70 61 63 65 28 31 2c 71 75     tq=linspace(1,qu
     5b3:	69 65 74 5f 74 2f 31 30 30 30 2c 6c 65 6e 67 74     iet_t/1000,lengt
     5c3:	68 28 71 5f 75 61 29 29 3b 0d 00                    h(q_ua));..

000005ce <_ZZ11__vector_11E3__c_39>:
     5ce:	71 5f 75 61 3d 28 28 71 2d 32 30 34 37 29 2a 28     q_ua=((q-2047)*(
     5de:	33 2e 33 2f 34 30 39 36 29 2f 74 69 61 5f 72 29     3.3/4096)/tia_r)
     5ee:	3b 0d 00                                            ;..

000005f1 <_ZZ11__vector_11E3__c_38>:
     5f1:	67 72 69 64 20 6f 6e 3b 0d 0d 00                    grid on;...

000005fc <_ZZ11__vector_11E3__c_37>:
     5fc:	74 69 74 6c 65 28 27 44 65 70 6f 73 69 74 69 6f     title('Depositio
     60c:	6e 20 53 65 71 75 65 6e 63 65 27 29 3b 0d 00        n Sequence');..

0000061b <_ZZ11__vector_11E3__c_36>:
     61b:	78 6c 61 62 65 6c 28 27 54 69 6d 65 20 28 73 29     xlabel('Time (s)
     62b:	27 29 3b 0d 00                                      ');..

00000630 <_ZZ11__vector_11E3__c_35>:
     630:	79 6c 61 62 65 6c 28 27 43 75 72 72 65 6e 74 28     ylabel('Current(
     640:	41 29 27 29 3b 0d 00                                A)');..

00000647 <_ZZ11__vector_11E3__c_34>:
     647:	70 6c 6f 74 28 74 64 2c 64 5f 75 61 29 3b 0d 00     plot(td,d_ua);..

00000657 <_ZZ11__vector_11E3__c_33>:
     657:	66 69 67 75 72 65 28 31 29 3b 0d 00                 figure(1);..

00000663 <_ZZ11__vector_11E3__c_32>:
     663:	74 64 3d 6c 69 6e 73 70 61 63 65 28 31 2c 64 65     td=linspace(1,de
     673:	70 5f 74 2f 31 30 30 30 2c 6c 65 6e 67 74 68 28     p_t/1000,length(
     683:	64 5f 75 61 29 29 3b 0d 00                          d_ua));..

0000068c <_ZZ11__vector_11E3__c_31>:
     68c:	64 5f 75 61 3d 28 28 64 2d 32 30 34 37 29 2a 28     d_ua=((d-2047)*(
     69c:	33 2e 33 2f 34 30 39 36 29 2f 74 69 61 5f 72 29     3.3/4096)/tia_r)
     6ac:	3b 0d 00                                            ;..

000006af <_ZZ11__vector_11E3__c_30>:
     6af:	2e 2e 2e 0d 00                                      .....

000006b4 <_ZZ11__vector_11E3__c_29>:
     6b4:	5d 3b 0d 0d 00                                      ];...

000006b9 <_ZZ11__vector_11E3__c_28>:
     6b9:	3d 5b 00                                            =[.

000006bc <_ZZ11__vector_11E3__c_27>:
     6bc:	61 00                                               a.

000006be <_ZZ11__vector_11E3__c_26>:
     6be:	3d 5b 00                                            =[.

000006c1 <_ZZ11__vector_11E3__c_25>:
     6c1:	61 00                                               a.

000006c3 <_ZZ11__vector_11E3__c_24>:
     6c3:	5d 3b 0d 0d 00                                      ];...

000006c8 <_ZZ11__vector_11E3__c_23>:
     6c8:	3d 5b 00                                            =[.

000006cb <_ZZ11__vector_11E3__c_22>:
     6cb:	61 00                                               a.

000006cd <_ZZ11__vector_11E3__c_21>:
     6cd:	5d 3b 0d 0d 00                                      ];...

000006d2 <_ZZ11__vector_11E3__c_20>:
     6d2:	2e 2e 2e 0d 00                                      .....

000006d7 <_ZZ11__vector_11E3__c_19>:
     6d7:	5d 3b 0d 0d 00                                      ];...

000006dc <_ZZ11__vector_11E3__c_18>:
     6dc:	3d 5b 00                                            =[.

000006df <_ZZ11__vector_11E3__c_17>:
     6df:	61 00                                               a.

000006e1 <_ZZ11__vector_11E3__c_16>:
     6e1:	5d 3b 0d 0d 00                                      ];...

000006e6 <_ZZ11__vector_11E3__c_15>:
     6e6:	2e 2e 2e 0d 00                                      .....

000006eb <_ZZ11__vector_11E3__c_14>:
     6eb:	3d 5b 00                                            =[.

000006ee <_ZZ11__vector_11E3__c_13>:
     6ee:	70 6c 00                                            pl.

000006f1 <_ZZ11__vector_11E3__c_12>:
     6f1:	5d 3b 0d 0d 00                                      ];...

000006f6 <_ZZ11__vector_11E3__c_11>:
     6f6:	2e 2e 2e 0d 00                                      .....

000006fb <_ZZ11__vector_11E3__c_10>:
     6fb:	3d 5b 00                                            =[.

000006fe <_ZZ11__vector_11E3__c_9>:
     6fe:	70 72 00                                            pr.

00000701 <_ZZ11__vector_11E3__c_8>:
     701:	3d 5b 00                                            =[.

00000704 <_ZZ11__vector_11E3__c_7>:
     704:	5d 3b 0d 0d 00                                      ];...

00000709 <_ZZ11__vector_11E3__c_6>:
     709:	2e 2e 2e 0d 00                                      .....

0000070e <_ZZ11__vector_11E3__c_5>:
     70e:	3d 5b 00                                            =[.

00000711 <_ZZ11__vector_11E3__c_4>:
     711:	5d 3b 0d 0d 00                                      ];...

00000716 <_ZZ11__vector_11E3__c_3>:
     716:	2e 2e 2e 0d 00                                      .....

0000071b <_ZZ11__vector_11E3__c_2>:
     71b:	71 3d 5b 00                                         q=[.

0000071f <_ZZ11__vector_11E3__c_1>:
     71f:	5d 3b 0d 0d 00                                      ];...

00000724 <_ZZ11__vector_11E3__c_0>:
     724:	2e 2e 2e 0d 00                                      .....

00000729 <_ZZ11__vector_11E3__c>:
     729:	64 3d 5b 00                                         d=[.

0000072d <_ZZ11arb_replacePKhE3__c>:
     72d:	45 6e 74 72 79 20 4f 75 74 20 6f 66 20 52 61 6e     Entry Out of Ran
     73d:	67 65 0d 00                                         ge..

00000741 <_ZZ10arb_appendPKhE3__c>:
     741:	4d 65 6d 6f 72 79 20 46 75 6c 6c 0d 00              Memory Full..

0000074e <_ZZ14uart_tokenizerhP8as_classE3__c_87>:
     74e:	45 6e 74 72 79 20 53 74 61 72 74 6d 56 20 45 6e     Entry StartmV En
     75e:	64 6d 56 20 52 61 74 65 0d 00                       dmV Rate..

00000768 <_ZZ14uart_tokenizerhP8as_classE3__c_86>:
     768:	4d 65 6d 6f 72 79 20 45 6d 70 74 79 0d 00           Memory Empty..

00000776 <_ZZ14uart_tokenizerhP8as_classE3__c_85>:
     776:	57 69 64 74 68 20 3e 20 50 75 6c 73 65 20 00        Width > Pulse .

00000785 <_ZZ14uart_tokenizerhP8as_classE3__c_84>:
     785:	57 69 64 74 68 20 3e 20 50 72 65 2d 70 75 6c 73     Width > Pre-puls
     795:	65 20 00                                            e .

00000798 <_ZZ14uart_tokenizerhP8as_classE3__c_83>:
     798:	50 75 6c 73 65 20 3c 20 57 69 64 74 68 20 00        Pulse < Width .

000007a7 <_ZZ14uart_tokenizerhP8as_classE3__c_82>:
     7a7:	50 72 65 2d 70 75 6c 73 65 20 3c 20 57 69 64 74     Pre-pulse < Widt
     7b7:	68 20 00                                            h .

000007ba <_ZZ14uart_tokenizerhP8as_classE3__c_81>:
     7ba:	45 6e 64 2b 41 6d 70 20 4c 6f 77 20 00              End+Amp Low .

000007c7 <_ZZ14uart_tokenizerhP8as_classE3__c_80>:
     7c7:	45 6e 64 2b 41 6d 70 20 48 69 67 68 20 00           End+Amp High .

000007d5 <_ZZ14uart_tokenizerhP8as_classE3__c_79>:
     7d5:	53 74 61 72 74 2b 41 6d 70 20 4c 6f 77 20 00        Start+Amp Low .

000007e4 <_ZZ14uart_tokenizerhP8as_classE3__c_78>:
     7e4:	53 74 61 72 74 2b 41 6d 70 20 48 69 67 68 20 00     Start+Amp High .

000007f4 <_ZZ14uart_tokenizerhP8as_classE3__c_77>:
     7f4:	45 6e 64 2b 41 6d 70 20 4c 6f 77 20 00              End+Amp Low .

00000801 <_ZZ14uart_tokenizerhP8as_classE3__c_76>:
     801:	45 6e 64 2b 41 6d 70 20 48 69 67 68 20 00           End+Amp High .

0000080f <_ZZ14uart_tokenizerhP8as_classE3__c_75>:
     80f:	53 74 61 72 74 2b 41 6d 70 20 4c 6f 77 20 00        Start+Amp Low .

0000081e <_ZZ14uart_tokenizerhP8as_classE3__c_74>:
     81e:	53 74 61 72 74 2b 41 6d 70 20 48 69 67 68 20 00     Start+Amp High .

0000082e <_ZZ14uart_tokenizerhP8as_classE3__c_73>:
     82e:	37 3a 20 32 30 30 48 7a 0d 0d 0d 0d 0d 0d 0d 0d     7: 200Hz........
     83e:	0d 0d 0d 0d 0d 00                                   ......

00000844 <_ZZ14uart_tokenizerhP8as_classE3__c_72>:
     844:	36 3a 20 31 35 30 48 7a 0d 00                       6: 150Hz..

0000084e <_ZZ14uart_tokenizerhP8as_classE3__c_71>:
     84e:	35 3a 20 31 30 30 48 7a 0d 00                       5: 100Hz..

00000858 <_ZZ14uart_tokenizerhP8as_classE3__c_70>:
     858:	34 3a 20 20 35 30 48 7a 0d 00                       4:  50Hz..

00000862 <_ZZ14uart_tokenizerhP8as_classE3__c_69>:
     862:	33 3a 20 20 31 30 48 7a 0d 00                       3:  10Hz..

0000086c <_ZZ14uart_tokenizerhP8as_classE3__c_68>:
     86c:	32 3a 20 20 20 35 48 7a 0d 00                       2:   5Hz..

00000876 <_ZZ14uart_tokenizerhP8as_classE3__c_67>:
     876:	31 3a 20 20 20 31 48 7a 0d 00                       1:   1Hz..

00000880 <_ZZ14uart_tokenizerhP8as_classE3__c_66>:
     880:	30 3a 20 4e 6f 20 46 69 6c 74 65 72 0d 00           0: No Filter..

0000088e <_ZZ14uart_tokenizerhP8as_classE3__c_65>:
     88e:	43 75 74 6f 66 66 20 46 72 65 71 75 65 6e 63 79     Cutoff Frequency
     89e:	0d 00                                               ..

000008a0 <_ZZ14uart_tokenizerhP8as_classE3__c_64>:
     8a0:	33 34 2e 20 53 65 6c 65 63 74 65 64 20 46 69 6c     34. Selected Fil
     8b0:	74 65 72 00                                         ter.

000008b4 <_ZZ14uart_tokenizerhP8as_classE3__c_63>:
     8b4:	2d 2d 2d 4c 4f 57 2d 50 41 53 53 20 46 49 4c 54     ---LOW-PASS FILT
     8c4:	45 52 20 4d 45 4e 55 2d 2d 2d 0d 00                 ER MENU---..

000008d0 <_ZZ14uart_tokenizerhP8as_classE3__c_62>:
     8d0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 00              .............

000008dd <_ZZ14uart_tokenizerhP8as_classE3__c_61>:
     8dd:	20 74 6f 20 00                                       to .

000008e2 <_ZZ14uart_tokenizerhP8as_classE3__c_60>:
     8e2:	0d 52 61 74 65 6d 56 2f 73 3a 20 00                 .RatemV/s: .

000008ee <_ZZ14uart_tokenizerhP8as_classE3__c_59>:
     8ee:	20 74 6f 20 00                                       to .

000008f3 <_ZZ14uart_tokenizerhP8as_classE3__c_58>:
     8f3:	0d 45 6e 64 6d 56 3a 20 20 20 00                    .EndmV:   .

000008fe <_ZZ14uart_tokenizerhP8as_classE3__c_57>:
     8fe:	20 74 6f 20 00                                       to .

00000903 <_ZZ14uart_tokenizerhP8as_classE3__c_56>:
     903:	0d 0d 53 74 61 72 74 6d 56 3a 20 00                 ..StartmV: .

0000090f <_ZZ14uart_tokenizerhP8as_classE3__c_55>:
     90f:	29 3a 20 00                                         ): .

00000913 <_ZZ14uart_tokenizerhP8as_classE3__c_54>:
     913:	4e 75 6d 62 65 72 20 6f 66 20 53 74 6f 72 65 64     Number of Stored
     923:	20 45 6e 74 72 69 65 73 20 28 55 70 20 74 6f 20      Entries (Up to 
	...

00000934 <_ZZ14uart_tokenizerhP8as_classE3__c_53>:
     934:	0d 00                                               ..

00000936 <_ZZ14uart_tokenizerhP8as_classE3__c_52>:
     936:	33 33 2e 20 47 65 74 20 53 74 6f 72 65 64 20 56     33. Get Stored V
     946:	61 6c 75 65 73 0d 00                                alues..

0000094d <_ZZ14uart_tokenizerhP8as_classE3__c_51>:
     94d:	33 32 2e 20 44 65 6c 65 74 65 20 41 6c 6c 20 45     32. Delete All E
     95d:	6e 74 72 69 65 73 0d 00                             ntries..

00000965 <_ZZ14uart_tokenizerhP8as_classE3__c_50>:
     965:	33 31 2e 20 44 65 6c 65 74 65 20 4c 61 73 74 20     31. Delete Last 
     975:	45 6e 74 72 79 0d 00                                Entry..

0000097c <_ZZ14uart_tokenizerhP8as_classE3__c_49>:
     97c:	33 30 2e 20 52 65 70 6c 61 63 65 20 45 6e 74 72     30. Replace Entr
     98c:	79 20 28 45 6e 74 72 79 23 20 53 74 61 72 74 6d     y (Entry# Startm
     99c:	56 20 53 74 6f 70 6d 56 20 52 61 74 65 6d 56 2f     V StopmV RatemV/
     9ac:	73 29 0d 00                                         s)..

000009b0 <_ZZ14uart_tokenizerhP8as_classE3__c_48>:
     9b0:	32 39 2e 20 41 70 70 65 6e 64 20 45 6e 74 72 79     29. Append Entry
     9c0:	20 28 53 74 61 72 74 6d 56 20 53 74 6f 70 6d 56      (StartmV StopmV
     9d0:	20 52 61 74 65 6d 56 2f 73 29 0d 00                  RatemV/s)..

000009dc <_ZZ14uart_tokenizerhP8as_classE3__c_47>:
     9dc:	2d 2d 2d 41 52 42 49 54 52 41 52 59 20 57 41 56     ---ARBITRARY WAV
     9ec:	45 46 4f 52 4d 20 4d 45 4e 55 2d 2d 2d 0d 00        EFORM MENU---..

000009fb <_ZZ14uart_tokenizerhP8as_classE3__c_46>:
     9fb:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
	...

00000a0c <_ZZ14uart_tokenizerhP8as_classE3__c_45>:
     a0c:	32 38 2e 20 53 61 6d 70 6c 69 6e 67 20 57 69 6e     28. Sampling Win
     a1c:	64 6f 77 20 57 69 64 74 68 20 6d 73 00              dow Width ms.

00000a29 <_ZZ14uart_tokenizerhP8as_classE3__c_44>:
     a29:	32 37 2e 20 50 75 6c 73 65 20 54 69 6d 65 20 6d     27. Pulse Time m
     a39:	73 00                                               s.

00000a3b <_ZZ14uart_tokenizerhP8as_classE3__c_43>:
     a3b:	32 36 2e 20 50 72 65 2d 70 75 6c 73 65 20 54 69     26. Pre-pulse Ti
     a4b:	6d 65 20 6d 73 00                                   me ms.

00000a51 <_ZZ14uart_tokenizerhP8as_classE3__c_42>:
     a51:	32 35 2e 20 50 75 6c 73 65 20 56 6f 6c 74 61 67     25. Pulse Voltag
     a61:	65 20 6d 56 00                                      e mV.

00000a66 <_ZZ14uart_tokenizerhP8as_classE3__c_41>:
     a66:	32 34 2e 20 49 6e 63 72 65 6d 65 6e 74 20 6d 56     24. Increment mV
	...

00000a77 <_ZZ14uart_tokenizerhP8as_classE3__c_40>:
     a77:	32 33 2e 20 45 6e 64 20 56 6f 6c 74 61 67 65 20     23. End Voltage 
     a87:	6d 56 00                                            mV.

00000a8a <_ZZ14uart_tokenizerhP8as_classE3__c_39>:
     a8a:	32 32 2e 20 53 74 61 72 74 20 56 6f 6c 74 61 67     22. Start Voltag
     a9a:	65 20 6d 56 00                                      e mV.

00000a9f <_ZZ14uart_tokenizerhP8as_classE3__c_38>:
     a9f:	2d 2d 2d 44 49 46 46 45 52 45 4e 54 49 41 4c 20     ---DIFFERENTIAL 
     aaf:	50 55 4c 53 45 20 4d 45 4e 55 2d 2d 2d 0d 00        PULSE MENU---..

00000abe <_ZZ14uart_tokenizerhP8as_classE3__c_37>:
     abe:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     ace:	0d 0d 00                                            ...

00000ad1 <_ZZ14uart_tokenizerhP8as_classE3__c_36>:
     ad1:	32 31 2e 20 4e 75 6d 62 65 72 20 6f 66 20 43 79     21. Number of Cy
     ae1:	63 6c 65 73 00                                      cles.

00000ae6 <_ZZ14uart_tokenizerhP8as_classE3__c_35>:
     ae6:	32 30 2e 20 43 79 63 6c 69 63 20 28 59 2f 4e 29     20. Cyclic (Y/N)
     af6:	3a 20 00                                            : .

00000af9 <_ZZ14uart_tokenizerhP8as_classE3__c_34>:
     af9:	31 39 2e 20 53 77 65 65 70 20 52 61 74 65 20 6d     19. Sweep Rate m
     b09:	56 2f 73 00                                         V/s.

00000b0d <_ZZ14uart_tokenizerhP8as_classE3__c_33>:
     b0d:	31 38 2e 20 45 6e 64 20 56 6f 6c 74 61 67 65 20     18. End Voltage 
     b1d:	6d 56 00                                            mV.

00000b20 <_ZZ14uart_tokenizerhP8as_classE3__c_32>:
     b20:	31 37 2e 20 53 74 61 72 74 20 56 6f 6c 74 61 67     17. Start Voltag
     b30:	65 20 6d 56 00                                      e mV.

00000b35 <_ZZ14uart_tokenizerhP8as_classE3__c_31>:
     b35:	2d 2d 2d 4c 49 4e 45 41 52 20 53 57 45 45 50 20     ---LINEAR SWEEP 
     b45:	4d 45 4e 55 2d 2d 2d 0d 00                          MENU---..

00000b4e <_ZZ14uart_tokenizerhP8as_classE3__c_30>:
     b4e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     b5e:	0d 00                                               ..

00000b60 <_ZZ14uart_tokenizerhP8as_classE3__c_29>:
     b60:	31 36 2e 20 52 65 63 6f 72 64 20 44 65 70 6f 73     16. Record Depos
     b70:	69 74 69 6f 6e 20 53 65 71 75 65 6e 63 65 20 28     ition Sequence (
     b80:	59 2f 4e 29 3a 20 00                                Y/N): .

00000b87 <_ZZ14uart_tokenizerhP8as_classE3__c_28>:
     b87:	31 35 2e 20 51 75 69 65 74 20 54 69 6d 65 20 6d     15. Quiet Time m
     b97:	73 00                                               s.

00000b99 <_ZZ14uart_tokenizerhP8as_classE3__c_27>:
     b99:	31 34 2e 20 44 65 70 6f 73 69 74 69 6f 6e 20 56     14. Deposition V
     ba9:	6f 6c 74 61 67 65 20 6d 56 00                       oltage mV.

00000bb3 <_ZZ14uart_tokenizerhP8as_classE3__c_26>:
     bb3:	31 33 2e 20 44 65 70 6f 73 69 74 69 6f 6e 20 54     13. Deposition T
     bc3:	69 6d 65 20 6d 73 00                                ime ms.

00000bca <_ZZ14uart_tokenizerhP8as_classE3__c_25>:
     bca:	31 32 2e 20 45 6e 61 62 6c 65 20 44 65 70 6f 73     12. Enable Depos
     bda:	69 74 69 6f 6e 20 28 59 2f 4e 29 3a 20 00           ition (Y/N): .

00000be8 <_ZZ14uart_tokenizerhP8as_classE3__c_24>:
     be8:	2d 2d 2d 44 45 50 4f 53 49 54 49 4f 4e 20 4d 45     ---DEPOSITION ME
     bf8:	4e 55 2d 2d 2d 0d 00                                NU---..

00000bff <_ZZ14uart_tokenizerhP8as_classE3__c_23>:
     bff:	36 2e 20 31 30 30 6b 0d 0d 0d 0d 0d 0d 0d 0d 0d     6. 100k.........
     c0f:	0d 0d 0d 0d 0d 0d 0d 00                             ........

00000c17 <_ZZ14uart_tokenizerhP8as_classE3__c_22>:
     c17:	35 2e 20 35 31 6b 0d 00                             5. 51k..

00000c1f <_ZZ14uart_tokenizerhP8as_classE3__c_21>:
     c1f:	34 2e 20 31 30 6b 0d 00                             4. 10k..

00000c27 <_ZZ14uart_tokenizerhP8as_classE3__c_20>:
     c27:	33 2e 20 35 2e 31 6b 0d 00                          3. 5.1k..

00000c30 <_ZZ14uart_tokenizerhP8as_classE3__c_19>:
     c30:	32 2e 20 31 6b 0d 00                                2. 1k..

00000c37 <_ZZ14uart_tokenizerhP8as_classE3__c_18>:
     c37:	31 2e 20 31 30 30 0d 00                             1. 100..

00000c3f <_ZZ14uart_tokenizerhP8as_classE3__c_17>:
     c3f:	31 31 2e 20 54 49 41 20 47 61 69 6e 20 52 65 73     11. TIA Gain Res
     c4f:	69 73 74 6f 72 20 00                                istor .

00000c56 <_ZZ14uart_tokenizerhP8as_classE3__c_16>:
     c56:	2d 2d 2d 54 49 41 20 4d 45 4e 55 2d 2d 2d 0d 00     ---TIA MENU---..

00000c66 <_ZZ14uart_tokenizerhP8as_classE3__c_15>:
     c66:	58 20 41 62 6f 72 74 20 54 65 73 74 0d 0d 0d 0d     X Abort Test....
     c76:	0d 00                                               ..

00000c78 <_ZZ14uart_tokenizerhP8as_classE3__c_14>:
     c78:	41 20 53 74 61 72 74 20 41 72 62 69 74 72 61 72     A Start Arbitrar
     c88:	79 20 57 61 76 65 66 6f 72 6d 20 54 65 73 74 0d     y Waveform Test.
	...

00000c99 <_ZZ14uart_tokenizerhP8as_classE3__c_13>:
     c99:	44 20 53 74 61 72 74 20 44 69 66 66 65 72 65 6e     D Start Differen
     ca9:	74 69 61 6c 20 50 75 6c 73 65 20 54 65 73 74 0d     tial Pulse Test.
	...

00000cba <_ZZ14uart_tokenizerhP8as_classE3__c_12>:
     cba:	0d 4c 20 53 74 61 72 74 20 4c 69 6e 65 61 72 20     .L Start Linear 
     cca:	53 77 65 65 70 20 54 65 73 74 0d 00                 Sweep Test..

00000cd6 <_ZZ14uart_tokenizerhP8as_classE3__c_11>:
     cd6:	50 72 6f 64 75 63 74 20 49 44 3a 20 00              Product ID: .

00000ce3 <_ZZ14uart_tokenizerhP8as_classE3__c_10>:
     ce3:	46 69 72 6d 77 61 72 65 20 52 65 76 69 73 69 6f     Firmware Revisio
     cf3:	6e 3a 20 00                                         n: .

00000cf7 <_ZZ14uart_tokenizerhP8as_classE3__c_9>:
     cf7:	31 30 2e 20 47 65 74 20 53 65 74 74 69 6e 67 73     10. Get Settings
     d07:	0d 0d 00                                            ...

00000d0a <_ZZ14uart_tokenizerhP8as_classE3__c_8>:
     d0a:	39 2e 20 20 4c 6f 77 2d 70 61 73 73 20 46 69 6c     9.  Low-pass Fil
     d1a:	74 65 72 20 4d 65 6e 75 0d 00                       ter Menu..

00000d24 <_ZZ14uart_tokenizerhP8as_classE3__c_7>:
     d24:	38 2e 20 20 41 72 62 69 74 72 61 72 79 20 57 61     8.  Arbitrary Wa
     d34:	76 65 66 6f 72 6d 20 4d 65 6e 75 0d 00              veform Menu..

00000d41 <_ZZ14uart_tokenizerhP8as_classE3__c_6>:
     d41:	37 2e 20 20 44 69 66 66 65 72 65 6e 74 69 61 6c     7.  Differential
     d51:	20 50 75 6c 73 65 20 4d 65 6e 75 0d 00               Pulse Menu..

00000d5e <_ZZ14uart_tokenizerhP8as_classE3__c_5>:
     d5e:	36 2e 20 20 4c 69 6e 65 61 72 20 53 77 65 65 70     6.  Linear Sweep
     d6e:	20 4d 65 6e 75 0d 00                                 Menu..

00000d75 <_ZZ14uart_tokenizerhP8as_classE3__c_4>:
     d75:	35 2e 20 20 44 65 70 6f 73 69 74 69 6f 6e 20 4d     5.  Deposition M
     d85:	65 6e 75 0d 00                                      enu..

00000d8a <_ZZ14uart_tokenizerhP8as_classE3__c_3>:
     d8a:	34 2e 20 20 54 72 61 6e 73 69 6d 70 65 64 61 6e     4.  Transimpedan
     d9a:	63 65 20 41 6d 70 6c 69 66 69 65 72 20 4d 65 6e     ce Amplifier Men
     daa:	75 0d 00                                            u..

00000dad <_ZZ14uart_tokenizerhP8as_classE3__c_2>:
     dad:	33 2e 20 20 4f 75 74 70 75 74 20 53 61 6d 70 6c     3.  Output Sampl
     dbd:	65 20 49 6e 74 65 72 76 61 6c 20 6d 73 00           e Interval ms.

00000dcb <_ZZ14uart_tokenizerhP8as_classE3__c_1>:
     dcb:	32 2e 20 20 4e 75 6d 62 65 72 20 6f 66 20 45 6c     2.  Number of El
     ddb:	65 63 74 72 6f 64 65 73 20 28 32 20 6f 72 20 33     ectrodes (2 or 3
     deb:	29 3a 20 00                                         ): .

00000def <_ZZ14uart_tokenizerhP8as_classE3__c_0>:
     def:	31 2e 20 20 54 72 61 6e 73 6d 69 73 73 69 6f 6e     1.  Transmission
     dff:	20 4d 6f 64 65 20 28 41 29 53 43 49 49 2c 20 28      Mode (A)SCII, (
     e0f:	4d 29 61 74 4c 61 62 2c 20 28 42 29 69 6e 61 72     M)atLab, (B)inar
     e1f:	79 3a 20 00                                         y: .

00000e23 <_ZZ14uart_tokenizerhP8as_classE3__c>:
     e23:	2d 2d 2d 4d 41 49 4e 20 4d 45 4e 55 2d 2d 2d 0d     ---MAIN MENU---.
	...

00000e34 <_ZZ7uart_okvE3__c>:
     e34:	4f 4b 0d 00                                         OK..

00000e38 <_ZZ8uart_errvE3__c>:
     e38:	45 52 52 0d 00                                      ERR..

00000e3d <_ZZ15uart_true_falsebE3__c_0>:
     e3d:	66 61 6c 73 65 00                                   false.

00000e43 <_ZZ15uart_true_falsebE3__c>:
     e43:	74 72 75 65 00                                      true.

00000e48 <_ZZ16uart_min_max_intiiE3__c_1>:
     e48:	29 3a 20 00                                         ): .

00000e4c <_ZZ16uart_min_max_intiiE3__c_0>:
     e4c:	20 74 6f 20 00                                       to .

00000e51 <_ZZ16uart_min_max_intiiE3__c>:
     e51:	20 28 00                                             (.

00000e54 <_ZZ16uart_min_max_u32mmE3__c_1>:
     e54:	29 3a 20 00                                         ): .

00000e58 <_ZZ16uart_min_max_u32mmE3__c_0>:
     e58:	20 74 6f 20 00                                       to .

00000e5d <_ZZ16uart_min_max_u32mmE3__c>:
     e5d:	20 28 00                                             (.

00000e60 <_ZZ19uart_print_settingsP8as_classE3__c_22>:
     e60:	66 69 6c 74 5f 73 3d 00                             filt_s=.

00000e68 <_ZZ19uart_print_settingsP8as_classE3__c_21>:
     e68:	61 72 62 5f 6e 3d 00                                arb_n=.

00000e6f <_ZZ19uart_print_settingsP8as_classE3__c_20>:
     e6f:	64 69 66 5f 77 69 6e 3d 00                          dif_win=.

00000e78 <_ZZ19uart_print_settingsP8as_classE3__c_19>:
     e78:	64 69 66 5f 74 70 6c 3d 00                          dif_tpl=.

00000e81 <_ZZ19uart_print_settingsP8as_classE3__c_18>:
     e81:	64 69 66 5f 74 70 72 3d 00                          dif_tpr=.

00000e8a <_ZZ19uart_print_settingsP8as_classE3__c_17>:
     e8a:	64 69 66 5f 76 70 6c 3d 00                          dif_vpl=.

00000e93 <_ZZ19uart_print_settingsP8as_classE3__c_16>:
     e93:	64 69 66 5f 76 69 3d 00                             dif_vi=.

00000e9b <_ZZ19uart_print_settingsP8as_classE3__c_15>:
     e9b:	64 69 66 5f 76 65 3d 00                             dif_ve=.

00000ea3 <_ZZ19uart_print_settingsP8as_classE3__c_14>:
     ea3:	64 69 66 5f 76 73 3d 00                             dif_vs=.

00000eab <_ZZ19uart_print_settingsP8as_classE3__c_13>:
     eab:	73 77 65 65 70 5f 63 73 3d 00                       sweep_cs=.

00000eb5 <_ZZ19uart_print_settingsP8as_classE3__c_12>:
     eb5:	73 77 65 65 70 5f 63 3d 00                          sweep_c=.

00000ebe <_ZZ19uart_print_settingsP8as_classE3__c_11>:
     ebe:	73 77 65 65 70 5f 72 3d 00                          sweep_r=.

00000ec7 <_ZZ19uart_print_settingsP8as_classE3__c_10>:
     ec7:	73 77 65 65 70 5f 76 65 3d 00                       sweep_ve=.

00000ed1 <_ZZ19uart_print_settingsP8as_classE3__c_9>:
     ed1:	73 77 65 65 70 5f 76 73 3d 00                       sweep_vs=.

00000edb <_ZZ19uart_print_settingsP8as_classE3__c_8>:
     edb:	64 65 70 5f 72 3d 00                                dep_r=.

00000ee2 <_ZZ19uart_print_settingsP8as_classE3__c_7>:
     ee2:	71 75 69 65 74 5f 74 3d 00                          quiet_t=.

00000eeb <_ZZ19uart_print_settingsP8as_classE3__c_6>:
     eeb:	64 65 70 5f 76 3d 00                                dep_v=.

00000ef2 <_ZZ19uart_print_settingsP8as_classE3__c_5>:
     ef2:	64 65 70 5f 74 3d 00                                dep_t=.

00000ef9 <_ZZ19uart_print_settingsP8as_classE3__c_4>:
     ef9:	64 65 70 5f 65 3d 00                                dep_e=.

00000f00 <_ZZ19uart_print_settingsP8as_classE3__c_3>:
     f00:	74 69 61 5f 72 3d 00                                tia_r=.

00000f07 <_ZZ19uart_print_settingsP8as_classE3__c_2>:
     f07:	61 64 63 5f 72 3d 00                                adc_r=.

00000f0e <_ZZ19uart_print_settingsP8as_classE3__c_1>:
     f0e:	6e 75 6d 5f 65 3d 00                                num_e=.

00000f15 <_ZZ19uart_print_settingsP8as_classE3__c_0>:
     f15:	27 3b 0d 00                                         ';..

00000f19 <_ZZ19uart_print_settingsP8as_classE3__c>:
     f19:	74 78 5f 6d 3d 27 00                                tx_m='.

00000f20 <_ZZ13calibrate_oscvE3__c>:
     f20:	4f 4b 2e 20 4f 53 43 43 41 4c 20 3d 20 00           OK. OSCCAL = .

00000f2e <__ctors_start>:
     f2e:	a1 19       	sub	r26, r1

00000f30 <__ctors_end>:
     f30:	11 24       	eor	r1, r1
     f32:	1f be       	out	0x3f, r1	; 63
     f34:	cf ef       	ldi	r28, 0xFF	; 255
     f36:	d8 e0       	ldi	r29, 0x08	; 8
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	cd bf       	out	0x3d, r28	; 61

00000f3c <__do_copy_data>:
     f3c:	11 e0       	ldi	r17, 0x01	; 1
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b1 e0       	ldi	r27, 0x01	; 1
     f42:	e4 ec       	ldi	r30, 0xC4	; 196
     f44:	f8 e7       	ldi	r31, 0x78	; 120
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <__do_copy_data+0x10>
     f48:	05 90       	lpm	r0, Z+
     f4a:	0d 92       	st	X+, r0
     f4c:	a0 32       	cpi	r26, 0x20	; 32
     f4e:	b1 07       	cpc	r27, r17
     f50:	d9 f7       	brne	.-10     	; 0xf48 <__do_copy_data+0xc>

00000f52 <__do_clear_bss>:
     f52:	21 e0       	ldi	r18, 0x01	; 1
     f54:	a0 e2       	ldi	r26, 0x20	; 32
     f56:	b1 e0       	ldi	r27, 0x01	; 1
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <.do_clear_bss_start>

00000f5a <.do_clear_bss_loop>:
     f5a:	1d 92       	st	X+, r1

00000f5c <.do_clear_bss_start>:
     f5c:	a0 3a       	cpi	r26, 0xA0	; 160
     f5e:	b2 07       	cpc	r27, r18
     f60:	e1 f7       	brne	.-8      	; 0xf5a <.do_clear_bss_loop>

00000f62 <__do_global_ctors>:
     f62:	1f e0       	ldi	r17, 0x0F	; 15
     f64:	c0 e3       	ldi	r28, 0x30	; 48
     f66:	df e0       	ldi	r29, 0x0F	; 15
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <__do_global_ctors+0x10>
     f6a:	22 97       	sbiw	r28, 0x02	; 2
     f6c:	fe 01       	movw	r30, r28
     f6e:	0e 94 24 3c 	call	0x7848	; 0x7848 <__tablejump__>
     f72:	ce 32       	cpi	r28, 0x2E	; 46
     f74:	d1 07       	cpc	r29, r17
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__do_global_ctors+0x8>
     f78:	0e 94 c2 07 	call	0xf84	; 0xf84 <main>
     f7c:	0c 94 60 3c 	jmp	0x78c0	; 0x78c0 <_exit>

00000f80 <__bad_interrupt>:
     f80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f84 <main>:
as_class as;

int main(void)
{	
	//Setup processor.
	init_processor(&as);
     f84:	83 e5       	ldi	r24, 0x53	; 83
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	0e 94 62 22 	call	0x44c4	; 0x44c4 <_Z14init_processorP8as_class>
	
	//Set initial value of tia resistor.
	i2c_load_res(&as);
     f8c:	83 e5       	ldi	r24, 0x53	; 83
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_Z12i2c_load_resP8as_class>
     f94:	ff cf       	rjmp	.-2      	; 0xf94 <main+0x10>

00000f96 <__vector_18>:
	while(1);
}

//Interrupt based UART RX function.
ISR(USART_RX_vect)
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	cf 93       	push	r28
     fb6:	ef 93       	push	r30
     fb8:	ff 93       	push	r31
	uint8_t rx_byte;
	
	rx_byte = UDR0;	//Get RX byte.
     fba:	c0 91 c6 00 	lds	r28, 0x00C6
	
	//Check if in binary mode.
	if (as.get_tx_mode() == TX_MODE_BIN)
     fbe:	83 e5       	ldi	r24, 0x53	; 83
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	b1 f4       	brne	.+44     	; 0xff6 <__vector_18+0x60>
	{
		//Build input array when idle.
		if(as.get_test_state() == IDLE)
     fca:	83 e5       	ldi	r24, 0x53	; 83
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN8as_class14get_test_stateEv>
     fd2:	81 11       	cpse	r24, r1
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <__vector_18+0x4e>
		{
			//Start timeout timer.
			bin_timeout = 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 7e 01 	sts	0x017E, r24
			
			//Add byte to array.
			bin_build_array(rx_byte);
     fdc:	8c 2f       	mov	r24, r28
     fde:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <_Z15bin_build_arrayh>
     fe2:	1d c0       	rjmp	.+58     	; 0x101e <__vector_18+0x88>
		}
		//If not idle and 'x' is received, abort test.
		else if(rx_byte == 'x' || rx_byte == 'X')
     fe4:	cf 7d       	andi	r28, 0xDF	; 223
     fe6:	c8 35       	cpi	r28, 0x58	; 88
     fe8:	d1 f4       	brne	.+52     	; 0x101e <__vector_18+0x88>
		{
			as.set_test_state(ABORT);
     fea:	63 e1       	ldi	r22, 0x13	; 19
     fec:	83 e5       	ldi	r24, 0x53	; 83
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <__vector_18+0x88>
		}
	}
	else//Must be in ASCII or MatLab mode.
	{		
		//Go to tokenizer when idle.
		if(as.get_test_state() == IDLE)
     ff6:	83 e5       	ldi	r24, 0x53	; 83
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN8as_class14get_test_stateEv>
     ffe:	81 11       	cpse	r24, r1
    1000:	06 c0       	rjmp	.+12     	; 0x100e <__vector_18+0x78>
		{
			//Pass byte to tokenizer.
			uart_tokenizer(rx_byte, &as);
    1002:	63 e5       	ldi	r22, 0x53	; 83
    1004:	71 e0       	ldi	r23, 0x01	; 1
    1006:	8c 2f       	mov	r24, r28
    1008:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <_Z14uart_tokenizerhP8as_class>
    100c:	08 c0       	rjmp	.+16     	; 0x101e <__vector_18+0x88>
		}
		//If not idle and 'x' is pressed, abort test.
		else if(rx_byte == 'x' || rx_byte == 'X')
    100e:	cf 7d       	andi	r28, 0xDF	; 223
    1010:	c8 35       	cpi	r28, 0x58	; 88
    1012:	29 f4       	brne	.+10     	; 0x101e <__vector_18+0x88>
		{
			as.set_test_state(ABORT);
    1014:	63 e1       	ldi	r22, 0x13	; 19
    1016:	83 e5       	ldi	r24, 0x53	; 83
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		}
	}
}
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	cf 91       	pop	r28
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_11>:

//16-bit timer used for 1 ms system timing.
ISR(TIMER1_COMPA_vect)
{
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	8f 92       	push	r8
    104e:	9f 92       	push	r9
    1050:	af 92       	push	r10
    1052:	bf 92       	push	r11
    1054:	cf 92       	push	r12
    1056:	df 92       	push	r13
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
	static uint32_t samp_count, eprom_index;
	static double sv, ev, rate, this_offset, temp;
	
	//PORTB |= (1 << PORTB0);//Toggle port for timing check.
	
	switch (as.get_test_state())
    1078:	83 e5       	ldi	r24, 0x53	; 83
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN8as_class14get_test_stateEv>
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	84 31       	cpi	r24, 0x14	; 20
    1084:	91 05       	cpc	r25, r1
    1086:	10 f0       	brcs	.+4      	; 0x108c <__vector_11+0x4a>
    1088:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__vector_11+0x21b2>
    108c:	fc 01       	movw	r30, r24
    108e:	ec 5c       	subi	r30, 0xCC	; 204
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	0c 94 22 3c 	jmp	0x7844	; 0x7844 <__tablejump2__>
	{
		case IDLE://Maintenance stuff that happens every millisecond.
			ms_counter = 0;
    1096:	10 92 7f 01 	sts	0x017F, r1
    109a:	10 92 80 01 	sts	0x0180, r1
    109e:	10 92 81 01 	sts	0x0181, r1
    10a2:	10 92 82 01 	sts	0x0182, r1
			samp_count = 0;
    10a6:	10 92 4f 01 	sts	0x014F, r1
    10aa:	10 92 50 01 	sts	0x0150, r1
    10ae:	10 92 51 01 	sts	0x0151, r1
    10b2:	10 92 52 01 	sts	0x0152, r1
			//Binary transmission timeout handling stuff.
			//Binary transmissions have to rely on a timeout function to
			//determine when to evaluate an array because the array can
			//have any combination of characters so a terminating character
			//is not possible as in the ASCII transmission mode.
			if(bin_timeout > 0 && bin_timeout <= BIN_TIME_MAX)
    10b6:	80 91 7e 01 	lds	r24, 0x017E
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	98 0f       	add	r25, r24
    10be:	96 30       	cpi	r25, 0x06	; 6
    10c0:	18 f4       	brcc	.+6      	; 0x10c8 <__vector_11+0x86>
				bin_timeout++;
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	80 93 7e 01 	sts	0x017E, r24
			
			//If timeout occurs, evaluate input array.
			if(bin_timeout >= BIN_TIME_MAX)
    10c8:	80 91 7e 01 	lds	r24, 0x017E
    10cc:	86 30       	cpi	r24, 0x06	; 6
    10ce:	10 f4       	brcc	.+4      	; 0x10d4 <__vector_11+0x92>
    10d0:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			{
				bin_timeout = 0;
    10d4:	10 92 7e 01 	sts	0x017E, r1
				bin_tokenize(&as);
    10d8:	83 e5       	ldi	r24, 0x53	; 83
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <_Z12bin_tokenizeP8as_class>
    10e0:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}
		break;
		
		case DEP_INIT:
			samp_count = 0;	//Zero out sample counter.
    10e4:	10 92 4f 01 	sts	0x014F, r1
    10e8:	10 92 50 01 	sts	0x0150, r1
    10ec:	10 92 51 01 	sts	0x0151, r1
    10f0:	10 92 52 01 	sts	0x0152, r1
			
			i2c_connect_ce();//Always connect counter electrode.
    10f4:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
			
			//Always print header if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)				
    10f8:	83 e5       	ldi	r24, 0x53	; 83
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	21 f4       	brne	.+8      	; 0x110c <__vector_11+0xca>
				uart_print_settings(&as);	//send all parameters in MatLab format.
    1104:	83 e5       	ldi	r24, 0x53	; 83
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <_Z19uart_print_settingsP8as_class>
			
			if(as.get_dep_enable())//Prep for deposition.
    110c:	83 e5       	ldi	r24, 0x53	; 83
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN8as_class14get_dep_enableEv>
    1114:	88 23       	and	r24, r24
    1116:	09 f4       	brne	.+2      	; 0x111a <__vector_11+0xd8>
    1118:	60 c0       	rjmp	.+192    	; 0x11da <__vector_11+0x198>
			{
				
				//Create MatLab array for deposition currents if they are to be streamed.
				if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_MATLAB)
    111a:	83 e5       	ldi	r24, 0x53	; 83
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    1122:	88 23       	and	r24, r24
    1124:	59 f0       	breq	.+22     	; 0x113c <__vector_11+0xfa>
    1126:	83 e5       	ldi	r24, 0x53	; 83
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	29 f4       	brne	.+10     	; 0x113c <__vector_11+0xfa>
					atmega_uart::tx_string_p(PSTR("d=["));
    1132:	89 e2       	ldi	r24, 0x29	; 41
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    113a:	24 c0       	rjmp	.+72     	; 0x1184 <__vector_11+0x142>
				//Send ASCII deposition data word.
				else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_ASCII)
    113c:	83 e5       	ldi	r24, 0x53	; 83
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    1144:	88 23       	and	r24, r24
    1146:	71 f0       	breq	.+28     	; 0x1164 <__vector_11+0x122>
    1148:	83 e5       	ldi	r24, 0x53	; 83
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1150:	81 11       	cpse	r24, r1
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <__vector_11+0x122>
				{
					tx_u16_to_ascii(DEP_DATA);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e8       	ldi	r25, 0x80	; 128
    1158:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    115c:	8c e2       	ldi	r24, 0x2C	; 44
    115e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1162:	10 c0       	rjmp	.+32     	; 0x1184 <__vector_11+0x142>
				}
				//send binary deposition word.
				else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_BIN)
    1164:	83 e5       	ldi	r24, 0x53	; 83
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    116c:	88 23       	and	r24, r24
    116e:	51 f0       	breq	.+20     	; 0x1184 <__vector_11+0x142>
    1170:	83 e5       	ldi	r24, 0x53	; 83
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	21 f4       	brne	.+8      	; 0x1184 <__vector_11+0x142>
					atmega_uart::tx_word(DEP_DATA);
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e8       	ldi	r25, 0x80	; 128
    1180:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				
				//Set deposition voltage.
				voltage = ZERO_VOLT + (1000L * as.get_dep_volt() / V_PER_COUNT);
    1184:	83 e5       	ldi	r24, 0x53	; 83
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <_ZN8as_class12get_dep_voltEv>
    118c:	28 ee       	ldi	r18, 0xE8	; 232
    118e:	33 e0       	ldi	r19, 0x03	; 3
    1190:	dc 01       	movw	r26, r24
    1192:	0e 94 37 3c 	call	0x786e	; 0x786e <__usmulhisi3>
    1196:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    119a:	2f e7       	ldi	r18, 0x7F	; 127
    119c:	3a e6       	ldi	r19, 0x6A	; 106
    119e:	49 e4       	ldi	r20, 0x49	; 73
    11a0:	54 e4       	ldi	r21, 0x44	; 68
    11a2:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 ee       	ldi	r19, 0xE0	; 224
    11aa:	4f ef       	ldi	r20, 0xFF	; 255
    11ac:	54 e4       	ldi	r21, 0x44	; 68
    11ae:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    11b2:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <__fixsfsi>
    11b6:	60 93 4b 01 	sts	0x014B, r22
    11ba:	70 93 4c 01 	sts	0x014C, r23
    11be:	80 93 4d 01 	sts	0x014D, r24
    11c2:	90 93 4e 01 	sts	0x014E, r25
				write_dac(voltage);
    11c6:	cb 01       	movw	r24, r22
    11c8:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
				
				//move to next state.
				as.set_test_state(DEPOSIT);
    11cc:	62 e0       	ldi	r22, 0x02	; 2
    11ce:	83 e5       	ldi	r24, 0x53	; 83
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    11d6:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}
			else//Skip deposition and quiet time.
			{
				if(as.get_test_type() == TEST_LIN)		//Start linear sweep test.
    11da:	83 e5       	ldi	r24, 0x53	; 83
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    11e2:	81 11       	cpse	r24, r1
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <__vector_11+0x1b2>
					as.set_test_state(RAMP_INIT);
    11e6:	67 e0       	ldi	r22, 0x07	; 7
    11e8:	83 e5       	ldi	r24, 0x53	; 83
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    11f0:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				else if(as.get_test_type() == TEST_DIF)	//Start square wave test.
    11f4:	83 e5       	ldi	r24, 0x53	; 83
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	39 f4       	brne	.+14     	; 0x120e <__vector_11+0x1cc>
					as.set_test_state(DIF_INIT);
    1200:	69 e0       	ldi	r22, 0x09	; 9
    1202:	83 e5       	ldi	r24, 0x53	; 83
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    120a:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				else                                    //Start arbitrary waveform test.
					as.set_test_state(ARB_INIT);
    120e:	6f e0       	ldi	r22, 0x0F	; 15
    1210:	83 e5       	ldi	r24, 0x53	; 83
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    1218:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}	
		break;
		 
		case DEPOSIT:
			if(ms_counter < as.get_dep_time())
    121c:	83 e5       	ldi	r24, 0x53	; 83
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN8as_class12get_dep_timeEv>
    1224:	c0 90 7f 01 	lds	r12, 0x017F
    1228:	d0 90 80 01 	lds	r13, 0x0180
    122c:	e0 90 81 01 	lds	r14, 0x0181
    1230:	f0 90 82 01 	lds	r15, 0x0182
    1234:	c6 16       	cp	r12, r22
    1236:	d7 06       	cpc	r13, r23
    1238:	e8 06       	cpc	r14, r24
    123a:	f9 06       	cpc	r15, r25
    123c:	08 f0       	brcs	.+2      	; 0x1240 <__vector_11+0x1fe>
    123e:	9a c0       	rjmp	.+308    	; 0x1374 <__vector_11+0x332>
			{
				if(as.get_soft_sel())				//Use filter.
    1240:	83 e5       	ldi	r24, 0x53	; 83
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8as_class12get_soft_selEv>
    1248:	88 23       	and	r24, r24
    124a:	59 f0       	breq	.+22     	; 0x1262 <__vector_11+0x220>
					output = lpf(read_adc(), &as);
    124c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    1250:	63 e5       	ldi	r22, 0x53	; 83
    1252:	71 e0       	ldi	r23, 0x01	; 1
    1254:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <_Z3lpfjP8as_class>
    1258:	90 93 4a 01 	sts	0x014A, r25
    125c:	80 93 49 01 	sts	0x0149, r24
    1260:	06 c0       	rjmp	.+12     	; 0x126e <__vector_11+0x22c>
				else                                //Do not use software filter.
					output = read_adc();
    1262:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    1266:	90 93 4a 01 	sts	0x014A, r25
    126a:	80 93 49 01 	sts	0x0149, r24
				
				//Check if time to transmit another sample.
				if((!(ms_counter % as.get_adc_rate())) && as.get_dep_rec())
    126e:	c0 90 7f 01 	lds	r12, 0x017F
    1272:	d0 90 80 01 	lds	r13, 0x0180
    1276:	e0 90 81 01 	lds	r14, 0x0181
    127a:	f0 90 82 01 	lds	r15, 0x0182
    127e:	83 e5       	ldi	r24, 0x53	; 83
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 08 1a 	call	0x3410	; 0x3410 <_ZN8as_class12get_adc_rateEv>
    1286:	9c 01       	movw	r18, r24
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	c7 01       	movw	r24, r14
    128e:	b6 01       	movw	r22, r12
    1290:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    1294:	67 2b       	or	r22, r23
    1296:	68 2b       	or	r22, r24
    1298:	69 2b       	or	r22, r25
    129a:	09 f0       	breq	.+2      	; 0x129e <__vector_11+0x25c>
    129c:	56 c0       	rjmp	.+172    	; 0x134a <__vector_11+0x308>
    129e:	83 e5       	ldi	r24, 0x53	; 83
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    12a6:	88 23       	and	r24, r24
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__vector_11+0x26a>
    12aa:	4f c0       	rjmp	.+158    	; 0x134a <__vector_11+0x308>
				{
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    12ac:	83 e5       	ldi	r24, 0x53	; 83
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	99 f5       	brne	.+102    	; 0x131e <__vector_11+0x2dc>
					{
						tx_u16_to_ascii(output);
    12b8:	80 91 49 01 	lds	r24, 0x0149
    12bc:	90 91 4a 01 	lds	r25, 0x014A
    12c0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    12c4:	8c e2       	ldi	r24, 0x2C	; 44
    12c6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
						
						//Indicate a new sample has been sent.
						samp_count++;
    12ca:	80 91 4f 01 	lds	r24, 0x014F
    12ce:	90 91 50 01 	lds	r25, 0x0150
    12d2:	a0 91 51 01 	lds	r26, 0x0151
    12d6:	b0 91 52 01 	lds	r27, 0x0152
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	6f 5f       	subi	r22, 0xFF	; 255
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	8f 4f       	sbci	r24, 0xFF	; 255
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	60 93 4f 01 	sts	0x014F, r22
    12ea:	70 93 50 01 	sts	0x0150, r23
    12ee:	80 93 51 01 	sts	0x0151, r24
    12f2:	90 93 52 01 	sts	0x0152, r25
						
						//Start newline if 10 or more samples on this line.
						if(samp_count && !(samp_count % 10))
    12f6:	61 15       	cp	r22, r1
    12f8:	71 05       	cpc	r23, r1
    12fa:	81 05       	cpc	r24, r1
    12fc:	91 05       	cpc	r25, r1
    12fe:	29 f1       	breq	.+74     	; 0x134a <__vector_11+0x308>
    1300:	2a e0       	ldi	r18, 0x0A	; 10
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    130c:	67 2b       	or	r22, r23
    130e:	68 2b       	or	r22, r24
    1310:	69 2b       	or	r22, r25
    1312:	d9 f4       	brne	.+54     	; 0x134a <__vector_11+0x308>
							atmega_uart::tx_string_p(PSTR("...\r"));
    1314:	84 e2       	ldi	r24, 0x24	; 36
    1316:	97 e0       	ldi	r25, 0x07	; 7
    1318:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    131c:	16 c0       	rjmp	.+44     	; 0x134a <__vector_11+0x308>
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    131e:	83 e5       	ldi	r24, 0x53	; 83
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1326:	81 11       	cpse	r24, r1
    1328:	0a c0       	rjmp	.+20     	; 0x133e <__vector_11+0x2fc>
					{
						tx_u16_to_ascii(output);
    132a:	80 91 49 01 	lds	r24, 0x0149
    132e:	90 91 4a 01 	lds	r25, 0x014A
    1332:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1336:	8c e2       	ldi	r24, 0x2C	; 44
    1338:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    133c:	06 c0       	rjmp	.+12     	; 0x134a <__vector_11+0x308>
					}
					//Print binary data.
					else
						atmega_uart::tx_word(output);
    133e:	80 91 49 01 	lds	r24, 0x0149
    1342:	90 91 4a 01 	lds	r25, 0x014A
    1346:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				}
				
				ms_counter++;//Always increment counter.
    134a:	80 91 7f 01 	lds	r24, 0x017F
    134e:	90 91 80 01 	lds	r25, 0x0180
    1352:	a0 91 81 01 	lds	r26, 0x0181
    1356:	b0 91 82 01 	lds	r27, 0x0182
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	a1 1d       	adc	r26, r1
    135e:	b1 1d       	adc	r27, r1
    1360:	80 93 7f 01 	sts	0x017F, r24
    1364:	90 93 80 01 	sts	0x0180, r25
    1368:	a0 93 81 01 	sts	0x0181, r26
    136c:	b0 93 82 01 	sts	0x0182, r27
    1370:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}
			else
				as.set_test_state(DEP_STOP);//Stop deposition.
    1374:	63 e0       	ldi	r22, 0x03	; 3
    1376:	83 e5       	ldi	r24, 0x53	; 83
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    137e:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		break;
		
		case DEP_STOP:
			//Print end character if deposition is being recorded.
			if(as.get_dep_rec())
    1382:	83 e5       	ldi	r24, 0x53	; 83
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    138a:	88 23       	and	r24, r24
    138c:	e9 f0       	breq	.+58     	; 0x13c8 <__vector_11+0x386>
			{
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    138e:	83 e5       	ldi	r24, 0x53	; 83
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	29 f4       	brne	.+10     	; 0x13a4 <__vector_11+0x362>
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    139a:	8f e1       	ldi	r24, 0x1F	; 31
    139c:	97 e0       	ldi	r25, 0x07	; 7
    139e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    13a2:	12 c0       	rjmp	.+36     	; 0x13c8 <__vector_11+0x386>
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    13a4:	83 e5       	ldi	r24, 0x53	; 83
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    13ac:	81 11       	cpse	r24, r1
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <__vector_11+0x37e>
				{
					tx_u16_to_ascii(END_BLOCK);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	9f ef       	ldi	r25, 0xFF	; 255
    13b4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    13b8:	8c e2       	ldi	r24, 0x2C	; 44
    13ba:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <__vector_11+0x386>
				}
				//Print binary data.
				else
					atmega_uart::tx_word(END_BLOCK);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	9f ef       	ldi	r25, 0xFF	; 255
    13c4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
			
			if(as.get_quiet_time())					//Start quiet time.
    13c8:	83 e5       	ldi	r24, 0x53	; 83
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN8as_class14get_quiet_timeEv>
    13d0:	67 2b       	or	r22, r23
    13d2:	68 2b       	or	r22, r24
    13d4:	69 2b       	or	r22, r25
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <__vector_11+0x3a4>
				as.set_test_state(QUIET_INIT);
    13d8:	64 e0       	ldi	r22, 0x04	; 4
    13da:	83 e5       	ldi	r24, 0x53	; 83
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    13e2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			else if(as.get_test_type() == TEST_LIN)	//Start linear sweep.
    13e6:	83 e5       	ldi	r24, 0x53	; 83
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    13ee:	81 11       	cpse	r24, r1
    13f0:	07 c0       	rjmp	.+14     	; 0x1400 <__vector_11+0x3be>
				as.set_test_state(RAMP_INIT);
    13f2:	67 e0       	ldi	r22, 0x07	; 7
    13f4:	83 e5       	ldi	r24, 0x53	; 83
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    13fc:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			else if(as.get_test_type() == TEST_DIF)	//Start differential pulse.
    1400:	83 e5       	ldi	r24, 0x53	; 83
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	39 f4       	brne	.+14     	; 0x141a <__vector_11+0x3d8>
				as.set_test_state(DIF_INIT);
    140c:	69 e0       	ldi	r22, 0x09	; 9
    140e:	83 e5       	ldi	r24, 0x53	; 83
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    1416:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			else                                    //Start arbitrary waveform.
				as.set_test_state(ARB_INIT);
    141a:	6f e0       	ldi	r22, 0x0F	; 15
    141c:	83 e5       	ldi	r24, 0x53	; 83
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    1424:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		break;
		
		case QUIET_INIT:
			samp_count = 0;	//Zero out sample counter.
    1428:	10 92 4f 01 	sts	0x014F, r1
    142c:	10 92 50 01 	sts	0x0150, r1
    1430:	10 92 51 01 	sts	0x0151, r1
    1434:	10 92 52 01 	sts	0x0152, r1
			ms_counter = 0;	//Zero out ms counter.
    1438:	10 92 7f 01 	sts	0x017F, r1
    143c:	10 92 80 01 	sts	0x0180, r1
    1440:	10 92 81 01 	sts	0x0181, r1
    1444:	10 92 82 01 	sts	0x0182, r1
			
			//Create MatLab array for quiet time currents if they are to be streamed.
			if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_MATLAB)
    1448:	83 e5       	ldi	r24, 0x53	; 83
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    1450:	88 23       	and	r24, r24
    1452:	59 f0       	breq	.+22     	; 0x146a <__vector_11+0x428>
    1454:	83 e5       	ldi	r24, 0x53	; 83
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	29 f4       	brne	.+10     	; 0x146a <__vector_11+0x428>
				atmega_uart::tx_string_p(PSTR("q=["));
    1460:	8b e1       	ldi	r24, 0x1B	; 27
    1462:	97 e0       	ldi	r25, 0x07	; 7
    1464:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1468:	24 c0       	rjmp	.+72     	; 0x14b2 <__vector_11+0x470>
			//Send ASCII deposition data word.
			else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_ASCII)
    146a:	83 e5       	ldi	r24, 0x53	; 83
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    1472:	88 23       	and	r24, r24
    1474:	71 f0       	breq	.+28     	; 0x1492 <__vector_11+0x450>
    1476:	83 e5       	ldi	r24, 0x53	; 83
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    147e:	81 11       	cpse	r24, r1
    1480:	08 c0       	rjmp	.+16     	; 0x1492 <__vector_11+0x450>
			{
				tx_u16_to_ascii(QUIET_DATA);
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	91 e8       	ldi	r25, 0x81	; 129
    1486:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    148a:	8c e2       	ldi	r24, 0x2C	; 44
    148c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1490:	10 c0       	rjmp	.+32     	; 0x14b2 <__vector_11+0x470>
			}
			//send binary deposition word.
			else if(as.get_dep_rec() && as.get_tx_mode() == TX_MODE_BIN)
    1492:	83 e5       	ldi	r24, 0x53	; 83
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    149a:	88 23       	and	r24, r24
    149c:	51 f0       	breq	.+20     	; 0x14b2 <__vector_11+0x470>
    149e:	83 e5       	ldi	r24, 0x53	; 83
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <__vector_11+0x470>
				atmega_uart::tx_word(QUIET_DATA);
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	91 e8       	ldi	r25, 0x81	; 129
    14ae:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			
			as.set_test_state(QUIET);	//move to next state.
    14b2:	65 e0       	ldi	r22, 0x05	; 5
    14b4:	83 e5       	ldi	r24, 0x53	; 83
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		break;
    14bc:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		
		case QUIET:
			if(ms_counter < as.get_quiet_time())
    14c0:	83 e5       	ldi	r24, 0x53	; 83
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN8as_class14get_quiet_timeEv>
    14c8:	c0 90 7f 01 	lds	r12, 0x017F
    14cc:	d0 90 80 01 	lds	r13, 0x0180
    14d0:	e0 90 81 01 	lds	r14, 0x0181
    14d4:	f0 90 82 01 	lds	r15, 0x0182
    14d8:	c6 16       	cp	r12, r22
    14da:	d7 06       	cpc	r13, r23
    14dc:	e8 06       	cpc	r14, r24
    14de:	f9 06       	cpc	r15, r25
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <__vector_11+0x4a2>
    14e2:	9a c0       	rjmp	.+308    	; 0x1618 <__vector_11+0x5d6>
			{
				if(as.get_soft_sel()) //Use filter.
    14e4:	83 e5       	ldi	r24, 0x53	; 83
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8as_class12get_soft_selEv>
    14ec:	88 23       	and	r24, r24
    14ee:	59 f0       	breq	.+22     	; 0x1506 <__vector_11+0x4c4>
					output = lpf(read_adc(), &as);
    14f0:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    14f4:	63 e5       	ldi	r22, 0x53	; 83
    14f6:	71 e0       	ldi	r23, 0x01	; 1
    14f8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <_Z3lpfjP8as_class>
    14fc:	90 93 4a 01 	sts	0x014A, r25
    1500:	80 93 49 01 	sts	0x0149, r24
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <__vector_11+0x4d0>
				else //Do not use software filter.
					output = read_adc();
    1506:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    150a:	90 93 4a 01 	sts	0x014A, r25
    150e:	80 93 49 01 	sts	0x0149, r24
				
				//Check if time to transmit another sample.
				if((!(ms_counter % as.get_adc_rate())) && as.get_dep_rec())
    1512:	c0 90 7f 01 	lds	r12, 0x017F
    1516:	d0 90 80 01 	lds	r13, 0x0180
    151a:	e0 90 81 01 	lds	r14, 0x0181
    151e:	f0 90 82 01 	lds	r15, 0x0182
    1522:	83 e5       	ldi	r24, 0x53	; 83
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 08 1a 	call	0x3410	; 0x3410 <_ZN8as_class12get_adc_rateEv>
    152a:	9c 01       	movw	r18, r24
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	c7 01       	movw	r24, r14
    1532:	b6 01       	movw	r22, r12
    1534:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    1538:	67 2b       	or	r22, r23
    153a:	68 2b       	or	r22, r24
    153c:	69 2b       	or	r22, r25
    153e:	09 f0       	breq	.+2      	; 0x1542 <__vector_11+0x500>
    1540:	56 c0       	rjmp	.+172    	; 0x15ee <__vector_11+0x5ac>
    1542:	83 e5       	ldi	r24, 0x53	; 83
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    154a:	88 23       	and	r24, r24
    154c:	09 f4       	brne	.+2      	; 0x1550 <__vector_11+0x50e>
    154e:	4f c0       	rjmp	.+158    	; 0x15ee <__vector_11+0x5ac>
				{
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    1550:	83 e5       	ldi	r24, 0x53	; 83
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	99 f5       	brne	.+102    	; 0x15c2 <__vector_11+0x580>
					{
						tx_u16_to_ascii(output);
    155c:	80 91 49 01 	lds	r24, 0x0149
    1560:	90 91 4a 01 	lds	r25, 0x014A
    1564:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1568:	8c e2       	ldi	r24, 0x2C	; 44
    156a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
						
						//Indicate a new sample has been sent.
						samp_count++;
    156e:	80 91 4f 01 	lds	r24, 0x014F
    1572:	90 91 50 01 	lds	r25, 0x0150
    1576:	a0 91 51 01 	lds	r26, 0x0151
    157a:	b0 91 52 01 	lds	r27, 0x0152
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	60 93 4f 01 	sts	0x014F, r22
    158e:	70 93 50 01 	sts	0x0150, r23
    1592:	80 93 51 01 	sts	0x0151, r24
    1596:	90 93 52 01 	sts	0x0152, r25
						
						//Start newline if 10 or more samples on this line.
						if(samp_count && !(samp_count % 10))
    159a:	61 15       	cp	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	81 05       	cpc	r24, r1
    15a0:	91 05       	cpc	r25, r1
    15a2:	29 f1       	breq	.+74     	; 0x15ee <__vector_11+0x5ac>
    15a4:	2a e0       	ldi	r18, 0x0A	; 10
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    15b0:	67 2b       	or	r22, r23
    15b2:	68 2b       	or	r22, r24
    15b4:	69 2b       	or	r22, r25
    15b6:	d9 f4       	brne	.+54     	; 0x15ee <__vector_11+0x5ac>
							atmega_uart::tx_string_p(PSTR("...\r"));
    15b8:	86 e1       	ldi	r24, 0x16	; 22
    15ba:	97 e0       	ldi	r25, 0x07	; 7
    15bc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    15c0:	16 c0       	rjmp	.+44     	; 0x15ee <__vector_11+0x5ac>
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    15c2:	83 e5       	ldi	r24, 0x53	; 83
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    15ca:	81 11       	cpse	r24, r1
    15cc:	0a c0       	rjmp	.+20     	; 0x15e2 <__vector_11+0x5a0>
					{
						tx_u16_to_ascii(output);
    15ce:	80 91 49 01 	lds	r24, 0x0149
    15d2:	90 91 4a 01 	lds	r25, 0x014A
    15d6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    15da:	8c e2       	ldi	r24, 0x2C	; 44
    15dc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <__vector_11+0x5ac>
					}
					//Print binary data.
					else
						atmega_uart::tx_word(output);
    15e2:	80 91 49 01 	lds	r24, 0x0149
    15e6:	90 91 4a 01 	lds	r25, 0x014A
    15ea:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				}
				
				ms_counter++;//Always increment counter.
    15ee:	80 91 7f 01 	lds	r24, 0x017F
    15f2:	90 91 80 01 	lds	r25, 0x0180
    15f6:	a0 91 81 01 	lds	r26, 0x0181
    15fa:	b0 91 82 01 	lds	r27, 0x0182
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	a1 1d       	adc	r26, r1
    1602:	b1 1d       	adc	r27, r1
    1604:	80 93 7f 01 	sts	0x017F, r24
    1608:	90 93 80 01 	sts	0x0180, r25
    160c:	a0 93 81 01 	sts	0x0181, r26
    1610:	b0 93 82 01 	sts	0x0182, r27
    1614:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}
			else
				as.set_test_state(QUIET_STOP);//Stop quiet time.
    1618:	66 e0       	ldi	r22, 0x06	; 6
    161a:	83 e5       	ldi	r24, 0x53	; 83
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    1622:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		break;
		
		case QUIET_STOP:
			//Print end character if quiet time is being recorded.
			if(as.get_dep_rec())
    1626:	83 e5       	ldi	r24, 0x53	; 83
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    162e:	88 23       	and	r24, r24
    1630:	e9 f0       	breq	.+58     	; 0x166c <__vector_11+0x62a>
			{
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    1632:	83 e5       	ldi	r24, 0x53	; 83
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	29 f4       	brne	.+10     	; 0x1648 <__vector_11+0x606>
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    163e:	81 e1       	ldi	r24, 0x11	; 17
    1640:	97 e0       	ldi	r25, 0x07	; 7
    1642:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1646:	12 c0       	rjmp	.+36     	; 0x166c <__vector_11+0x62a>
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    1648:	83 e5       	ldi	r24, 0x53	; 83
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1650:	81 11       	cpse	r24, r1
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <__vector_11+0x622>
				{
					tx_u16_to_ascii(END_BLOCK);
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    165c:	8c e2       	ldi	r24, 0x2C	; 44
    165e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1662:	04 c0       	rjmp	.+8      	; 0x166c <__vector_11+0x62a>
				}
				//Print binary data.
				else
					atmega_uart::tx_word(END_BLOCK);
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	9f ef       	ldi	r25, 0xFF	; 255
    1668:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
			
			if(as.get_test_type() == TEST_LIN)		//Start linear sweep.
    166c:	83 e5       	ldi	r24, 0x53	; 83
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    1674:	81 11       	cpse	r24, r1
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <__vector_11+0x644>
				as.set_test_state(RAMP_INIT);
    1678:	67 e0       	ldi	r22, 0x07	; 7
    167a:	83 e5       	ldi	r24, 0x53	; 83
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    1682:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			else if(as.get_test_type() == TEST_DIF)	//Start square wave.
    1686:	83 e5       	ldi	r24, 0x53	; 83
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	39 f4       	brne	.+14     	; 0x16a0 <__vector_11+0x65e>
				as.set_test_state(DIF_INIT);
    1692:	69 e0       	ldi	r22, 0x09	; 9
    1694:	83 e5       	ldi	r24, 0x53	; 83
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    169c:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			else									//Start arbitrary waveform.
				as.set_test_state(ARB_INIT);
    16a0:	6f e0       	ldi	r22, 0x0F	; 15
    16a2:	83 e5       	ldi	r24, 0x53	; 83
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    16aa:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		break;
		
		case RAMP_INIT:					
			//Initialize variables.
			this_cyc = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 93 48 01 	sts	0x0148, r24
			samp_count = 0;	
    16b4:	10 92 4f 01 	sts	0x014F, r1
    16b8:	10 92 50 01 	sts	0x0150, r1
    16bc:	10 92 51 01 	sts	0x0151, r1
    16c0:	10 92 52 01 	sts	0x0152, r1
			ms_counter = 0;
    16c4:	10 92 7f 01 	sts	0x017F, r1
    16c8:	10 92 80 01 	sts	0x0180, r1
    16cc:	10 92 81 01 	sts	0x0181, r1
    16d0:	10 92 82 01 	sts	0x0182, r1
			tot_cyc = as.get_sweep_cycles() * 2;
    16d4:	83 e5       	ldi	r24, 0x53	; 83
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_ZN8as_class16get_sweep_cyclesEv>
    16dc:	88 0f       	add	r24, r24
    16de:	80 93 47 01 	sts	0x0147, r24
			sv = ZERO_VOLT + (1000.0 * (double)as.get_sweep_volt_start() / V_PER_COUNT);
    16e2:	83 e5       	ldi	r24, 0x53	; 83
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN8as_class20get_sweep_volt_startEv>
    16ea:	bc 01       	movw	r22, r24
    16ec:	88 27       	eor	r24, r24
    16ee:	77 fd       	sbrc	r23, 7
    16f0:	80 95       	com	r24
    16f2:	98 2f       	mov	r25, r24
    16f4:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a e7       	ldi	r20, 0x7A	; 122
    16fe:	54 e4       	ldi	r21, 0x44	; 68
    1700:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    1704:	2f e7       	ldi	r18, 0x7F	; 127
    1706:	3a e6       	ldi	r19, 0x6A	; 106
    1708:	49 e4       	ldi	r20, 0x49	; 73
    170a:	54 e4       	ldi	r21, 0x44	; 68
    170c:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 ee       	ldi	r19, 0xE0	; 224
    1714:	4f ef       	ldi	r20, 0xFF	; 255
    1716:	54 e4       	ldi	r21, 0x44	; 68
    1718:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    171c:	60 93 43 01 	sts	0x0143, r22
    1720:	70 93 44 01 	sts	0x0144, r23
    1724:	80 93 45 01 	sts	0x0145, r24
    1728:	90 93 46 01 	sts	0x0146, r25
			ev = ZERO_VOLT + (1000.0 * (double)as.get_sweep_volt_end() / V_PER_COUNT);
    172c:	83 e5       	ldi	r24, 0x53	; 83
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN8as_class18get_sweep_volt_endEv>
    1734:	bc 01       	movw	r22, r24
    1736:	88 27       	eor	r24, r24
    1738:	77 fd       	sbrc	r23, 7
    173a:	80 95       	com	r24
    173c:	98 2f       	mov	r25, r24
    173e:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a e7       	ldi	r20, 0x7A	; 122
    1748:	54 e4       	ldi	r21, 0x44	; 68
    174a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    174e:	2f e7       	ldi	r18, 0x7F	; 127
    1750:	3a e6       	ldi	r19, 0x6A	; 106
    1752:	49 e4       	ldi	r20, 0x49	; 73
    1754:	54 e4       	ldi	r21, 0x44	; 68
    1756:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 ee       	ldi	r19, 0xE0	; 224
    175e:	4f ef       	ldi	r20, 0xFF	; 255
    1760:	54 e4       	ldi	r21, 0x44	; 68
    1762:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    1766:	60 93 3f 01 	sts	0x013F, r22
    176a:	70 93 40 01 	sts	0x0140, r23
    176e:	80 93 41 01 	sts	0x0141, r24
    1772:	90 93 42 01 	sts	0x0142, r25
			as.get_sweep_volt_start() > as.get_sweep_volt_end() ? slope = -1 : slope = 1;
    1776:	83 e5       	ldi	r24, 0x53	; 83
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN8as_class20get_sweep_volt_startEv>
    177e:	ec 01       	movw	r28, r24
    1780:	83 e5       	ldi	r24, 0x53	; 83
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN8as_class18get_sweep_volt_endEv>
    1788:	8c 17       	cp	r24, r28
    178a:	9d 07       	cpc	r25, r29
    178c:	24 f4       	brge	.+8      	; 0x1796 <__vector_11+0x754>
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	80 93 3e 01 	sts	0x013E, r24
    1794:	03 c0       	rjmp	.+6      	; 0x179c <__vector_11+0x75a>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 93 3e 01 	sts	0x013E, r24
			rate = (double)as.get_sweep_rate() * (double)slope / V_PER_COUNT;
    179c:	83 e5       	ldi	r24, 0x53	; 83
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN8as_class14get_sweep_rateEv>
    17a4:	bc 01       	movw	r22, r24
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__floatunsisf>
    17ae:	6b 01       	movw	r12, r22
    17b0:	7c 01       	movw	r14, r24
    17b2:	60 91 3e 01 	lds	r22, 0x013E
    17b6:	77 27       	eor	r23, r23
    17b8:	67 fd       	sbrc	r22, 7
    17ba:	70 95       	com	r23
    17bc:	87 2f       	mov	r24, r23
    17be:	97 2f       	mov	r25, r23
    17c0:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	c7 01       	movw	r24, r14
    17ca:	b6 01       	movw	r22, r12
    17cc:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    17d0:	2f e7       	ldi	r18, 0x7F	; 127
    17d2:	3a e6       	ldi	r19, 0x6A	; 106
    17d4:	49 e4       	ldi	r20, 0x49	; 73
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    17dc:	60 93 3a 01 	sts	0x013A, r22
    17e0:	70 93 3b 01 	sts	0x013B, r23
    17e4:	80 93 3c 01 	sts	0x013C, r24
    17e8:	90 93 3d 01 	sts	0x013D, r25
			this_offset = sv;
    17ec:	80 91 43 01 	lds	r24, 0x0143
    17f0:	90 91 44 01 	lds	r25, 0x0144
    17f4:	a0 91 45 01 	lds	r26, 0x0145
    17f8:	b0 91 46 01 	lds	r27, 0x0146
    17fc:	80 93 36 01 	sts	0x0136, r24
    1800:	90 93 37 01 	sts	0x0137, r25
    1804:	a0 93 38 01 	sts	0x0138, r26
    1808:	b0 93 39 01 	sts	0x0139, r27
			first = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 35 01 	sts	0x0135, r24
			
			i2c_connect_ce();//Always connect counter electrode.
    1812:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
			write_dac((uint16_t)round(this_offset));//Load value into the DAC.
    1816:	60 91 36 01 	lds	r22, 0x0136
    181a:	70 91 37 01 	lds	r23, 0x0137
    181e:	80 91 38 01 	lds	r24, 0x0138
    1822:	90 91 39 01 	lds	r25, 0x0139
    1826:	0e 94 a3 3b 	call	0x7746	; 0x7746 <round>
    182a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__fixunssfsi>
    182e:	cb 01       	movw	r24, r22
    1830:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
			
			//Print initial stream data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    1834:	83 e5       	ldi	r24, 0x53	; 83
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	69 f4       	brne	.+26     	; 0x185a <__vector_11+0x818>
			{
				atmega_uart::tx_byte('s');
    1840:	83 e7       	ldi	r24, 0x73	; 115
    1842:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(this_cyc);
    1846:	80 91 48 01 	lds	r24, 0x0148
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_string_p(PSTR("=["));
    1850:	8e e0       	ldi	r24, 0x0E	; 14
    1852:	97 e0       	ldi	r25, 0x07	; 7
    1854:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1858:	1f c0       	rjmp	.+62     	; 0x1898 <__vector_11+0x856>
			}
			else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    185a:	83 e5       	ldi	r24, 0x53	; 83
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1862:	81 11       	cpse	r24, r1
    1864:	10 c0       	rjmp	.+32     	; 0x1886 <__vector_11+0x844>
			{
				tx_u16_to_ascii(LIN_DATA);
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	92 e8       	ldi	r25, 0x82	; 130
    186a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    186e:	8c e2       	ldi	r24, 0x2C	; 44
    1870:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(this_cyc);
    1874:	80 91 48 01 	lds	r24, 0x0148
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    187e:	8c e2       	ldi	r24, 0x2C	; 44
    1880:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <__vector_11+0x856>
			}
			else//Print binary data.
			{
				atmega_uart::tx_word(LIN_DATA);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	92 e8       	ldi	r25, 0x82	; 130
    188a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(this_cyc);
    188e:	80 91 48 01 	lds	r24, 0x0148
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
			
			as.set_test_state(RAMP);
    1898:	68 e0       	ldi	r22, 0x08	; 8
    189a:	83 e5       	ldi	r24, 0x53	; 83
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		break;
    18a2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		
		case RAMP:
			//Load value into the DAC.
			write_dac((uint16_t)round(this_offset));
    18a6:	60 91 36 01 	lds	r22, 0x0136
    18aa:	70 91 37 01 	lds	r23, 0x0137
    18ae:	80 91 38 01 	lds	r24, 0x0138
    18b2:	90 91 39 01 	lds	r25, 0x0139
    18b6:	0e 94 a3 3b 	call	0x7746	; 0x7746 <round>
    18ba:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__fixunssfsi>
    18be:	cb 01       	movw	r24, r22
    18c0:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
			
			//Calculate current value for the DAC.
			this_offset += rate;
    18c4:	20 91 3a 01 	lds	r18, 0x013A
    18c8:	30 91 3b 01 	lds	r19, 0x013B
    18cc:	40 91 3c 01 	lds	r20, 0x013C
    18d0:	50 91 3d 01 	lds	r21, 0x013D
    18d4:	60 91 36 01 	lds	r22, 0x0136
    18d8:	70 91 37 01 	lds	r23, 0x0137
    18dc:	80 91 38 01 	lds	r24, 0x0138
    18e0:	90 91 39 01 	lds	r25, 0x0139
    18e4:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    18e8:	60 93 36 01 	sts	0x0136, r22
    18ec:	70 93 37 01 	sts	0x0137, r23
    18f0:	80 93 38 01 	sts	0x0138, r24
    18f4:	90 93 39 01 	sts	0x0139, r25
			
			//Skip the zero time sample.
			if(!first)
    18f8:	80 91 35 01 	lds	r24, 0x0135
    18fc:	81 11       	cpse	r24, r1
    18fe:	7e c0       	rjmp	.+252    	; 0x19fc <__vector_11+0x9ba>
			{
				if(as.get_soft_sel())//Use filter.
    1900:	83 e5       	ldi	r24, 0x53	; 83
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8as_class12get_soft_selEv>
    1908:	88 23       	and	r24, r24
    190a:	59 f0       	breq	.+22     	; 0x1922 <__vector_11+0x8e0>
				output = lpf(read_adc(), &as);
    190c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    1910:	63 e5       	ldi	r22, 0x53	; 83
    1912:	71 e0       	ldi	r23, 0x01	; 1
    1914:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <_Z3lpfjP8as_class>
    1918:	90 93 4a 01 	sts	0x014A, r25
    191c:	80 93 49 01 	sts	0x0149, r24
    1920:	06 c0       	rjmp	.+12     	; 0x192e <__vector_11+0x8ec>
				else//Do not use software filter.
				output = read_adc();
    1922:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    1926:	90 93 4a 01 	sts	0x014A, r25
    192a:	80 93 49 01 	sts	0x0149, r24
			
				//Check if time to transmit another sample.
				if(!(ms_counter % as.get_adc_rate()))
    192e:	c0 90 7f 01 	lds	r12, 0x017F
    1932:	d0 90 80 01 	lds	r13, 0x0180
    1936:	e0 90 81 01 	lds	r14, 0x0181
    193a:	f0 90 82 01 	lds	r15, 0x0182
    193e:	83 e5       	ldi	r24, 0x53	; 83
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	0e 94 08 1a 	call	0x3410	; 0x3410 <_ZN8as_class12get_adc_rateEv>
    1946:	9c 01       	movw	r18, r24
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	c7 01       	movw	r24, r14
    194e:	b6 01       	movw	r22, r12
    1950:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    1954:	67 2b       	or	r22, r23
    1956:	68 2b       	or	r22, r24
    1958:	69 2b       	or	r22, r25
    195a:	09 f0       	breq	.+2      	; 0x195e <__vector_11+0x91c>
    195c:	4f c0       	rjmp	.+158    	; 0x19fc <__vector_11+0x9ba>
				{
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    195e:	83 e5       	ldi	r24, 0x53	; 83
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	99 f5       	brne	.+102    	; 0x19d0 <__vector_11+0x98e>
					{
						tx_u16_to_ascii(output);
    196a:	80 91 49 01 	lds	r24, 0x0149
    196e:	90 91 4a 01 	lds	r25, 0x014A
    1972:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    1976:	8c e2       	ldi	r24, 0x2C	; 44
    1978:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					
						//Indicate a new sample has been sent.
						samp_count++;
    197c:	80 91 4f 01 	lds	r24, 0x014F
    1980:	90 91 50 01 	lds	r25, 0x0150
    1984:	a0 91 51 01 	lds	r26, 0x0151
    1988:	b0 91 52 01 	lds	r27, 0x0152
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	6f 5f       	subi	r22, 0xFF	; 255
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	8f 4f       	sbci	r24, 0xFF	; 255
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	60 93 4f 01 	sts	0x014F, r22
    199c:	70 93 50 01 	sts	0x0150, r23
    19a0:	80 93 51 01 	sts	0x0151, r24
    19a4:	90 93 52 01 	sts	0x0152, r25
					
						//Start newline if 10 or more samples on this line.
						if(samp_count && !(samp_count % 10))
    19a8:	61 15       	cp	r22, r1
    19aa:	71 05       	cpc	r23, r1
    19ac:	81 05       	cpc	r24, r1
    19ae:	91 05       	cpc	r25, r1
    19b0:	29 f1       	breq	.+74     	; 0x19fc <__vector_11+0x9ba>
    19b2:	2a e0       	ldi	r18, 0x0A	; 10
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    19be:	67 2b       	or	r22, r23
    19c0:	68 2b       	or	r22, r24
    19c2:	69 2b       	or	r22, r25
    19c4:	d9 f4       	brne	.+54     	; 0x19fc <__vector_11+0x9ba>
							atmega_uart::tx_string_p(PSTR("...\r"));
    19c6:	89 e0       	ldi	r24, 0x09	; 9
    19c8:	97 e0       	ldi	r25, 0x07	; 7
    19ca:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    19ce:	16 c0       	rjmp	.+44     	; 0x19fc <__vector_11+0x9ba>
					}
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    19d0:	83 e5       	ldi	r24, 0x53	; 83
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    19d8:	81 11       	cpse	r24, r1
    19da:	0a c0       	rjmp	.+20     	; 0x19f0 <__vector_11+0x9ae>
					{
						tx_u16_to_ascii(output);
    19dc:	80 91 49 01 	lds	r24, 0x0149
    19e0:	90 91 4a 01 	lds	r25, 0x014A
    19e4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    19e8:	8c e2       	ldi	r24, 0x2C	; 44
    19ea:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    19ee:	06 c0       	rjmp	.+12     	; 0x19fc <__vector_11+0x9ba>
					}
					//Print binary data.
					else
						atmega_uart::tx_word(output);
    19f0:	80 91 49 01 	lds	r24, 0x0149
    19f4:	90 91 4a 01 	lds	r25, 0x014A
    19f8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				}
			}
			
			ms_counter++;//Always increment counter.
    19fc:	80 91 7f 01 	lds	r24, 0x017F
    1a00:	90 91 80 01 	lds	r25, 0x0180
    1a04:	a0 91 81 01 	lds	r26, 0x0181
    1a08:	b0 91 82 01 	lds	r27, 0x0182
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	b1 1d       	adc	r27, r1
    1a12:	80 93 7f 01 	sts	0x017F, r24
    1a16:	90 93 80 01 	sts	0x0180, r25
    1a1a:	a0 93 81 01 	sts	0x0181, r26
    1a1e:	b0 93 82 01 	sts	0x0182, r27
			
			first = 0;//Indicate zero time has ended.
    1a22:	10 92 35 01 	sts	0x0135, r1
			
			//Continue ramping.
			if(((slope > 0) && (this_offset <= ev)) || ((slope < 0) && (this_offset >= ev)))
    1a26:	c0 91 3e 01 	lds	r28, 0x013E
    1a2a:	1c 16       	cp	r1, r28
    1a2c:	b4 f4       	brge	.+44     	; 0x1a5a <__vector_11+0xa18>
    1a2e:	20 91 3f 01 	lds	r18, 0x013F
    1a32:	30 91 40 01 	lds	r19, 0x0140
    1a36:	40 91 41 01 	lds	r20, 0x0141
    1a3a:	50 91 42 01 	lds	r21, 0x0142
    1a3e:	60 91 36 01 	lds	r22, 0x0136
    1a42:	70 91 37 01 	lds	r23, 0x0137
    1a46:	80 91 38 01 	lds	r24, 0x0138
    1a4a:	90 91 39 01 	lds	r25, 0x0139
    1a4e:	0e 94 ed 39 	call	0x73da	; 0x73da <__cmpsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	14 f0       	brlt	.+4      	; 0x1a5a <__vector_11+0xa18>
    1a56:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
    1a5a:	cc 23       	and	r28, r28
    1a5c:	b4 f4       	brge	.+44     	; 0x1a8a <__vector_11+0xa48>
    1a5e:	20 91 3f 01 	lds	r18, 0x013F
    1a62:	30 91 40 01 	lds	r19, 0x0140
    1a66:	40 91 41 01 	lds	r20, 0x0141
    1a6a:	50 91 42 01 	lds	r21, 0x0142
    1a6e:	60 91 36 01 	lds	r22, 0x0136
    1a72:	70 91 37 01 	lds	r23, 0x0137
    1a76:	80 91 38 01 	lds	r24, 0x0138
    1a7a:	90 91 39 01 	lds	r25, 0x0139
    1a7e:	0e 94 3c 3b 	call	0x7678	; 0x7678 <__gesf2>
    1a82:	88 23       	and	r24, r24
    1a84:	14 f0       	brlt	.+4      	; 0x1a8a <__vector_11+0xa48>
    1a86:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				break;
			
			//Done ramping.
			if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    1a8a:	83 e5       	ldi	r24, 0x53	; 83
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <__vector_11+0xa5e>
			atmega_uart::tx_string_p(PSTR("];\r\r"));
    1a96:	84 e0       	ldi	r24, 0x04	; 4
    1a98:	97 e0       	ldi	r25, 0x07	; 7
    1a9a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1a9e:	12 c0       	rjmp	.+36     	; 0x1ac4 <__vector_11+0xa82>
			else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    1aa0:	83 e5       	ldi	r24, 0x53	; 83
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	08 c0       	rjmp	.+16     	; 0x1abc <__vector_11+0xa7a>
			{
				tx_u16_to_ascii(END_BLOCK);
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	9f ef       	ldi	r25, 0xFF	; 255
    1ab0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1ab4:	8c e2       	ldi	r24, 0x2C	; 44
    1ab6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <__vector_11+0xa82>
			}
			else//Print binary data.
				atmega_uart::tx_word(END_BLOCK);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	9f ef       	ldi	r25, 0xFF	; 255
    1ac0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
		
			samp_count = 0;	//Reset Sample counter.
    1ac4:	10 92 4f 01 	sts	0x014F, r1
    1ac8:	10 92 50 01 	sts	0x0150, r1
    1acc:	10 92 51 01 	sts	0x0151, r1
    1ad0:	10 92 52 01 	sts	0x0152, r1
			this_cyc++;		//Next cycle.
    1ad4:	80 91 48 01 	lds	r24, 0x0148
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	80 93 48 01 	sts	0x0148, r24
			
			//If cyclic, do second half.
			if(as.get_sweep_cyclic() && (this_cyc <= tot_cyc))
    1ade:	83 e5       	ldi	r24, 0x53	; 83
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN8as_class16get_sweep_cyclicEv>
    1ae6:	88 23       	and	r24, r24
    1ae8:	11 f4       	brne	.+4      	; 0x1aee <__vector_11+0xaac>
    1aea:	0c 94 06 19 	jmp	0x320c	; 0x320c <__vector_11+0x21ca>
    1aee:	90 91 48 01 	lds	r25, 0x0148
    1af2:	80 91 47 01 	lds	r24, 0x0147
    1af6:	89 17       	cp	r24, r25
    1af8:	10 f0       	brcs	.+4      	; 0x1afe <__vector_11+0xabc>
    1afa:	0c 94 15 19 	jmp	0x322a	; 0x322a <__vector_11+0x21e8>
    1afe:	0c 94 06 19 	jmp	0x320c	; 0x320c <__vector_11+0x21ca>
				this_offset = sv + rate;
				
				//Print initial stream data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
				{
					atmega_uart::tx_byte('s');
    1b02:	83 e7       	ldi	r24, 0x73	; 115
    1b04:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(this_cyc);
    1b08:	80 91 48 01 	lds	r24, 0x0148
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=["));
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	97 e0       	ldi	r25, 0x07	; 7
    1b16:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1b1a:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				}
				else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    1b1e:	83 e5       	ldi	r24, 0x53	; 83
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1b26:	81 11       	cpse	r24, r1
    1b28:	11 c0       	rjmp	.+34     	; 0x1b4c <__vector_11+0xb0a>
				{
					tx_u16_to_ascii(LIN_DATA);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	92 e8       	ldi	r25, 0x82	; 130
    1b2e:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    1b32:	8c e2       	ldi	r24, 0x2C	; 44
    1b34:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(this_cyc);
    1b38:	80 91 48 01 	lds	r24, 0x0148
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    1b42:	8c e2       	ldi	r24, 0x2C	; 44
    1b44:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1b48:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				}
				else//Print binary data.
				{
					atmega_uart::tx_word(LIN_DATA);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	92 e8       	ldi	r25, 0x82	; 130
    1b50:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
					atmega_uart::tx_word(this_cyc);
    1b54:	80 91 48 01 	lds	r24, 0x0148
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
    1b5e:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				i2c_disconnect_ce();	//Disconnect counter electrode.
				write_dac(ZERO_VOLT);	//Zero out voltage and return to idle.
				
				//Determine how many cycles need to be graphed.
				if(as.get_sweep_cyclic())
					graph_cycles = tot_cyc;
    1b62:	80 91 47 01 	lds	r24, 0x0147
    1b66:	80 93 30 01 	sts	0x0130, r24
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <__vector_11+0xb30>
				else
					graph_cycles = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	80 93 30 01 	sts	0x0130, r24
				
				as.set_test_state(FOOTER);//Done.
    1b72:	62 e1       	ldi	r22, 0x12	; 18
    1b74:	83 e5       	ldi	r24, 0x53	; 83
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    1b7c:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}	
		break;
		
		case DIF_INIT:
			//Initialize variables.
			this_cyc = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 48 01 	sts	0x0148, r24
			
			//Get starting voltage and ending voltage.
			sv = as.get_dif_volt_start();
    1b86:	83 e5       	ldi	r24, 0x53	; 83
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    1b8e:	bc 01       	movw	r22, r24
    1b90:	88 27       	eor	r24, r24
    1b92:	77 fd       	sbrc	r23, 7
    1b94:	80 95       	com	r24
    1b96:	98 2f       	mov	r25, r24
    1b98:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    1b9c:	60 93 43 01 	sts	0x0143, r22
    1ba0:	70 93 44 01 	sts	0x0144, r23
    1ba4:	80 93 45 01 	sts	0x0145, r24
    1ba8:	90 93 46 01 	sts	0x0146, r25
			ev = as.get_dif_volt_end();
    1bac:	83 e5       	ldi	r24, 0x53	; 83
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	88 27       	eor	r24, r24
    1bb8:	77 fd       	sbrc	r23, 7
    1bba:	80 95       	com	r24
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    1bc2:	6b 01       	movw	r12, r22
    1bc4:	7c 01       	movw	r14, r24
    1bc6:	60 93 3f 01 	sts	0x013F, r22
    1bca:	70 93 40 01 	sts	0x0140, r23
    1bce:	80 93 41 01 	sts	0x0141, r24
    1bd2:	90 93 42 01 	sts	0x0142, r25
			
			//Initialize current voltage.
			this_voltage = sv;
    1bd6:	80 90 43 01 	lds	r8, 0x0143
    1bda:	90 90 44 01 	lds	r9, 0x0144
    1bde:	a0 90 45 01 	lds	r10, 0x0145
    1be2:	b0 90 46 01 	lds	r11, 0x0146
    1be6:	c5 01       	movw	r24, r10
    1be8:	b4 01       	movw	r22, r8
    1bea:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <__fixsfsi>
    1bee:	70 93 2f 01 	sts	0x012F, r23
    1bf2:	60 93 2e 01 	sts	0x012E, r22
			
			//Determine if positive or negative slope.
			sv > ev ? slope = -1 : slope = 1;
    1bf6:	a5 01       	movw	r20, r10
    1bf8:	94 01       	movw	r18, r8
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	b6 01       	movw	r22, r12
    1bfe:	0e 94 ed 39 	call	0x73da	; 0x73da <__cmpsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	24 f4       	brge	.+8      	; 0x1c0e <__vector_11+0xbcc>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	80 93 3e 01 	sts	0x013E, r24
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <__vector_11+0xbd2>
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	80 93 3e 01 	sts	0x013E, r24
			
			as.set_test_state(DIF_PRE_INIT);	
    1c14:	6a e0       	ldi	r22, 0x0A	; 10
    1c16:	83 e5       	ldi	r24, 0x53	; 83
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		break;
    1c1e:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		
		case DIF_PRE_INIT:			
			//Write DAC value.
			write_dac((uint16_t)(round(ZERO_VOLT + (1000.0 * ((double)this_voltage) / V_PER_COUNT))));
    1c22:	60 91 2e 01 	lds	r22, 0x012E
    1c26:	70 91 2f 01 	lds	r23, 0x012F
    1c2a:	88 27       	eor	r24, r24
    1c2c:	77 fd       	sbrc	r23, 7
    1c2e:	80 95       	com	r24
    1c30:	98 2f       	mov	r25, r24
    1c32:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a e7       	ldi	r20, 0x7A	; 122
    1c3c:	54 e4       	ldi	r21, 0x44	; 68
    1c3e:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    1c42:	2f e7       	ldi	r18, 0x7F	; 127
    1c44:	3a e6       	ldi	r19, 0x6A	; 106
    1c46:	49 e4       	ldi	r20, 0x49	; 73
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 ee       	ldi	r19, 0xE0	; 224
    1c52:	4f ef       	ldi	r20, 0xFF	; 255
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    1c5a:	0e 94 a3 3b 	call	0x7746	; 0x7746 <round>
    1c5e:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__fixunssfsi>
    1c62:	cb 01       	movw	r24, r22
    1c64:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
			
			samp_count = 0;//Reset sample counter.
    1c68:	10 92 4f 01 	sts	0x014F, r1
    1c6c:	10 92 50 01 	sts	0x0150, r1
    1c70:	10 92 51 01 	sts	0x0151, r1
    1c74:	10 92 52 01 	sts	0x0152, r1
			ms_counter = 0;//Reset timer variable.
    1c78:	10 92 7f 01 	sts	0x017F, r1
    1c7c:	10 92 80 01 	sts	0x0180, r1
    1c80:	10 92 81 01 	sts	0x0181, r1
    1c84:	10 92 82 01 	sts	0x0182, r1
			
			//Print initial stream data.
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    1c88:	83 e5       	ldi	r24, 0x53	; 83
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	71 f4       	brne	.+28     	; 0x1cb0 <__vector_11+0xc6e>
			{
				atmega_uart::tx_string_p(PSTR("pr"));
    1c94:	8e ef       	ldi	r24, 0xFE	; 254
    1c96:	96 e0       	ldi	r25, 0x06	; 6
    1c98:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				tx_u16_to_ascii(this_cyc);
    1c9c:	80 91 48 01 	lds	r24, 0x0148
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_string_p(PSTR("=["));
    1ca6:	8b ef       	ldi	r24, 0xFB	; 251
    1ca8:	96 e0       	ldi	r25, 0x06	; 6
    1caa:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1cae:	1f c0       	rjmp	.+62     	; 0x1cee <__vector_11+0xcac>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    1cb0:	83 e5       	ldi	r24, 0x53	; 83
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1cb8:	81 11       	cpse	r24, r1
    1cba:	10 c0       	rjmp	.+32     	; 0x1cdc <__vector_11+0xc9a>
			{
				tx_u16_to_ascii(DIF_PRE_DATA);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	94 e8       	ldi	r25, 0x84	; 132
    1cc0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1cc4:	8c e2       	ldi	r24, 0x2C	; 44
    1cc6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(this_cyc);
    1cca:	80 91 48 01 	lds	r24, 0x0148
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1cd4:	8c e2       	ldi	r24, 0x2C	; 44
    1cd6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1cda:	09 c0       	rjmp	.+18     	; 0x1cee <__vector_11+0xcac>
			}
			//Print binary data.
			else
			{
				atmega_uart::tx_word(DIF_PRE_DATA);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	94 e8       	ldi	r25, 0x84	; 132
    1ce0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(this_cyc);
    1ce4:	80 91 48 01 	lds	r24, 0x0148
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
		
			as.set_test_state(DIF_PREPULSE);
    1cee:	6b e0       	ldi	r22, 0x0B	; 11
    1cf0:	83 e5       	ldi	r24, 0x53	; 83
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
			//Fall through to start pre-pulse.
		
		case DIF_PREPULSE:
			//Get value from ADC.
			output = read_adc();
    1cf8:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    1cfc:	90 93 4a 01 	sts	0x014A, r25
    1d00:	80 93 49 01 	sts	0x0149, r24
			
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    1d04:	83 e5       	ldi	r24, 0x53	; 83
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	99 f5       	brne	.+102    	; 0x1d76 <__vector_11+0xd34>
			{
				tx_u16_to_ascii(output);
    1d10:	80 91 49 01 	lds	r24, 0x0149
    1d14:	90 91 4a 01 	lds	r25, 0x014A
    1d18:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1d1c:	8c e2       	ldi	r24, 0x2C	; 44
    1d1e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				
				//Indicate a new sample has been sent.
				samp_count++;
    1d22:	80 91 4f 01 	lds	r24, 0x014F
    1d26:	90 91 50 01 	lds	r25, 0x0150
    1d2a:	a0 91 51 01 	lds	r26, 0x0151
    1d2e:	b0 91 52 01 	lds	r27, 0x0152
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	6f 5f       	subi	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	60 93 4f 01 	sts	0x014F, r22
    1d42:	70 93 50 01 	sts	0x0150, r23
    1d46:	80 93 51 01 	sts	0x0151, r24
    1d4a:	90 93 52 01 	sts	0x0152, r25
				
				//Start newline if 10 or more samples on this line.
				if(samp_count && !(samp_count % 10))
    1d4e:	61 15       	cp	r22, r1
    1d50:	71 05       	cpc	r23, r1
    1d52:	81 05       	cpc	r24, r1
    1d54:	91 05       	cpc	r25, r1
    1d56:	29 f1       	breq	.+74     	; 0x1da2 <__vector_11+0xd60>
    1d58:	2a e0       	ldi	r18, 0x0A	; 10
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    1d64:	67 2b       	or	r22, r23
    1d66:	68 2b       	or	r22, r24
    1d68:	69 2b       	or	r22, r25
    1d6a:	d9 f4       	brne	.+54     	; 0x1da2 <__vector_11+0xd60>
				atmega_uart::tx_string_p(PSTR("...\r"));
    1d6c:	86 ef       	ldi	r24, 0xF6	; 246
    1d6e:	96 e0       	ldi	r25, 0x06	; 6
    1d70:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1d74:	16 c0       	rjmp	.+44     	; 0x1da2 <__vector_11+0xd60>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    1d76:	83 e5       	ldi	r24, 0x53	; 83
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1d7e:	81 11       	cpse	r24, r1
    1d80:	0a c0       	rjmp	.+20     	; 0x1d96 <__vector_11+0xd54>
			{
				tx_u16_to_ascii(output);
    1d82:	80 91 49 01 	lds	r24, 0x0149
    1d86:	90 91 4a 01 	lds	r25, 0x014A
    1d8a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1d8e:	8c e2       	ldi	r24, 0x2C	; 44
    1d90:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <__vector_11+0xd60>
			}
			//Print binary data.
			else
				atmega_uart::tx_word(output);
    1d96:	80 91 49 01 	lds	r24, 0x0149
    1d9a:	90 91 4a 01 	lds	r25, 0x014A
    1d9e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			
			//Check if time to end pre-pulse.
			if(ms_counter >= as.get_dif_time_pre() - 1)
    1da2:	83 e5       	ldi	r24, 0x53	; 83
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN8as_class16get_dif_time_preEv>
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	a0 e0       	ldi	r26, 0x00	; 0
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	40 91 7f 01 	lds	r20, 0x017F
    1db4:	50 91 80 01 	lds	r21, 0x0180
    1db8:	60 91 81 01 	lds	r22, 0x0181
    1dbc:	70 91 82 01 	lds	r23, 0x0182
    1dc0:	48 17       	cp	r20, r24
    1dc2:	59 07       	cpc	r21, r25
    1dc4:	6a 07       	cpc	r22, r26
    1dc6:	7b 07       	cpc	r23, r27
    1dc8:	10 f1       	brcs	.+68     	; 0x1e0e <__vector_11+0xdcc>
			{
				as.set_test_state(DIF_PULSE_INIT);
    1dca:	6c e0       	ldi	r22, 0x0C	; 12
    1dcc:	83 e5       	ldi	r24, 0x53	; 83
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
				
				//Finish array.
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    1dd4:	83 e5       	ldi	r24, 0x53	; 83
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	29 f4       	brne	.+10     	; 0x1dea <__vector_11+0xda8>
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    1de0:	81 ef       	ldi	r24, 0xF1	; 241
    1de2:	96 e0       	ldi	r25, 0x06	; 6
    1de4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1de8:	12 c0       	rjmp	.+36     	; 0x1e0e <__vector_11+0xdcc>
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    1dea:	83 e5       	ldi	r24, 0x53	; 83
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1df2:	81 11       	cpse	r24, r1
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <__vector_11+0xdc4>
				{
					tx_u16_to_ascii(END_BLOCK);
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	9f ef       	ldi	r25, 0xFF	; 255
    1dfa:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    1dfe:	8c e2       	ldi	r24, 0x2C	; 44
    1e00:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <__vector_11+0xdcc>
				}
				//Print binary data.
				else
					atmega_uart::tx_word(END_BLOCK);
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	9f ef       	ldi	r25, 0xFF	; 255
    1e0a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
			
			ms_counter++;
    1e0e:	80 91 7f 01 	lds	r24, 0x017F
    1e12:	90 91 80 01 	lds	r25, 0x0180
    1e16:	a0 91 81 01 	lds	r26, 0x0181
    1e1a:	b0 91 82 01 	lds	r27, 0x0182
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	a1 1d       	adc	r26, r1
    1e22:	b1 1d       	adc	r27, r1
    1e24:	80 93 7f 01 	sts	0x017F, r24
    1e28:	90 93 80 01 	sts	0x0180, r25
    1e2c:	a0 93 81 01 	sts	0x0181, r26
    1e30:	b0 93 82 01 	sts	0x0182, r27
		break;
    1e34:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		
		case DIF_PULSE_INIT:
			//Write DAC value.
			write_dac((uint16_t)(round(ZERO_VOLT + (1000.0 * ((double)(this_voltage + (int16_t)as.get_dif_volt_pls())) / V_PER_COUNT))));
    1e38:	83 e5       	ldi	r24, 0x53	; 83
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    1e40:	60 91 2e 01 	lds	r22, 0x012E
    1e44:	70 91 2f 01 	lds	r23, 0x012F
    1e48:	86 0f       	add	r24, r22
    1e4a:	97 1f       	adc	r25, r23
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	88 27       	eor	r24, r24
    1e50:	77 fd       	sbrc	r23, 7
    1e52:	80 95       	com	r24
    1e54:	98 2f       	mov	r25, r24
    1e56:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	54 e4       	ldi	r21, 0x44	; 68
    1e62:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    1e66:	2f e7       	ldi	r18, 0x7F	; 127
    1e68:	3a e6       	ldi	r19, 0x6A	; 106
    1e6a:	49 e4       	ldi	r20, 0x49	; 73
    1e6c:	54 e4       	ldi	r21, 0x44	; 68
    1e6e:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 ee       	ldi	r19, 0xE0	; 224
    1e76:	4f ef       	ldi	r20, 0xFF	; 255
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    1e7e:	0e 94 a3 3b 	call	0x7746	; 0x7746 <round>
    1e82:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__fixunssfsi>
    1e86:	cb 01       	movw	r24, r22
    1e88:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
		
			samp_count = 0;//Reset sample counter.
    1e8c:	10 92 4f 01 	sts	0x014F, r1
    1e90:	10 92 50 01 	sts	0x0150, r1
    1e94:	10 92 51 01 	sts	0x0151, r1
    1e98:	10 92 52 01 	sts	0x0152, r1
			ms_counter = 0;//Reset timer variable.
    1e9c:	10 92 7f 01 	sts	0x017F, r1
    1ea0:	10 92 80 01 	sts	0x0180, r1
    1ea4:	10 92 81 01 	sts	0x0181, r1
    1ea8:	10 92 82 01 	sts	0x0182, r1
			
			//Print initial stream data.
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    1eac:	83 e5       	ldi	r24, 0x53	; 83
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	71 f4       	brne	.+28     	; 0x1ed4 <__vector_11+0xe92>
			{
				atmega_uart::tx_string_p(PSTR("pl"));
    1eb8:	8e ee       	ldi	r24, 0xEE	; 238
    1eba:	96 e0       	ldi	r25, 0x06	; 6
    1ebc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				tx_u16_to_ascii(this_cyc);
    1ec0:	80 91 48 01 	lds	r24, 0x0148
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_string_p(PSTR("=["));
    1eca:	8b ee       	ldi	r24, 0xEB	; 235
    1ecc:	96 e0       	ldi	r25, 0x06	; 6
    1ece:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1ed2:	1f c0       	rjmp	.+62     	; 0x1f12 <__vector_11+0xed0>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    1ed4:	83 e5       	ldi	r24, 0x53	; 83
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1edc:	81 11       	cpse	r24, r1
    1ede:	10 c0       	rjmp	.+32     	; 0x1f00 <__vector_11+0xebe>
			{
				tx_u16_to_ascii(DIF_PLS_DATA);
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	95 e8       	ldi	r25, 0x85	; 133
    1ee4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1ee8:	8c e2       	ldi	r24, 0x2C	; 44
    1eea:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				tx_u16_to_ascii(this_cyc);
    1eee:	80 91 48 01 	lds	r24, 0x0148
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1ef8:	8c e2       	ldi	r24, 0x2C	; 44
    1efa:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <__vector_11+0xed0>
			}
			//Print binary data.
			else
			{
				atmega_uart::tx_word(DIF_PLS_DATA);
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	95 e8       	ldi	r25, 0x85	; 133
    1f04:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(this_cyc);
    1f08:	80 91 48 01 	lds	r24, 0x0148
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
		
			as.set_test_state(DIF_PULSE);
    1f12:	6d e0       	ldi	r22, 0x0D	; 13
    1f14:	83 e5       	ldi	r24, 0x53	; 83
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
			//Fall through to start pulse.
		
		case DIF_PULSE:
			output = read_adc();//Get value from ADC.
    1f1c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    1f20:	90 93 4a 01 	sts	0x014A, r25
    1f24:	80 93 49 01 	sts	0x0149, r24
			
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    1f28:	83 e5       	ldi	r24, 0x53	; 83
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	99 f5       	brne	.+102    	; 0x1f9a <__vector_11+0xf58>
			{
				tx_u16_to_ascii(output);
    1f34:	80 91 49 01 	lds	r24, 0x0149
    1f38:	90 91 4a 01 	lds	r25, 0x014A
    1f3c:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1f40:	8c e2       	ldi	r24, 0x2C	; 44
    1f42:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				
				//Indicate a new sample has been sent.
				samp_count++;
    1f46:	80 91 4f 01 	lds	r24, 0x014F
    1f4a:	90 91 50 01 	lds	r25, 0x0150
    1f4e:	a0 91 51 01 	lds	r26, 0x0151
    1f52:	b0 91 52 01 	lds	r27, 0x0152
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	6f 5f       	subi	r22, 0xFF	; 255
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	60 93 4f 01 	sts	0x014F, r22
    1f66:	70 93 50 01 	sts	0x0150, r23
    1f6a:	80 93 51 01 	sts	0x0151, r24
    1f6e:	90 93 52 01 	sts	0x0152, r25
				
				//Start newline if 10 or more samples on this line.
				if(samp_count && !(samp_count % 10))
    1f72:	61 15       	cp	r22, r1
    1f74:	71 05       	cpc	r23, r1
    1f76:	81 05       	cpc	r24, r1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	29 f1       	breq	.+74     	; 0x1fc6 <__vector_11+0xf84>
    1f7c:	2a e0       	ldi	r18, 0x0A	; 10
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    1f88:	67 2b       	or	r22, r23
    1f8a:	68 2b       	or	r22, r24
    1f8c:	69 2b       	or	r22, r25
    1f8e:	d9 f4       	brne	.+54     	; 0x1fc6 <__vector_11+0xf84>
				atmega_uart::tx_string_p(PSTR("...\r"));
    1f90:	86 ee       	ldi	r24, 0xE6	; 230
    1f92:	96 e0       	ldi	r25, 0x06	; 6
    1f94:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    1f98:	16 c0       	rjmp	.+44     	; 0x1fc6 <__vector_11+0xf84>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    1f9a:	83 e5       	ldi	r24, 0x53	; 83
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1fa2:	81 11       	cpse	r24, r1
    1fa4:	0a c0       	rjmp	.+20     	; 0x1fba <__vector_11+0xf78>
			{
				tx_u16_to_ascii(output);
    1fa6:	80 91 49 01 	lds	r24, 0x0149
    1faa:	90 91 4a 01 	lds	r25, 0x014A
    1fae:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    1fb2:	8c e2       	ldi	r24, 0x2C	; 44
    1fb4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <__vector_11+0xf84>
			}
			else//Print binary data.
				atmega_uart::tx_word(output);
    1fba:	80 91 49 01 	lds	r24, 0x0149
    1fbe:	90 91 4a 01 	lds	r25, 0x014A
    1fc2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
		
			//Check if time to end pulse.
			if(ms_counter >= as.get_dif_time_pls() - 1)
    1fc6:	83 e5       	ldi	r24, 0x53	; 83
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN8as_class16get_dif_time_plsEv>
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	40 91 7f 01 	lds	r20, 0x017F
    1fd8:	50 91 80 01 	lds	r21, 0x0180
    1fdc:	60 91 81 01 	lds	r22, 0x0181
    1fe0:	70 91 82 01 	lds	r23, 0x0182
    1fe4:	48 17       	cp	r20, r24
    1fe6:	59 07       	cpc	r21, r25
    1fe8:	6a 07       	cpc	r22, r26
    1fea:	7b 07       	cpc	r23, r27
    1fec:	08 f4       	brcc	.+2      	; 0x1ff0 <__vector_11+0xfae>
    1fee:	6e c0       	rjmp	.+220    	; 0x20cc <__vector_11+0x108a>
			{
				//Finish array.
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    1ff0:	83 e5       	ldi	r24, 0x53	; 83
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	29 f4       	brne	.+10     	; 0x2006 <__vector_11+0xfc4>
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    1ffc:	81 ee       	ldi	r24, 0xE1	; 225
    1ffe:	96 e0       	ldi	r25, 0x06	; 6
    2000:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    2004:	12 c0       	rjmp	.+36     	; 0x202a <__vector_11+0xfe8>
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    2006:	83 e5       	ldi	r24, 0x53	; 83
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    200e:	81 11       	cpse	r24, r1
    2010:	08 c0       	rjmp	.+16     	; 0x2022 <__vector_11+0xfe0>
				{
					tx_u16_to_ascii(END_BLOCK);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	9f ef       	ldi	r25, 0xFF	; 255
    2016:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    201a:	8c e2       	ldi	r24, 0x2C	; 44
    201c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2020:	04 c0       	rjmp	.+8      	; 0x202a <__vector_11+0xfe8>
				}
				else//Print binary data.
					atmega_uart::tx_word(END_BLOCK);
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	9f ef       	ldi	r25, 0xFF	; 255
    2026:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				
				//Move to next increment.
				this_voltage += slope * as.get_dif_volt_inc();
    202a:	c0 91 3e 01 	lds	r28, 0x013E
    202e:	dd 27       	eor	r29, r29
    2030:	c7 fd       	sbrc	r28, 7
    2032:	d0 95       	com	r29
    2034:	83 e5       	ldi	r24, 0x53	; 83
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN8as_class16get_dif_volt_incEv>
    203c:	9c 01       	movw	r18, r24
    203e:	2c 9f       	mul	r18, r28
    2040:	c0 01       	movw	r24, r0
    2042:	2d 9f       	mul	r18, r29
    2044:	90 0d       	add	r25, r0
    2046:	3c 9f       	mul	r19, r28
    2048:	90 0d       	add	r25, r0
    204a:	11 24       	eor	r1, r1
    204c:	20 91 2e 01 	lds	r18, 0x012E
    2050:	30 91 2f 01 	lds	r19, 0x012F
    2054:	82 0f       	add	r24, r18
    2056:	93 1f       	adc	r25, r19
    2058:	90 93 2f 01 	sts	0x012F, r25
    205c:	80 93 2e 01 	sts	0x012E, r24
				
				if((slope > 0) && (this_voltage > as.get_dif_volt_end()))
    2060:	80 91 3e 01 	lds	r24, 0x013E
    2064:	18 16       	cp	r1, r24
    2066:	94 f4       	brge	.+36     	; 0x208c <__vector_11+0x104a>
    2068:	83 e5       	ldi	r24, 0x53	; 83
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    2070:	20 91 2e 01 	lds	r18, 0x012E
    2074:	30 91 2f 01 	lds	r19, 0x012F
    2078:	82 17       	cp	r24, r18
    207a:	93 07       	cpc	r25, r19
    207c:	3c f4       	brge	.+14     	; 0x208c <__vector_11+0x104a>
				{
					as.set_test_state(DIF_STOP);
    207e:	6e e0       	ldi	r22, 0x0E	; 14
    2080:	83 e5       	ldi	r24, 0x53	; 83
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
					break;
    2088:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				}
				else if((slope < 0) && (this_voltage < as.get_dif_volt_end()))
    208c:	80 91 3e 01 	lds	r24, 0x013E
    2090:	88 23       	and	r24, r24
    2092:	94 f4       	brge	.+36     	; 0x20b8 <__vector_11+0x1076>
    2094:	83 e5       	ldi	r24, 0x53	; 83
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    209c:	20 91 2e 01 	lds	r18, 0x012E
    20a0:	30 91 2f 01 	lds	r19, 0x012F
    20a4:	28 17       	cp	r18, r24
    20a6:	39 07       	cpc	r19, r25
    20a8:	3c f4       	brge	.+14     	; 0x20b8 <__vector_11+0x1076>
				{
					as.set_test_state(DIF_STOP);
    20aa:	6e e0       	ldi	r22, 0x0E	; 14
    20ac:	83 e5       	ldi	r24, 0x53	; 83
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
					break;
    20b4:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
				}
				
				this_cyc++;
    20b8:	80 91 48 01 	lds	r24, 0x0148
    20bc:	8f 5f       	subi	r24, 0xFF	; 255
    20be:	80 93 48 01 	sts	0x0148, r24
				as.set_test_state(DIF_PRE_INIT);
    20c2:	6a e0       	ldi	r22, 0x0A	; 10
    20c4:	83 e5       	ldi	r24, 0x53	; 83
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
			}
			
			ms_counter++;
    20cc:	80 91 7f 01 	lds	r24, 0x017F
    20d0:	90 91 80 01 	lds	r25, 0x0180
    20d4:	a0 91 81 01 	lds	r26, 0x0181
    20d8:	b0 91 82 01 	lds	r27, 0x0182
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	a1 1d       	adc	r26, r1
    20e0:	b1 1d       	adc	r27, r1
    20e2:	80 93 7f 01 	sts	0x017F, r24
    20e6:	90 93 80 01 	sts	0x0180, r25
    20ea:	a0 93 81 01 	sts	0x0181, r26
    20ee:	b0 93 82 01 	sts	0x0182, r27
		break;
    20f2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		
		case DIF_STOP:
			//Disconnect counter electrode.
			i2c_disconnect_ce();
    20f6:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z17i2c_disconnect_cev>
			//Zero out voltage and return to idle.
			write_dac(ZERO_VOLT);
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	97 e0       	ldi	r25, 0x07	; 7
    20fe:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
			
			as.set_test_state(FOOTER);
    2102:	62 e1       	ldi	r22, 0x12	; 18
    2104:	83 e5       	ldi	r24, 0x53	; 83
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		break;
    210c:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
		
		
		
		case ARB_INIT:
			//initialize Variables.
			samp_count = 0;
    2110:	10 92 4f 01 	sts	0x014F, r1
    2114:	10 92 50 01 	sts	0x0150, r1
    2118:	10 92 51 01 	sts	0x0151, r1
    211c:	10 92 52 01 	sts	0x0152, r1
			ms_counter = 0;
    2120:	10 92 7f 01 	sts	0x017F, r1
    2124:	10 92 80 01 	sts	0x0180, r1
    2128:	10 92 81 01 	sts	0x0181, r1
    212c:	10 92 82 01 	sts	0x0182, r1
			eprom_index = 0;
    2130:	10 92 2a 01 	sts	0x012A, r1
    2134:	10 92 2b 01 	sts	0x012B, r1
    2138:	10 92 2c 01 	sts	0x012C, r1
    213c:	10 92 2d 01 	sts	0x012D, r1
			this_arb = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	90 93 29 01 	sts	0x0129, r25
    2148:	80 93 28 01 	sts	0x0128, r24
			this_cyc = 1;
    214c:	80 93 48 01 	sts	0x0148, r24
			first = 0;
    2150:	10 92 35 01 	sts	0x0135, r1
			
			//Get total number of arbitrary waveform entries.
			total_arbs = fram1_read_word(ARB_NUM);
    2154:	62 ed       	ldi	r22, 0xD2	; 210
    2156:	7b ef       	ldi	r23, 0xFB	; 251
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    2160:	90 93 27 01 	sts	0x0127, r25
    2164:	80 93 26 01 	sts	0x0126, r24
			
			//Exit if no data in arbitrary waveform memory.
			if(!total_arbs)
    2168:	89 2b       	or	r24, r25
    216a:	69 f4       	brne	.+26     	; 0x2186 <__vector_11+0x1144>
			{
				//Disconnect counter electrode.
				i2c_disconnect_ce();
    216c:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z17i2c_disconnect_cev>
				//Zero out voltage and return to idle.
				write_dac(ZERO_VOLT);
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	97 e0       	ldi	r25, 0x07	; 7
    2174:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
				
				as.set_test_state(FOOTER);
    2178:	62 e1       	ldi	r22, 0x12	; 18
    217a:	83 e5       	ldi	r24, 0x53	; 83
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
				break;
    2182:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}
			
			//Get data from FRAM.
			fram_read_arb_block(&eprom_index, &start_v, &end_v, &rate_time);
    2186:	20 e2       	ldi	r18, 0x20	; 32
    2188:	31 e0       	ldi	r19, 0x01	; 1
    218a:	42 e2       	ldi	r20, 0x22	; 34
    218c:	51 e0       	ldi	r21, 0x01	; 1
    218e:	64 e2       	ldi	r22, 0x24	; 36
    2190:	71 e0       	ldi	r23, 0x01	; 1
    2192:	8a e2       	ldi	r24, 0x2A	; 42
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_Z19fram_read_arb_blockPmPiS0_Pj>
			
			//Determine next state.
			if(start_v == end_v)//Time data.
    219a:	80 90 24 01 	lds	r8, 0x0124
    219e:	90 90 25 01 	lds	r9, 0x0125
    21a2:	a0 90 22 01 	lds	r10, 0x0122
    21a6:	b0 90 23 01 	lds	r11, 0x0123
    21aa:	8a 14       	cp	r8, r10
    21ac:	9b 04       	cpc	r9, r11
    21ae:	51 f5       	brne	.+84     	; 0x2204 <__vector_11+0x11c2>
			{	
				//Undo the indexing for timing purposes.
				eprom_index -= 6;
    21b0:	80 91 2a 01 	lds	r24, 0x012A
    21b4:	90 91 2b 01 	lds	r25, 0x012B
    21b8:	a0 91 2c 01 	lds	r26, 0x012C
    21bc:	b0 91 2d 01 	lds	r27, 0x012D
    21c0:	06 97       	sbiw	r24, 0x06	; 6
    21c2:	a1 09       	sbc	r26, r1
    21c4:	b1 09       	sbc	r27, r1
    21c6:	80 93 2a 01 	sts	0x012A, r24
    21ca:	90 93 2b 01 	sts	0x012B, r25
    21ce:	a0 93 2c 01 	sts	0x012C, r26
    21d2:	b0 93 2d 01 	sts	0x012D, r27
				
				//Force FRAM read next state.
				rate_time = 0;
    21d6:	10 92 21 01 	sts	0x0121, r1
    21da:	10 92 20 01 	sts	0x0120, r1
				ms_counter = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e0       	ldi	r26, 0x00	; 0
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	80 93 7f 01 	sts	0x017F, r24
    21ea:	90 93 80 01 	sts	0x0180, r25
    21ee:	a0 93 81 01 	sts	0x0181, r26
    21f2:	b0 93 82 01 	sts	0x0182, r27
				
				as.set_test_state(ARB_PULSE);
    21f6:	61 e1       	ldi	r22, 0x11	; 17
    21f8:	83 e5       	ldi	r24, 0x53	; 83
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    2200:	0c 94 86 19 	jmp	0x330c	; 0x330c <__vector_11+0x22ca>
			}
			else//Ramp data.
			{				
				//Initialize ramp variables.
				sv = ZERO_VOLT + (1000.0 * (double)start_v / V_PER_COUNT);
    2204:	b4 01       	movw	r22, r8
    2206:	88 27       	eor	r24, r24
    2208:	77 fd       	sbrc	r23, 7
    220a:	80 95       	com	r24
    220c:	98 2f       	mov	r25, r24
    220e:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a e7       	ldi	r20, 0x7A	; 122
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    221e:	2f e7       	ldi	r18, 0x7F	; 127
    2220:	3a e6       	ldi	r19, 0x6A	; 106
    2222:	49 e4       	ldi	r20, 0x49	; 73
    2224:	54 e4       	ldi	r21, 0x44	; 68
    2226:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 ee       	ldi	r19, 0xE0	; 224
    222e:	4f ef       	ldi	r20, 0xFF	; 255
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    2236:	6b 01       	movw	r12, r22
    2238:	7c 01       	movw	r14, r24
    223a:	60 93 43 01 	sts	0x0143, r22
    223e:	70 93 44 01 	sts	0x0144, r23
    2242:	80 93 45 01 	sts	0x0145, r24
    2246:	90 93 46 01 	sts	0x0146, r25
				ev = ZERO_VOLT + (1000.0 * (double)end_v / V_PER_COUNT);
    224a:	b5 01       	movw	r22, r10
    224c:	88 27       	eor	r24, r24
    224e:	77 fd       	sbrc	r23, 7
    2250:	80 95       	com	r24
    2252:	98 2f       	mov	r25, r24
    2254:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4a e7       	ldi	r20, 0x7A	; 122
    225e:	54 e4       	ldi	r21, 0x44	; 68
    2260:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    2264:	2f e7       	ldi	r18, 0x7F	; 127
    2266:	3a e6       	ldi	r19, 0x6A	; 106
    2268:	49 e4       	ldi	r20, 0x49	; 73
    226a:	54 e4       	ldi	r21, 0x44	; 68
    226c:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 ee       	ldi	r19, 0xE0	; 224
    2274:	4f ef       	ldi	r20, 0xFF	; 255
    2276:	54 e4       	ldi	r21, 0x44	; 68
    2278:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    227c:	60 93 3f 01 	sts	0x013F, r22
    2280:	70 93 40 01 	sts	0x0140, r23
    2284:	80 93 41 01 	sts	0x0141, r24
    2288:	90 93 42 01 	sts	0x0142, r25
				start_v > end_v ? slope = -1 : slope = 1;
    228c:	a8 14       	cp	r10, r8
    228e:	b9 04       	cpc	r11, r9
    2290:	24 f4       	brge	.+8      	; 0x229a <__vector_11+0x1258>
    2292:	8f ef       	ldi	r24, 0xFF	; 255
    2294:	80 93 3e 01 	sts	0x013E, r24
    2298:	03 c0       	rjmp	.+6      	; 0x22a0 <__vector_11+0x125e>
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 3e 01 	sts	0x013E, r24
				rate = (double)rate_time * (double)slope / V_PER_COUNT;
    22a0:	60 91 20 01 	lds	r22, 0x0120
    22a4:	70 91 21 01 	lds	r23, 0x0121
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__floatunsisf>
    22b0:	4b 01       	movw	r8, r22
    22b2:	5c 01       	movw	r10, r24
    22b4:	60 91 3e 01 	lds	r22, 0x013E
    22b8:	77 27       	eor	r23, r23
    22ba:	67 fd       	sbrc	r22, 7
    22bc:	70 95       	com	r23
    22be:	87 2f       	mov	r24, r23
    22c0:	97 2f       	mov	r25, r23
    22c2:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    22c6:	9b 01       	movw	r18, r22
    22c8:	ac 01       	movw	r20, r24
    22ca:	c5 01       	movw	r24, r10
    22cc:	b4 01       	movw	r22, r8
    22ce:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    22d2:	2f e7       	ldi	r18, 0x7F	; 127
    22d4:	3a e6       	ldi	r19, 0x6A	; 106
    22d6:	49 e4       	ldi	r20, 0x49	; 73
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    22de:	60 93 3a 01 	sts	0x013A, r22
    22e2:	70 93 3b 01 	sts	0x013B, r23
    22e6:	80 93 3c 01 	sts	0x013C, r24
    22ea:	90 93 3d 01 	sts	0x013D, r25
				this_offset = sv;
    22ee:	c0 92 36 01 	sts	0x0136, r12
    22f2:	d0 92 37 01 	sts	0x0137, r13
    22f6:	e0 92 38 01 	sts	0x0138, r14
    22fa:	f0 92 39 01 	sts	0x0139, r15
				as.set_test_state(ARB_RAMP);
    22fe:	60 e1       	ldi	r22, 0x10	; 16
    2300:	83 e5       	ldi	r24, 0x53	; 83
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
				
				//Begin data array.
				if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    2308:	83 e5       	ldi	r24, 0x53	; 83
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	71 f4       	brne	.+28     	; 0x2330 <__vector_11+0x12ee>
				{
					atmega_uart::tx_string_p(PSTR("a"));
    2314:	8f ed       	ldi	r24, 0xDF	; 223
    2316:	96 e0       	ldi	r25, 0x06	; 6
    2318:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					tx_u16_to_ascii(this_cyc);
    231c:	80 91 48 01 	lds	r24, 0x0148
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_string_p(PSTR("=["));
    2326:	8c ed       	ldi	r24, 0xDC	; 220
    2328:	96 e0       	ldi	r25, 0x06	; 6
    232a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    232e:	1f c0       	rjmp	.+62     	; 0x236e <__vector_11+0x132c>
				}
				else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    2330:	83 e5       	ldi	r24, 0x53	; 83
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2338:	81 11       	cpse	r24, r1
    233a:	10 c0       	rjmp	.+32     	; 0x235c <__vector_11+0x131a>
				{
					tx_u16_to_ascii(ARB_DATA);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	96 e8       	ldi	r25, 0x86	; 134
    2340:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    2344:	8c e2       	ldi	r24, 0x2C	; 44
    2346:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					tx_u16_to_ascii(this_cyc);
    234a:	80 91 48 01 	lds	r24, 0x0148
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    2354:	8c e2       	ldi	r24, 0x2C	; 44
    2356:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    235a:	09 c0       	rjmp	.+18     	; 0x236e <__vector_11+0x132c>
				}
				else//Print binary data.
				{
					atmega_uart::tx_word(ARB_DATA);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	96 e8       	ldi	r25, 0x86	; 134
    2360:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
					atmega_uart::tx_word(this_cyc);
    2364:	80 91 48 01 	lds	r24, 0x0148
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				}
				this_cyc++;//Increment for next array.	
    236e:	80 91 48 01 	lds	r24, 0x0148
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	80 93 48 01 	sts	0x0148, r24
    2378:	c9 c7       	rjmp	.+3986   	; 0x330c <__vector_11+0x22ca>
			}
		break;
		
		case ARB_RAMP:		
			write_dac((uint16_t)round(this_offset));//Load value into the DAC.
    237a:	60 91 36 01 	lds	r22, 0x0136
    237e:	70 91 37 01 	lds	r23, 0x0137
    2382:	80 91 38 01 	lds	r24, 0x0138
    2386:	90 91 39 01 	lds	r25, 0x0139
    238a:	0e 94 a3 3b 	call	0x7746	; 0x7746 <round>
    238e:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__fixunssfsi>
    2392:	cb 01       	movw	r24, r22
    2394:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
			
			if(first)
    2398:	80 91 35 01 	lds	r24, 0x0135
    239c:	88 23       	and	r24, r24
    239e:	f9 f0       	breq	.+62     	; 0x23de <__vector_11+0x139c>
			{
				first = 0;
    23a0:	10 92 35 01 	sts	0x0135, r1
				
				//Finish array.
				//Print MatLab data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)
    23a4:	83 e5       	ldi	r24, 0x53	; 83
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	29 f4       	brne	.+10     	; 0x23ba <__vector_11+0x1378>
				atmega_uart::tx_string_p(PSTR("];\r\r"));
    23b0:	87 ed       	ldi	r24, 0xD7	; 215
    23b2:	96 e0       	ldi	r25, 0x06	; 6
    23b4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    23b8:	12 c0       	rjmp	.+36     	; 0x23de <__vector_11+0x139c>
				//Print ASCII data.
				else if(as.get_tx_mode() == TX_MODE_ASCII)
    23ba:	83 e5       	ldi	r24, 0x53	; 83
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    23c2:	81 11       	cpse	r24, r1
    23c4:	08 c0       	rjmp	.+16     	; 0x23d6 <__vector_11+0x1394>
				{
					tx_u16_to_ascii(END_BLOCK);
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	9f ef       	ldi	r25, 0xFF	; 255
    23ca:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					atmega_uart::tx_byte(',');
    23ce:	8c e2       	ldi	r24, 0x2C	; 44
    23d0:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <__vector_11+0x139c>
				}
				else//Print binary data.
				atmega_uart::tx_word(END_BLOCK);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
			
			output = read_adc();//Get value from ADC.
    23de:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    23e2:	90 93 4a 01 	sts	0x014A, r25
    23e6:	80 93 49 01 	sts	0x0149, r24
			
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    23ea:	83 e5       	ldi	r24, 0x53	; 83
    23ec:	91 e0       	ldi	r25, 0x01	; 1
    23ee:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	99 f5       	brne	.+102    	; 0x245c <__vector_11+0x141a>
			{
				tx_u16_to_ascii(output);
    23f6:	80 91 49 01 	lds	r24, 0x0149
    23fa:	90 91 4a 01 	lds	r25, 0x014A
    23fe:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    2402:	8c e2       	ldi	r24, 0x2C	; 44
    2404:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				
				//Indicate a new sample has been sent.
				samp_count++;
    2408:	80 91 4f 01 	lds	r24, 0x014F
    240c:	90 91 50 01 	lds	r25, 0x0150
    2410:	a0 91 51 01 	lds	r26, 0x0151
    2414:	b0 91 52 01 	lds	r27, 0x0152
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	6f 5f       	subi	r22, 0xFF	; 255
    241e:	7f 4f       	sbci	r23, 0xFF	; 255
    2420:	8f 4f       	sbci	r24, 0xFF	; 255
    2422:	9f 4f       	sbci	r25, 0xFF	; 255
    2424:	60 93 4f 01 	sts	0x014F, r22
    2428:	70 93 50 01 	sts	0x0150, r23
    242c:	80 93 51 01 	sts	0x0151, r24
    2430:	90 93 52 01 	sts	0x0152, r25
				
				//Start newline if 10 or more samples on this line.
				if(samp_count && !(samp_count % 10))
    2434:	61 15       	cp	r22, r1
    2436:	71 05       	cpc	r23, r1
    2438:	81 05       	cpc	r24, r1
    243a:	91 05       	cpc	r25, r1
    243c:	29 f1       	breq	.+74     	; 0x2488 <__vector_11+0x1446>
    243e:	2a e0       	ldi	r18, 0x0A	; 10
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    244a:	67 2b       	or	r22, r23
    244c:	68 2b       	or	r22, r24
    244e:	69 2b       	or	r22, r25
    2450:	d9 f4       	brne	.+54     	; 0x2488 <__vector_11+0x1446>
				atmega_uart::tx_string_p(PSTR("...\r"));
    2452:	82 ed       	ldi	r24, 0xD2	; 210
    2454:	96 e0       	ldi	r25, 0x06	; 6
    2456:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    245a:	16 c0       	rjmp	.+44     	; 0x2488 <__vector_11+0x1446>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    245c:	83 e5       	ldi	r24, 0x53	; 83
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2464:	81 11       	cpse	r24, r1
    2466:	0a c0       	rjmp	.+20     	; 0x247c <__vector_11+0x143a>
			{
				tx_u16_to_ascii(output);
    2468:	80 91 49 01 	lds	r24, 0x0149
    246c:	90 91 4a 01 	lds	r25, 0x014A
    2470:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    2474:	8c e2       	ldi	r24, 0x2C	; 44
    2476:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    247a:	06 c0       	rjmp	.+12     	; 0x2488 <__vector_11+0x1446>
			}
			else//Print binary data.
				atmega_uart::tx_word(output);
    247c:	80 91 49 01 	lds	r24, 0x0149
    2480:	90 91 4a 01 	lds	r25, 0x014A
    2484:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			
			//Calculate current value for the DAC.
			this_offset += rate;
    2488:	20 91 3a 01 	lds	r18, 0x013A
    248c:	30 91 3b 01 	lds	r19, 0x013B
    2490:	40 91 3c 01 	lds	r20, 0x013C
    2494:	50 91 3d 01 	lds	r21, 0x013D
    2498:	60 91 36 01 	lds	r22, 0x0136
    249c:	70 91 37 01 	lds	r23, 0x0137
    24a0:	80 91 38 01 	lds	r24, 0x0138
    24a4:	90 91 39 01 	lds	r25, 0x0139
    24a8:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    24ac:	6b 01       	movw	r12, r22
    24ae:	7c 01       	movw	r14, r24
    24b0:	60 93 36 01 	sts	0x0136, r22
    24b4:	70 93 37 01 	sts	0x0137, r23
    24b8:	80 93 38 01 	sts	0x0138, r24
    24bc:	90 93 39 01 	sts	0x0139, r25
			
			ms_counter++;//Always increment counter.
    24c0:	80 91 7f 01 	lds	r24, 0x017F
    24c4:	90 91 80 01 	lds	r25, 0x0180
    24c8:	a0 91 81 01 	lds	r26, 0x0181
    24cc:	b0 91 82 01 	lds	r27, 0x0182
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	a1 1d       	adc	r26, r1
    24d4:	b1 1d       	adc	r27, r1
    24d6:	80 93 7f 01 	sts	0x017F, r24
    24da:	90 93 80 01 	sts	0x0180, r25
    24de:	a0 93 81 01 	sts	0x0181, r26
    24e2:	b0 93 82 01 	sts	0x0182, r27
			
			//Continue ramping.
			if(((slope > 0) && (this_offset < ev)) || ((slope < 0) && (this_offset > ev)))
    24e6:	c0 91 3e 01 	lds	r28, 0x013E
    24ea:	1c 16       	cp	r1, r28
    24ec:	7c f4       	brge	.+30     	; 0x250c <__vector_11+0x14ca>
    24ee:	20 91 3f 01 	lds	r18, 0x013F
    24f2:	30 91 40 01 	lds	r19, 0x0140
    24f6:	40 91 41 01 	lds	r20, 0x0141
    24fa:	50 91 42 01 	lds	r21, 0x0142
    24fe:	c7 01       	movw	r24, r14
    2500:	b6 01       	movw	r22, r12
    2502:	0e 94 ed 39 	call	0x73da	; 0x73da <__cmpsf2>
    2506:	88 23       	and	r24, r24
    2508:	0c f4       	brge	.+2      	; 0x250c <__vector_11+0x14ca>
    250a:	00 c7       	rjmp	.+3584   	; 0x330c <__vector_11+0x22ca>
    250c:	cc 23       	and	r28, r28
    250e:	7c f4       	brge	.+30     	; 0x252e <__vector_11+0x14ec>
    2510:	20 91 3f 01 	lds	r18, 0x013F
    2514:	30 91 40 01 	lds	r19, 0x0140
    2518:	40 91 41 01 	lds	r20, 0x0141
    251c:	50 91 42 01 	lds	r21, 0x0142
    2520:	c7 01       	movw	r24, r14
    2522:	b6 01       	movw	r22, r12
    2524:	0e 94 3c 3b 	call	0x7678	; 0x7678 <__gesf2>
    2528:	18 16       	cp	r1, r24
    252a:	0c f4       	brge	.+2      	; 0x252e <__vector_11+0x14ec>
    252c:	ef c6       	rjmp	.+3550   	; 0x330c <__vector_11+0x22ca>
				break;
			
			this_arb++;//Segment complete.
    252e:	80 91 28 01 	lds	r24, 0x0128
    2532:	90 91 29 01 	lds	r25, 0x0129
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	90 93 29 01 	sts	0x0129, r25
    253c:	80 93 28 01 	sts	0x0128, r24
			
			//Finish array.
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    2540:	83 e5       	ldi	r24, 0x53	; 83
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	29 f4       	brne	.+10     	; 0x2556 <__vector_11+0x1514>
				atmega_uart::tx_string_p(PSTR("];\r\r"));
    254c:	8d ec       	ldi	r24, 0xCD	; 205
    254e:	96 e0       	ldi	r25, 0x06	; 6
    2550:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    2554:	12 c0       	rjmp	.+36     	; 0x257a <__vector_11+0x1538>
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    2556:	83 e5       	ldi	r24, 0x53	; 83
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    255e:	81 11       	cpse	r24, r1
    2560:	08 c0       	rjmp	.+16     	; 0x2572 <__vector_11+0x1530>
			{
				tx_u16_to_ascii(END_BLOCK);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	9f ef       	ldi	r25, 0xFF	; 255
    2566:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    256a:	8c e2       	ldi	r24, 0x2C	; 44
    256c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2570:	04 c0       	rjmp	.+8      	; 0x257a <__vector_11+0x1538>
			}
			else//Print binary data.
				atmega_uart::tx_word(END_BLOCK);
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	9f ef       	ldi	r25, 0xFF	; 255
    2576:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			
			samp_count = 0;//Reset sample counter.
    257a:	10 92 4f 01 	sts	0x014F, r1
    257e:	10 92 50 01 	sts	0x0150, r1
    2582:	10 92 51 01 	sts	0x0151, r1
    2586:	10 92 52 01 	sts	0x0152, r1
						
			//Check if another arbitrary waveform needs to be loaded.
			if(this_arb <= total_arbs)
    258a:	20 91 28 01 	lds	r18, 0x0128
    258e:	30 91 29 01 	lds	r19, 0x0129
    2592:	80 91 26 01 	lds	r24, 0x0126
    2596:	90 91 27 01 	lds	r25, 0x0127
    259a:	82 17       	cp	r24, r18
    259c:	93 07       	cpc	r25, r19
    259e:	08 f4       	brcc	.+2      	; 0x25a2 <__vector_11+0x1560>
    25a0:	f4 c0       	rjmp	.+488    	; 0x278a <__vector_11+0x1748>
			{
				//Load next arbitrary waveform data set.
				fram_read_arb_block(&eprom_index, &start_v, &end_v, &rate_time);
    25a2:	20 e2       	ldi	r18, 0x20	; 32
    25a4:	31 e0       	ldi	r19, 0x01	; 1
    25a6:	42 e2       	ldi	r20, 0x22	; 34
    25a8:	51 e0       	ldi	r21, 0x01	; 1
    25aa:	64 e2       	ldi	r22, 0x24	; 36
    25ac:	71 e0       	ldi	r23, 0x01	; 1
    25ae:	8a e2       	ldi	r24, 0x2A	; 42
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_Z19fram_read_arb_blockPmPiS0_Pj>
				
				//Determine next state.
				if(start_v == end_v)//Time data.
    25b6:	80 90 24 01 	lds	r8, 0x0124
    25ba:	90 90 25 01 	lds	r9, 0x0125
    25be:	a0 90 22 01 	lds	r10, 0x0122
    25c2:	b0 90 23 01 	lds	r11, 0x0123
    25c6:	8a 14       	cp	r8, r10
    25c8:	9b 04       	cpc	r9, r11
    25ca:	49 f5       	brne	.+82     	; 0x261e <__vector_11+0x15dc>
				{
					//Undo the indexing for timing purposes.
					eprom_index -= 6;
    25cc:	80 91 2a 01 	lds	r24, 0x012A
    25d0:	90 91 2b 01 	lds	r25, 0x012B
    25d4:	a0 91 2c 01 	lds	r26, 0x012C
    25d8:	b0 91 2d 01 	lds	r27, 0x012D
    25dc:	06 97       	sbiw	r24, 0x06	; 6
    25de:	a1 09       	sbc	r26, r1
    25e0:	b1 09       	sbc	r27, r1
    25e2:	80 93 2a 01 	sts	0x012A, r24
    25e6:	90 93 2b 01 	sts	0x012B, r25
    25ea:	a0 93 2c 01 	sts	0x012C, r26
    25ee:	b0 93 2d 01 	sts	0x012D, r27
					
					//Force FRAM read next state.
					rate_time = 0;
    25f2:	10 92 21 01 	sts	0x0121, r1
    25f6:	10 92 20 01 	sts	0x0120, r1
					ms_counter = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a0 e0       	ldi	r26, 0x00	; 0
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	80 93 7f 01 	sts	0x017F, r24
    2606:	90 93 80 01 	sts	0x0180, r25
    260a:	a0 93 81 01 	sts	0x0181, r26
    260e:	b0 93 82 01 	sts	0x0182, r27
					
					as.set_test_state(ARB_PULSE);
    2612:	61 e1       	ldi	r22, 0x11	; 17
    2614:	83 e5       	ldi	r24, 0x53	; 83
    2616:	91 e0       	ldi	r25, 0x01	; 1
    2618:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    261c:	77 c6       	rjmp	.+3310   	; 0x330c <__vector_11+0x22ca>
				}
				else//Ramp data.
				{
					//Initialize ramp variables.
					sv = ZERO_VOLT + (1000.0 * (double)start_v / V_PER_COUNT);
    261e:	b4 01       	movw	r22, r8
    2620:	88 27       	eor	r24, r24
    2622:	77 fd       	sbrc	r23, 7
    2624:	80 95       	com	r24
    2626:	98 2f       	mov	r25, r24
    2628:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	54 e4       	ldi	r21, 0x44	; 68
    2634:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    2638:	2f e7       	ldi	r18, 0x7F	; 127
    263a:	3a e6       	ldi	r19, 0x6A	; 106
    263c:	49 e4       	ldi	r20, 0x49	; 73
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 ee       	ldi	r19, 0xE0	; 224
    2648:	4f ef       	ldi	r20, 0xFF	; 255
    264a:	54 e4       	ldi	r21, 0x44	; 68
    264c:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    2650:	6b 01       	movw	r12, r22
    2652:	7c 01       	movw	r14, r24
    2654:	60 93 43 01 	sts	0x0143, r22
    2658:	70 93 44 01 	sts	0x0144, r23
    265c:	80 93 45 01 	sts	0x0145, r24
    2660:	90 93 46 01 	sts	0x0146, r25
					ev = ZERO_VOLT + (1000.0 * (double)end_v / V_PER_COUNT);
    2664:	b5 01       	movw	r22, r10
    2666:	88 27       	eor	r24, r24
    2668:	77 fd       	sbrc	r23, 7
    266a:	80 95       	com	r24
    266c:	98 2f       	mov	r25, r24
    266e:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a e7       	ldi	r20, 0x7A	; 122
    2678:	54 e4       	ldi	r21, 0x44	; 68
    267a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    267e:	2f e7       	ldi	r18, 0x7F	; 127
    2680:	3a e6       	ldi	r19, 0x6A	; 106
    2682:	49 e4       	ldi	r20, 0x49	; 73
    2684:	54 e4       	ldi	r21, 0x44	; 68
    2686:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 ee       	ldi	r19, 0xE0	; 224
    268e:	4f ef       	ldi	r20, 0xFF	; 255
    2690:	54 e4       	ldi	r21, 0x44	; 68
    2692:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    2696:	60 93 3f 01 	sts	0x013F, r22
    269a:	70 93 40 01 	sts	0x0140, r23
    269e:	80 93 41 01 	sts	0x0141, r24
    26a2:	90 93 42 01 	sts	0x0142, r25
					start_v > end_v ? slope = -1 : slope = 1;
    26a6:	a8 14       	cp	r10, r8
    26a8:	b9 04       	cpc	r11, r9
    26aa:	24 f4       	brge	.+8      	; 0x26b4 <__vector_11+0x1672>
    26ac:	8f ef       	ldi	r24, 0xFF	; 255
    26ae:	80 93 3e 01 	sts	0x013E, r24
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <__vector_11+0x1678>
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	80 93 3e 01 	sts	0x013E, r24
					rate = (double)rate_time * (double)slope / V_PER_COUNT;
    26ba:	60 91 20 01 	lds	r22, 0x0120
    26be:	70 91 21 01 	lds	r23, 0x0121
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__floatunsisf>
    26ca:	4b 01       	movw	r8, r22
    26cc:	5c 01       	movw	r10, r24
    26ce:	60 91 3e 01 	lds	r22, 0x013E
    26d2:	77 27       	eor	r23, r23
    26d4:	67 fd       	sbrc	r22, 7
    26d6:	70 95       	com	r23
    26d8:	87 2f       	mov	r24, r23
    26da:	97 2f       	mov	r25, r23
    26dc:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    26e0:	9b 01       	movw	r18, r22
    26e2:	ac 01       	movw	r20, r24
    26e4:	c5 01       	movw	r24, r10
    26e6:	b4 01       	movw	r22, r8
    26e8:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    26ec:	2f e7       	ldi	r18, 0x7F	; 127
    26ee:	3a e6       	ldi	r19, 0x6A	; 106
    26f0:	49 e4       	ldi	r20, 0x49	; 73
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    26f8:	60 93 3a 01 	sts	0x013A, r22
    26fc:	70 93 3b 01 	sts	0x013B, r23
    2700:	80 93 3c 01 	sts	0x013C, r24
    2704:	90 93 3d 01 	sts	0x013D, r25
					this_offset = sv;
    2708:	c0 92 36 01 	sts	0x0136, r12
    270c:	d0 92 37 01 	sts	0x0137, r13
    2710:	e0 92 38 01 	sts	0x0138, r14
    2714:	f0 92 39 01 	sts	0x0139, r15
					
					//Begin data array.
					if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    2718:	83 e5       	ldi	r24, 0x53	; 83
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	71 f4       	brne	.+28     	; 0x2740 <__vector_11+0x16fe>
					{
						atmega_uart::tx_string_p(PSTR("a"));
    2724:	8b ec       	ldi	r24, 0xCB	; 203
    2726:	96 e0       	ldi	r25, 0x06	; 6
    2728:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(this_cyc);
    272c:	80 91 48 01 	lds	r24, 0x0148
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("=["));
    2736:	88 ec       	ldi	r24, 0xC8	; 200
    2738:	96 e0       	ldi	r25, 0x06	; 6
    273a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    273e:	1f c0       	rjmp	.+62     	; 0x277e <__vector_11+0x173c>
					}
					else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    2740:	83 e5       	ldi	r24, 0x53	; 83
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2748:	81 11       	cpse	r24, r1
    274a:	10 c0       	rjmp	.+32     	; 0x276c <__vector_11+0x172a>
					{
						tx_u16_to_ascii(ARB_DATA);
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	96 e8       	ldi	r25, 0x86	; 134
    2750:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    2754:	8c e2       	ldi	r24, 0x2C	; 44
    2756:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
						tx_u16_to_ascii(this_cyc);
    275a:	80 91 48 01 	lds	r24, 0x0148
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    2764:	8c e2       	ldi	r24, 0x2C	; 44
    2766:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    276a:	09 c0       	rjmp	.+18     	; 0x277e <__vector_11+0x173c>
					}
					else//Print binary data.
					{
						atmega_uart::tx_word(ARB_DATA);
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	96 e8       	ldi	r25, 0x86	; 134
    2770:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
						atmega_uart::tx_word(this_cyc);
    2774:	80 91 48 01 	lds	r24, 0x0148
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
					}
					this_cyc++;//Increment for next array.
    277e:	80 91 48 01 	lds	r24, 0x0148
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	80 93 48 01 	sts	0x0148, r24
    2788:	c1 c5       	rjmp	.+2946   	; 0x330c <__vector_11+0x22ca>
				}
			}
			else
			{
				i2c_disconnect_ce();	//Disconnect counter electrode.
    278a:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z17i2c_disconnect_cev>
				write_dac(ZERO_VOLT);	//Zero out voltage and return to idle.
    278e:	8f ef       	ldi	r24, 0xFF	; 255
    2790:	97 e0       	ldi	r25, 0x07	; 7
    2792:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
				as.set_test_state(FOOTER);
    2796:	62 e1       	ldi	r22, 0x12	; 18
    2798:	83 e5       	ldi	r24, 0x53	; 83
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    27a0:	b5 c5       	rjmp	.+2922   	; 0x330c <__vector_11+0x22ca>
			}
		break;
		
		case ARB_PULSE:			
			if(ms_counter >= rate_time)//Check if time to end arb segment.
    27a2:	40 91 20 01 	lds	r20, 0x0120
    27a6:	50 91 21 01 	lds	r21, 0x0121
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	80 91 7f 01 	lds	r24, 0x017F
    27b2:	90 91 80 01 	lds	r25, 0x0180
    27b6:	a0 91 81 01 	lds	r26, 0x0181
    27ba:	b0 91 82 01 	lds	r27, 0x0182
    27be:	84 17       	cp	r24, r20
    27c0:	95 07       	cpc	r25, r21
    27c2:	a6 07       	cpc	r26, r22
    27c4:	b7 07       	cpc	r27, r23
    27c6:	08 f4       	brcc	.+2      	; 0x27ca <__vector_11+0x1788>
    27c8:	bd c1       	rjmp	.+890    	; 0x2b44 <__vector_11+0x1b02>
			{
				ms_counter = 0;
    27ca:	10 92 7f 01 	sts	0x017F, r1
    27ce:	10 92 80 01 	sts	0x0180, r1
    27d2:	10 92 81 01 	sts	0x0181, r1
    27d6:	10 92 82 01 	sts	0x0182, r1
								
				//Check if another arbitrary waveform needs to be loaded.
				if(this_arb <= total_arbs)
    27da:	20 91 28 01 	lds	r18, 0x0128
    27de:	30 91 29 01 	lds	r19, 0x0129
    27e2:	80 91 26 01 	lds	r24, 0x0126
    27e6:	90 91 27 01 	lds	r25, 0x0127
    27ea:	82 17       	cp	r24, r18
    27ec:	93 07       	cpc	r25, r19
    27ee:	08 f4       	brcc	.+2      	; 0x27f2 <__vector_11+0x17b0>
    27f0:	74 c1       	rjmp	.+744    	; 0x2ada <__vector_11+0x1a98>
				{					
					//Load next arbitrary waveform data set.
					fram_read_arb_block(&eprom_index, &start_v, &end_v, &rate_time);
    27f2:	20 e2       	ldi	r18, 0x20	; 32
    27f4:	31 e0       	ldi	r19, 0x01	; 1
    27f6:	42 e2       	ldi	r20, 0x22	; 34
    27f8:	51 e0       	ldi	r21, 0x01	; 1
    27fa:	64 e2       	ldi	r22, 0x24	; 36
    27fc:	71 e0       	ldi	r23, 0x01	; 1
    27fe:	8a e2       	ldi	r24, 0x2A	; 42
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_Z19fram_read_arb_blockPmPiS0_Pj>
					
					if(first)
    2806:	80 91 35 01 	lds	r24, 0x0135
    280a:	88 23       	and	r24, r24
    280c:	f9 f0       	breq	.+62     	; 0x284c <__vector_11+0x180a>
					{
						first = 0;
    280e:	10 92 35 01 	sts	0x0135, r1
						
						//Finish array.
						//Print MatLab data.
						if(as.get_tx_mode() == TX_MODE_MATLAB)
    2812:	83 e5       	ldi	r24, 0x53	; 83
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    281a:	81 30       	cpi	r24, 0x01	; 1
    281c:	29 f4       	brne	.+10     	; 0x2828 <__vector_11+0x17e6>
						atmega_uart::tx_string_p(PSTR("];\r\r"));
    281e:	83 ec       	ldi	r24, 0xC3	; 195
    2820:	96 e0       	ldi	r25, 0x06	; 6
    2822:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    2826:	12 c0       	rjmp	.+36     	; 0x284c <__vector_11+0x180a>
						//Print ASCII data.
						else if(as.get_tx_mode() == TX_MODE_ASCII)
    2828:	83 e5       	ldi	r24, 0x53	; 83
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2830:	81 11       	cpse	r24, r1
    2832:	08 c0       	rjmp	.+16     	; 0x2844 <__vector_11+0x1802>
						{
							tx_u16_to_ascii(END_BLOCK);
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    283c:	8c e2       	ldi	r24, 0x2C	; 44
    283e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2842:	04 c0       	rjmp	.+8      	; 0x284c <__vector_11+0x180a>
						}
						else//Print binary data.
						atmega_uart::tx_word(END_BLOCK);	
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	9f ef       	ldi	r25, 0xFF	; 255
    2848:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
					}		
					
					//Determine next state.
					if(start_v == end_v)//Time data.
    284c:	a0 90 24 01 	lds	r10, 0x0124
    2850:	b0 90 25 01 	lds	r11, 0x0125
    2854:	80 90 22 01 	lds	r8, 0x0122
    2858:	90 90 23 01 	lds	r9, 0x0123
    285c:	a8 14       	cp	r10, r8
    285e:	b9 04       	cpc	r11, r9
    2860:	09 f0       	breq	.+2      	; 0x2864 <__vector_11+0x1822>
    2862:	65 c0       	rjmp	.+202    	; 0x292e <__vector_11+0x18ec>
					{
						write_dac((uint16_t)(round(ZERO_VOLT + (1000.0 * ((double)start_v) / V_PER_COUNT))));//Write DAC value.
    2864:	b5 01       	movw	r22, r10
    2866:	88 27       	eor	r24, r24
    2868:	77 fd       	sbrc	r23, 7
    286a:	80 95       	com	r24
    286c:	98 2f       	mov	r25, r24
    286e:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a e7       	ldi	r20, 0x7A	; 122
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    287e:	2f e7       	ldi	r18, 0x7F	; 127
    2880:	3a e6       	ldi	r19, 0x6A	; 106
    2882:	49 e4       	ldi	r20, 0x49	; 73
    2884:	54 e4       	ldi	r21, 0x44	; 68
    2886:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 ee       	ldi	r19, 0xE0	; 224
    288e:	4f ef       	ldi	r20, 0xFF	; 255
    2890:	54 e4       	ldi	r21, 0x44	; 68
    2892:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    2896:	0e 94 a3 3b 	call	0x7746	; 0x7746 <round>
    289a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__fixunssfsi>
    289e:	cb 01       	movw	r24, r22
    28a0:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
						this_arb++; //Segment complete.
    28a4:	80 91 28 01 	lds	r24, 0x0128
    28a8:	90 91 29 01 	lds	r25, 0x0129
    28ac:	01 96       	adiw	r24, 0x01	; 1
    28ae:	90 93 29 01 	sts	0x0129, r25
    28b2:	80 93 28 01 	sts	0x0128, r24
						first = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	80 93 35 01 	sts	0x0135, r24
													
						//Begin data array.
						if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    28bc:	83 e5       	ldi	r24, 0x53	; 83
    28be:	91 e0       	ldi	r25, 0x01	; 1
    28c0:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	71 f4       	brne	.+28     	; 0x28e4 <__vector_11+0x18a2>
						{
							atmega_uart::tx_string_p(PSTR("a"));
    28c8:	81 ec       	ldi	r24, 0xC1	; 193
    28ca:	96 e0       	ldi	r25, 0x06	; 6
    28cc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
							tx_u16_to_ascii(this_cyc);
    28d0:	80 91 48 01 	lds	r24, 0x0148
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
							atmega_uart::tx_string_p(PSTR("=["));
    28da:	8e eb       	ldi	r24, 0xBE	; 190
    28dc:	96 e0       	ldi	r25, 0x06	; 6
    28de:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    28e2:	1f c0       	rjmp	.+62     	; 0x2922 <__vector_11+0x18e0>
						}
						else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    28e4:	83 e5       	ldi	r24, 0x53	; 83
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    28ec:	81 11       	cpse	r24, r1
    28ee:	10 c0       	rjmp	.+32     	; 0x2910 <__vector_11+0x18ce>
						{
							tx_u16_to_ascii(ARB_DATA);
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	96 e8       	ldi	r25, 0x86	; 134
    28f4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    28f8:	8c e2       	ldi	r24, 0x2C	; 44
    28fa:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
							tx_u16_to_ascii(this_cyc);
    28fe:	80 91 48 01 	lds	r24, 0x0148
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    2908:	8c e2       	ldi	r24, 0x2C	; 44
    290a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    290e:	09 c0       	rjmp	.+18     	; 0x2922 <__vector_11+0x18e0>
						}
						else//Print binary data.
						{
							atmega_uart::tx_word(ARB_DATA);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	96 e8       	ldi	r25, 0x86	; 134
    2914:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
							atmega_uart::tx_word(this_cyc);
    2918:	80 91 48 01 	lds	r24, 0x0148
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
						}
						this_cyc++;//Increment for next array.
    2922:	80 91 48 01 	lds	r24, 0x0148
    2926:	8f 5f       	subi	r24, 0xFF	; 255
    2928:	80 93 48 01 	sts	0x0148, r24
    292c:	0b c1       	rjmp	.+534    	; 0x2b44 <__vector_11+0x1b02>
					}
					else//Ramp data.
					{						
						//Initialize ramp variables.
						sv = ZERO_VOLT + (1000.0 * (double)start_v / V_PER_COUNT);
    292e:	b5 01       	movw	r22, r10
    2930:	88 27       	eor	r24, r24
    2932:	77 fd       	sbrc	r23, 7
    2934:	80 95       	com	r24
    2936:	98 2f       	mov	r25, r24
    2938:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a e7       	ldi	r20, 0x7A	; 122
    2942:	54 e4       	ldi	r21, 0x44	; 68
    2944:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    2948:	2f e7       	ldi	r18, 0x7F	; 127
    294a:	3a e6       	ldi	r19, 0x6A	; 106
    294c:	49 e4       	ldi	r20, 0x49	; 73
    294e:	54 e4       	ldi	r21, 0x44	; 68
    2950:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 ee       	ldi	r19, 0xE0	; 224
    2958:	4f ef       	ldi	r20, 0xFF	; 255
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    2960:	6b 01       	movw	r12, r22
    2962:	7c 01       	movw	r14, r24
    2964:	60 93 43 01 	sts	0x0143, r22
    2968:	70 93 44 01 	sts	0x0144, r23
    296c:	80 93 45 01 	sts	0x0145, r24
    2970:	90 93 46 01 	sts	0x0146, r25
						ev = ZERO_VOLT + (1000.0 * (double)end_v / V_PER_COUNT);
    2974:	b4 01       	movw	r22, r8
    2976:	88 27       	eor	r24, r24
    2978:	77 fd       	sbrc	r23, 7
    297a:	80 95       	com	r24
    297c:	98 2f       	mov	r25, r24
    297e:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	4a e7       	ldi	r20, 0x7A	; 122
    2988:	54 e4       	ldi	r21, 0x44	; 68
    298a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    298e:	2f e7       	ldi	r18, 0x7F	; 127
    2990:	3a e6       	ldi	r19, 0x6A	; 106
    2992:	49 e4       	ldi	r20, 0x49	; 73
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 ee       	ldi	r19, 0xE0	; 224
    299e:	4f ef       	ldi	r20, 0xFF	; 255
    29a0:	54 e4       	ldi	r21, 0x44	; 68
    29a2:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    29a6:	60 93 3f 01 	sts	0x013F, r22
    29aa:	70 93 40 01 	sts	0x0140, r23
    29ae:	80 93 41 01 	sts	0x0141, r24
    29b2:	90 93 42 01 	sts	0x0142, r25
						start_v > end_v ? slope = -1 : slope = 1;
    29b6:	8a 14       	cp	r8, r10
    29b8:	9b 04       	cpc	r9, r11
    29ba:	24 f4       	brge	.+8      	; 0x29c4 <__vector_11+0x1982>
    29bc:	8f ef       	ldi	r24, 0xFF	; 255
    29be:	80 93 3e 01 	sts	0x013E, r24
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <__vector_11+0x1988>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	80 93 3e 01 	sts	0x013E, r24
						rate = (double)rate_time * (double)slope / V_PER_COUNT;
    29ca:	60 91 20 01 	lds	r22, 0x0120
    29ce:	70 91 21 01 	lds	r23, 0x0121
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__floatunsisf>
    29da:	4b 01       	movw	r8, r22
    29dc:	5c 01       	movw	r10, r24
    29de:	60 91 3e 01 	lds	r22, 0x013E
    29e2:	77 27       	eor	r23, r23
    29e4:	67 fd       	sbrc	r22, 7
    29e6:	70 95       	com	r23
    29e8:	87 2f       	mov	r24, r23
    29ea:	97 2f       	mov	r25, r23
    29ec:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    29f0:	9b 01       	movw	r18, r22
    29f2:	ac 01       	movw	r20, r24
    29f4:	c5 01       	movw	r24, r10
    29f6:	b4 01       	movw	r22, r8
    29f8:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    29fc:	2f e7       	ldi	r18, 0x7F	; 127
    29fe:	3a e6       	ldi	r19, 0x6A	; 106
    2a00:	49 e4       	ldi	r20, 0x49	; 73
    2a02:	54 e4       	ldi	r21, 0x44	; 68
    2a04:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    2a08:	60 93 3a 01 	sts	0x013A, r22
    2a0c:	70 93 3b 01 	sts	0x013B, r23
    2a10:	80 93 3c 01 	sts	0x013C, r24
    2a14:	90 93 3d 01 	sts	0x013D, r25
						this_offset = sv;
    2a18:	c0 92 36 01 	sts	0x0136, r12
    2a1c:	d0 92 37 01 	sts	0x0137, r13
    2a20:	e0 92 38 01 	sts	0x0138, r14
    2a24:	f0 92 39 01 	sts	0x0139, r15
						samp_count = 0;//Reset sample counter.
    2a28:	10 92 4f 01 	sts	0x014F, r1
    2a2c:	10 92 50 01 	sts	0x0150, r1
    2a30:	10 92 51 01 	sts	0x0151, r1
    2a34:	10 92 52 01 	sts	0x0152, r1
						ms_counter++;
    2a38:	80 91 7f 01 	lds	r24, 0x017F
    2a3c:	90 91 80 01 	lds	r25, 0x0180
    2a40:	a0 91 81 01 	lds	r26, 0x0181
    2a44:	b0 91 82 01 	lds	r27, 0x0182
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	a1 1d       	adc	r26, r1
    2a4c:	b1 1d       	adc	r27, r1
    2a4e:	80 93 7f 01 	sts	0x017F, r24
    2a52:	90 93 80 01 	sts	0x0180, r25
    2a56:	a0 93 81 01 	sts	0x0181, r26
    2a5a:	b0 93 82 01 	sts	0x0182, r27
						as.set_test_state(ARB_RAMP);
    2a5e:	60 e1       	ldi	r22, 0x10	; 16
    2a60:	83 e5       	ldi	r24, 0x53	; 83
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
						
						//Begin data array.
						if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    2a68:	83 e5       	ldi	r24, 0x53	; 83
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2a70:	81 30       	cpi	r24, 0x01	; 1
    2a72:	71 f4       	brne	.+28     	; 0x2a90 <__vector_11+0x1a4e>
						{
							atmega_uart::tx_string_p(PSTR("a"));
    2a74:	8c eb       	ldi	r24, 0xBC	; 188
    2a76:	96 e0       	ldi	r25, 0x06	; 6
    2a78:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
							tx_u16_to_ascii(this_cyc);
    2a7c:	80 91 48 01 	lds	r24, 0x0148
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
							atmega_uart::tx_string_p(PSTR("=["));
    2a86:	89 eb       	ldi	r24, 0xB9	; 185
    2a88:	96 e0       	ldi	r25, 0x06	; 6
    2a8a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    2a8e:	1f c0       	rjmp	.+62     	; 0x2ace <__vector_11+0x1a8c>
						}
						else if(as.get_tx_mode() == TX_MODE_ASCII)//Print ASCII data.
    2a90:	83 e5       	ldi	r24, 0x53	; 83
    2a92:	91 e0       	ldi	r25, 0x01	; 1
    2a94:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2a98:	81 11       	cpse	r24, r1
    2a9a:	10 c0       	rjmp	.+32     	; 0x2abc <__vector_11+0x1a7a>
						{
							tx_u16_to_ascii(ARB_DATA);
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	96 e8       	ldi	r25, 0x86	; 134
    2aa0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    2aa4:	8c e2       	ldi	r24, 0x2C	; 44
    2aa6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
							tx_u16_to_ascii(this_cyc);
    2aaa:	80 91 48 01 	lds	r24, 0x0148
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
							atmega_uart::tx_byte(',');
    2ab4:	8c e2       	ldi	r24, 0x2C	; 44
    2ab6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2aba:	09 c0       	rjmp	.+18     	; 0x2ace <__vector_11+0x1a8c>
						}
						else//Print binary data.
						{
							atmega_uart::tx_word(ARB_DATA);
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	96 e8       	ldi	r25, 0x86	; 134
    2ac0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
							atmega_uart::tx_word(this_cyc);
    2ac4:	80 91 48 01 	lds	r24, 0x0148
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
						}
						this_cyc++;//Increment for next array.a_uart::tx_word(this_cyc);						
    2ace:	80 91 48 01 	lds	r24, 0x0148
    2ad2:	8f 5f       	subi	r24, 0xFF	; 255
    2ad4:	80 93 48 01 	sts	0x0148, r24
						
						break;
    2ad8:	19 c4       	rjmp	.+2098   	; 0x330c <__vector_11+0x22ca>
					}
				}
				else
				{
					//Kill some time.
					i2c_connect_ce();
    2ada:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
					i2c_connect_ce();
    2ade:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
					i2c_connect_ce();
    2ae2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
					i2c_connect_ce();
    2ae6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
					i2c_connect_ce();
    2aea:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
					i2c_connect_ce();
    2aee:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z14i2c_connect_cev>
					
					//Finish array.
					//Print MatLab data.
					if(as.get_tx_mode() == TX_MODE_MATLAB)
    2af2:	83 e5       	ldi	r24, 0x53	; 83
    2af4:	91 e0       	ldi	r25, 0x01	; 1
    2af6:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	29 f4       	brne	.+10     	; 0x2b08 <__vector_11+0x1ac6>
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    2afe:	84 eb       	ldi	r24, 0xB4	; 180
    2b00:	96 e0       	ldi	r25, 0x06	; 6
    2b02:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    2b06:	12 c0       	rjmp	.+36     	; 0x2b2c <__vector_11+0x1aea>
					//Print ASCII data.
					else if(as.get_tx_mode() == TX_MODE_ASCII)
    2b08:	83 e5       	ldi	r24, 0x53	; 83
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2b10:	81 11       	cpse	r24, r1
    2b12:	08 c0       	rjmp	.+16     	; 0x2b24 <__vector_11+0x1ae2>
					{
						tx_u16_to_ascii(END_BLOCK);
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	9f ef       	ldi	r25, 0xFF	; 255
    2b18:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    2b1c:	8c e2       	ldi	r24, 0x2C	; 44
    2b1e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2b22:	04 c0       	rjmp	.+8      	; 0x2b2c <__vector_11+0x1aea>
					}
					else//Print binary data.
					atmega_uart::tx_word(END_BLOCK);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	9f ef       	ldi	r25, 0xFF	; 255
    2b28:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
					
					i2c_disconnect_ce();//Disconnect counter electrode.
    2b2c:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z17i2c_disconnect_cev>
					write_dac(ZERO_VOLT);//Zero out voltage and return to idle.
    2b30:	8f ef       	ldi	r24, 0xFF	; 255
    2b32:	97 e0       	ldi	r25, 0x07	; 7
    2b34:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
					as.set_test_state(FOOTER);
    2b38:	62 e1       	ldi	r22, 0x12	; 18
    2b3a:	83 e5       	ldi	r24, 0x53	; 83
    2b3c:	91 e0       	ldi	r25, 0x01	; 1
    2b3e:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
					break;
    2b42:	e4 c3       	rjmp	.+1992   	; 0x330c <__vector_11+0x22ca>
				}
			}
			
			output = read_adc();//Get value from ADC.
    2b44:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_Z8read_adcv>
    2b48:	90 93 4a 01 	sts	0x014A, r25
    2b4c:	80 93 49 01 	sts	0x0149, r24
			
			//Print MatLab data.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    2b50:	83 e5       	ldi	r24, 0x53	; 83
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	99 f5       	brne	.+102    	; 0x2bc2 <__vector_11+0x1b80>
			{
				tx_u16_to_ascii(output);
    2b5c:	80 91 49 01 	lds	r24, 0x0149
    2b60:	90 91 4a 01 	lds	r25, 0x014A
    2b64:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    2b68:	8c e2       	ldi	r24, 0x2C	; 44
    2b6a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				
				//Indicate a new sample has been sent.
				samp_count++;
    2b6e:	80 91 4f 01 	lds	r24, 0x014F
    2b72:	90 91 50 01 	lds	r25, 0x0150
    2b76:	a0 91 51 01 	lds	r26, 0x0151
    2b7a:	b0 91 52 01 	lds	r27, 0x0152
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	6f 5f       	subi	r22, 0xFF	; 255
    2b84:	7f 4f       	sbci	r23, 0xFF	; 255
    2b86:	8f 4f       	sbci	r24, 0xFF	; 255
    2b88:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8a:	60 93 4f 01 	sts	0x014F, r22
    2b8e:	70 93 50 01 	sts	0x0150, r23
    2b92:	80 93 51 01 	sts	0x0151, r24
    2b96:	90 93 52 01 	sts	0x0152, r25
				
				//Start newline if 10 or more samples on this line.
				if(samp_count && !(samp_count % 10))
    2b9a:	61 15       	cp	r22, r1
    2b9c:	71 05       	cpc	r23, r1
    2b9e:	81 05       	cpc	r24, r1
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	29 f1       	breq	.+74     	; 0x2bee <__vector_11+0x1bac>
    2ba4:	2a e0       	ldi	r18, 0x0A	; 10
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    2bb0:	67 2b       	or	r22, r23
    2bb2:	68 2b       	or	r22, r24
    2bb4:	69 2b       	or	r22, r25
    2bb6:	d9 f4       	brne	.+54     	; 0x2bee <__vector_11+0x1bac>
				atmega_uart::tx_string_p(PSTR("...\r"));
    2bb8:	8f ea       	ldi	r24, 0xAF	; 175
    2bba:	96 e0       	ldi	r25, 0x06	; 6
    2bbc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    2bc0:	16 c0       	rjmp	.+44     	; 0x2bee <__vector_11+0x1bac>
			}
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    2bc2:	83 e5       	ldi	r24, 0x53	; 83
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2bca:	81 11       	cpse	r24, r1
    2bcc:	0a c0       	rjmp	.+20     	; 0x2be2 <__vector_11+0x1ba0>
			{
				tx_u16_to_ascii(output);
    2bce:	80 91 49 01 	lds	r24, 0x0149
    2bd2:	90 91 4a 01 	lds	r25, 0x014A
    2bd6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte(',');
    2bda:	8c e2       	ldi	r24, 0x2C	; 44
    2bdc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2be0:	06 c0       	rjmp	.+12     	; 0x2bee <__vector_11+0x1bac>
			}
			else//Print binary data.
			atmega_uart::tx_word(output);
    2be2:	80 91 49 01 	lds	r24, 0x0149
    2be6:	90 91 4a 01 	lds	r25, 0x014A
    2bea:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			
			ms_counter++;
    2bee:	80 91 7f 01 	lds	r24, 0x017F
    2bf2:	90 91 80 01 	lds	r25, 0x0180
    2bf6:	a0 91 81 01 	lds	r26, 0x0181
    2bfa:	b0 91 82 01 	lds	r27, 0x0182
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	a1 1d       	adc	r26, r1
    2c02:	b1 1d       	adc	r27, r1
    2c04:	80 93 7f 01 	sts	0x017F, r24
    2c08:	90 93 80 01 	sts	0x0180, r25
    2c0c:	a0 93 81 01 	sts	0x0181, r26
    2c10:	b0 93 82 01 	sts	0x0182, r27
		break;
    2c14:	7b c3       	rjmp	.+1782   	; 0x330c <__vector_11+0x22ca>
		
		case FOOTER:
			//Only do stuff if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    2c16:	83 e5       	ldi	r24, 0x53	; 83
    2c18:	91 e0       	ldi	r25, 0x01	; 1
    2c1a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <__vector_11+0x1be2>
    2c22:	b6 c2       	rjmp	.+1388   	; 0x3190 <__vector_11+0x214e>
			{				
				//Print deposition graph if it is active.
				if(as.get_dep_rec() && as.get_dep_enable())
    2c24:	83 e5       	ldi	r24, 0x53	; 83
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    2c2c:	88 23       	and	r24, r24
    2c2e:	31 f1       	breq	.+76     	; 0x2c7c <__vector_11+0x1c3a>
    2c30:	83 e5       	ldi	r24, 0x53	; 83
    2c32:	91 e0       	ldi	r25, 0x01	; 1
    2c34:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN8as_class14get_dep_enableEv>
    2c38:	88 23       	and	r24, r24
    2c3a:	01 f1       	breq	.+64     	; 0x2c7c <__vector_11+0x1c3a>
				{
					atmega_uart::tx_string_p(PSTR("d_ua=((d-2047)*(3.3/4096)/tia_r);\r"));
    2c3c:	8c e8       	ldi	r24, 0x8C	; 140
    2c3e:	96 e0       	ldi	r25, 0x06	; 6
    2c40:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("td=linspace(1,dep_t/1000,length(d_ua));\r"));
    2c44:	83 e6       	ldi	r24, 0x63	; 99
    2c46:	96 e0       	ldi	r25, 0x06	; 6
    2c48:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(1);\r"));
    2c4c:	87 e5       	ldi	r24, 0x57	; 87
    2c4e:	96 e0       	ldi	r25, 0x06	; 6
    2c50:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(td,d_ua);\r"));
    2c54:	87 e4       	ldi	r24, 0x47	; 71
    2c56:	96 e0       	ldi	r25, 0x06	; 6
    2c58:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    2c5c:	80 e3       	ldi	r24, 0x30	; 48
    2c5e:	96 e0       	ldi	r25, 0x06	; 6
    2c60:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Time (s)');\r"));
    2c64:	8b e1       	ldi	r24, 0x1B	; 27
    2c66:	96 e0       	ldi	r25, 0x06	; 6
    2c68:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Deposition Sequence');\r"));
    2c6c:	8c ef       	ldi	r24, 0xFC	; 252
    2c6e:	95 e0       	ldi	r25, 0x05	; 5
    2c70:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    2c74:	81 ef       	ldi	r24, 0xF1	; 241
    2c76:	95 e0       	ldi	r25, 0x05	; 5
    2c78:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Print quiet time graph if it is active.
				if(as.get_dep_rec() && as.get_dep_enable() && (as.get_quiet_time() > 0))
    2c7c:	83 e5       	ldi	r24, 0x53	; 83
    2c7e:	91 e0       	ldi	r25, 0x01	; 1
    2c80:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    2c84:	88 23       	and	r24, r24
    2c86:	71 f1       	breq	.+92     	; 0x2ce4 <__vector_11+0x1ca2>
    2c88:	83 e5       	ldi	r24, 0x53	; 83
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN8as_class14get_dep_enableEv>
    2c90:	88 23       	and	r24, r24
    2c92:	41 f1       	breq	.+80     	; 0x2ce4 <__vector_11+0x1ca2>
    2c94:	83 e5       	ldi	r24, 0x53	; 83
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN8as_class14get_quiet_timeEv>
    2c9c:	67 2b       	or	r22, r23
    2c9e:	68 2b       	or	r22, r24
    2ca0:	69 2b       	or	r22, r25
    2ca2:	01 f1       	breq	.+64     	; 0x2ce4 <__vector_11+0x1ca2>
				{
					atmega_uart::tx_string_p(PSTR("q_ua=((q-2047)*(3.3/4096)/tia_r);\r"));
    2ca4:	8e ec       	ldi	r24, 0xCE	; 206
    2ca6:	95 e0       	ldi	r25, 0x05	; 5
    2ca8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("tq=linspace(1,quiet_t/1000,length(q_ua));\r"));
    2cac:	83 ea       	ldi	r24, 0xA3	; 163
    2cae:	95 e0       	ldi	r25, 0x05	; 5
    2cb0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(2);\r"));
    2cb4:	87 e9       	ldi	r24, 0x97	; 151
    2cb6:	95 e0       	ldi	r25, 0x05	; 5
    2cb8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(tq,q_ua);\r"));
    2cbc:	87 e8       	ldi	r24, 0x87	; 135
    2cbe:	95 e0       	ldi	r25, 0x05	; 5
    2cc0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    2cc4:	80 e7       	ldi	r24, 0x70	; 112
    2cc6:	95 e0       	ldi	r25, 0x05	; 5
    2cc8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Time (s)');\r"));
    2ccc:	8b e5       	ldi	r24, 0x5B	; 91
    2cce:	95 e0       	ldi	r25, 0x05	; 5
    2cd0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Quiet Time Sequence');\r"));
    2cd4:	8c e3       	ldi	r24, 0x3C	; 60
    2cd6:	95 e0       	ldi	r25, 0x05	; 5
    2cd8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    2cdc:	81 e3       	ldi	r24, 0x31	; 49
    2cde:	95 e0       	ldi	r25, 0x05	; 5
    2ce0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Print linear sweep and cyclic graphs.
				if(as.get_test_type() == TEST_LIN)
    2ce4:	83 e5       	ldi	r24, 0x53	; 83
    2ce6:	91 e0       	ldi	r25, 0x01	; 1
    2ce8:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    2cec:	81 11       	cpse	r24, r1
    2cee:	d3 c0       	rjmp	.+422    	; 0x2e96 <__vector_11+0x1e54>
				{
				    for(uint16_t i = 1; i <= graph_cycles; i++)
    2cf0:	80 91 30 01 	lds	r24, 0x0130
    2cf4:	88 23       	and	r24, r24
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <__vector_11+0x1cb8>
    2cf8:	4d c0       	rjmp	.+154    	; 0x2d94 <__vector_11+0x1d52>
    2cfa:	c1 e0       	ldi	r28, 0x01	; 1
    2cfc:	d0 e0       	ldi	r29, 0x00	; 0
				    {
					    //First, convert all values to microamps.
					    atmega_uart::tx_string_p(PSTR("s_ua"));
    2cfe:	8c e2       	ldi	r24, 0x2C	; 44
    2d00:	95 e0       	ldi	r25, 0x05	; 5
    2d02:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    tx_u16_to_ascii(i);
    2d06:	ce 01       	movw	r24, r28
    2d08:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					    atmega_uart::tx_string_p(PSTR("=((s"));
    2d0c:	87 e2       	ldi	r24, 0x27	; 39
    2d0e:	95 e0       	ldi	r25, 0x05	; 5
    2d10:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    tx_u16_to_ascii(i);
    2d14:	ce 01       	movw	r24, r28
    2d16:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					
					    //Only have positive and negative values for linear tests.
						atmega_uart::tx_string_p(PSTR("-2047"));
    2d1a:	81 e2       	ldi	r24, 0x21	; 33
    2d1c:	95 e0       	ldi	r25, 0x05	; 5
    2d1e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/tia_r);\r"));
    2d22:	8b e0       	ldi	r24, 0x0B	; 11
    2d24:	95 e0       	ldi	r25, 0x05	; 5
    2d26:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					    //Next, create time arrays.
					    atmega_uart::tx_byte('t');
    2d2a:	84 e7       	ldi	r24, 0x74	; 116
    2d2c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					    tx_u16_to_ascii(i);
    2d30:	ce 01       	movw	r24, r28
    2d32:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					    atmega_uart::tx_string_p(PSTR("=linspace("));
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	95 e0       	ldi	r25, 0x05	; 5
    2d3a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						atmega_uart::tx_string_p(PSTR("sweep_vs/1000,sweep_ve/1000"));
    2d3e:	84 ee       	ldi	r24, 0xE4	; 228
    2d40:	94 e0       	ldi	r25, 0x04	; 4
    2d42:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    atmega_uart::tx_string_p(PSTR(",length(s_ua"));
    2d46:	87 ed       	ldi	r24, 0xD7	; 215
    2d48:	94 e0       	ldi	r25, 0x04	; 4
    2d4a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    tx_u16_to_ascii(i);
    2d4e:	ce 01       	movw	r24, r28
    2d50:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					    atmega_uart::tx_string_p(PSTR("));\r"));
    2d54:	82 ed       	ldi	r24, 0xD2	; 210
    2d56:	94 e0       	ldi	r25, 0x04	; 4
    2d58:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					    //Then, time reverse every other array.
					    if(!(i % 2))
    2d5c:	c0 fd       	sbrc	r28, 0
    2d5e:	12 c0       	rjmp	.+36     	; 0x2d84 <__vector_11+0x1d42>
					    {
						    atmega_uart::tx_string_p(PSTR("s_ua"));
    2d60:	8d ec       	ldi	r24, 0xCD	; 205
    2d62:	94 e0       	ldi	r25, 0x04	; 4
    2d64:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						    tx_u16_to_ascii(i);
    2d68:	ce 01       	movw	r24, r28
    2d6a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						    atmega_uart::tx_string_p(PSTR("=fliplr(s_ua"));
    2d6e:	80 ec       	ldi	r24, 0xC0	; 192
    2d70:	94 e0       	ldi	r25, 0x04	; 4
    2d72:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						    tx_u16_to_ascii(i);
    2d76:	ce 01       	movw	r24, r28
    2d78:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						    atmega_uart::tx_string_p(PSTR(");\r"));
    2d7c:	8c eb       	ldi	r24, 0xBC	; 188
    2d7e:	94 e0       	ldi	r25, 0x04	; 4
    2d80:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				
				//Print linear sweep and cyclic graphs.
				if(as.get_test_type() == TEST_LIN)
				{
				    for(uint16_t i = 1; i <= graph_cycles; i++)
    2d84:	21 96       	adiw	r28, 0x01	; 1
    2d86:	80 91 30 01 	lds	r24, 0x0130
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	8c 17       	cp	r24, r28
    2d8e:	9d 07       	cpc	r25, r29
    2d90:	08 f0       	brcs	.+2      	; 0x2d94 <__vector_11+0x1d52>
    2d92:	b5 cf       	rjmp	.-150    	; 0x2cfe <__vector_11+0x1cbc>
						    atmega_uart::tx_string_p(PSTR(");\r"));
					    }
				    }
				
					//Generate plots.
				    atmega_uart::tx_string_p(PSTR("figure(3);\r"));
    2d94:	80 eb       	ldi	r24, 0xB0	; 176
    2d96:	94 e0       	ldi	r25, 0x04	; 4
    2d98:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				    atmega_uart::tx_string_p(PSTR("plot("));
    2d9c:	8a ea       	ldi	r24, 0xAA	; 170
    2d9e:	94 e0       	ldi	r25, 0x04	; 4
    2da0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
				    for(uint16_t i = 1; i <= graph_cycles; i++)
    2da4:	80 91 30 01 	lds	r24, 0x0130
    2da8:	88 23       	and	r24, r24
    2daa:	d9 f1       	breq	.+118    	; 0x2e22 <__vector_11+0x1de0>
    2dac:	c1 e0       	ldi	r28, 0x01	; 1
    2dae:	d0 e0       	ldi	r29, 0x00	; 0
				    {
					    atmega_uart::tx_byte('t');
    2db0:	84 e7       	ldi	r24, 0x74	; 116
    2db2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					    tx_u16_to_ascii(i);
    2db6:	ce 01       	movw	r24, r28
    2db8:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					    atmega_uart::tx_byte(',');
    2dbc:	8c e2       	ldi	r24, 0x2C	; 44
    2dbe:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					    atmega_uart::tx_string_p(PSTR("s_ua"));
    2dc2:	85 ea       	ldi	r24, 0xA5	; 165
    2dc4:	94 e0       	ldi	r25, 0x04	; 4
    2dc6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    tx_u16_to_ascii(i);
    2dca:	ce 01       	movw	r24, r28
    2dcc:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					    if(i < graph_cycles)
    2dd0:	80 91 30 01 	lds	r24, 0x0130
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	c8 17       	cp	r28, r24
    2dd8:	d9 07       	cpc	r29, r25
    2dda:	18 f4       	brcc	.+6      	; 0x2de2 <__vector_11+0x1da0>
						    atmega_uart::tx_byte(',');
    2ddc:	8c e2       	ldi	r24, 0x2C	; 44
    2dde:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					    if(i != 0 && !(i % 5))
    2de2:	20 97       	sbiw	r28, 0x00	; 0
    2de4:	b9 f0       	breq	.+46     	; 0x2e14 <__vector_11+0x1dd2>
    2de6:	9e 01       	movw	r18, r28
    2de8:	ad ec       	ldi	r26, 0xCD	; 205
    2dea:	bc ec       	ldi	r27, 0xCC	; 204
    2dec:	0e 94 28 3c 	call	0x7850	; 0x7850 <__umulhisi3>
    2df0:	96 95       	lsr	r25
    2df2:	87 95       	ror	r24
    2df4:	96 95       	lsr	r25
    2df6:	87 95       	ror	r24
    2df8:	9c 01       	movw	r18, r24
    2dfa:	22 0f       	add	r18, r18
    2dfc:	33 1f       	adc	r19, r19
    2dfe:	22 0f       	add	r18, r18
    2e00:	33 1f       	adc	r19, r19
    2e02:	82 0f       	add	r24, r18
    2e04:	93 1f       	adc	r25, r19
    2e06:	c8 17       	cp	r28, r24
    2e08:	d9 07       	cpc	r29, r25
    2e0a:	21 f4       	brne	.+8      	; 0x2e14 <__vector_11+0x1dd2>
						    atmega_uart::tx_string_p(PSTR("...\r"));
    2e0c:	80 ea       	ldi	r24, 0xA0	; 160
    2e0e:	94 e0       	ldi	r25, 0x04	; 4
    2e10:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				
					//Generate plots.
				    atmega_uart::tx_string_p(PSTR("figure(3);\r"));
				    atmega_uart::tx_string_p(PSTR("plot("));
					
				    for(uint16_t i = 1; i <= graph_cycles; i++)
    2e14:	21 96       	adiw	r28, 0x01	; 1
    2e16:	80 91 30 01 	lds	r24, 0x0130
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	8c 17       	cp	r24, r28
    2e1e:	9d 07       	cpc	r25, r29
    2e20:	38 f6       	brcc	.-114    	; 0x2db0 <__vector_11+0x1d6e>
					    if(i < graph_cycles)
						    atmega_uart::tx_byte(',');
					    if(i != 0 && !(i % 5))
						    atmega_uart::tx_string_p(PSTR("...\r"));
				    }
				    atmega_uart::tx_string_p(PSTR(");\r"));
    2e22:	8c e9       	ldi	r24, 0x9C	; 156
    2e24:	94 e0       	ldi	r25, 0x04	; 4
    2e26:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				
				    atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    2e2a:	85 e8       	ldi	r24, 0x85	; 133
    2e2c:	94 e0       	ldi	r25, 0x04	; 4
    2e2e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				    atmega_uart::tx_string_p(PSTR("xlabel('Volts(V)');\r"));
    2e32:	80 e7       	ldi	r24, 0x70	; 112
    2e34:	94 e0       	ldi	r25, 0x04	; 4
    2e36:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				
				    //Customize title of graph.
				    atmega_uart::tx_string_p(PSTR("title('"));
    2e3a:	88 e6       	ldi	r24, 0x68	; 104
    2e3c:	94 e0       	ldi	r25, 0x04	; 4
    2e3e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				    if(graph_cycles > 1)
    2e42:	80 91 30 01 	lds	r24, 0x0130
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	20 f0       	brcs	.+8      	; 0x2e52 <__vector_11+0x1e10>
					    atmega_uart::tx_string_p(PSTR("Cyclic "));
    2e4a:	80 e6       	ldi	r24, 0x60	; 96
    2e4c:	94 e0       	ldi	r25, 0x04	; 4
    2e4e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				
					atmega_uart::tx_string_p(PSTR("Linear Sweep"));
    2e52:	83 e5       	ldi	r24, 0x53	; 83
    2e54:	94 e0       	ldi	r25, 0x04	; 4
    2e56:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				
				    if(graph_cycles > 1)
    2e5a:	80 91 30 01 	lds	r24, 0x0130
    2e5e:	82 30       	cpi	r24, 0x02	; 2
    2e60:	90 f0       	brcs	.+36     	; 0x2e86 <__vector_11+0x1e44>
				    {
					    atmega_uart::tx_string_p(PSTR(" ("));
    2e62:	80 e5       	ldi	r24, 0x50	; 80
    2e64:	94 e0       	ldi	r25, 0x04	; 4
    2e66:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    tx_u16_to_ascii(graph_cycles / 2);
    2e6a:	80 91 30 01 	lds	r24, 0x0130
    2e6e:	86 95       	lsr	r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
					    atmega_uart::tx_string_p(PSTR(" "));
    2e76:	8e e4       	ldi	r24, 0x4E	; 78
    2e78:	94 e0       	ldi	r25, 0x04	; 4
    2e7a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					    atmega_uart::tx_string_p(PSTR("Cycles)"));
    2e7e:	86 e4       	ldi	r24, 0x46	; 70
    2e80:	94 e0       	ldi	r25, 0x04	; 4
    2e82:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				    }
					
				    atmega_uart::tx_string_p(PSTR("')\r"));				
    2e86:	82 e4       	ldi	r24, 0x42	; 66
    2e88:	94 e0       	ldi	r25, 0x04	; 4
    2e8a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				    atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    2e8e:	87 e3       	ldi	r24, 0x37	; 55
    2e90:	94 e0       	ldi	r25, 0x04	; 4
    2e92:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			    }
								
				//Print differential pulse graphs.
				if(as.get_test_type() == TEST_DIF)
    2e96:	83 e5       	ldi	r24, 0x53	; 83
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <__vector_11+0x1e62>
    2ea2:	06 c1       	rjmp	.+524    	; 0x30b0 <__vector_11+0x206e>
				{
					//Convert ADC values to microamps.
					for(uint16_t i = 1; i <= this_cyc; i++)
    2ea4:	80 91 48 01 	lds	r24, 0x0148
    2ea8:	88 23       	and	r24, r24
    2eaa:	a9 f1       	breq	.+106    	; 0x2f16 <__vector_11+0x1ed4>
    2eac:	c1 e0       	ldi	r28, 0x01	; 1
    2eae:	d0 e0       	ldi	r29, 0x00	; 0
					{
						atmega_uart::tx_string_p(PSTR("s_pr"));
    2eb0:	82 e3       	ldi	r24, 0x32	; 50
    2eb2:	94 e0       	ldi	r25, 0x04	; 4
    2eb4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2eb8:	ce 01       	movw	r24, r28
    2eba:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("=((pr"));
    2ebe:	8c e2       	ldi	r24, 0x2C	; 44
    2ec0:	94 e0       	ldi	r25, 0x04	; 4
    2ec2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("-2047"));
    2ecc:	86 e2       	ldi	r24, 0x26	; 38
    2ece:	94 e0       	ldi	r25, 0x04	; 4
    2ed0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/tia_r);\r"));
    2ed4:	80 e1       	ldi	r24, 0x10	; 16
    2ed6:	94 e0       	ldi	r25, 0x04	; 4
    2ed8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						
						atmega_uart::tx_string_p(PSTR("s_pl"));
    2edc:	8b e0       	ldi	r24, 0x0B	; 11
    2ede:	94 e0       	ldi	r25, 0x04	; 4
    2ee0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("=((pl"));
    2eea:	85 e0       	ldi	r24, 0x05	; 5
    2eec:	94 e0       	ldi	r25, 0x04	; 4
    2eee:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("-2047"));
    2ef8:	8f ef       	ldi	r24, 0xFF	; 255
    2efa:	93 e0       	ldi	r25, 0x03	; 3
    2efc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/tia_r);\r"));
    2f00:	89 ee       	ldi	r24, 0xE9	; 233
    2f02:	93 e0       	ldi	r25, 0x03	; 3
    2f04:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
								
				//Print differential pulse graphs.
				if(as.get_test_type() == TEST_DIF)
				{
					//Convert ADC values to microamps.
					for(uint16_t i = 1; i <= this_cyc; i++)
    2f08:	21 96       	adiw	r28, 0x01	; 1
    2f0a:	80 91 48 01 	lds	r24, 0x0148
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	8c 17       	cp	r24, r28
    2f12:	9d 07       	cpc	r25, r29
    2f14:	68 f6       	brcc	.-102    	; 0x2eb0 <__vector_11+0x1e6e>
						tx_u16_to_ascii(i);
						atmega_uart::tx_string_p(PSTR("-2047"));
						atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/tia_r);\r"));
					}
					
					atmega_uart::tx_string_p(PSTR("\rdw = dif_win-1;\r"));
    2f16:	87 ed       	ldi	r24, 0xD7	; 215
    2f18:	93 e0       	ldi	r25, 0x03	; 3
    2f1a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Create differential current array.
					atmega_uart::tx_string_p(PSTR("\rip=["));
    2f1e:	81 ed       	ldi	r24, 0xD1	; 209
    2f20:	93 e0       	ldi	r25, 0x03	; 3
    2f22:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					for(uint16_t i = 1; i <= this_cyc; i++)
    2f26:	80 91 48 01 	lds	r24, 0x0148
    2f2a:	88 23       	and	r24, r24
    2f2c:	b9 f1       	breq	.+110    	; 0x2f9c <__vector_11+0x1f5a>
    2f2e:	c1 e0       	ldi	r28, 0x01	; 1
    2f30:	d0 e0       	ldi	r29, 0x00	; 0
					{
						atmega_uart::tx_string_p(PSTR("mean(s_pl"));
    2f32:	87 ec       	ldi	r24, 0xC7	; 199
    2f34:	93 e0       	ldi	r25, 0x03	; 3
    2f36:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("(length(s_pl"));
    2f40:	8a eb       	ldi	r24, 0xBA	; 186
    2f42:	93 e0       	ldi	r25, 0x03	; 3
    2f44:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2f48:	ce 01       	movw	r24, r28
    2f4a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR(")-dw:1:length(s_pl"));
    2f4e:	87 ea       	ldi	r24, 0xA7	; 167
    2f50:	93 e0       	ldi	r25, 0x03	; 3
    2f52:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2f56:	ce 01       	movw	r24, r28
    2f58:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR(")))-...\rmean(s_pr"));
    2f5c:	85 e9       	ldi	r24, 0x95	; 149
    2f5e:	93 e0       	ldi	r25, 0x03	; 3
    2f60:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2f64:	ce 01       	movw	r24, r28
    2f66:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("(length(s_pr"));
    2f6a:	88 e8       	ldi	r24, 0x88	; 136
    2f6c:	93 e0       	ldi	r25, 0x03	; 3
    2f6e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2f72:	ce 01       	movw	r24, r28
    2f74:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR(")-dw:1:length(s_pr"));
    2f78:	85 e7       	ldi	r24, 0x75	; 117
    2f7a:	93 e0       	ldi	r25, 0x03	; 3
    2f7c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    2f80:	ce 01       	movw	r24, r28
    2f82:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("))),...\r"));
    2f86:	8c e6       	ldi	r24, 0x6C	; 108
    2f88:	93 e0       	ldi	r25, 0x03	; 3
    2f8a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("\rdw = dif_win-1;\r"));
					
					//Create differential current array.
					atmega_uart::tx_string_p(PSTR("\rip=["));
					
					for(uint16_t i = 1; i <= this_cyc; i++)
    2f8e:	21 96       	adiw	r28, 0x01	; 1
    2f90:	80 91 48 01 	lds	r24, 0x0148
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	8c 17       	cp	r24, r28
    2f98:	9d 07       	cpc	r25, r29
    2f9a:	58 f6       	brcc	.-106    	; 0x2f32 <__vector_11+0x1ef0>
						tx_u16_to_ascii(i);
						atmega_uart::tx_string_p(PSTR(")-dw:1:length(s_pr"));
						tx_u16_to_ascii(i);
						atmega_uart::tx_string_p(PSTR("))),...\r"));
					}
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    2f9c:	87 e6       	ldi	r24, 0x67	; 103
    2f9e:	93 e0       	ldi	r25, 0x03	; 3
    2fa0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Create voltage array.
					atmega_uart::tx_string_p(PSTR("i=dif_vs;\rj=1;\r\rwhile i"));
    2fa4:	8f e4       	ldi	r24, 0x4F	; 79
    2fa6:	93 e0       	ldi	r25, 0x03	; 3
    2fa8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					slope > 0 ? atmega_uart::tx_byte('<') : atmega_uart::tx_byte('>');
    2fac:	80 91 3e 01 	lds	r24, 0x013E
    2fb0:	18 16       	cp	r1, r24
    2fb2:	24 f4       	brge	.+8      	; 0x2fbc <__vector_11+0x1f7a>
    2fb4:	8c e3       	ldi	r24, 0x3C	; 60
    2fb6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2fba:	03 c0       	rjmp	.+6      	; 0x2fc2 <__vector_11+0x1f80>
    2fbc:	8e e3       	ldi	r24, 0x3E	; 62
    2fbe:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					atmega_uart::tx_string_p(PSTR("=dif_ve\rz(j)=i/1000;\ri=i"));
    2fc2:	86 e3       	ldi	r24, 0x36	; 54
    2fc4:	93 e0       	ldi	r25, 0x03	; 3
    2fc6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					slope > 0 ? atmega_uart::tx_byte('+') : atmega_uart::tx_byte('-');
    2fca:	80 91 3e 01 	lds	r24, 0x013E
    2fce:	18 16       	cp	r1, r24
    2fd0:	24 f4       	brge	.+8      	; 0x2fda <__vector_11+0x1f98>
    2fd2:	8b e2       	ldi	r24, 0x2B	; 43
    2fd4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <__vector_11+0x1f9e>
    2fda:	8d e2       	ldi	r24, 0x2D	; 45
    2fdc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					atmega_uart::tx_string_p(PSTR("dif_vi;\rj=j+1;\rend\r\r"));
    2fe0:	81 e2       	ldi	r24, 0x21	; 33
    2fe2:	93 e0       	ldi	r25, 0x03	; 3
    2fe4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Generate raw current vs. samples plot.
					atmega_uart::tx_string_p(PSTR("p=["));
    2fe8:	8d e1       	ldi	r24, 0x1D	; 29
    2fea:	93 e0       	ldi	r25, 0x03	; 3
    2fec:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					for(uint16_t i = 1; i <= this_cyc; i++)
    2ff0:	80 91 48 01 	lds	r24, 0x0148
    2ff4:	88 23       	and	r24, r24
    2ff6:	41 f1       	breq	.+80     	; 0x3048 <__vector_11+0x2006>
    2ff8:	c1 e0       	ldi	r28, 0x01	; 1
    2ffa:	d0 e0       	ldi	r29, 0x00	; 0
					{
						//Concatenate all arrays.
						atmega_uart::tx_string_p(PSTR("s_pr"));
    2ffc:	88 e1       	ldi	r24, 0x18	; 24
    2ffe:	93 e0       	ldi	r25, 0x03	; 3
    3000:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    3004:	ce 01       	movw	r24, r28
    3006:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    300a:	8c e2       	ldi	r24, 0x2C	; 44
    300c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
						atmega_uart::tx_string_p(PSTR("s_pl"));
    3010:	83 e1       	ldi	r24, 0x13	; 19
    3012:	93 e0       	ldi	r25, 0x03	; 3
    3014:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    3018:	ce 01       	movw	r24, r28
    301a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    301e:	8c e2       	ldi	r24, 0x2C	; 44
    3020:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
						
						if(i != 0 && !(i % 4))
    3024:	20 97       	sbiw	r28, 0x00	; 0
    3026:	49 f0       	breq	.+18     	; 0x303a <__vector_11+0x1ff8>
    3028:	ce 01       	movw	r24, r28
    302a:	83 70       	andi	r24, 0x03	; 3
    302c:	99 27       	eor	r25, r25
    302e:	89 2b       	or	r24, r25
    3030:	21 f4       	brne	.+8      	; 0x303a <__vector_11+0x1ff8>
						atmega_uart::tx_string_p(PSTR("...\r"));
    3032:	8e e0       	ldi	r24, 0x0E	; 14
    3034:	93 e0       	ldi	r25, 0x03	; 3
    3036:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("dif_vi;\rj=j+1;\rend\r\r"));
					
					//Generate raw current vs. samples plot.
					atmega_uart::tx_string_p(PSTR("p=["));
					
					for(uint16_t i = 1; i <= this_cyc; i++)
    303a:	21 96       	adiw	r28, 0x01	; 1
    303c:	80 91 48 01 	lds	r24, 0x0148
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	8c 17       	cp	r24, r28
    3044:	9d 07       	cpc	r25, r29
    3046:	d0 f6       	brcc	.-76     	; 0x2ffc <__vector_11+0x1fba>
						if(i != 0 && !(i % 4))
						atmega_uart::tx_string_p(PSTR("...\r"));
					}
					
					//Display current vs. samples plot.
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    3048:	89 e0       	ldi	r24, 0x09	; 9
    304a:	93 e0       	ldi	r25, 0x03	; 3
    304c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(3);\r"));
    3050:	8d ef       	ldi	r24, 0xFD	; 253
    3052:	92 e0       	ldi	r25, 0x02	; 2
    3054:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(p);\r"));
    3058:	83 ef       	ldi	r24, 0xF3	; 243
    305a:	92 e0       	ldi	r25, 0x02	; 2
    305c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    3060:	8c ed       	ldi	r24, 0xDC	; 220
    3062:	92 e0       	ldi	r25, 0x02	; 2
    3064:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Samples');\r"));
    3068:	88 ec       	ldi	r24, 0xC8	; 200
    306a:	92 e0       	ldi	r25, 0x02	; 2
    306c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Raw Current vs. Samples');\r"));
    3070:	85 ea       	ldi	r24, 0xA5	; 165
    3072:	92 e0       	ldi	r25, 0x02	; 2
    3074:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    3078:	8a e9       	ldi	r24, 0x9A	; 154
    307a:	92 e0       	ldi	r25, 0x02	; 2
    307c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					//Display current vs. voltage plot.
					atmega_uart::tx_string_p(PSTR("figure(4);\r"));
    3080:	8e e8       	ldi	r24, 0x8E	; 142
    3082:	92 e0       	ldi	r25, 0x02	; 2
    3084:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(z, ip);\r"));
    3088:	80 e8       	ldi	r24, 0x80	; 128
    308a:	92 e0       	ldi	r25, 0x02	; 2
    308c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    3090:	89 e6       	ldi	r24, 0x69	; 105
    3092:	92 e0       	ldi	r25, 0x02	; 2
    3094:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Volts(V)');\r"));
    3098:	84 e5       	ldi	r24, 0x54	; 84
    309a:	92 e0       	ldi	r25, 0x02	; 2
    309c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Differential Pulse');\r"));
    30a0:	86 e3       	ldi	r24, 0x36	; 54
    30a2:	92 e0       	ldi	r25, 0x02	; 2
    30a4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r"));
    30a8:	8c e2       	ldi	r24, 0x2C	; 44
    30aa:	92 e0       	ldi	r25, 0x02	; 2
    30ac:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				}
				//Print differential pulse graphs.
				if(as.get_test_type() == TEST_ARB)
    30b0:	83 e5       	ldi	r24, 0x53	; 83
    30b2:	91 e0       	ldi	r25, 0x01	; 1
    30b4:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN8as_class13get_test_typeEv>
    30b8:	82 30       	cpi	r24, 0x02	; 2
    30ba:	09 f0       	breq	.+2      	; 0x30be <__vector_11+0x207c>
    30bc:	7b c0       	rjmp	.+246    	; 0x31b4 <__vector_11+0x2172>
				{
					this_cyc--;
    30be:	80 91 48 01 	lds	r24, 0x0148
    30c2:	81 50       	subi	r24, 0x01	; 1
    30c4:	80 93 48 01 	sts	0x0148, r24
					//Convert ADC values to microamps.
					for(uint16_t i = 1; i <= this_cyc; i++)
    30c8:	88 23       	and	r24, r24
    30ca:	f9 f0       	breq	.+62     	; 0x310a <__vector_11+0x20c8>
    30cc:	c1 e0       	ldi	r28, 0x01	; 1
    30ce:	d0 e0       	ldi	r29, 0x00	; 0
					{
						atmega_uart::tx_string_p(PSTR("s_a"));
    30d0:	88 e2       	ldi	r24, 0x28	; 40
    30d2:	92 e0       	ldi	r25, 0x02	; 2
    30d4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    30d8:	ce 01       	movw	r24, r28
    30da:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("=((a"));
    30de:	83 e2       	ldi	r24, 0x23	; 35
    30e0:	92 e0       	ldi	r25, 0x02	; 2
    30e2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    30e6:	ce 01       	movw	r24, r28
    30e8:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_string_p(PSTR("-2047"));
    30ec:	8d e1       	ldi	r24, 0x1D	; 29
    30ee:	92 e0       	ldi	r25, 0x02	; 2
    30f0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/tia_r);\r"));
    30f4:	87 e0       	ldi	r24, 0x07	; 7
    30f6:	92 e0       	ldi	r25, 0x02	; 2
    30f8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				//Print differential pulse graphs.
				if(as.get_test_type() == TEST_ARB)
				{
					this_cyc--;
					//Convert ADC values to microamps.
					for(uint16_t i = 1; i <= this_cyc; i++)
    30fc:	21 96       	adiw	r28, 0x01	; 1
    30fe:	80 91 48 01 	lds	r24, 0x0148
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	8c 17       	cp	r24, r28
    3106:	9d 07       	cpc	r25, r29
    3108:	18 f7       	brcc	.-58     	; 0x30d0 <__vector_11+0x208e>
						atmega_uart::tx_string_p(PSTR("-2047"));
						atmega_uart::tx_string_p(PSTR(")*(3.3/4096)/tia_r);\r"));
					}
					
					//Generate raw current vs. samples plot.
					atmega_uart::tx_string_p(PSTR("p=["));
    310a:	83 e0       	ldi	r24, 0x03	; 3
    310c:	92 e0       	ldi	r25, 0x02	; 2
    310e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					
					for(uint16_t i = 1; i <= this_cyc; i++)
    3112:	80 91 48 01 	lds	r24, 0x0148
    3116:	88 23       	and	r24, r24
    3118:	f1 f0       	breq	.+60     	; 0x3156 <__vector_11+0x2114>
    311a:	c1 e0       	ldi	r28, 0x01	; 1
    311c:	d0 e0       	ldi	r29, 0x00	; 0
					{
						//Concatenate all arrays.
						atmega_uart::tx_string_p(PSTR("s_a"));
    311e:	8f ef       	ldi	r24, 0xFF	; 255
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
						tx_u16_to_ascii(i);
    3126:	ce 01       	movw	r24, r28
    3128:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
						atmega_uart::tx_byte(',');
    312c:	8c e2       	ldi	r24, 0x2C	; 44
    312e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
						
						if(i != 0 && !(i % 4))
    3132:	20 97       	sbiw	r28, 0x00	; 0
    3134:	49 f0       	breq	.+18     	; 0x3148 <__vector_11+0x2106>
    3136:	ce 01       	movw	r24, r28
    3138:	83 70       	andi	r24, 0x03	; 3
    313a:	99 27       	eor	r25, r25
    313c:	89 2b       	or	r24, r25
    313e:	21 f4       	brne	.+8      	; 0x3148 <__vector_11+0x2106>
						atmega_uart::tx_string_p(PSTR("...\r"));
    3140:	8a ef       	ldi	r24, 0xFA	; 250
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					}
					
					//Generate raw current vs. samples plot.
					atmega_uart::tx_string_p(PSTR("p=["));
					
					for(uint16_t i = 1; i <= this_cyc; i++)
    3148:	21 96       	adiw	r28, 0x01	; 1
    314a:	80 91 48 01 	lds	r24, 0x0148
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	8c 17       	cp	r24, r28
    3152:	9d 07       	cpc	r25, r29
    3154:	20 f7       	brcc	.-56     	; 0x311e <__vector_11+0x20dc>
						if(i != 0 && !(i % 4))
						atmega_uart::tx_string_p(PSTR("...\r"));
					}
					
					//Display current vs. samples plot.
					atmega_uart::tx_string_p(PSTR("];\r\r"));
    3156:	85 ef       	ldi	r24, 0xF5	; 245
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("figure(3);\r"));
    315e:	89 ee       	ldi	r24, 0xE9	; 233
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("plot(p);\r"));
    3166:	8f ed       	ldi	r24, 0xDF	; 223
    3168:	91 e0       	ldi	r25, 0x01	; 1
    316a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("ylabel('Current(A)');\r"));
    316e:	88 ec       	ldi	r24, 0xC8	; 200
    3170:	91 e0       	ldi	r25, 0x01	; 1
    3172:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("xlabel('Samples');\r"));
    3176:	84 eb       	ldi	r24, 0xB4	; 180
    3178:	91 e0       	ldi	r25, 0x01	; 1
    317a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("title('Raw Current vs. Samples');\r"));
    317e:	81 e9       	ldi	r24, 0x91	; 145
    3180:	91 e0       	ldi	r25, 0x01	; 1
    3182:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
					atmega_uart::tx_string_p(PSTR("grid on;\r\r"));
    3186:	86 e8       	ldi	r24, 0x86	; 134
    3188:	91 e0       	ldi	r25, 0x01	; 1
    318a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    318e:	12 c0       	rjmp	.+36     	; 0x31b4 <__vector_11+0x2172>
				}
			}
					
			//Indicate end of test in any other mode.
			//Print ASCII data.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    3190:	83 e5       	ldi	r24, 0x53	; 83
    3192:	91 e0       	ldi	r25, 0x01	; 1
    3194:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    3198:	81 11       	cpse	r24, r1
    319a:	08 c0       	rjmp	.+16     	; 0x31ac <__vector_11+0x216a>
			{
				tx_u16_to_ascii(END_TEST);
    319c:	80 ef       	ldi	r24, 0xF0	; 240
    319e:	9f ef       	ldi	r25, 0xFF	; 255
    31a0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
				atmega_uart::tx_byte('\r');
    31a4:	8d e0       	ldi	r24, 0x0D	; 13
    31a6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    31aa:	04 c0       	rjmp	.+8      	; 0x31b4 <__vector_11+0x2172>
			}
			//Print binary data.
			else
				atmega_uart::tx_word(END_TEST);
    31ac:	80 ef       	ldi	r24, 0xF0	; 240
    31ae:	9f ef       	ldi	r25, 0xFF	; 255
    31b0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			
			as.set_test_state(IDLE);
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	83 e5       	ldi	r24, 0x53	; 83
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		break;
    31be:	a6 c0       	rjmp	.+332    	; 0x330c <__vector_11+0x22ca>
		
		case ABORT:
			//Print message if in MatLab mode.
			if(as.get_tx_mode() == TX_MODE_MATLAB)
    31c0:	83 e5       	ldi	r24, 0x53	; 83
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	29 f4       	brne	.+10     	; 0x31d6 <__vector_11+0x2194>
			{
				atmega_uart::tx_string_p(PSTR("Test Aborted\r"));
    31cc:	88 e7       	ldi	r24, 0x78	; 120
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <__vector_11+0x21b2>
			}
			//Print ASCII stream code.
			else if(as.get_tx_mode() == TX_MODE_ASCII)
    31d6:	83 e5       	ldi	r24, 0x53	; 83
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    31de:	81 11       	cpse	r24, r1
    31e0:	05 c0       	rjmp	.+10     	; 0x31ec <__vector_11+0x21aa>
			{
				tx_u16_to_ascii(TEST_ABORT);
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 ef       	ldi	r25, 0xF0	; 240
    31e6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
    31ea:	04 c0       	rjmp	.+8      	; 0x31f4 <__vector_11+0x21b2>
			}
			//Print binary stream code.	
			else
			{
				atmega_uart::tx_word(TEST_ABORT);
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	90 ef       	ldi	r25, 0xF0	; 240
    31f0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			}
			
		default://Unrecognized state or abort.
			//Disconnect counter electrode.
			i2c_disconnect_ce();
    31f4:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z17i2c_disconnect_cev>
			//Zero out voltage and return to idle.
			write_dac(ZERO_VOLT);
    31f8:	8f ef       	ldi	r24, 0xFF	; 255
    31fa:	97 e0       	ldi	r25, 0x07	; 7
    31fc:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
			as.set_test_state(IDLE);
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	83 e5       	ldi	r24, 0x53	; 83
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		break;
    320a:	80 c0       	rjmp	.+256    	; 0x330c <__vector_11+0x22ca>
					atmega_uart::tx_word(this_cyc);
				}
			}
			else
			{
				i2c_disconnect_ce();	//Disconnect counter electrode.
    320c:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z17i2c_disconnect_cev>
				write_dac(ZERO_VOLT);	//Zero out voltage and return to idle.
    3210:	8f ef       	ldi	r24, 0xFF	; 255
    3212:	97 e0       	ldi	r25, 0x07	; 7
    3214:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
				
				//Determine how many cycles need to be graphed.
				if(as.get_sweep_cyclic())
    3218:	83 e5       	ldi	r24, 0x53	; 83
    321a:	91 e0       	ldi	r25, 0x01	; 1
    321c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN8as_class16get_sweep_cyclicEv>
    3220:	81 11       	cpse	r24, r1
    3222:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__vector_11+0xb20>
    3226:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_11+0xb2a>
			this_cyc++;		//Next cycle.
			
			//If cyclic, do second half.
			if(as.get_sweep_cyclic() && (this_cyc <= tot_cyc))
			{
				slope *= -1;//Change slope.
    322a:	80 91 3e 01 	lds	r24, 0x013E
    322e:	81 95       	neg	r24
    3230:	80 93 3e 01 	sts	0x013E, r24
			
				//Swap start and end voltages.
				temp = sv;
    3234:	80 91 43 01 	lds	r24, 0x0143
    3238:	90 91 44 01 	lds	r25, 0x0144
    323c:	a0 91 45 01 	lds	r26, 0x0145
    3240:	b0 91 46 01 	lds	r27, 0x0146
    3244:	80 93 31 01 	sts	0x0131, r24
    3248:	90 93 32 01 	sts	0x0132, r25
    324c:	a0 93 33 01 	sts	0x0133, r26
    3250:	b0 93 34 01 	sts	0x0134, r27
				sv = ev;
    3254:	40 91 3f 01 	lds	r20, 0x013F
    3258:	50 91 40 01 	lds	r21, 0x0140
    325c:	60 91 41 01 	lds	r22, 0x0141
    3260:	70 91 42 01 	lds	r23, 0x0142
    3264:	40 93 43 01 	sts	0x0143, r20
    3268:	50 93 44 01 	sts	0x0144, r21
    326c:	60 93 45 01 	sts	0x0145, r22
    3270:	70 93 46 01 	sts	0x0146, r23
				ev = temp;
    3274:	80 93 3f 01 	sts	0x013F, r24
    3278:	90 93 40 01 	sts	0x0140, r25
    327c:	a0 93 41 01 	sts	0x0141, r26
    3280:	b0 93 42 01 	sts	0x0142, r27
				
				//Recalculate rate and offset voltages.
				rate = (double)as.get_sweep_rate() * (double)slope / V_PER_COUNT;
    3284:	83 e5       	ldi	r24, 0x53	; 83
    3286:	91 e0       	ldi	r25, 0x01	; 1
    3288:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN8as_class14get_sweep_rateEv>
    328c:	bc 01       	movw	r22, r24
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__floatunsisf>
    3296:	6b 01       	movw	r12, r22
    3298:	7c 01       	movw	r14, r24
    329a:	60 91 3e 01 	lds	r22, 0x013E
    329e:	77 27       	eor	r23, r23
    32a0:	67 fd       	sbrc	r22, 7
    32a2:	70 95       	com	r23
    32a4:	87 2f       	mov	r24, r23
    32a6:	97 2f       	mov	r25, r23
    32a8:	0e 94 8c 3a 	call	0x7518	; 0x7518 <__floatsisf>
    32ac:	9b 01       	movw	r18, r22
    32ae:	ac 01       	movw	r20, r24
    32b0:	c7 01       	movw	r24, r14
    32b2:	b6 01       	movw	r22, r12
    32b4:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    32b8:	2f e7       	ldi	r18, 0x7F	; 127
    32ba:	3a e6       	ldi	r19, 0x6A	; 106
    32bc:	49 e4       	ldi	r20, 0x49	; 73
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <__divsf3>
    32c4:	60 93 3a 01 	sts	0x013A, r22
    32c8:	70 93 3b 01 	sts	0x013B, r23
    32cc:	80 93 3c 01 	sts	0x013C, r24
    32d0:	90 93 3d 01 	sts	0x013D, r25
				this_offset = sv + rate;
    32d4:	20 91 43 01 	lds	r18, 0x0143
    32d8:	30 91 44 01 	lds	r19, 0x0144
    32dc:	40 91 45 01 	lds	r20, 0x0145
    32e0:	50 91 46 01 	lds	r21, 0x0146
    32e4:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    32e8:	60 93 36 01 	sts	0x0136, r22
    32ec:	70 93 37 01 	sts	0x0137, r23
    32f0:	80 93 38 01 	sts	0x0138, r24
    32f4:	90 93 39 01 	sts	0x0139, r25
				
				//Print initial stream data.
				if(as.get_tx_mode() == TX_MODE_MATLAB)//Print MatLab data.
    32f8:	83 e5       	ldi	r24, 0x53	; 83
    32fa:	91 e0       	ldi	r25, 0x01	; 1
    32fc:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    3300:	81 30       	cpi	r24, 0x01	; 1
    3302:	11 f0       	breq	.+4      	; 0x3308 <__vector_11+0x22c6>
    3304:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_11+0xadc>
    3308:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__vector_11+0xac0>
			as.set_test_state(IDLE);
		break;
	}
	
	//PORTB &= ~(1 << PORTB0);//Toggle port for timing check.
}
    330c:	ff 91       	pop	r31
    330e:	ef 91       	pop	r30
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	bf 91       	pop	r27
    3316:	af 91       	pop	r26
    3318:	9f 91       	pop	r25
    331a:	8f 91       	pop	r24
    331c:	7f 91       	pop	r23
    331e:	6f 91       	pop	r22
    3320:	5f 91       	pop	r21
    3322:	4f 91       	pop	r20
    3324:	3f 91       	pop	r19
    3326:	2f 91       	pop	r18
    3328:	ff 90       	pop	r15
    332a:	ef 90       	pop	r14
    332c:	df 90       	pop	r13
    332e:	cf 90       	pop	r12
    3330:	bf 90       	pop	r11
    3332:	af 90       	pop	r10
    3334:	9f 90       	pop	r9
    3336:	8f 90       	pop	r8
    3338:	0f 90       	pop	r0
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	0f 90       	pop	r0
    333e:	1f 90       	pop	r1
    3340:	18 95       	reti

00003342 <_GLOBAL__sub_I_ms_counter>:
#include "helper.h"
#include "AquaSift_V0012.h"

uint32_t ms_counter;
uint8_t bin_timeout;
as_class as;
    3342:	83 e5       	ldi	r24, 0x53	; 83
    3344:	91 e0       	ldi	r25, 0x01	; 1
    3346:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN8as_classC1Ev>
    334a:	08 95       	ret

0000334c <_ZN8as_classC1Ev>:
#include <avr/io.h>
#include "as_class.h"

//Constructor that initializes default values of the test parameters.
as_class::as_class() : tx_mode(TX_MODE_MATLAB), num_electrodes(ELEC_3), adc_rate(2), 
    334c:	fc 01       	movw	r30, r24
tia_res_val(4), dep_enable(true), dep_time(60000), dep_volt(-500), quiet_time(0), 
dep_rec(true), sweep_volt_start(-500), sweep_volt_end(500), sweep_rate(10), 
sweep_cyclic(false), sweep_cycles(5), dif_volt_start(-500), dif_volt_end(500),
dif_volt_inc(50), dif_volt_pls(100), dif_time_pre(150), dif_time_pls(20),
dif_time_win(1), soft_sel(0), test_state(IDLE){}
    334e:	21 e0       	ldi	r18, 0x01	; 1
    3350:	20 83       	st	Z, r18
    3352:	21 83       	std	Z+1, r18	; 0x01
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	93 83       	std	Z+3, r25	; 0x03
    335a:	82 83       	std	Z+2, r24	; 0x02
    335c:	84 e0       	ldi	r24, 0x04	; 4
    335e:	84 83       	std	Z+4, r24	; 0x04
    3360:	25 83       	std	Z+5, r18	; 0x05
    3362:	40 e6       	ldi	r20, 0x60	; 96
    3364:	5a ee       	ldi	r21, 0xEA	; 234
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	46 83       	std	Z+6, r20	; 0x06
    336c:	57 83       	std	Z+7, r21	; 0x07
    336e:	60 87       	std	Z+8, r22	; 0x08
    3370:	71 87       	std	Z+9, r23	; 0x09
    3372:	8c e0       	ldi	r24, 0x0C	; 12
    3374:	9e ef       	ldi	r25, 0xFE	; 254
    3376:	93 87       	std	Z+11, r25	; 0x0b
    3378:	82 87       	std	Z+10, r24	; 0x0a
    337a:	14 86       	std	Z+12, r1	; 0x0c
    337c:	15 86       	std	Z+13, r1	; 0x0d
    337e:	16 86       	std	Z+14, r1	; 0x0e
    3380:	17 86       	std	Z+15, r1	; 0x0f
    3382:	20 8b       	std	Z+16, r18	; 0x10
    3384:	92 8b       	std	Z+18, r25	; 0x12
    3386:	81 8b       	std	Z+17, r24	; 0x11
    3388:	24 ef       	ldi	r18, 0xF4	; 244
    338a:	31 e0       	ldi	r19, 0x01	; 1
    338c:	34 8b       	std	Z+20, r19	; 0x14
    338e:	23 8b       	std	Z+19, r18	; 0x13
    3390:	4a e0       	ldi	r20, 0x0A	; 10
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	56 8b       	std	Z+22, r21	; 0x16
    3396:	45 8b       	std	Z+21, r20	; 0x15
    3398:	17 8a       	std	Z+23, r1	; 0x17
    339a:	45 e0       	ldi	r20, 0x05	; 5
    339c:	40 8f       	std	Z+24, r20	; 0x18
    339e:	92 8f       	std	Z+26, r25	; 0x1a
    33a0:	81 8f       	std	Z+25, r24	; 0x19
    33a2:	34 8f       	std	Z+28, r19	; 0x1c
    33a4:	23 8f       	std	Z+27, r18	; 0x1b
    33a6:	82 e3       	ldi	r24, 0x32	; 50
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	96 8f       	std	Z+30, r25	; 0x1e
    33ac:	85 8f       	std	Z+29, r24	; 0x1d
    33ae:	84 e6       	ldi	r24, 0x64	; 100
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	90 a3       	std	Z+32, r25	; 0x20
    33b4:	87 8f       	std	Z+31, r24	; 0x1f
    33b6:	86 e9       	ldi	r24, 0x96	; 150
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	92 a3       	std	Z+34, r25	; 0x22
    33bc:	81 a3       	std	Z+33, r24	; 0x21
    33be:	84 e1       	ldi	r24, 0x14	; 20
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	94 a3       	std	Z+36, r25	; 0x24
    33c4:	83 a3       	std	Z+35, r24	; 0x23
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	96 a3       	std	Z+38, r25	; 0x26
    33cc:	85 a3       	std	Z+37, r24	; 0x25
    33ce:	10 a6       	std	Z+40, r1	; 0x28
    33d0:	11 a6       	std	Z+41, r1	; 0x29
    33d2:	08 95       	ret

000033d4 <_ZN8as_class11set_tx_modeE8tx_modes>:
	
/*************************************************Main Menu Functions*************************************************/
//Set transmission mode.
uint8_t as_class::set_tx_mode(tx_modes tx_m)
{
	tx_mode = tx_m;
    33d4:	fc 01       	movw	r30, r24
    33d6:	60 83       	st	Z, r22
	return AS_NO_ERR;
}
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	08 95       	ret

000033dc <_ZN8as_class11get_tx_modeEv>:

//Get transmission mode.
tx_modes as_class::get_tx_mode()
{
	return tx_mode;
}
    33dc:	fc 01       	movw	r30, r24
    33de:	80 81       	ld	r24, Z
    33e0:	08 95       	ret

000033e2 <_ZN8as_class18set_num_electrodesE9num_elecs>:

//Set number of electrodes.
uint8_t as_class::set_num_electrodes(num_elecs num_e)
{
	num_electrodes = num_e;
    33e2:	fc 01       	movw	r30, r24
    33e4:	61 83       	std	Z+1, r22	; 0x01
	return AS_NO_ERR;
}
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	08 95       	ret

000033ea <_ZN8as_class18get_num_electrodesEv>:

//Get number of electrodes.
num_elecs as_class::get_num_electrodes()
{
	return num_electrodes;
}
    33ea:	fc 01       	movw	r30, r24
    33ec:	81 81       	ldd	r24, Z+1	; 0x01
    33ee:	08 95       	ret

000033f0 <_ZN8as_class12set_adc_rateEj>:

//Set ADC sample rate.
uint8_t as_class::set_adc_rate(uint16_t adc_r)
{
	if(adc_r > ADC_RATE_MAX)
    33f0:	69 3e       	cpi	r22, 0xE9	; 233
    33f2:	23 e0       	ldi	r18, 0x03	; 3
    33f4:	72 07       	cpc	r23, r18
    33f6:	40 f4       	brcc	.+16     	; 0x3408 <_ZN8as_class12set_adc_rateEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(adc_r < ADC_RATE_MIN)
    33f8:	61 15       	cp	r22, r1
    33fa:	71 05       	cpc	r23, r1
    33fc:	39 f0       	breq	.+14     	; 0x340c <_ZN8as_class12set_adc_rateEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	adc_rate = adc_r;
    33fe:	fc 01       	movw	r30, r24
    3400:	73 83       	std	Z+3, r23	; 0x03
    3402:	62 83       	std	Z+2, r22	; 0x02
	return AS_NO_ERR;
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	08 95       	ret
//Set ADC sample rate.
uint8_t as_class::set_adc_rate(uint16_t adc_r)
{
	if(adc_r > ADC_RATE_MAX)
	{
		return AS_VALUE_HIGH;
    3408:	82 e0       	ldi	r24, 0x02	; 2
    340a:	08 95       	ret
	}
	
	if(adc_r < ADC_RATE_MIN)
	{
		return AS_VALUE_LOW;
    340c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	adc_rate = adc_r;
	return AS_NO_ERR;
}
    340e:	08 95       	ret

00003410 <_ZN8as_class12get_adc_rateEv>:

//Get ADC sample rate.
uint16_t as_class::get_adc_rate()
{
	return adc_rate;
}
    3410:	fc 01       	movw	r30, r24
    3412:	82 81       	ldd	r24, Z+2	; 0x02
    3414:	93 81       	ldd	r25, Z+3	; 0x03
    3416:	08 95       	ret

00003418 <_ZN8as_class11set_tia_resEh>:

/****************************************************TIA Functions****************************************************/
//Set TIA resistor tap value.
uint8_t as_class::set_tia_res(uint8_t tia_res_v)
{
	if(tia_res_v > RES_MAX)
    3418:	67 30       	cpi	r22, 0x07	; 7
    341a:	30 f4       	brcc	.+12     	; 0x3428 <_ZN8as_class11set_tia_resEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(tia_res_v < RES_MIN)
    341c:	66 23       	and	r22, r22
    341e:	31 f0       	breq	.+12     	; 0x342c <_ZN8as_class11set_tia_resEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	tia_res_val = tia_res_v;
    3420:	fc 01       	movw	r30, r24
    3422:	64 83       	std	Z+4, r22	; 0x04
	
	return AS_NO_ERR;
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	08 95       	ret
//Set TIA resistor tap value.
uint8_t as_class::set_tia_res(uint8_t tia_res_v)
{
	if(tia_res_v > RES_MAX)
	{
		return AS_VALUE_HIGH;
    3428:	82 e0       	ldi	r24, 0x02	; 2
    342a:	08 95       	ret
	}
	
	if(tia_res_v < RES_MIN)
	{
		return AS_VALUE_LOW;
    342c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	tia_res_val = tia_res_v;
	
	return AS_NO_ERR;
}
    342e:	08 95       	ret

00003430 <_ZN8as_class11get_tia_resEv>:

//Get TIA resistor tap value.
uint8_t as_class::get_tia_res()
{
	return tia_res_val;
}
    3430:	fc 01       	movw	r30, r24
    3432:	84 81       	ldd	r24, Z+4	; 0x04
    3434:	08 95       	ret

00003436 <_ZN8as_class14set_dep_enableEb>:

/************************************************Deposition Functions*************************************************/
//Set deposition enable.
uint8_t as_class::set_dep_enable(bool dep_e)
{
	dep_enable = dep_e;
    3436:	fc 01       	movw	r30, r24
    3438:	65 83       	std	Z+5, r22	; 0x05
	return AS_NO_ERR;
}
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	08 95       	ret

0000343e <_ZN8as_class14get_dep_enableEv>:

//Get deposition enable.
bool as_class::get_dep_enable()
{
	return dep_enable;
}
    343e:	fc 01       	movw	r30, r24
    3440:	85 81       	ldd	r24, Z+5	; 0x05
    3442:	08 95       	ret

00003444 <_ZN8as_class12set_dep_timeEm>:

//Set deposition time.
uint8_t as_class::set_dep_time(uint32_t dep_t)
{
	if(dep_t > DEP_TIME_MAX)
    3444:	41 30       	cpi	r20, 0x01	; 1
    3446:	25 e3       	ldi	r18, 0x35	; 53
    3448:	52 07       	cpc	r21, r18
    344a:	2c e0       	ldi	r18, 0x0C	; 12
    344c:	62 07       	cpc	r22, r18
    344e:	71 05       	cpc	r23, r1
    3450:	60 f4       	brcc	.+24     	; 0x346a <_ZN8as_class12set_dep_timeEm+0x26>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dep_t < DEP_TIME_MIN)
    3452:	41 15       	cp	r20, r1
    3454:	51 05       	cpc	r21, r1
    3456:	61 05       	cpc	r22, r1
    3458:	71 05       	cpc	r23, r1
    345a:	49 f0       	breq	.+18     	; 0x346e <_ZN8as_class12set_dep_timeEm+0x2a>
	{
		return AS_VALUE_LOW;
	}
	
	dep_time = dep_t;
    345c:	fc 01       	movw	r30, r24
    345e:	46 83       	std	Z+6, r20	; 0x06
    3460:	57 83       	std	Z+7, r21	; 0x07
    3462:	60 87       	std	Z+8, r22	; 0x08
    3464:	71 87       	std	Z+9, r23	; 0x09
	return AS_NO_ERR;
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	08 95       	ret
//Set deposition time.
uint8_t as_class::set_dep_time(uint32_t dep_t)
{
	if(dep_t > DEP_TIME_MAX)
	{
		return AS_VALUE_HIGH;
    346a:	82 e0       	ldi	r24, 0x02	; 2
    346c:	08 95       	ret
	}
	
	if(dep_t < DEP_TIME_MIN)
	{
		return AS_VALUE_LOW;
    346e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dep_time = dep_t;
	return AS_NO_ERR;
}
    3470:	08 95       	ret

00003472 <_ZN8as_class12get_dep_timeEv>:

//Get deposition time.
uint32_t as_class::get_dep_time()
{
	return dep_time;
    3472:	fc 01       	movw	r30, r24
    3474:	66 81       	ldd	r22, Z+6	; 0x06
    3476:	77 81       	ldd	r23, Z+7	; 0x07
    3478:	80 85       	ldd	r24, Z+8	; 0x08
    347a:	91 85       	ldd	r25, Z+9	; 0x09
}
    347c:	08 95       	ret

0000347e <_ZN8as_class12set_dep_voltEi>:

//Set deposition voltage.
uint8_t as_class::set_dep_volt(int16_t dep_v)
{
	if(dep_v > DEP_VOLT_MAX)
    347e:	63 37       	cpi	r22, 0x73	; 115
    3480:	26 e0       	ldi	r18, 0x06	; 6
    3482:	72 07       	cpc	r23, r18
    3484:	4c f4       	brge	.+18     	; 0x3498 <_ZN8as_class12set_dep_voltEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dep_v < DEP_VOLT_MIN)
    3486:	6e 38       	cpi	r22, 0x8E	; 142
    3488:	e9 ef       	ldi	r30, 0xF9	; 249
    348a:	7e 07       	cpc	r23, r30
    348c:	3c f0       	brlt	.+14     	; 0x349c <_ZN8as_class12set_dep_voltEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	dep_volt = dep_v;
    348e:	fc 01       	movw	r30, r24
    3490:	73 87       	std	Z+11, r23	; 0x0b
    3492:	62 87       	std	Z+10, r22	; 0x0a
	return AS_NO_ERR;
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	08 95       	ret
//Set deposition voltage.
uint8_t as_class::set_dep_volt(int16_t dep_v)
{
	if(dep_v > DEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    3498:	82 e0       	ldi	r24, 0x02	; 2
    349a:	08 95       	ret
	}
	
	if(dep_v < DEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    349c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dep_volt = dep_v;
	return AS_NO_ERR;
}
    349e:	08 95       	ret

000034a0 <_ZN8as_class12get_dep_voltEv>:

//Get deposition voltage.
int as_class::get_dep_volt()
{
	return dep_volt;
}
    34a0:	fc 01       	movw	r30, r24
    34a2:	82 85       	ldd	r24, Z+10	; 0x0a
    34a4:	93 85       	ldd	r25, Z+11	; 0x0b
    34a6:	08 95       	ret

000034a8 <_ZN8as_class14set_quiet_timeEm>:

//Set quiet time.
uint8_t as_class::set_quiet_time(uint32_t quiet_t)
{
	if(quiet_t > QUIET_TIME_MAX)
    34a8:	41 30       	cpi	r20, 0x01	; 1
    34aa:	25 e3       	ldi	r18, 0x35	; 53
    34ac:	52 07       	cpc	r21, r18
    34ae:	2c e0       	ldi	r18, 0x0C	; 12
    34b0:	62 07       	cpc	r22, r18
    34b2:	71 05       	cpc	r23, r1
    34b4:	38 f4       	brcc	.+14     	; 0x34c4 <_ZN8as_class14set_quiet_timeEm+0x1c>
	if(quiet_t < QUIET_TIME_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	quiet_time = quiet_t;
    34b6:	fc 01       	movw	r30, r24
    34b8:	44 87       	std	Z+12, r20	; 0x0c
    34ba:	55 87       	std	Z+13, r21	; 0x0d
    34bc:	66 87       	std	Z+14, r22	; 0x0e
    34be:	77 87       	std	Z+15, r23	; 0x0f
	return AS_NO_ERR;
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	08 95       	ret
//Set quiet time.
uint8_t as_class::set_quiet_time(uint32_t quiet_t)
{
	if(quiet_t > QUIET_TIME_MAX)
	{
		return AS_VALUE_HIGH;
    34c4:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	quiet_time = quiet_t;
	return AS_NO_ERR;
}
    34c6:	08 95       	ret

000034c8 <_ZN8as_class14get_quiet_timeEv>:

//Get quiet time.
uint32_t as_class::get_quiet_time()
{
	return quiet_time;
    34c8:	fc 01       	movw	r30, r24
    34ca:	64 85       	ldd	r22, Z+12	; 0x0c
    34cc:	75 85       	ldd	r23, Z+13	; 0x0d
    34ce:	86 85       	ldd	r24, Z+14	; 0x0e
    34d0:	97 85       	ldd	r25, Z+15	; 0x0f
}
    34d2:	08 95       	ret

000034d4 <_ZN8as_class11set_dep_recEb>:

//Set if deposition voltage is to be streamed.
uint8_t as_class::set_dep_rec(bool dep_r)
{
	dep_rec = dep_r;
    34d4:	fc 01       	movw	r30, r24
    34d6:	60 8b       	std	Z+16, r22	; 0x10
	return AS_NO_ERR;
}
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	08 95       	ret

000034dc <_ZN8as_class11get_dep_recEv>:

//Get if deposition voltage is to be streamed.
bool as_class::get_dep_rec()
{
	return dep_rec;
}
    34dc:	fc 01       	movw	r30, r24
    34de:	80 89       	ldd	r24, Z+16	; 0x10
    34e0:	08 95       	ret

000034e2 <_ZN8as_class20set_sweep_volt_startEi>:

/***********************************************Linear Sweep Functions************************************************/
//Set starting sweep voltage.
uint8_t as_class::set_sweep_volt_start(int16_t sweep_vs)
{
	if(sweep_vs > SWEEP_VOLT_MAX)
    34e2:	63 37       	cpi	r22, 0x73	; 115
    34e4:	26 e0       	ldi	r18, 0x06	; 6
    34e6:	72 07       	cpc	r23, r18
    34e8:	4c f4       	brge	.+18     	; 0x34fc <_ZN8as_class20set_sweep_volt_startEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_vs < SWEEP_VOLT_MIN)
    34ea:	6e 38       	cpi	r22, 0x8E	; 142
    34ec:	e9 ef       	ldi	r30, 0xF9	; 249
    34ee:	7e 07       	cpc	r23, r30
    34f0:	3c f0       	brlt	.+14     	; 0x3500 <_ZN8as_class20set_sweep_volt_startEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_volt_start = sweep_vs;
    34f2:	fc 01       	movw	r30, r24
    34f4:	72 8b       	std	Z+18, r23	; 0x12
    34f6:	61 8b       	std	Z+17, r22	; 0x11
	return AS_NO_ERR;
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	08 95       	ret
//Set starting sweep voltage.
uint8_t as_class::set_sweep_volt_start(int16_t sweep_vs)
{
	if(sweep_vs > SWEEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    34fc:	82 e0       	ldi	r24, 0x02	; 2
    34fe:	08 95       	ret
	}
	
	if(sweep_vs < SWEEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    3500:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_volt_start = sweep_vs;
	return AS_NO_ERR;
}
    3502:	08 95       	ret

00003504 <_ZN8as_class20get_sweep_volt_startEv>:

//Get starting sweep voltage.
int as_class::get_sweep_volt_start()
{
	return sweep_volt_start;
}
    3504:	fc 01       	movw	r30, r24
    3506:	81 89       	ldd	r24, Z+17	; 0x11
    3508:	92 89       	ldd	r25, Z+18	; 0x12
    350a:	08 95       	ret

0000350c <_ZN8as_class18set_sweep_volt_endEi>:

//Set ending sweep voltage.
uint8_t as_class::set_sweep_volt_end(int16_t sweep_ve)
{
	if(sweep_ve > SWEEP_VOLT_MAX)
    350c:	63 37       	cpi	r22, 0x73	; 115
    350e:	26 e0       	ldi	r18, 0x06	; 6
    3510:	72 07       	cpc	r23, r18
    3512:	4c f4       	brge	.+18     	; 0x3526 <_ZN8as_class18set_sweep_volt_endEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_ve < SWEEP_VOLT_MIN)
    3514:	6e 38       	cpi	r22, 0x8E	; 142
    3516:	e9 ef       	ldi	r30, 0xF9	; 249
    3518:	7e 07       	cpc	r23, r30
    351a:	3c f0       	brlt	.+14     	; 0x352a <_ZN8as_class18set_sweep_volt_endEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_volt_end = sweep_ve;
    351c:	fc 01       	movw	r30, r24
    351e:	74 8b       	std	Z+20, r23	; 0x14
    3520:	63 8b       	std	Z+19, r22	; 0x13
	return AS_NO_ERR;
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	08 95       	ret
//Set ending sweep voltage.
uint8_t as_class::set_sweep_volt_end(int16_t sweep_ve)
{
	if(sweep_ve > SWEEP_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	08 95       	ret
	}
	
	if(sweep_ve < SWEEP_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    352a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_volt_end = sweep_ve;
	return AS_NO_ERR;
}
    352c:	08 95       	ret

0000352e <_ZN8as_class18get_sweep_volt_endEv>:

//Get ending sweep voltage.
int as_class::get_sweep_volt_end()
{
	return sweep_volt_end;
}
    352e:	fc 01       	movw	r30, r24
    3530:	83 89       	ldd	r24, Z+19	; 0x13
    3532:	94 89       	ldd	r25, Z+20	; 0x14
    3534:	08 95       	ret

00003536 <_ZN8as_class14set_sweep_rateEj>:

//Set sweep rate.
uint8_t as_class::set_sweep_rate(uint16_t sweep_r)
{
	if(sweep_r > SWEEP_RATE_MAX)
    3536:	61 3a       	cpi	r22, 0xA1	; 161
    3538:	2f e0       	ldi	r18, 0x0F	; 15
    353a:	72 07       	cpc	r23, r18
    353c:	40 f4       	brcc	.+16     	; 0x354e <_ZN8as_class14set_sweep_rateEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_r < SWEEP_RATE_MIN)
    353e:	61 15       	cp	r22, r1
    3540:	71 05       	cpc	r23, r1
    3542:	39 f0       	breq	.+14     	; 0x3552 <_ZN8as_class14set_sweep_rateEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_rate = sweep_r;
    3544:	fc 01       	movw	r30, r24
    3546:	76 8b       	std	Z+22, r23	; 0x16
    3548:	65 8b       	std	Z+21, r22	; 0x15
	return AS_NO_ERR;
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	08 95       	ret
//Set sweep rate.
uint8_t as_class::set_sweep_rate(uint16_t sweep_r)
{
	if(sweep_r > SWEEP_RATE_MAX)
	{
		return AS_VALUE_HIGH;
    354e:	82 e0       	ldi	r24, 0x02	; 2
    3550:	08 95       	ret
	}
	
	if(sweep_r < SWEEP_RATE_MIN)
	{
		return AS_VALUE_LOW;
    3552:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_rate = sweep_r;
	return AS_NO_ERR;
}
    3554:	08 95       	ret

00003556 <_ZN8as_class14get_sweep_rateEv>:

//Get sweep rate.
uint16_t as_class::get_sweep_rate()
{
	return sweep_rate;
}
    3556:	fc 01       	movw	r30, r24
    3558:	85 89       	ldd	r24, Z+21	; 0x15
    355a:	96 89       	ldd	r25, Z+22	; 0x16
    355c:	08 95       	ret

0000355e <_ZN8as_class16set_sweep_cyclicEb>:

//Set if sweep is cyclic.
uint8_t as_class::set_sweep_cyclic(bool sweep_c)
{
	sweep_cyclic = sweep_c;
    355e:	fc 01       	movw	r30, r24
    3560:	67 8b       	std	Z+23, r22	; 0x17
	return AS_NO_ERR;
}
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	08 95       	ret

00003566 <_ZN8as_class16get_sweep_cyclicEv>:

//Get if sweep is cyclic.
bool as_class::get_sweep_cyclic()
{
	return sweep_cyclic;
}
    3566:	fc 01       	movw	r30, r24
    3568:	87 89       	ldd	r24, Z+23	; 0x17
    356a:	08 95       	ret

0000356c <_ZN8as_class16set_sweep_cyclesEh>:

//Set number of sweep cycles.
uint8_t as_class::set_sweep_cycles(uint8_t sweep_cs)
{
	if(sweep_cs > SWEEP_CYCLES_MAX)
    356c:	65 36       	cpi	r22, 0x65	; 101
    356e:	30 f4       	brcc	.+12     	; 0x357c <_ZN8as_class16set_sweep_cyclesEh+0x10>
	{
		return AS_VALUE_HIGH;
	}
	
	if(sweep_cs < SWEEP_CYCLES_MIN)
    3570:	66 23       	and	r22, r22
    3572:	31 f0       	breq	.+12     	; 0x3580 <_ZN8as_class16set_sweep_cyclesEh+0x14>
	{
		return AS_VALUE_LOW;
	}
	
	sweep_cycles = sweep_cs;
    3574:	fc 01       	movw	r30, r24
    3576:	60 8f       	std	Z+24, r22	; 0x18
	return AS_NO_ERR;
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	08 95       	ret
//Set number of sweep cycles.
uint8_t as_class::set_sweep_cycles(uint8_t sweep_cs)
{
	if(sweep_cs > SWEEP_CYCLES_MAX)
	{
		return AS_VALUE_HIGH;
    357c:	82 e0       	ldi	r24, 0x02	; 2
    357e:	08 95       	ret
	}
	
	if(sweep_cs < SWEEP_CYCLES_MIN)
	{
		return AS_VALUE_LOW;
    3580:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	sweep_cycles = sweep_cs;
	return AS_NO_ERR;
}
    3582:	08 95       	ret

00003584 <_ZN8as_class16get_sweep_cyclesEv>:

//Get number of sweep cycles.
uint8_t as_class::get_sweep_cycles()
{
	return sweep_cycles;
}
    3584:	fc 01       	movw	r30, r24
    3586:	80 8d       	ldd	r24, Z+24	; 0x18
    3588:	08 95       	ret

0000358a <_ZN8as_class18set_dif_volt_startEi>:

/*********************************************Differential Pulse Functions********************************************/
//Set differential pulse start voltage.
uint8_t as_class::set_dif_volt_start(int16_t dif_volt_s)
{
	if(dif_volt_s > DIF_VOLT_MAX)
    358a:	63 37       	cpi	r22, 0x73	; 115
    358c:	26 e0       	ldi	r18, 0x06	; 6
    358e:	72 07       	cpc	r23, r18
    3590:	4c f4       	brge	.+18     	; 0x35a4 <_ZN8as_class18set_dif_volt_startEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dif_volt_s < DIF_VOLT_MIN)
    3592:	6e 38       	cpi	r22, 0x8E	; 142
    3594:	e9 ef       	ldi	r30, 0xF9	; 249
    3596:	7e 07       	cpc	r23, r30
    3598:	3c f0       	brlt	.+14     	; 0x35a8 <_ZN8as_class18set_dif_volt_startEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	dif_volt_start = dif_volt_s;
    359a:	fc 01       	movw	r30, r24
    359c:	72 8f       	std	Z+26, r23	; 0x1a
    359e:	61 8f       	std	Z+25, r22	; 0x19
	return AS_NO_ERR;
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	08 95       	ret
//Set differential pulse start voltage.
uint8_t as_class::set_dif_volt_start(int16_t dif_volt_s)
{
	if(dif_volt_s > DIF_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    35a4:	82 e0       	ldi	r24, 0x02	; 2
    35a6:	08 95       	ret
	}
	
	if(dif_volt_s < DIF_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    35a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dif_volt_start = dif_volt_s;
	return AS_NO_ERR;
}
    35aa:	08 95       	ret

000035ac <_ZN8as_class18get_dif_volt_startEv>:

//Get differential pulse start voltage.
int16_t as_class::get_dif_volt_start()
{
	return dif_volt_start;
}
    35ac:	fc 01       	movw	r30, r24
    35ae:	81 8d       	ldd	r24, Z+25	; 0x19
    35b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    35b2:	08 95       	ret

000035b4 <_ZN8as_class16set_dif_volt_endEi>:

//Set differential pulse end voltage.
uint8_t as_class::set_dif_volt_end(int16_t dif_volt_e)
{
	if(dif_volt_e > DIF_VOLT_MAX)
    35b4:	63 37       	cpi	r22, 0x73	; 115
    35b6:	26 e0       	ldi	r18, 0x06	; 6
    35b8:	72 07       	cpc	r23, r18
    35ba:	4c f4       	brge	.+18     	; 0x35ce <_ZN8as_class16set_dif_volt_endEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dif_volt_e < DIF_VOLT_MIN)
    35bc:	6e 38       	cpi	r22, 0x8E	; 142
    35be:	e9 ef       	ldi	r30, 0xF9	; 249
    35c0:	7e 07       	cpc	r23, r30
    35c2:	3c f0       	brlt	.+14     	; 0x35d2 <_ZN8as_class16set_dif_volt_endEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	dif_volt_end = dif_volt_e;
    35c4:	fc 01       	movw	r30, r24
    35c6:	74 8f       	std	Z+28, r23	; 0x1c
    35c8:	63 8f       	std	Z+27, r22	; 0x1b
	return AS_NO_ERR;
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	08 95       	ret
//Set differential pulse end voltage.
uint8_t as_class::set_dif_volt_end(int16_t dif_volt_e)
{
	if(dif_volt_e > DIF_VOLT_MAX)
	{
		return AS_VALUE_HIGH;
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	08 95       	ret
	}
	
	if(dif_volt_e < DIF_VOLT_MIN)
	{
		return AS_VALUE_LOW;
    35d2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dif_volt_end = dif_volt_e;
	return AS_NO_ERR;
}
    35d4:	08 95       	ret

000035d6 <_ZN8as_class16get_dif_volt_endEv>:

//Set differential pulse end voltage.
int16_t as_class::get_dif_volt_end()
{
	return dif_volt_end;
}
    35d6:	fc 01       	movw	r30, r24
    35d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    35da:	94 8d       	ldd	r25, Z+28	; 0x1c
    35dc:	08 95       	ret

000035de <_ZN8as_class16set_dif_volt_plsEi>:

//Set differential pulse amplitude.
uint8_t as_class::set_dif_volt_pls(int16_t dif_volt_pl)
{
	if(dif_volt_pl > DIF_AMP_MAX)
    35de:	63 37       	cpi	r22, 0x73	; 115
    35e0:	26 e0       	ldi	r18, 0x06	; 6
    35e2:	72 07       	cpc	r23, r18
    35e4:	4c f4       	brge	.+18     	; 0x35f8 <_ZN8as_class16set_dif_volt_plsEi+0x1a>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dif_volt_pl < DIF_AMP_MIN)
    35e6:	6e 38       	cpi	r22, 0x8E	; 142
    35e8:	e9 ef       	ldi	r30, 0xF9	; 249
    35ea:	7e 07       	cpc	r23, r30
    35ec:	3c f0       	brlt	.+14     	; 0x35fc <_ZN8as_class16set_dif_volt_plsEi+0x1e>
	{
		return AS_VALUE_LOW;
	}
	
	dif_volt_pls = dif_volt_pl;
    35ee:	fc 01       	movw	r30, r24
    35f0:	70 a3       	std	Z+32, r23	; 0x20
    35f2:	67 8f       	std	Z+31, r22	; 0x1f
	return AS_NO_ERR;
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	08 95       	ret
//Set differential pulse amplitude.
uint8_t as_class::set_dif_volt_pls(int16_t dif_volt_pl)
{
	if(dif_volt_pl > DIF_AMP_MAX)
	{
		return AS_VALUE_HIGH;
    35f8:	82 e0       	ldi	r24, 0x02	; 2
    35fa:	08 95       	ret
	}
	
	if(dif_volt_pl < DIF_AMP_MIN)
	{
		return AS_VALUE_LOW;
    35fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dif_volt_pls = dif_volt_pl;
	return AS_NO_ERR;
}
    35fe:	08 95       	ret

00003600 <_ZN8as_class16get_dif_volt_plsEv>:

//Get differential pulse amplitude.
int16_t as_class::get_dif_volt_pls()
{
	return dif_volt_pls;
}
    3600:	fc 01       	movw	r30, r24
    3602:	87 8d       	ldd	r24, Z+31	; 0x1f
    3604:	90 a1       	ldd	r25, Z+32	; 0x20
    3606:	08 95       	ret

00003608 <_ZN8as_class16set_dif_volt_incEj>:

//Set differential pulse increment.
uint8_t as_class::set_dif_volt_inc(uint16_t dif_volt_i)
{
	if(dif_volt_i > DIF_INC_MAX)
    3608:	63 37       	cpi	r22, 0x73	; 115
    360a:	26 e0       	ldi	r18, 0x06	; 6
    360c:	72 07       	cpc	r23, r18
    360e:	40 f4       	brcc	.+16     	; 0x3620 <_ZN8as_class16set_dif_volt_incEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dif_volt_i < DIF_INC_MIN)
    3610:	61 15       	cp	r22, r1
    3612:	71 05       	cpc	r23, r1
    3614:	39 f0       	breq	.+14     	; 0x3624 <_ZN8as_class16set_dif_volt_incEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	dif_volt_inc = dif_volt_i;
    3616:	fc 01       	movw	r30, r24
    3618:	76 8f       	std	Z+30, r23	; 0x1e
    361a:	65 8f       	std	Z+29, r22	; 0x1d
	return AS_NO_ERR;
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	08 95       	ret
//Set differential pulse increment.
uint8_t as_class::set_dif_volt_inc(uint16_t dif_volt_i)
{
	if(dif_volt_i > DIF_INC_MAX)
	{
		return AS_VALUE_HIGH;
    3620:	82 e0       	ldi	r24, 0x02	; 2
    3622:	08 95       	ret
	}
	
	if(dif_volt_i < DIF_INC_MIN)
	{
		return AS_VALUE_LOW;
    3624:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dif_volt_inc = dif_volt_i;
	return AS_NO_ERR;
}
    3626:	08 95       	ret

00003628 <_ZN8as_class16get_dif_volt_incEv>:

//Get differential pulse increment.
uint16_t as_class::get_dif_volt_inc()
{
	return dif_volt_inc;
}
    3628:	fc 01       	movw	r30, r24
    362a:	85 8d       	ldd	r24, Z+29	; 0x1d
    362c:	96 8d       	ldd	r25, Z+30	; 0x1e
    362e:	08 95       	ret

00003630 <_ZN8as_class16set_dif_time_preEj>:

//Set differential pulse pre-pulse time.
uint8_t as_class::set_dif_time_pre(uint16_t dif_time_pr)
{
	if(dif_time_pr > DIF_PRE_MAX)
    3630:	61 31       	cpi	r22, 0x11	; 17
    3632:	27 e2       	ldi	r18, 0x27	; 39
    3634:	72 07       	cpc	r23, r18
    3636:	40 f4       	brcc	.+16     	; 0x3648 <_ZN8as_class16set_dif_time_preEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dif_time_pr < DIF_PRE_MIN)
    3638:	61 15       	cp	r22, r1
    363a:	71 05       	cpc	r23, r1
    363c:	39 f0       	breq	.+14     	; 0x364c <_ZN8as_class16set_dif_time_preEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	dif_time_pre = dif_time_pr;
    363e:	fc 01       	movw	r30, r24
    3640:	72 a3       	std	Z+34, r23	; 0x22
    3642:	61 a3       	std	Z+33, r22	; 0x21
	return AS_NO_ERR;
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	08 95       	ret
//Set differential pulse pre-pulse time.
uint8_t as_class::set_dif_time_pre(uint16_t dif_time_pr)
{
	if(dif_time_pr > DIF_PRE_MAX)
	{
		return AS_VALUE_HIGH;
    3648:	82 e0       	ldi	r24, 0x02	; 2
    364a:	08 95       	ret
	}
	
	if(dif_time_pr < DIF_PRE_MIN)
	{
		return AS_VALUE_LOW;
    364c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dif_time_pre = dif_time_pr;
	return AS_NO_ERR;
}
    364e:	08 95       	ret

00003650 <_ZN8as_class16get_dif_time_preEv>:

//Get differential pulse pre-pulse time.
uint16_t as_class::get_dif_time_pre()
{
	return dif_time_pre;
}
    3650:	fc 01       	movw	r30, r24
    3652:	81 a1       	ldd	r24, Z+33	; 0x21
    3654:	92 a1       	ldd	r25, Z+34	; 0x22
    3656:	08 95       	ret

00003658 <_ZN8as_class16set_dif_time_plsEj>:

//Set differential pulse time.
uint8_t as_class::set_dif_time_pls(uint16_t dif_time_pl)
{
	if(dif_time_pl > DIF_PLS_MAX)
    3658:	61 31       	cpi	r22, 0x11	; 17
    365a:	27 e2       	ldi	r18, 0x27	; 39
    365c:	72 07       	cpc	r23, r18
    365e:	40 f4       	brcc	.+16     	; 0x3670 <_ZN8as_class16set_dif_time_plsEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dif_time_pl < DIF_PLS_MIN)
    3660:	61 15       	cp	r22, r1
    3662:	71 05       	cpc	r23, r1
    3664:	39 f0       	breq	.+14     	; 0x3674 <_ZN8as_class16set_dif_time_plsEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	dif_time_pls = dif_time_pl;
    3666:	fc 01       	movw	r30, r24
    3668:	74 a3       	std	Z+36, r23	; 0x24
    366a:	63 a3       	std	Z+35, r22	; 0x23
	return AS_NO_ERR;
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	08 95       	ret
//Set differential pulse time.
uint8_t as_class::set_dif_time_pls(uint16_t dif_time_pl)
{
	if(dif_time_pl > DIF_PLS_MAX)
	{
		return AS_VALUE_HIGH;
    3670:	82 e0       	ldi	r24, 0x02	; 2
    3672:	08 95       	ret
	}
	
	if(dif_time_pl < DIF_PLS_MIN)
	{
		return AS_VALUE_LOW;
    3674:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dif_time_pls = dif_time_pl;
	return AS_NO_ERR;
}
    3676:	08 95       	ret

00003678 <_ZN8as_class16get_dif_time_plsEv>:

//Get differential pulse time.
uint16_t as_class::get_dif_time_pls()
{
	return dif_time_pls;
}
    3678:	fc 01       	movw	r30, r24
    367a:	83 a1       	ldd	r24, Z+35	; 0x23
    367c:	94 a1       	ldd	r25, Z+36	; 0x24
    367e:	08 95       	ret

00003680 <_ZN8as_class16set_dif_time_winEj>:

//Set differential sampling window time.
uint8_t as_class::set_dif_time_win(uint16_t dif_time_wn)
{
	if(dif_time_wn > DIF_WIN_MAX)
    3680:	61 31       	cpi	r22, 0x11	; 17
    3682:	27 e2       	ldi	r18, 0x27	; 39
    3684:	72 07       	cpc	r23, r18
    3686:	40 f4       	brcc	.+16     	; 0x3698 <_ZN8as_class16set_dif_time_winEj+0x18>
	{
		return AS_VALUE_HIGH;
	}
	
	if(dif_time_wn < DIF_WIN_MIN)
    3688:	61 15       	cp	r22, r1
    368a:	71 05       	cpc	r23, r1
    368c:	39 f0       	breq	.+14     	; 0x369c <_ZN8as_class16set_dif_time_winEj+0x1c>
	{
		return AS_VALUE_LOW;
	}
	
	dif_time_win = dif_time_wn;
    368e:	fc 01       	movw	r30, r24
    3690:	76 a3       	std	Z+38, r23	; 0x26
    3692:	65 a3       	std	Z+37, r22	; 0x25
	return AS_NO_ERR;
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	08 95       	ret
//Set differential sampling window time.
uint8_t as_class::set_dif_time_win(uint16_t dif_time_wn)
{
	if(dif_time_wn > DIF_WIN_MAX)
	{
		return AS_VALUE_HIGH;
    3698:	82 e0       	ldi	r24, 0x02	; 2
    369a:	08 95       	ret
	}
	
	if(dif_time_wn < DIF_WIN_MIN)
	{
		return AS_VALUE_LOW;
    369c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	dif_time_win = dif_time_wn;
	return AS_NO_ERR;
}
    369e:	08 95       	ret

000036a0 <_ZN8as_class16get_dif_time_winEv>:

//Get differential sampling window time.
uint16_t as_class::get_dif_time_win()
{
	return dif_time_win;
}
    36a0:	fc 01       	movw	r30, r24
    36a2:	85 a1       	ldd	r24, Z+37	; 0x25
    36a4:	96 a1       	ldd	r25, Z+38	; 0x26
    36a6:	08 95       	ret

000036a8 <_ZN8as_class12set_soft_selEh>:

/**********************************************Low-pass Filter Functions**********************************************/
//Set software filter to use.
uint8_t as_class::set_soft_sel(uint8_t soft_s)
{
	if(soft_s > LPF_FILT_MAX)
    36a8:	68 30       	cpi	r22, 0x08	; 8
    36aa:	20 f4       	brcc	.+8      	; 0x36b4 <_ZN8as_class12set_soft_selEh+0xc>
	if(soft_s < LPF_FILT_MIN)
	{
		return AS_VALUE_LOW;
	}
	
	soft_sel = soft_s;
    36ac:	fc 01       	movw	r30, r24
    36ae:	60 a7       	std	Z+40, r22	; 0x28
	return AS_NO_ERR;
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	08 95       	ret
//Set software filter to use.
uint8_t as_class::set_soft_sel(uint8_t soft_s)
{
	if(soft_s > LPF_FILT_MAX)
	{
		return AS_VALUE_HIGH;
    36b4:	82 e0       	ldi	r24, 0x02	; 2
		return AS_VALUE_LOW;
	}
	
	soft_sel = soft_s;
	return AS_NO_ERR;
}
    36b6:	08 95       	ret

000036b8 <_ZN8as_class12get_soft_selEv>:

//Get software filter to use.
uint8_t as_class::get_soft_sel()
{
	return soft_sel;
}
    36b8:	fc 01       	movw	r30, r24
    36ba:	80 a5       	ldd	r24, Z+40	; 0x28
    36bc:	08 95       	ret

000036be <_ZN8as_class14set_test_stateE11test_states>:

/*************************************************Test State Functions************************************************/
//Set current test state.
uint8_t as_class::set_test_state(test_states test_s)
{
	test_state = test_s;
    36be:	fc 01       	movw	r30, r24
    36c0:	61 a7       	std	Z+41, r22	; 0x29
	return AS_NO_ERR;
}
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	08 95       	ret

000036c6 <_ZN8as_class14get_test_stateEv>:

//Get current test state.
test_states as_class::get_test_state()
{
	return test_state;
}
    36c6:	fc 01       	movw	r30, r24
    36c8:	81 a5       	ldd	r24, Z+41	; 0x29
    36ca:	08 95       	ret

000036cc <_ZN8as_class13set_test_typeE10test_types>:

//Set test type.
uint8_t as_class::set_test_type(test_types test_t)
{
	test_type = test_t;
    36cc:	fc 01       	movw	r30, r24
    36ce:	62 a7       	std	Z+42, r22	; 0x2a
	return AS_NO_ERR;
}
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	08 95       	ret

000036d4 <_ZN8as_class13get_test_typeEv>:

//Get test type.
test_types as_class::get_test_type()
{
	return test_type;
}
    36d4:	fc 01       	movw	r30, r24
    36d6:	82 a5       	ldd	r24, Z+42	; 0x2a
    36d8:	08 95       	ret

000036da <_ZN10atmega_spi15spi_master_initEv>:

//Setup all registers required for an spi master.
void atmega_spi::spi_master_init()
{
	//Set pins as outputs.
	ddrMOSI |= (1 << MOSI);
    36da:	23 9a       	sbi	0x04, 3	; 4
	ddrSCK  |= (1 << SCK);
    36dc:	25 9a       	sbi	0x04, 5	; 4
	ddrSS   |= (1 << SS);
    36de:	22 9a       	sbi	0x04, 2	; 4
	
	//Enable SPI controller and clock it at system clock speed / 2.
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    36e0:	81 e5       	ldi	r24, 0x51	; 81
    36e2:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= (1 << SPI2X);
	
	//Turn on pull-up resistors.
	prtMOSI |= (1 << MOSI);
    36e4:	2b 9a       	sbi	0x05, 3	; 5
	prtMISO |= (1 << MISO);
    36e6:	2c 9a       	sbi	0x05, 4	; 5
    36e8:	08 95       	ret

000036ea <_ZN10atmega_spi9spi_writeEh>:
}

//Send data byte.
void atmega_spi::spi_write(uint8_t data)
{
	SPDR = data;
    36ea:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))){}
    36ec:	0d b4       	in	r0, 0x2d	; 45
    36ee:	07 fe       	sbrs	r0, 7
    36f0:	fd cf       	rjmp	.-6      	; 0x36ec <_ZN10atmega_spi9spi_writeEh+0x2>
}
    36f2:	08 95       	ret

000036f4 <_ZN10atmega_spi8spi_readEv>:

//Receive data byte.
uint8_t atmega_spi::spi_read()
{	
	SPDR = 0xFF;
    36f4:	8f ef       	ldi	r24, 0xFF	; 255
    36f6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))){}
    36f8:	0d b4       	in	r0, 0x2d	; 45
    36fa:	07 fe       	sbrs	r0, 7
    36fc:	fd cf       	rjmp	.-6      	; 0x36f8 <_ZN10atmega_spi8spi_readEv+0x4>
	return SPDR;
    36fe:	8e b5       	in	r24, 0x2e	; 46
}
    3700:	08 95       	ret

00003702 <_ZN10atmega_twi15twi_master_initEv>:
#include "atmega_twi.h"

//TWI initialize as master.
void atmega_twi::twi_master_init(void)
{
	TWCR = 0x00;	//disable twi.
    3702:	ec eb       	ldi	r30, 0xBC	; 188
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	10 82       	st	Z, r1
	TWBR = 0x02;	//set bit rate 400KHz @ 8 MHz CPU clock.
    3708:	82 e0       	ldi	r24, 0x02	; 2
    370a:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0x00;	//set prescale = 1.
    370e:	10 92 b9 00 	sts	0x00B9, r1
	TWCR = 0x44;	//enable twi.
    3712:	84 e4       	ldi	r24, 0x44	; 68
    3714:	80 83       	st	Z, r24
    3716:	08 95       	ret

00003718 <_ZN10atmega_twi9i2c_startEPh>:
//Function to start i2c communication.  No return value.  Sets errno 
//with error code if function failed, clears errno if function successful.
void atmega_twi::i2c_start(uint8_t* errno)
{
	//Send START condition.
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3718:	24 ea       	ldi	r18, 0xA4	; 164
    371a:	20 93 bc 00 	sts	0x00BC, r18
	
	//Wait for TWINT flag set.
    while(!(TWCR & (1 << TWINT)));
    371e:	ec eb       	ldi	r30, 0xBC	; 188
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	20 81       	ld	r18, Z
    3724:	22 23       	and	r18, r18
    3726:	ec f7       	brge	.-6      	; 0x3722 <_ZN10atmega_twi9i2c_startEPh+0xa>
	
	//Check value of TWI Status Register.
    (TWSR & 0xF8) == START ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    3728:	20 91 b9 00 	lds	r18, 0x00B9
    372c:	28 7f       	andi	r18, 0xF8	; 248
    372e:	28 30       	cpi	r18, 0x08	; 8
    3730:	19 f4       	brne	.+6      	; 0x3738 <_ZN10atmega_twi9i2c_startEPh+0x20>
    3732:	fc 01       	movw	r30, r24
    3734:	10 82       	st	Z, r1
    3736:	08 95       	ret
    3738:	20 91 b9 00 	lds	r18, 0x00B9
    373c:	28 7f       	andi	r18, 0xF8	; 248
    373e:	fc 01       	movw	r30, r24
    3740:	20 83       	st	Z, r18
    3742:	08 95       	ret

00003744 <_ZN10atmega_twi15i2c_sendAddressEhPh>:
void atmega_twi::i2c_sendAddress(const uint8_t address, uint8_t* errno)
{
	uint8_t ack;
   
	//Set ack based on whether receiving or transmitting.
	(address & 0x01) == 0 ? ack = MT_SLA_ACK : ack = MR_SLA_ACK;
    3744:	80 fd       	sbrc	r24, 0
    3746:	02 c0       	rjmp	.+4      	; 0x374c <_ZN10atmega_twi15i2c_sendAddressEhPh+0x8>
    3748:	48 e1       	ldi	r20, 0x18	; 24
    374a:	01 c0       	rjmp	.+2      	; 0x374e <_ZN10atmega_twi15i2c_sendAddressEhPh+0xa>
    374c:	40 e4       	ldi	r20, 0x40	; 64
	
	//Load SLA_W into TWDR Register. Clear TWINT bit to start transmission.
	TWDR = address; 
    374e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    3752:	84 e8       	ldi	r24, 0x84	; 132
    3754:	80 93 bc 00 	sts	0x00BC, r24
   
	//Wait for TWINT flag set.
	while(!(TWCR & (1 << TWINT)));
    3758:	ec eb       	ldi	r30, 0xBC	; 188
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	90 81       	ld	r25, Z
    375e:	99 23       	and	r25, r25
    3760:	ec f7       	brge	.-6      	; 0x375c <_ZN10atmega_twi15i2c_sendAddressEhPh+0x18>
	
	//Check value of TWI Status Register.
	(TWSR & 0xF8) == ack ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    3762:	20 91 b9 00 	lds	r18, 0x00B9
    3766:	28 7f       	andi	r18, 0xF8	; 248
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	84 2f       	mov	r24, r20
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	28 17       	cp	r18, r24
    3770:	39 07       	cpc	r19, r25
    3772:	19 f4       	brne	.+6      	; 0x377a <_ZN10atmega_twi15i2c_sendAddressEhPh+0x36>
    3774:	fb 01       	movw	r30, r22
    3776:	10 82       	st	Z, r1
    3778:	08 95       	ret
    377a:	80 91 b9 00 	lds	r24, 0x00B9
    377e:	88 7f       	andi	r24, 0xF8	; 248
    3780:	fb 01       	movw	r30, r22
    3782:	80 83       	st	Z, r24
    3784:	08 95       	ret

00003786 <_ZN10atmega_twi12i2c_sendDataEhPh>:
//Function to transmit a data byte.  No return value.  Sets errno
//with error code if function failed, clears errno if function successful.
void atmega_twi::i2c_sendData(const uint8_t data, uint8_t* errno)
{
	//Load SLA_W into TWDR Register. Clear TWINT bit to start transmission.
	TWDR = data; 
    3786:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);	
    378a:	84 e8       	ldi	r24, 0x84	; 132
    378c:	80 93 bc 00 	sts	0x00BC, r24
	
	//Wait for TWINT flag set.
	while(!(TWCR & (1 << TWINT)));
    3790:	ec eb       	ldi	r30, 0xBC	; 188
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	80 81       	ld	r24, Z
    3796:	88 23       	and	r24, r24
    3798:	ec f7       	brge	.-6      	; 0x3794 <_ZN10atmega_twi12i2c_sendDataEhPh+0xe>
	
	//Check value of TWI Status Register
	(TWSR & 0xF8) == MT_DATA_ACK ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    379a:	80 91 b9 00 	lds	r24, 0x00B9
    379e:	88 7f       	andi	r24, 0xF8	; 248
    37a0:	88 32       	cpi	r24, 0x28	; 40
    37a2:	19 f4       	brne	.+6      	; 0x37aa <_ZN10atmega_twi12i2c_sendDataEhPh+0x24>
    37a4:	fb 01       	movw	r30, r22
    37a6:	10 82       	st	Z, r1
    37a8:	08 95       	ret
    37aa:	80 91 b9 00 	lds	r24, 0x00B9
    37ae:	88 7f       	andi	r24, 0xF8	; 248
    37b0:	fb 01       	movw	r30, r22
    37b2:	80 83       	st	Z, r24
    37b4:	08 95       	ret

000037b6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh>:
uint8_t atmega_twi::i2c_receiveData_NACK(uint8_t* errno)
{
	uint8_t data;
  
	//Start transmission.
	TWCR = (1 << TWINT) | (1 << TWEN);
    37b6:	24 e8       	ldi	r18, 0x84	; 132
    37b8:	20 93 bc 00 	sts	0x00BC, r18
  
	//Wait for TWINT flag set.  
	while(!(TWCR & (1 << TWINT)));
    37bc:	ec eb       	ldi	r30, 0xBC	; 188
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	20 81       	ld	r18, Z
    37c2:	22 23       	and	r18, r18
    37c4:	ec f7       	brge	.-6      	; 0x37c0 <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0xa>
	
	//Check value of TWI Status Register.   	   
	(TWSR & 0xF8) == MR_DATA_NACK ? (*errno) = 0 : (*errno) = (TWSR & 0xF8);
    37c6:	20 91 b9 00 	lds	r18, 0x00B9
    37ca:	28 7f       	andi	r18, 0xF8	; 248
    37cc:	28 35       	cpi	r18, 0x58	; 88
    37ce:	19 f4       	brne	.+6      	; 0x37d6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0x20>
    37d0:	fc 01       	movw	r30, r24
    37d2:	10 82       	st	Z, r1
    37d4:	05 c0       	rjmp	.+10     	; 0x37e0 <_ZN10atmega_twi20i2c_receiveData_NACKEPh+0x2a>
    37d6:	20 91 b9 00 	lds	r18, 0x00B9
    37da:	28 7f       	andi	r18, 0xF8	; 248
    37dc:	fc 01       	movw	r30, r24
    37de:	20 83       	st	Z, r18
  
	data = TWDR;
    37e0:	80 91 bb 00 	lds	r24, 0x00BB
	return(data);
}
    37e4:	08 95       	ret

000037e6 <_ZN10atmega_twi8i2c_stopEv>:

//Function to end the i2c communication.   	
void atmega_twi::i2c_stop()
{
	//Transmit STOP condition.
	TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    37e6:	84 e9       	ldi	r24, 0x94	; 148
    37e8:	80 93 bc 00 	sts	0x00BC, r24
    37ec:	08 95       	ret

000037ee <_ZN11atmega_uart9uart_initEj>:
#include "atmega_uart.h"

///Configure the UART.
void atmega_uart::uart_init(const uint16_t ubrr)
{
	UBRR0H = (uint8_t)(ubrr >> 8);							//Load upper ubrr byte.
    37ee:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t)ubrr;									//Load lower ubrr byte.
    37f2:	80 93 c4 00 	sts	0x00C4, r24
	//UCSR0A = (1 << U2X0);									//Double speed mode.
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);	//Enable RX interrupt, receive and transmit circuits.
    37f6:	88 e9       	ldi	r24, 0x98	; 152
    37f8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3 << UCSZ00);									//Use 8 bit bytes.
    37fc:	86 e0       	ldi	r24, 0x06	; 6
    37fe:	80 93 c2 00 	sts	0x00C2, r24
    3802:	08 95       	ret

00003804 <_ZN11atmega_uart7tx_byteEh>:
}

//Transmits a single byte out the UART.
void atmega_uart::tx_byte(const uint8_t data)
{
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    3804:	e0 ec       	ldi	r30, 0xC0	; 192
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	90 81       	ld	r25, Z
    380a:	95 ff       	sbrs	r25, 5
    380c:	fd cf       	rjmp	.-6      	; 0x3808 <_ZN11atmega_uart7tx_byteEh+0x4>
	UDR0 = data;
    380e:	80 93 c6 00 	sts	0x00C6, r24
    3812:	08 95       	ret

00003814 <_ZN11atmega_uart7tx_wordEj>:
}

//Transmit 16-bit number.
void atmega_uart::tx_word(const uint16_t data)
{
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    3814:	e0 ec       	ldi	r30, 0xC0	; 192
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	20 81       	ld	r18, Z
    381a:	25 ff       	sbrs	r18, 5
    381c:	fd cf       	rjmp	.-6      	; 0x3818 <_ZN11atmega_uart7tx_wordEj+0x4>
	UDR0 = data >> 8;
    381e:	90 93 c6 00 	sts	0x00C6, r25
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    3822:	e0 ec       	ldi	r30, 0xC0	; 192
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	90 81       	ld	r25, Z
    3828:	95 ff       	sbrs	r25, 5
    382a:	fd cf       	rjmp	.-6      	; 0x3826 <_ZN11atmega_uart7tx_wordEj+0x12>
	UDR0 = data;
    382c:	80 93 c6 00 	sts	0x00C6, r24
    3830:	08 95       	ret

00003832 <_ZN11atmega_uart8tx_dwordEm>:
}

//Transmit 32-bit number.
void atmega_uart::tx_dword(const uint32_t data)
{
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    3836:	e0 ec       	ldi	r30, 0xC0	; 192
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	20 81       	ld	r18, Z
    383c:	25 ff       	sbrs	r18, 5
    383e:	fd cf       	rjmp	.-6      	; 0x383a <_ZN11atmega_uart8tx_dwordEm+0x8>
	UDR0 = data >> 24;
    3840:	09 2f       	mov	r16, r25
    3842:	11 27       	eor	r17, r17
    3844:	22 27       	eor	r18, r18
    3846:	33 27       	eor	r19, r19
    3848:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    384c:	e0 ec       	ldi	r30, 0xC0	; 192
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	20 81       	ld	r18, Z
    3852:	25 ff       	sbrs	r18, 5
    3854:	fd cf       	rjmp	.-6      	; 0x3850 <_ZN11atmega_uart8tx_dwordEm+0x1e>
	UDR0 = data >> 16;
    3856:	8c 01       	movw	r16, r24
    3858:	22 27       	eor	r18, r18
    385a:	33 27       	eor	r19, r19
    385c:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    3860:	e0 ec       	ldi	r30, 0xC0	; 192
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	20 81       	ld	r18, Z
    3866:	25 ff       	sbrs	r18, 5
    3868:	fd cf       	rjmp	.-6      	; 0x3864 <_ZN11atmega_uart8tx_dwordEm+0x32>
	UDR0 = data >> 8;
    386a:	07 2f       	mov	r16, r23
    386c:	18 2f       	mov	r17, r24
    386e:	29 2f       	mov	r18, r25
    3870:	33 27       	eor	r19, r19
    3872:	00 93 c6 00 	sts	0x00C6, r16
	while(!(UCSR0A & (1 << UDRE0))); //Wait for buffer to be free.
    3876:	e0 ec       	ldi	r30, 0xC0	; 192
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	20 81       	ld	r18, Z
    387c:	25 ff       	sbrs	r18, 5
    387e:	fd cf       	rjmp	.-6      	; 0x387a <_ZN11atmega_uart8tx_dwordEm+0x48>
	UDR0 = data;
    3880:	60 93 c6 00 	sts	0x00C6, r22
}
    3884:	1f 91       	pop	r17
    3886:	0f 91       	pop	r16
    3888:	08 95       	ret

0000388a <_ZN11atmega_uart9tx_stringEPKc>:

//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
    388a:	1f 93       	push	r17
    388c:	cf 93       	push	r28
    388e:	df 93       	push	r29
    3890:	ec 01       	movw	r28, r24
	uint8_t tx_string_index = 0;
	
	while(data[tx_string_index])
    3892:	88 81       	ld	r24, Y
    3894:	88 23       	and	r24, r24
    3896:	51 f0       	breq	.+20     	; 0x38ac <_ZN11atmega_uart9tx_stringEPKc+0x22>
}

//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
	uint8_t tx_string_index = 0;
    3898:	10 e0       	ldi	r17, 0x00	; 0
	
	while(data[tx_string_index])
	{
		tx_byte(data[tx_string_index++]);	//Transmit byte.
    389a:	1f 5f       	subi	r17, 0xFF	; 255
    389c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
//Transmits a string from RAM out the UART.
void atmega_uart::tx_string(const char *data)
{
	uint8_t tx_string_index = 0;
	
	while(data[tx_string_index])
    38a0:	fe 01       	movw	r30, r28
    38a2:	e1 0f       	add	r30, r17
    38a4:	f1 1d       	adc	r31, r1
    38a6:	80 81       	ld	r24, Z
    38a8:	81 11       	cpse	r24, r1
    38aa:	f7 cf       	rjmp	.-18     	; 0x389a <_ZN11atmega_uart9tx_stringEPKc+0x10>
	{
		tx_byte(data[tx_string_index++]);	//Transmit byte.
	}
}
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	1f 91       	pop	r17
    38b2:	08 95       	ret

000038b4 <_ZN11atmega_uart11tx_string_pEPKc>:

//Transmits a string from program space out the UART.
void atmega_uart::tx_string_p(const char *data)
{
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	ec 01       	movw	r28, r24
	while(pgm_read_byte(data))
    38ba:	fe 01       	movw	r30, r28
    38bc:	24 91       	lpm	r18, Z
    38be:	22 23       	and	r18, r18
    38c0:	51 f0       	breq	.+20     	; 0x38d6 <_ZN11atmega_uart11tx_string_pEPKc+0x22>
	{
		tx_byte(pgm_read_byte(data));
    38c2:	fc 01       	movw	r30, r24
    38c4:	84 91       	lpm	r24, Z
    38c6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			
		data++;
    38ca:	21 96       	adiw	r28, 0x01	; 1
}

//Transmits a string from program space out the UART.
void atmega_uart::tx_string_p(const char *data)
{
	while(pgm_read_byte(data))
    38cc:	ce 01       	movw	r24, r28
    38ce:	fe 01       	movw	r30, r28
    38d0:	24 91       	lpm	r18, Z
    38d2:	21 11       	cpse	r18, r1
    38d4:	f6 cf       	rjmp	.-20     	; 0x38c2 <_ZN11atmega_uart11tx_string_pEPKc+0xe>
	{
		tx_byte(pgm_read_byte(data));
			
		data++;
	}
}
    38d6:	df 91       	pop	r29
    38d8:	cf 91       	pop	r28
    38da:	08 95       	ret

000038dc <_ZN11atmega_uart5tx_tfEb>:

//Transmit 0x01 for true, 0x00 for false.
void atmega_uart::tx_tf(const bool data)
{
	data ? atmega_uart::tx_byte(0x01) : atmega_uart::tx_byte(0x00);
    38dc:	88 23       	and	r24, r24
    38de:	21 f0       	breq	.+8      	; 0x38e8 <_ZN11atmega_uart5tx_tfEb+0xc>
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    38e6:	08 95       	ret
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    38ee:	08 95       	ret

000038f0 <_Z19i2c_load_electrodesP8as_class>:
	sei(); //Enable global interrupts.
}

//Update config for one or two electrodes.
void i2c_load_electrodes(as_class *as)
{
    38f0:	1f 93       	push	r17
    38f2:	cf 93       	push	r28
    38f4:	df 93       	push	r29
    38f6:	ec 01       	movw	r28, r24
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    38f8:	8f e9       	ldi	r24, 0x9F	; 159
    38fa:	91 e0       	ldi	r25, 0x01	; 1
    38fc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    3900:	6f e9       	ldi	r22, 0x9F	; 159
    3902:	71 e0       	ldi	r23, 0x01	; 1
    3904:	87 e9       	ldi	r24, 0x97	; 151
    3906:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    390a:	8f e9       	ldi	r24, 0x9F	; 159
    390c:	91 e0       	ldi	r25, 0x01	; 1
    390e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    3912:	18 2f       	mov	r17, r24
	atmega_twi::i2c_stop();
    3914:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
	
	//Setup 2 electrode configuration.
	if(as->get_num_electrodes() == ELEC_2)
    3918:	ce 01       	movw	r24, r28
    391a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <_ZN8as_class18get_num_electrodesEv>
    391e:	81 11       	cpse	r24, r1
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <_Z19i2c_load_electrodesP8as_class+0x38>
	{
		temp |= ANS_2_ELEC;
    3922:	c1 2f       	mov	r28, r17
    3924:	c2 60       	ori	r28, 0x02	; 2
    3926:	02 c0       	rjmp	.+4      	; 0x392c <_Z19i2c_load_electrodesP8as_class+0x3c>
	}
	//Setup 3 electrode configuration.
	else
	{
		temp &= ~ANS_2_ELEC;
    3928:	c1 2f       	mov	r28, r17
    392a:	cd 7f       	andi	r28, 0xFD	; 253
	}
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    392c:	8f e9       	ldi	r24, 0x9F	; 159
    392e:	91 e0       	ldi	r25, 0x01	; 1
    3930:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    3934:	6f e9       	ldi	r22, 0x9F	; 159
    3936:	71 e0       	ldi	r23, 0x01	; 1
    3938:	86 e9       	ldi	r24, 0x96	; 150
    393a:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    393e:	6f e9       	ldi	r22, 0x9F	; 159
    3940:	71 e0       	ldi	r23, 0x01	; 1
    3942:	8c 2f       	mov	r24, r28
    3944:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    3948:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
}
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	1f 91       	pop	r17
    3952:	08 95       	ret

00003954 <_Z14i2c_connect_cev>:

//Connects the counter electrode to the system.
void i2c_connect_ce()
{
    3954:	cf 93       	push	r28
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    3956:	8f e9       	ldi	r24, 0x9F	; 159
    3958:	91 e0       	ldi	r25, 0x01	; 1
    395a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    395e:	6f e9       	ldi	r22, 0x9F	; 159
    3960:	71 e0       	ldi	r23, 0x01	; 1
    3962:	87 e9       	ldi	r24, 0x97	; 151
    3964:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    3968:	8f e9       	ldi	r24, 0x9F	; 159
    396a:	91 e0       	ldi	r25, 0x01	; 1
    396c:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    3970:	c8 2f       	mov	r28, r24
	atmega_twi::i2c_stop();
    3972:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
	
	temp |= ANS_CE;	//Set bit for counter electrode.
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    3976:	8f e9       	ldi	r24, 0x9F	; 159
    3978:	91 e0       	ldi	r25, 0x01	; 1
    397a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    397e:	6f e9       	ldi	r22, 0x9F	; 159
    3980:	71 e0       	ldi	r23, 0x01	; 1
    3982:	86 e9       	ldi	r24, 0x96	; 150
    3984:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    3988:	6f e9       	ldi	r22, 0x9F	; 159
    398a:	71 e0       	ldi	r23, 0x01	; 1
    398c:	8c 2f       	mov	r24, r28
    398e:	81 60       	ori	r24, 0x01	; 1
    3990:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    3994:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
}
    3998:	cf 91       	pop	r28
    399a:	08 95       	ret

0000399c <_Z17i2c_disconnect_cev>:

//Disconnects the counter electrode from the system.
void i2c_disconnect_ce()
{
    399c:	cf 93       	push	r28
	uint8_t temp;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    399e:	8f e9       	ldi	r24, 0x9F	; 159
    39a0:	91 e0       	ldi	r25, 0x01	; 1
    39a2:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    39a6:	6f e9       	ldi	r22, 0x9F	; 159
    39a8:	71 e0       	ldi	r23, 0x01	; 1
    39aa:	87 e9       	ldi	r24, 0x97	; 151
    39ac:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	temp = atmega_twi::i2c_receiveData_NACK(&errno);
    39b0:	8f e9       	ldi	r24, 0x9F	; 159
    39b2:	91 e0       	ldi	r25, 0x01	; 1
    39b4:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    39b8:	c8 2f       	mov	r28, r24
	atmega_twi::i2c_stop();
    39ba:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
	
	temp &= ~ANS_CE;	//Set bit for counter electrode.
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    39be:	8f e9       	ldi	r24, 0x9F	; 159
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    39c6:	6f e9       	ldi	r22, 0x9F	; 159
    39c8:	71 e0       	ldi	r23, 0x01	; 1
    39ca:	86 e9       	ldi	r24, 0x96	; 150
    39cc:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(temp, &errno);
    39d0:	6f e9       	ldi	r22, 0x9F	; 159
    39d2:	71 e0       	ldi	r23, 0x01	; 1
    39d4:	8c 2f       	mov	r24, r28
    39d6:	8e 7f       	andi	r24, 0xFE	; 254
    39d8:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    39dc:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
}
    39e0:	cf 91       	pop	r28
    39e2:	08 95       	ret

000039e4 <_Z12i2c_load_resP8as_class>:

//Update the resistor on the TIA.
void i2c_load_res(as_class *as)
{
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
	//Get current value of resistor tap.
	uint8_t temp = as->get_tia_res();
    39e8:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN8as_class11get_tia_resEv>
    39ec:	c8 2f       	mov	r28, r24
	uint8_t val;
	
	//Get analog switch channel values.
	atmega_twi::i2c_start(&errno);
    39ee:	8f e9       	ldi	r24, 0x9F	; 159
    39f0:	91 e0       	ldi	r25, 0x01	; 1
    39f2:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_R_ADDR, &errno);
    39f6:	6f e9       	ldi	r22, 0x9F	; 159
    39f8:	71 e0       	ldi	r23, 0x01	; 1
    39fa:	87 e9       	ldi	r24, 0x97	; 151
    39fc:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	val = atmega_twi::i2c_receiveData_NACK(&errno);
    3a00:	8f e9       	ldi	r24, 0x9F	; 159
    3a02:	91 e0       	ldi	r25, 0x01	; 1
    3a04:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN10atmega_twi20i2c_receiveData_NACKEPh>
    3a08:	d8 2f       	mov	r29, r24
	atmega_twi::i2c_stop();
    3a0a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
	
	//Strip away resistor data and keep electrode data.
	val &= 0x03;
    3a0e:	d3 70       	andi	r29, 0x03	; 3
	
	if(temp == 1)		//100 ohms.
    3a10:	c1 30       	cpi	r28, 0x01	; 1
    3a12:	11 f4       	brne	.+4      	; 0x3a18 <_Z12i2c_load_resP8as_class+0x34>
		val |= 0x20;
    3a14:	d0 62       	ori	r29, 0x20	; 32
    3a16:	11 c0       	rjmp	.+34     	; 0x3a3a <_Z12i2c_load_resP8as_class+0x56>
	else if(temp == 2)	//1k ohm.
    3a18:	c2 30       	cpi	r28, 0x02	; 2
    3a1a:	11 f4       	brne	.+4      	; 0x3a20 <_Z12i2c_load_resP8as_class+0x3c>
		val |= 0x10;	
    3a1c:	d0 61       	ori	r29, 0x10	; 16
    3a1e:	0d c0       	rjmp	.+26     	; 0x3a3a <_Z12i2c_load_resP8as_class+0x56>
	else if(temp == 3)	//5.1k ohm.
    3a20:	c3 30       	cpi	r28, 0x03	; 3
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <_Z12i2c_load_resP8as_class+0x44>
		val |= 0x40;	
    3a24:	d0 64       	ori	r29, 0x40	; 64
    3a26:	09 c0       	rjmp	.+18     	; 0x3a3a <_Z12i2c_load_resP8as_class+0x56>
	else if(temp == 4)	//10k ohms.
    3a28:	c4 30       	cpi	r28, 0x04	; 4
    3a2a:	11 f4       	brne	.+4      	; 0x3a30 <_Z12i2c_load_resP8as_class+0x4c>
		val |= 0x08;
    3a2c:	d8 60       	ori	r29, 0x08	; 8
    3a2e:	05 c0       	rjmp	.+10     	; 0x3a3a <_Z12i2c_load_resP8as_class+0x56>
	else if(temp == 5)	//51k ohms.
    3a30:	c5 30       	cpi	r28, 0x05	; 5
    3a32:	11 f4       	brne	.+4      	; 0x3a38 <_Z12i2c_load_resP8as_class+0x54>
		val |= 0x80;
    3a34:	d0 68       	ori	r29, 0x80	; 128
    3a36:	01 c0       	rjmp	.+2      	; 0x3a3a <_Z12i2c_load_resP8as_class+0x56>
	else                //100k ohms.
		val |= 0x04;
    3a38:	d4 60       	ori	r29, 0x04	; 4
	
	//Set analog switch channel values.
	atmega_twi::i2c_start(&errno);
    3a3a:	8f e9       	ldi	r24, 0x9F	; 159
    3a3c:	91 e0       	ldi	r25, 0x01	; 1
    3a3e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_ANS_W_ADDR, &errno);
    3a42:	6f e9       	ldi	r22, 0x9F	; 159
    3a44:	71 e0       	ldi	r23, 0x01	; 1
    3a46:	86 e9       	ldi	r24, 0x96	; 150
    3a48:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(val, &errno);
    3a4c:	6f e9       	ldi	r22, 0x9F	; 159
    3a4e:	71 e0       	ldi	r23, 0x01	; 1
    3a50:	8d 2f       	mov	r24, r29
    3a52:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    3a56:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
}
    3a5a:	df 91       	pop	r29
    3a5c:	cf 91       	pop	r28
    3a5e:	08 95       	ret

00003a60 <_Z16init_i2c_devicesP8as_class>:

//Set initial capacitor and resistor values for the TIA.
void init_i2c_devices(as_class *as)
{
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	ec 01       	movw	r28, r24
	//Enable updates to the digital pot wiper.
	atmega_twi::i2c_start(&errno);
    3a66:	8f e9       	ldi	r24, 0x9F	; 159
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN10atmega_twi9i2c_startEPh>
	atmega_twi::i2c_sendAddress(I2C_POT_W_ADDR, &errno);
    3a6e:	6f e9       	ldi	r22, 0x9F	; 159
    3a70:	71 e0       	ldi	r23, 0x01	; 1
    3a72:	88 e5       	ldi	r24, 0x58	; 88
    3a74:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN10atmega_twi15i2c_sendAddressEhPh>
	atmega_twi::i2c_sendData(0x1C, &errno);
    3a78:	6f e9       	ldi	r22, 0x9F	; 159
    3a7a:	71 e0       	ldi	r23, 0x01	; 1
    3a7c:	8c e1       	ldi	r24, 0x1C	; 28
    3a7e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_sendData(0x02, &errno);
    3a82:	6f e9       	ldi	r22, 0x9F	; 159
    3a84:	71 e0       	ldi	r23, 0x01	; 1
    3a86:	82 e0       	ldi	r24, 0x02	; 2
    3a88:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN10atmega_twi12i2c_sendDataEhPh>
	atmega_twi::i2c_stop();
    3a8c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN10atmega_twi8i2c_stopEv>
	
	//Ensure all analog channels are configured to their default states
	//and the working electrode is disconnected on startup.  Also
	//set initial resistance for TIA digital pot.
	i2c_disconnect_ce();
    3a90:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z17i2c_disconnect_cev>
	i2c_load_electrodes(as);
    3a94:	ce 01       	movw	r24, r28
    3a96:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_Z19i2c_load_electrodesP8as_class>
	i2c_load_res(as);
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_Z12i2c_load_resP8as_class>
}
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	08 95       	ret

00003aa6 <_Z9write_dacj>:

/****************************************************ADC and DAC Routines****************************************************/
//Write a 16-bit word of data to the DAC.
//This function is designed for a 12-bit DAC.
void write_dac(uint16_t data)
{
    3aa6:	cf 93       	push	r28
    3aa8:	c8 2f       	mov	r28, r24
	prtDACS &= ~(1 << DACS);	//Select DAC.
    3aaa:	2a 98       	cbi	0x05, 2	; 5
	
	//Set control bits and send data.
	atmega_spi::spi_write(0x70 | (data >> 8));
    3aac:	89 2f       	mov	r24, r25
    3aae:	80 67       	ori	r24, 0x70	; 112
    3ab0:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(data);
    3ab4:	8c 2f       	mov	r24, r28
    3ab6:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	
	prtDACS |= (1 << DACS);	//Unselect DAC.
    3aba:	2a 9a       	sbi	0x05, 2	; 5
}
    3abc:	cf 91       	pop	r28
    3abe:	08 95       	ret

00003ac0 <_Z8read_adcv>:

//Read a 16-bit word from the ADC.
//This function is designed for a 12-bit ADC.
uint16_t read_adc()
{
    3ac0:	cf 93       	push	r28
	uint8_t lower_byte, upper_byte;
	uint16_t data;
	
	prtADCS &= ~(1 << ADCS);	//Select ADC.
    3ac2:	29 98       	cbi	0x05, 1	; 5
	
	upper_byte = atmega_spi::spi_read();
    3ac4:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN10atmega_spi8spi_readEv>
    3ac8:	c8 2f       	mov	r28, r24
	lower_byte = atmega_spi::spi_read();
    3aca:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN10atmega_spi8spi_readEv>
	data = (upper_byte << 7);
    3ace:	90 e8       	ldi	r25, 0x80	; 128
    3ad0:	c9 9f       	mul	r28, r25
    3ad2:	90 01       	movw	r18, r0
    3ad4:	11 24       	eor	r1, r1
	data |= (lower_byte >> 1);
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	95 95       	asr	r25
    3ada:	87 95       	ror	r24
    3adc:	82 2b       	or	r24, r18
    3ade:	93 2b       	or	r25, r19
	data &= 0x0FFF;
	
	prtADCS |= (1 << ADCS);	//Unselect ADC.
    3ae0:	29 9a       	sbi	0x05, 1	; 5
	
	return data;
}
    3ae2:	9f 70       	andi	r25, 0x0F	; 15
    3ae4:	cf 91       	pop	r28
    3ae6:	08 95       	ret

00003ae8 <_Z18fram1_set_write_env>:

/********************************************************FRAM Routines*******************************************************/
//Enable writes to the FRAM.
void fram1_set_write_en(void)
{
	prtRCS1 &= ~(1 << RCS1);//Select FRAM1.
    3ae8:	5b 98       	cbi	0x0b, 3	; 11
	atmega_spi::spi_write(FRAM_WREN);//Enable write latch.
    3aea:	86 e0       	ldi	r24, 0x06	; 6
    3aec:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	prtRCS1 |= (1 << RCS1);	//Unselect FRAM1.
    3af0:	5b 9a       	sbi	0x0b, 3	; 11
    3af2:	08 95       	ret

00003af4 <_Z16fram1_write_bytemh>:
}

//Write a byte to the FRAM.
void fram1_write_byte(uint32_t address, uint8_t data)
{
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	d6 2f       	mov	r29, r22
    3afe:	17 2f       	mov	r17, r23
    3b00:	08 2f       	mov	r16, r24
    3b02:	c4 2f       	mov	r28, r20
	fram1_set_write_en();
    3b04:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_Z18fram1_set_write_env>
	prtRCS1 &= ~(1 << RCS1);//Select FRAM1.
    3b08:	5b 98       	cbi	0x0b, 3	; 11
	atmega_spi::spi_write(FRAM_WRITE);
    3b0a:	82 e0       	ldi	r24, 0x02	; 2
    3b0c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(address >> 16);
    3b10:	80 2f       	mov	r24, r16
    3b12:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(address >> 8);
    3b16:	81 2f       	mov	r24, r17
    3b18:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(address);
    3b1c:	8d 2f       	mov	r24, r29
    3b1e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(data);	
    3b22:	8c 2f       	mov	r24, r28
    3b24:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	prtRCS1 |= (1 << RCS1);	//Unselect FRAM1.
    3b28:	5b 9a       	sbi	0x0b, 3	; 11
}
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <_Z15fram1_read_bytem>:

//Read a byte from the FRAM.
uint8_t fram1_read_byte(uint32_t address)
{
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	c6 2f       	mov	r28, r22
    3b3c:	d7 2f       	mov	r29, r23
    3b3e:	18 2f       	mov	r17, r24
	uint8_t data;
	
	prtRCS1 &= ~(1 << RCS1);//Select FRAM1.
    3b40:	5b 98       	cbi	0x0b, 3	; 11
	atmega_spi::spi_write(FRAM_READ);
    3b42:	83 e0       	ldi	r24, 0x03	; 3
    3b44:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(address >> 16);
    3b48:	81 2f       	mov	r24, r17
    3b4a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(address >> 8);
    3b4e:	8d 2f       	mov	r24, r29
    3b50:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	atmega_spi::spi_write(address);
    3b54:	8c 2f       	mov	r24, r28
    3b56:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_ZN10atmega_spi9spi_writeEh>
	data = atmega_spi::spi_read();
    3b5a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN10atmega_spi8spi_readEv>
	prtRCS1 |= (1 << RCS1);	//Unselect FRAM1.
    3b5e:	5b 9a       	sbi	0x0b, 3	; 11
	return data;
}
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	1f 91       	pop	r17
    3b66:	08 95       	ret

00003b68 <_Z16fram1_write_wordmj>:

//Write word to FRAM.
void fram1_write_word(uint32_t address, uint16_t data)
{
    3b68:	cf 92       	push	r12
    3b6a:	df 92       	push	r13
    3b6c:	ef 92       	push	r14
    3b6e:	ff 92       	push	r15
    3b70:	cf 93       	push	r28
    3b72:	6b 01       	movw	r12, r22
    3b74:	7c 01       	movw	r14, r24
    3b76:	c4 2f       	mov	r28, r20
    3b78:	45 2f       	mov	r20, r21
	fram1_write_byte(address, data >> 8);
    3b7a:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_Z16fram1_write_bytemh>
	fram1_write_byte(address + 1, data);
    3b7e:	c7 01       	movw	r24, r14
    3b80:	b6 01       	movw	r22, r12
    3b82:	6f 5f       	subi	r22, 0xFF	; 255
    3b84:	7f 4f       	sbci	r23, 0xFF	; 255
    3b86:	8f 4f       	sbci	r24, 0xFF	; 255
    3b88:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8a:	4c 2f       	mov	r20, r28
    3b8c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_Z16fram1_write_bytemh>
}
    3b90:	cf 91       	pop	r28
    3b92:	ff 90       	pop	r15
    3b94:	ef 90       	pop	r14
    3b96:	df 90       	pop	r13
    3b98:	cf 90       	pop	r12
    3b9a:	08 95       	ret

00003b9c <_Z15fram1_read_wordm>:

//Read word from FRAM.
uint16_t fram1_read_word(uint32_t address)
{
    3b9c:	cf 92       	push	r12
    3b9e:	df 92       	push	r13
    3ba0:	ef 92       	push	r14
    3ba2:	ff 92       	push	r15
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	6b 01       	movw	r12, r22
    3baa:	7c 01       	movw	r14, r24
	uint16_t data;
	data = fram1_read_byte(address);
    3bac:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <_Z15fram1_read_bytem>
    3bb0:	c8 2f       	mov	r28, r24
    3bb2:	d0 e0       	ldi	r29, 0x00	; 0
	data <<= 8;
    3bb4:	dc 2f       	mov	r29, r28
    3bb6:	cc 27       	eor	r28, r28
	data |= fram1_read_byte(address + 1);
    3bb8:	c7 01       	movw	r24, r14
    3bba:	b6 01       	movw	r22, r12
    3bbc:	6f 5f       	subi	r22, 0xFF	; 255
    3bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc4:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <_Z15fram1_read_bytem>
	return data;
}
    3bc8:	9e 01       	movw	r18, r28
    3bca:	28 2b       	or	r18, r24
    3bcc:	c9 01       	movw	r24, r18
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	ff 90       	pop	r15
    3bd4:	ef 90       	pop	r14
    3bd6:	df 90       	pop	r13
    3bd8:	cf 90       	pop	r12
    3bda:	08 95       	ret

00003bdc <_Z19fram_read_arb_blockPmPiS0_Pj>:

//Get arbitrary waveform block from FRAM.
void fram_read_arb_block(uint32_t *addr, int16_t *sv, int16_t *ev, uint16_t *rt)
{
    3bdc:	cf 92       	push	r12
    3bde:	df 92       	push	r13
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	ec 01       	movw	r28, r24
    3bee:	6b 01       	movw	r12, r22
    3bf0:	7a 01       	movw	r14, r20
    3bf2:	89 01       	movw	r16, r18
	*sv = (int16_t)fram1_read_word(*addr);
    3bf4:	68 81       	ld	r22, Y
    3bf6:	79 81       	ldd	r23, Y+1	; 0x01
    3bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfc:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    3c00:	f6 01       	movw	r30, r12
    3c02:	91 83       	std	Z+1, r25	; 0x01
    3c04:	80 83       	st	Z, r24
	*ev = (int16_t)fram1_read_word(*addr + 2);
    3c06:	88 81       	ld	r24, Y
    3c08:	99 81       	ldd	r25, Y+1	; 0x01
    3c0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3c0c:	bb 81       	ldd	r27, Y+3	; 0x03
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	6e 5f       	subi	r22, 0xFE	; 254
    3c14:	7f 4f       	sbci	r23, 0xFF	; 255
    3c16:	8f 4f       	sbci	r24, 0xFF	; 255
    3c18:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    3c1e:	f7 01       	movw	r30, r14
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	80 83       	st	Z, r24
	*rt = fram1_read_word(*addr + 4);
    3c24:	88 81       	ld	r24, Y
    3c26:	99 81       	ldd	r25, Y+1	; 0x01
    3c28:	aa 81       	ldd	r26, Y+2	; 0x02
    3c2a:	bb 81       	ldd	r27, Y+3	; 0x03
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	6c 5f       	subi	r22, 0xFC	; 252
    3c32:	7f 4f       	sbci	r23, 0xFF	; 255
    3c34:	8f 4f       	sbci	r24, 0xFF	; 255
    3c36:	9f 4f       	sbci	r25, 0xFF	; 255
    3c38:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	91 83       	std	Z+1, r25	; 0x01
    3c40:	80 83       	st	Z, r24
	*addr = (*addr + 6);
    3c42:	48 81       	ld	r20, Y
    3c44:	59 81       	ldd	r21, Y+1	; 0x01
    3c46:	6a 81       	ldd	r22, Y+2	; 0x02
    3c48:	7b 81       	ldd	r23, Y+3	; 0x03
    3c4a:	4a 5f       	subi	r20, 0xFA	; 250
    3c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c4e:	6f 4f       	sbci	r22, 0xFF	; 255
    3c50:	7f 4f       	sbci	r23, 0xFF	; 255
    3c52:	48 83       	st	Y, r20
    3c54:	59 83       	std	Y+1, r21	; 0x01
    3c56:	6a 83       	std	Y+2, r22	; 0x02
    3c58:	7b 83       	std	Y+3, r23	; 0x03
}
    3c5a:	df 91       	pop	r29
    3c5c:	cf 91       	pop	r28
    3c5e:	1f 91       	pop	r17
    3c60:	0f 91       	pop	r16
    3c62:	ff 90       	pop	r15
    3c64:	ef 90       	pop	r14
    3c66:	df 90       	pop	r13
    3c68:	cf 90       	pop	r12
    3c6a:	08 95       	ret

00003c6c <_Z3lpfjP8as_class>:

/********************************************************DSP Routines********************************************************/
//DSP software low pass filter.
uint16_t lpf(uint16_t input, as_class *as)
{
    3c6c:	cf 92       	push	r12
    3c6e:	df 92       	push	r13
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	0f 93       	push	r16
    3c76:	1f 93       	push	r17
    3c78:	cf 93       	push	r28
    3c7a:	df 93       	push	r29
    3c7c:	8b 01       	movw	r16, r22
	static double x[] = {ZERO_VOLT, ZERO_VOLT, ZERO_VOLT};
	static double y[] = {ZERO_VOLT, ZERO_VOLT};
	double output=0;
	
	//Shift x array to make room for new value.
	x[0] = x[1];
    3c7e:	ec e0       	ldi	r30, 0x0C	; 12
    3c80:	f1 e0       	ldi	r31, 0x01	; 1
    3c82:	40 81       	ld	r20, Z
    3c84:	51 81       	ldd	r21, Z+1	; 0x01
    3c86:	62 81       	ldd	r22, Z+2	; 0x02
    3c88:	73 81       	ldd	r23, Z+3	; 0x03
    3c8a:	40 93 08 01 	sts	0x0108, r20
    3c8e:	50 93 09 01 	sts	0x0109, r21
    3c92:	60 93 0a 01 	sts	0x010A, r22
    3c96:	70 93 0b 01 	sts	0x010B, r23
	x[1] = x[2];
    3c9a:	c0 e1       	ldi	r28, 0x10	; 16
    3c9c:	d1 e0       	ldi	r29, 0x01	; 1
    3c9e:	48 81       	ld	r20, Y
    3ca0:	59 81       	ldd	r21, Y+1	; 0x01
    3ca2:	6a 81       	ldd	r22, Y+2	; 0x02
    3ca4:	7b 81       	ldd	r23, Y+3	; 0x03
    3ca6:	40 83       	st	Z, r20
    3ca8:	51 83       	std	Z+1, r21	; 0x01
    3caa:	62 83       	std	Z+2, r22	; 0x02
    3cac:	73 83       	std	Z+3, r23	; 0x03
	
	//Insert new value.
	x[2] = (double)input;
    3cae:	bc 01       	movw	r22, r24
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__floatunsisf>
    3cb8:	68 83       	st	Y, r22
    3cba:	79 83       	std	Y+1, r23	; 0x01
    3cbc:	8a 83       	std	Y+2, r24	; 0x02
    3cbe:	9b 83       	std	Y+3, r25	; 0x03
	
	switch (as->get_soft_sel())
    3cc0:	c8 01       	movw	r24, r16
    3cc2:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8as_class12get_soft_selEv>
    3cc6:	83 30       	cpi	r24, 0x03	; 3
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <_Z3lpfjP8as_class+0x60>
    3cca:	de c0       	rjmp	.+444    	; 0x3e88 <_Z3lpfjP8as_class+0x21c>
    3ccc:	30 f4       	brcc	.+12     	; 0x3cda <_Z3lpfjP8as_class+0x6e>
    3cce:	81 30       	cpi	r24, 0x01	; 1
    3cd0:	69 f0       	breq	.+26     	; 0x3cec <_Z3lpfjP8as_class+0x80>
    3cd2:	82 30       	cpi	r24, 0x02	; 2
    3cd4:	09 f4       	brne	.+2      	; 0x3cd8 <_Z3lpfjP8as_class+0x6c>
    3cd6:	71 c0       	rjmp	.+226    	; 0x3dba <_Z3lpfjP8as_class+0x14e>
    3cd8:	73 c2       	rjmp	.+1254   	; 0x41c0 <_Z3lpfjP8as_class+0x554>
    3cda:	85 30       	cpi	r24, 0x05	; 5
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <_Z3lpfjP8as_class+0x74>
    3cde:	a2 c1       	rjmp	.+836    	; 0x4024 <_Z3lpfjP8as_class+0x3b8>
    3ce0:	08 f4       	brcc	.+2      	; 0x3ce4 <_Z3lpfjP8as_class+0x78>
    3ce2:	39 c1       	rjmp	.+626    	; 0x3f56 <_Z3lpfjP8as_class+0x2ea>
    3ce4:	86 30       	cpi	r24, 0x06	; 6
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <_Z3lpfjP8as_class+0x7e>
    3ce8:	04 c2       	rjmp	.+1032   	; 0x40f2 <_Z3lpfjP8as_class+0x486>
    3cea:	6a c2       	rjmp	.+1236   	; 0x41c0 <_Z3lpfjP8as_class+0x554>
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
    3cec:	21 e1       	ldi	r18, 0x11	; 17
    3cee:	3f e8       	ldi	r19, 0x8F	; 143
    3cf0:	44 e2       	ldi	r20, 0x24	; 36
    3cf2:	58 e3       	ldi	r21, 0x38	; 56
    3cf4:	60 91 10 01 	lds	r22, 0x0110
    3cf8:	70 91 11 01 	lds	r23, 0x0111
    3cfc:	80 91 12 01 	lds	r24, 0x0112
    3d00:	90 91 13 01 	lds	r25, 0x0113
    3d04:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3d08:	6b 01       	movw	r12, r22
    3d0a:	7c 01       	movw	r14, r24
			0.0000784677768152497 * x[1] +
    3d0c:	21 e1       	ldi	r18, 0x11	; 17
    3d0e:	3f e8       	ldi	r19, 0x8F	; 143
    3d10:	44 ea       	ldi	r20, 0xA4	; 164
    3d12:	58 e3       	ldi	r21, 0x38	; 56
    3d14:	60 91 0c 01 	lds	r22, 0x010C
    3d18:	70 91 0d 01 	lds	r23, 0x010D
    3d1c:	80 91 0e 01 	lds	r24, 0x010E
    3d20:	90 91 0f 01 	lds	r25, 0x010F
    3d24:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3d28:	9b 01       	movw	r18, r22
    3d2a:	ac 01       	movw	r20, r24
	x[2] = (double)input;
	
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
    3d2c:	c7 01       	movw	r24, r14
    3d2e:	b6 01       	movw	r22, r12
    3d30:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3d34:	6b 01       	movw	r12, r22
    3d36:	7c 01       	movw	r14, r24
			0.0000784677768152497 * x[1] +
			0.0000392338884076249 * x[0] +
    3d38:	21 e1       	ldi	r18, 0x11	; 17
    3d3a:	3f e8       	ldi	r19, 0x8F	; 143
    3d3c:	44 e2       	ldi	r20, 0x24	; 36
    3d3e:	58 e3       	ldi	r21, 0x38	; 56
    3d40:	60 91 08 01 	lds	r22, 0x0108
    3d44:	70 91 09 01 	lds	r23, 0x0109
    3d48:	80 91 0a 01 	lds	r24, 0x010A
    3d4c:	90 91 0b 01 	lds	r25, 0x010B
    3d50:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3d54:	9b 01       	movw	r18, r22
    3d56:	ac 01       	movw	r20, r24
	
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
			0.0000784677768152497 * x[1] +
    3d58:	c7 01       	movw	r24, r14
    3d5a:	b6 01       	movw	r22, r12
    3d5c:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3d60:	6b 01       	movw	r12, r22
    3d62:	7c 01       	movw	r14, r24
			0.0000392338884076249 * x[0] +
			1.982205298140594 * y[1] -
    3d64:	27 ee       	ldi	r18, 0xE7	; 231
    3d66:	38 eb       	ldi	r19, 0xB8	; 184
    3d68:	4d ef       	ldi	r20, 0xFD	; 253
    3d6a:	5f e3       	ldi	r21, 0x3F	; 63
    3d6c:	60 91 04 01 	lds	r22, 0x0104
    3d70:	70 91 05 01 	lds	r23, 0x0105
    3d74:	80 91 06 01 	lds	r24, 0x0106
    3d78:	90 91 07 01 	lds	r25, 0x0107
    3d7c:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3d80:	9b 01       	movw	r18, r22
    3d82:	ac 01       	movw	r20, r24
	switch (as->get_soft_sel())
	{
		case 1://1Hz Cutoff	
			output = 0.0000392338884076249 * x[2] +
			0.0000784677768152497 * x[1] +
			0.0000392338884076249 * x[0] +
    3d84:	c7 01       	movw	r24, r14
    3d86:	b6 01       	movw	r22, r12
    3d88:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3d8c:	6b 01       	movw	r12, r22
    3d8e:	7c 01       	movw	r14, r24
			1.982205298140594 * y[1] -
			0.982362233694224 * y[0];
    3d90:	27 e1       	ldi	r18, 0x17	; 23
    3d92:	3c e7       	ldi	r19, 0x7C	; 124
    3d94:	4b e7       	ldi	r20, 0x7B	; 123
    3d96:	5f e3       	ldi	r21, 0x3F	; 63
    3d98:	60 91 00 01 	lds	r22, 0x0100
    3d9c:	70 91 01 01 	lds	r23, 0x0101
    3da0:	80 91 02 01 	lds	r24, 0x0102
    3da4:	90 91 03 01 	lds	r25, 0x0103
    3da8:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3dac:	9b 01       	movw	r18, r22
    3dae:	ac 01       	movw	r20, r24
    3db0:	c7 01       	movw	r24, r14
    3db2:	b6 01       	movw	r22, r12
    3db4:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
		break;
    3db8:	69 c2       	rjmp	.+1234   	; 0x428c <_Z3lpfjP8as_class+0x620>
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
    3dba:	2e e1       	ldi	r18, 0x1E	; 30
    3dbc:	31 ec       	ldi	r19, 0xC1	; 193
    3dbe:	4c e3       	ldi	r20, 0x3C	; 60
    3dc0:	5a e3       	ldi	r21, 0x3A	; 58
    3dc2:	60 91 10 01 	lds	r22, 0x0110
    3dc6:	70 91 11 01 	lds	r23, 0x0111
    3dca:	80 91 12 01 	lds	r24, 0x0112
    3dce:	90 91 13 01 	lds	r25, 0x0113
    3dd2:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3dd6:	6b 01       	movw	r12, r22
    3dd8:	7c 01       	movw	r14, r24
			0.001440081468920 * x[1] +
    3dda:	2e e1       	ldi	r18, 0x1E	; 30
    3ddc:	31 ec       	ldi	r19, 0xC1	; 193
    3dde:	4c eb       	ldi	r20, 0xBC	; 188
    3de0:	5a e3       	ldi	r21, 0x3A	; 58
    3de2:	60 91 0c 01 	lds	r22, 0x010C
    3de6:	70 91 0d 01 	lds	r23, 0x010D
    3dea:	80 91 0e 01 	lds	r24, 0x010E
    3dee:	90 91 0f 01 	lds	r25, 0x010F
    3df2:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3df6:	9b 01       	movw	r18, r22
    3df8:	ac 01       	movw	r20, r24
			1.982205298140594 * y[1] -
			0.982362233694224 * y[0];
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
    3dfa:	c7 01       	movw	r24, r14
    3dfc:	b6 01       	movw	r22, r12
    3dfe:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3e02:	6b 01       	movw	r12, r22
    3e04:	7c 01       	movw	r14, r24
			0.001440081468920 * x[1] +
			0.000720040734460 * x[0] +
    3e06:	2e e1       	ldi	r18, 0x1E	; 30
    3e08:	31 ec       	ldi	r19, 0xC1	; 193
    3e0a:	4c e3       	ldi	r20, 0x3C	; 60
    3e0c:	5a e3       	ldi	r21, 0x3A	; 58
    3e0e:	60 91 08 01 	lds	r22, 0x0108
    3e12:	70 91 09 01 	lds	r23, 0x0109
    3e16:	80 91 0a 01 	lds	r24, 0x010A
    3e1a:	90 91 0b 01 	lds	r25, 0x010B
    3e1e:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3e22:	9b 01       	movw	r18, r22
    3e24:	ac 01       	movw	r20, r24
			0.982362233694224 * y[0];
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
			0.001440081468920 * x[1] +
    3e26:	c7 01       	movw	r24, r14
    3e28:	b6 01       	movw	r22, r12
    3e2a:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3e2e:	6b 01       	movw	r12, r22
    3e30:	7c 01       	movw	r14, r24
			0.000720040734460 * x[0] +
			1.922676771251572 * y[1] -
    3e32:	26 e4       	ldi	r18, 0x46	; 70
    3e34:	3a e1       	ldi	r19, 0x1A	; 26
    3e36:	46 ef       	ldi	r20, 0xF6	; 246
    3e38:	5f e3       	ldi	r21, 0x3F	; 63
    3e3a:	60 91 04 01 	lds	r22, 0x0104
    3e3e:	70 91 05 01 	lds	r23, 0x0105
    3e42:	80 91 06 01 	lds	r24, 0x0106
    3e46:	90 91 07 01 	lds	r25, 0x0107
    3e4a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3e4e:	9b 01       	movw	r18, r22
    3e50:	ac 01       	movw	r20, r24
		break;
		
		case 2://5Hz cutoff.		
			output = 0.000720040734460 * x[2] +
			0.001440081468920 * x[1] +
			0.000720040734460 * x[0] +
    3e52:	c7 01       	movw	r24, r14
    3e54:	b6 01       	movw	r22, r12
    3e56:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3e5a:	6b 01       	movw	r12, r22
    3e5c:	7c 01       	movw	r14, r24
			1.922676771251572 * y[1] -
			0.925556934189412 * y[0];
    3e5e:	2d e4       	ldi	r18, 0x4D	; 77
    3e60:	31 ef       	ldi	r19, 0xF1	; 241
    3e62:	4c e6       	ldi	r20, 0x6C	; 108
    3e64:	5f e3       	ldi	r21, 0x3F	; 63
    3e66:	60 91 00 01 	lds	r22, 0x0100
    3e6a:	70 91 01 01 	lds	r23, 0x0101
    3e6e:	80 91 02 01 	lds	r24, 0x0102
    3e72:	90 91 03 01 	lds	r25, 0x0103
    3e76:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3e7a:	9b 01       	movw	r18, r22
    3e7c:	ac 01       	movw	r20, r24
    3e7e:	c7 01       	movw	r24, r14
    3e80:	b6 01       	movw	r22, r12
    3e82:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
		break;
    3e86:	02 c2       	rjmp	.+1028   	; 0x428c <_Z3lpfjP8as_class+0x620>
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
    3e88:	28 ea       	ldi	r18, 0xA8	; 168
    3e8a:	36 e4       	ldi	r19, 0x46	; 70
    3e8c:	47 e3       	ldi	r20, 0x37	; 55
    3e8e:	5b e3       	ldi	r21, 0x3B	; 59
    3e90:	60 91 10 01 	lds	r22, 0x0110
    3e94:	70 91 11 01 	lds	r23, 0x0111
    3e98:	80 91 12 01 	lds	r24, 0x0112
    3e9c:	90 91 13 01 	lds	r25, 0x0113
    3ea0:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3ea4:	6b 01       	movw	r12, r22
    3ea6:	7c 01       	movw	r14, r24
			0.005593139818584 * x[1] +
    3ea8:	28 ea       	ldi	r18, 0xA8	; 168
    3eaa:	36 e4       	ldi	r19, 0x46	; 70
    3eac:	47 eb       	ldi	r20, 0xB7	; 183
    3eae:	5b e3       	ldi	r21, 0x3B	; 59
    3eb0:	60 91 0c 01 	lds	r22, 0x010C
    3eb4:	70 91 0d 01 	lds	r23, 0x010D
    3eb8:	80 91 0e 01 	lds	r24, 0x010E
    3ebc:	90 91 0f 01 	lds	r25, 0x010F
    3ec0:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3ec4:	9b 01       	movw	r18, r22
    3ec6:	ac 01       	movw	r20, r24
			1.922676771251572 * y[1] -
			0.925556934189412 * y[0];
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
    3ec8:	c7 01       	movw	r24, r14
    3eca:	b6 01       	movw	r22, r12
    3ecc:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3ed0:	6b 01       	movw	r12, r22
    3ed2:	7c 01       	movw	r14, r24
			0.005593139818584 * x[1] +
			0.002796569909292 * x[0] +
    3ed4:	28 ea       	ldi	r18, 0xA8	; 168
    3ed6:	36 e4       	ldi	r19, 0x46	; 70
    3ed8:	47 e3       	ldi	r20, 0x37	; 55
    3eda:	5b e3       	ldi	r21, 0x3B	; 59
    3edc:	60 91 08 01 	lds	r22, 0x0108
    3ee0:	70 91 09 01 	lds	r23, 0x0109
    3ee4:	80 91 0a 01 	lds	r24, 0x010A
    3ee8:	90 91 0b 01 	lds	r25, 0x010B
    3eec:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3ef0:	9b 01       	movw	r18, r22
    3ef2:	ac 01       	movw	r20, r24
			0.925556934189412 * y[0];
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
			0.005593139818584 * x[1] +
    3ef4:	c7 01       	movw	r24, r14
    3ef6:	b6 01       	movw	r22, r12
    3ef8:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3efc:	6b 01       	movw	r12, r22
    3efe:	7c 01       	movw	r14, r24
			0.002796569909292 * x[0] +
			1.844936876367589 * y[1] -
    3f00:	24 ee       	ldi	r18, 0xE4	; 228
    3f02:	36 e2       	ldi	r19, 0x26	; 38
    3f04:	4c ee       	ldi	r20, 0xEC	; 236
    3f06:	5f e3       	ldi	r21, 0x3F	; 63
    3f08:	60 91 04 01 	lds	r22, 0x0104
    3f0c:	70 91 05 01 	lds	r23, 0x0105
    3f10:	80 91 06 01 	lds	r24, 0x0106
    3f14:	90 91 07 01 	lds	r25, 0x0107
    3f18:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3f1c:	9b 01       	movw	r18, r22
    3f1e:	ac 01       	movw	r20, r24
		break;
		
		case 3://10Hz cutoff.		
			output = 0.002796569909292 * x[2] +
			0.005593139818584 * x[1] +
			0.002796569909292 * x[0] +
    3f20:	c7 01       	movw	r24, r14
    3f22:	b6 01       	movw	r22, r12
    3f24:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3f28:	6b 01       	movw	r12, r22
    3f2a:	7c 01       	movw	r14, r24
			1.844936876367589 * y[1] -
			0.856123156004757 * y[0];
    3f2c:	23 ee       	ldi	r18, 0xE3	; 227
    3f2e:	3a e2       	ldi	r19, 0x2A	; 42
    3f30:	4b e5       	ldi	r20, 0x5B	; 91
    3f32:	5f e3       	ldi	r21, 0x3F	; 63
    3f34:	60 91 00 01 	lds	r22, 0x0100
    3f38:	70 91 01 01 	lds	r23, 0x0101
    3f3c:	80 91 02 01 	lds	r24, 0x0102
    3f40:	90 91 03 01 	lds	r25, 0x0103
    3f44:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3f48:	9b 01       	movw	r18, r22
    3f4a:	ac 01       	movw	r20, r24
    3f4c:	c7 01       	movw	r24, r14
    3f4e:	b6 01       	movw	r22, r12
    3f50:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
		break;
    3f54:	9b c1       	rjmp	.+822    	; 0x428c <_Z3lpfjP8as_class+0x620>
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
    3f56:	2d e7       	ldi	r18, 0x7D	; 125
    3f58:	38 e9       	ldi	r19, 0x98	; 152
    3f5a:	4d e7       	ldi	r20, 0x7D	; 125
    3f5c:	5d e3       	ldi	r21, 0x3D	; 61
    3f5e:	60 91 10 01 	lds	r22, 0x0110
    3f62:	70 91 11 01 	lds	r23, 0x0111
    3f66:	80 91 12 01 	lds	r24, 0x0112
    3f6a:	90 91 13 01 	lds	r25, 0x0113
    3f6e:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3f72:	6b 01       	movw	r12, r22
    3f74:	7c 01       	movw	r14, r24
			0.123826001401403 * x[1] +
    3f76:	2d e7       	ldi	r18, 0x7D	; 125
    3f78:	38 e9       	ldi	r19, 0x98	; 152
    3f7a:	4d ef       	ldi	r20, 0xFD	; 253
    3f7c:	5d e3       	ldi	r21, 0x3D	; 61
    3f7e:	60 91 0c 01 	lds	r22, 0x010C
    3f82:	70 91 0d 01 	lds	r23, 0x010D
    3f86:	80 91 0e 01 	lds	r24, 0x010E
    3f8a:	90 91 0f 01 	lds	r25, 0x010F
    3f8e:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3f92:	9b 01       	movw	r18, r22
    3f94:	ac 01       	movw	r20, r24
			1.844936876367589 * y[1] -
			0.856123156004757 * y[0];
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
    3f96:	c7 01       	movw	r24, r14
    3f98:	b6 01       	movw	r22, r12
    3f9a:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3f9e:	6b 01       	movw	r12, r22
    3fa0:	7c 01       	movw	r14, r24
			0.123826001401403 * x[1] +
			0.061913000700701 * x[0] +
    3fa2:	2d e7       	ldi	r18, 0x7D	; 125
    3fa4:	38 e9       	ldi	r19, 0x98	; 152
    3fa6:	4d e7       	ldi	r20, 0x7D	; 125
    3fa8:	5d e3       	ldi	r21, 0x3D	; 61
    3faa:	60 91 08 01 	lds	r22, 0x0108
    3fae:	70 91 09 01 	lds	r23, 0x0109
    3fb2:	80 91 0a 01 	lds	r24, 0x010A
    3fb6:	90 91 0b 01 	lds	r25, 0x010B
    3fba:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3fbe:	9b 01       	movw	r18, r22
    3fc0:	ac 01       	movw	r20, r24
			0.856123156004757 * y[0];
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
			0.123826001401403 * x[1] +
    3fc2:	c7 01       	movw	r24, r14
    3fc4:	b6 01       	movw	r22, r12
    3fc6:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3fca:	6b 01       	movw	r12, r22
    3fcc:	7c 01       	movw	r14, r24
			0.061913000700701 * x[0] +
			1.183374513189903 * y[1] -
    3fce:	21 ed       	ldi	r18, 0xD1	; 209
    3fd0:	38 e7       	ldi	r19, 0x78	; 120
    3fd2:	47 e9       	ldi	r20, 0x97	; 151
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	60 91 04 01 	lds	r22, 0x0104
    3fda:	70 91 05 01 	lds	r23, 0x0105
    3fde:	80 91 06 01 	lds	r24, 0x0106
    3fe2:	90 91 07 01 	lds	r25, 0x0107
    3fe6:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    3fea:	9b 01       	movw	r18, r22
    3fec:	ac 01       	movw	r20, r24
		break;
		
		case 4://50Hz cutoff.		
			output = 0.061913000700701 * x[2] +
			0.123826001401403 * x[1] +
			0.061913000700701 * x[0] +
    3fee:	c7 01       	movw	r24, r14
    3ff0:	b6 01       	movw	r22, r12
    3ff2:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    3ff6:	6b 01       	movw	r12, r22
    3ff8:	7c 01       	movw	r14, r24
			1.183374513189903 * y[1] -
			0.431026515992709 * y[0];
    3ffa:	22 e8       	ldi	r18, 0x82	; 130
    3ffc:	3f ea       	ldi	r19, 0xAF	; 175
    3ffe:	4c ed       	ldi	r20, 0xDC	; 220
    4000:	5e e3       	ldi	r21, 0x3E	; 62
    4002:	60 91 00 01 	lds	r22, 0x0100
    4006:	70 91 01 01 	lds	r23, 0x0101
    400a:	80 91 02 01 	lds	r24, 0x0102
    400e:	90 91 03 01 	lds	r25, 0x0103
    4012:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    4016:	9b 01       	movw	r18, r22
    4018:	ac 01       	movw	r20, r24
    401a:	c7 01       	movw	r24, r14
    401c:	b6 01       	movw	r22, r12
    401e:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
		break;
    4022:	34 c1       	rjmp	.+616    	; 0x428c <_Z3lpfjP8as_class+0x620>
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
    4024:	25 e1       	ldi	r18, 0x15	; 21
    4026:	3a ea       	ldi	r19, 0xAA	; 170
    4028:	49 e6       	ldi	r20, 0x69	; 105
    402a:	5e e3       	ldi	r21, 0x3E	; 62
    402c:	60 91 10 01 	lds	r22, 0x0110
    4030:	70 91 11 01 	lds	r23, 0x0111
    4034:	80 91 12 01 	lds	r24, 0x0112
    4038:	90 91 13 01 	lds	r25, 0x0113
    403c:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    4040:	6b 01       	movw	r12, r22
    4042:	7c 01       	movw	r14, r24
			0.456375736398963 * x[1] +
    4044:	25 e1       	ldi	r18, 0x15	; 21
    4046:	3a ea       	ldi	r19, 0xAA	; 170
    4048:	49 ee       	ldi	r20, 0xE9	; 233
    404a:	5e e3       	ldi	r21, 0x3E	; 62
    404c:	60 91 0c 01 	lds	r22, 0x010C
    4050:	70 91 0d 01 	lds	r23, 0x010D
    4054:	80 91 0e 01 	lds	r24, 0x010E
    4058:	90 91 0f 01 	lds	r25, 0x010F
    405c:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    4060:	9b 01       	movw	r18, r22
    4062:	ac 01       	movw	r20, r24
			1.183374513189903 * y[1] -
			0.431026515992709 * y[0];
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
    4064:	c7 01       	movw	r24, r14
    4066:	b6 01       	movw	r22, r12
    4068:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    406c:	6b 01       	movw	r12, r22
    406e:	7c 01       	movw	r14, r24
			0.456375736398963 * x[1] +
			0.228187868199481 * x[0] +
    4070:	25 e1       	ldi	r18, 0x15	; 21
    4072:	3a ea       	ldi	r19, 0xAA	; 170
    4074:	49 e6       	ldi	r20, 0x69	; 105
    4076:	5e e3       	ldi	r21, 0x3E	; 62
    4078:	60 91 08 01 	lds	r22, 0x0108
    407c:	70 91 09 01 	lds	r23, 0x0109
    4080:	80 91 0a 01 	lds	r24, 0x010A
    4084:	90 91 0b 01 	lds	r25, 0x010B
    4088:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    408c:	9b 01       	movw	r18, r22
    408e:	ac 01       	movw	r20, r24
			0.431026515992709 * y[0];
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
			0.456375736398963 * x[1] +
    4090:	c7 01       	movw	r24, r14
    4092:	b6 01       	movw	r22, r12
    4094:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    4098:	6b 01       	movw	r12, r22
    409a:	7c 01       	movw	r14, r24
			0.228187868199481 * x[0] +
			0.271922988606727 * y[1] -
    409c:	2d e7       	ldi	r18, 0x7D	; 125
    409e:	39 e3       	ldi	r19, 0x39	; 57
    40a0:	4b e8       	ldi	r20, 0x8B	; 139
    40a2:	5e e3       	ldi	r21, 0x3E	; 62
    40a4:	60 91 04 01 	lds	r22, 0x0104
    40a8:	70 91 05 01 	lds	r23, 0x0105
    40ac:	80 91 06 01 	lds	r24, 0x0106
    40b0:	90 91 07 01 	lds	r25, 0x0107
    40b4:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    40b8:	9b 01       	movw	r18, r22
    40ba:	ac 01       	movw	r20, r24
		break;
		
		case 5://100Hz cutoff.
			output = 0.228187868199481 * x[2] +
			0.456375736398963 * x[1] +
			0.228187868199481 * x[0] +
    40bc:	c7 01       	movw	r24, r14
    40be:	b6 01       	movw	r22, r12
    40c0:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    40c4:	6b 01       	movw	r12, r22
    40c6:	7c 01       	movw	r14, r24
			0.271922988606727 * y[1] -
			0.184674461404652 * y[0];
    40c8:	2d e4       	ldi	r18, 0x4D	; 77
    40ca:	3b e1       	ldi	r19, 0x1B	; 27
    40cc:	4d e3       	ldi	r20, 0x3D	; 61
    40ce:	5e e3       	ldi	r21, 0x3E	; 62
    40d0:	60 91 00 01 	lds	r22, 0x0100
    40d4:	70 91 01 01 	lds	r23, 0x0101
    40d8:	80 91 02 01 	lds	r24, 0x0102
    40dc:	90 91 03 01 	lds	r25, 0x0103
    40e0:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    40e4:	9b 01       	movw	r18, r22
    40e6:	ac 01       	movw	r20, r24
    40e8:	c7 01       	movw	r24, r14
    40ea:	b6 01       	movw	r22, r12
    40ec:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
		break;
    40f0:	cd c0       	rjmp	.+410    	; 0x428c <_Z3lpfjP8as_class+0x620>
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
    40f2:	28 eb       	ldi	r18, 0xB8	; 184
    40f4:	32 e7       	ldi	r19, 0x72	; 114
    40f6:	47 e8       	ldi	r20, 0x87	; 135
    40f8:	5e e3       	ldi	r21, 0x3E	; 62
    40fa:	60 91 10 01 	lds	r22, 0x0110
    40fe:	70 91 11 01 	lds	r23, 0x0111
    4102:	80 91 12 01 	lds	r24, 0x0112
    4106:	90 91 13 01 	lds	r25, 0x0113
    410a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    410e:	6b 01       	movw	r12, r22
    4110:	7c 01       	movw	r14, r24
			0.529094226850682 * x[1] +
    4112:	28 eb       	ldi	r18, 0xB8	; 184
    4114:	32 e7       	ldi	r19, 0x72	; 114
    4116:	47 e0       	ldi	r20, 0x07	; 7
    4118:	5f e3       	ldi	r21, 0x3F	; 63
    411a:	60 91 0c 01 	lds	r22, 0x010C
    411e:	70 91 0d 01 	lds	r23, 0x010D
    4122:	80 91 0e 01 	lds	r24, 0x010E
    4126:	90 91 0f 01 	lds	r25, 0x010F
    412a:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    412e:	9b 01       	movw	r18, r22
    4130:	ac 01       	movw	r20, r24
			0.271922988606727 * y[1] -
			0.184674461404652 * y[0];
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
    4132:	c7 01       	movw	r24, r14
    4134:	b6 01       	movw	r22, r12
    4136:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    413a:	6b 01       	movw	r12, r22
    413c:	7c 01       	movw	r14, r24
			0.529094226850682 * x[1] +
			0.264547113425341 * x[0] +
    413e:	28 eb       	ldi	r18, 0xB8	; 184
    4140:	32 e7       	ldi	r19, 0x72	; 114
    4142:	47 e8       	ldi	r20, 0x87	; 135
    4144:	5e e3       	ldi	r21, 0x3E	; 62
    4146:	60 91 08 01 	lds	r22, 0x0108
    414a:	70 91 09 01 	lds	r23, 0x0109
    414e:	80 91 0a 01 	lds	r24, 0x010A
    4152:	90 91 0b 01 	lds	r25, 0x010B
    4156:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    415a:	9b 01       	movw	r18, r22
    415c:	ac 01       	movw	r20, r24
			0.184674461404652 * y[0];
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
			0.529094226850682 * x[1] +
    415e:	c7 01       	movw	r24, r14
    4160:	b6 01       	movw	r22, r12
    4162:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    4166:	6b 01       	movw	r12, r22
    4168:	7c 01       	movw	r14, r24
			0.264547113425341 * x[0] +
			0.115754044922547 * y[1] -
    416a:	25 e7       	ldi	r18, 0x75	; 117
    416c:	30 e1       	ldi	r19, 0x10	; 16
    416e:	4d ee       	ldi	r20, 0xED	; 237
    4170:	5d e3       	ldi	r21, 0x3D	; 61
    4172:	60 91 04 01 	lds	r22, 0x0104
    4176:	70 91 05 01 	lds	r23, 0x0105
    417a:	80 91 06 01 	lds	r24, 0x0106
    417e:	90 91 07 01 	lds	r25, 0x0107
    4182:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    4186:	9b 01       	movw	r18, r22
    4188:	ac 01       	movw	r20, r24
		break;
		
		case 6://150Hz cutoff.
			output = 0.264547113425341 * x[2] +
			0.529094226850682 * x[1] +
			0.264547113425341 * x[0] +
    418a:	c7 01       	movw	r24, r14
    418c:	b6 01       	movw	r22, r12
    418e:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    4192:	6b 01       	movw	r12, r22
    4194:	7c 01       	movw	r14, r24
			0.115754044922547 * y[1] -
			0.173942498623910 * y[0];
    4196:	2b ef       	ldi	r18, 0xFB	; 251
    4198:	3d e1       	ldi	r19, 0x1D	; 29
    419a:	42 e3       	ldi	r20, 0x32	; 50
    419c:	5e e3       	ldi	r21, 0x3E	; 62
    419e:	60 91 00 01 	lds	r22, 0x0100
    41a2:	70 91 01 01 	lds	r23, 0x0101
    41a6:	80 91 02 01 	lds	r24, 0x0102
    41aa:	90 91 03 01 	lds	r25, 0x0103
    41ae:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    41b2:	9b 01       	movw	r18, r22
    41b4:	ac 01       	movw	r20, r24
    41b6:	c7 01       	movw	r24, r14
    41b8:	b6 01       	movw	r22, r12
    41ba:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
		break;
    41be:	66 c0       	rjmp	.+204    	; 0x428c <_Z3lpfjP8as_class+0x620>
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
    41c0:	2a e7       	ldi	r18, 0x7A	; 122
    41c2:	32 e6       	ldi	r19, 0x62	; 98
    41c4:	4b eb       	ldi	r20, 0xBB	; 187
    41c6:	5e e3       	ldi	r21, 0x3E	; 62
    41c8:	60 91 10 01 	lds	r22, 0x0110
    41cc:	70 91 11 01 	lds	r23, 0x0111
    41d0:	80 91 12 01 	lds	r24, 0x0112
    41d4:	90 91 13 01 	lds	r25, 0x0113
    41d8:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    41dc:	6b 01       	movw	r12, r22
    41de:	7c 01       	movw	r14, r24
			0.731971376485284 * x[1] +
    41e0:	2a e7       	ldi	r18, 0x7A	; 122
    41e2:	32 e6       	ldi	r19, 0x62	; 98
    41e4:	4b e3       	ldi	r20, 0x3B	; 59
    41e6:	5f e3       	ldi	r21, 0x3F	; 63
    41e8:	60 91 0c 01 	lds	r22, 0x010C
    41ec:	70 91 0d 01 	lds	r23, 0x010D
    41f0:	80 91 0e 01 	lds	r24, 0x010E
    41f4:	90 91 0f 01 	lds	r25, 0x010F
    41f8:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    41fc:	9b 01       	movw	r18, r22
    41fe:	ac 01       	movw	r20, r24
			0.115754044922547 * y[1] -
			0.173942498623910 * y[0];
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
    4200:	c7 01       	movw	r24, r14
    4202:	b6 01       	movw	r22, r12
    4204:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    4208:	6b 01       	movw	r12, r22
    420a:	7c 01       	movw	r14, r24
			0.731971376485284 * x[1] +
			0.365985688242642 * x[0] -
    420c:	2a e7       	ldi	r18, 0x7A	; 122
    420e:	32 e6       	ldi	r19, 0x62	; 98
    4210:	4b eb       	ldi	r20, 0xBB	; 187
    4212:	5e e3       	ldi	r21, 0x3E	; 62
    4214:	60 91 08 01 	lds	r22, 0x0108
    4218:	70 91 09 01 	lds	r23, 0x0109
    421c:	80 91 0a 01 	lds	r24, 0x010A
    4220:	90 91 0b 01 	lds	r25, 0x010B
    4224:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    4228:	9b 01       	movw	r18, r22
    422a:	ac 01       	movw	r20, r24
			0.173942498623910 * y[0];
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
			0.731971376485284 * x[1] +
    422c:	c7 01       	movw	r24, r14
    422e:	b6 01       	movw	r22, r12
    4230:	0e 94 89 39 	call	0x7312	; 0x7312 <__addsf3>
    4234:	6b 01       	movw	r12, r22
    4236:	7c 01       	movw	r14, r24
			0.365985688242642 * x[0] -
			0.278614001640615 * y[1] -
    4238:	2f e7       	ldi	r18, 0x7F	; 127
    423a:	36 ea       	ldi	r19, 0xA6	; 166
    423c:	4e e8       	ldi	r20, 0x8E	; 142
    423e:	5e e3       	ldi	r21, 0x3E	; 62
    4240:	60 91 04 01 	lds	r22, 0x0104
    4244:	70 91 05 01 	lds	r23, 0x0105
    4248:	80 91 06 01 	lds	r24, 0x0106
    424c:	90 91 07 01 	lds	r25, 0x0107
    4250:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    4254:	9b 01       	movw	r18, r22
    4256:	ac 01       	movw	r20, r24
		break;
		
		default://200Hz cutoff.
			output = 0.365985688242642 * x[2] +
			0.731971376485284 * x[1] +
			0.365985688242642 * x[0] -
    4258:	c7 01       	movw	r24, r14
    425a:	b6 01       	movw	r22, r12
    425c:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
    4260:	6b 01       	movw	r12, r22
    4262:	7c 01       	movw	r14, r24
			0.278614001640615 * y[1] -
			0.185328751329953 * y[0];
    4264:	22 ed       	ldi	r18, 0xD2	; 210
    4266:	36 ec       	ldi	r19, 0xC6	; 198
    4268:	4d e3       	ldi	r20, 0x3D	; 61
    426a:	5e e3       	ldi	r21, 0x3E	; 62
    426c:	60 91 00 01 	lds	r22, 0x0100
    4270:	70 91 01 01 	lds	r23, 0x0101
    4274:	80 91 02 01 	lds	r24, 0x0102
    4278:	90 91 03 01 	lds	r25, 0x0103
    427c:	0e 94 40 3b 	call	0x7680	; 0x7680 <__mulsf3>
    4280:	9b 01       	movw	r18, r22
    4282:	ac 01       	movw	r20, r24
    4284:	c7 01       	movw	r24, r14
    4286:	b6 01       	movw	r22, r12
    4288:	0e 94 88 39 	call	0x7310	; 0x7310 <__subsf3>
		break;
	}
			 
	//Shift output to make room for new value.
	y[0] = y[1];
    428c:	e4 e0       	ldi	r30, 0x04	; 4
    428e:	f1 e0       	ldi	r31, 0x01	; 1
    4290:	00 81       	ld	r16, Z
    4292:	11 81       	ldd	r17, Z+1	; 0x01
    4294:	22 81       	ldd	r18, Z+2	; 0x02
    4296:	33 81       	ldd	r19, Z+3	; 0x03
    4298:	00 93 00 01 	sts	0x0100, r16
    429c:	10 93 01 01 	sts	0x0101, r17
    42a0:	20 93 02 01 	sts	0x0102, r18
    42a4:	30 93 03 01 	sts	0x0103, r19
	y[1] = output;
    42a8:	60 83       	st	Z, r22
    42aa:	71 83       	std	Z+1, r23	; 0x01
    42ac:	82 83       	std	Z+2, r24	; 0x02
    42ae:	93 83       	std	Z+3, r25	; 0x03
	
	//Send value back to calling function.
	return (uint16_t)output;
    42b0:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__fixunssfsi>
}
    42b4:	cb 01       	movw	r24, r22
    42b6:	df 91       	pop	r29
    42b8:	cf 91       	pop	r28
    42ba:	1f 91       	pop	r17
    42bc:	0f 91       	pop	r16
    42be:	ff 90       	pop	r15
    42c0:	ef 90       	pop	r14
    42c2:	df 90       	pop	r13
    42c4:	cf 90       	pop	r12
    42c6:	08 95       	ret

000042c8 <_Z15tx_u16_to_asciij>:

/************************************************String Manipulation Routines************************************************/
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
    42c8:	df 92       	push	r13
    42ca:	ef 92       	push	r14
    42cc:	ff 92       	push	r15
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	f8 2e       	mov	r15, r24
    42d8:	e9 2e       	mov	r14, r25
    42da:	04 e0       	ldi	r16, 0x04	; 4
    42dc:	10 e0       	ldi	r17, 0x00	; 0
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
    42de:	c0 e1       	ldi	r28, 0x10	; 16
    42e0:	d7 e2       	ldi	r29, 0x27	; 39

/************************************************String Manipulation Routines************************************************/
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
	bool number_started = false; //Indicate conversion has started.
    42e2:	40 e0       	ldi	r20, 0x00	; 0
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    42e4:	dd 24       	eor	r13, r13
    42e6:	d3 94       	inc	r13
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
    42e8:	8f 2d       	mov	r24, r15
    42ea:	9e 2d       	mov	r25, r14
    42ec:	be 01       	movw	r22, r28
    42ee:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <__udivmodhi4>
    42f2:	61 15       	cp	r22, r1
    42f4:	71 05       	cpc	r23, r1
    42f6:	11 f4       	brne	.+4      	; 0x42fc <_Z15tx_u16_to_asciij+0x34>
    42f8:	44 23       	and	r20, r20
    42fa:	61 f0       	breq	.+24     	; 0x4314 <_Z15tx_u16_to_asciij+0x4c>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    42fc:	80 e3       	ldi	r24, 0x30	; 48
    42fe:	86 0f       	add	r24, r22
    4300:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    4304:	8f 2d       	mov	r24, r15
    4306:	9e 2d       	mov	r25, r14
    4308:	be 01       	movw	r22, r28
    430a:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <__udivmodhi4>
    430e:	f8 2e       	mov	r15, r24
    4310:	e9 2e       	mov	r14, r25
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    4312:	4d 2d       	mov	r20, r13
//Convert a 16-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u16_to_ascii(uint16_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint16_t i = 10000; i >= 10; i /= 10)
    4314:	9e 01       	movw	r18, r28
    4316:	ad ec       	ldi	r26, 0xCD	; 205
    4318:	bc ec       	ldi	r27, 0xCC	; 204
    431a:	0e 94 28 3c 	call	0x7850	; 0x7850 <__umulhisi3>
    431e:	ec 01       	movw	r28, r24
    4320:	d6 95       	lsr	r29
    4322:	c7 95       	ror	r28
    4324:	d6 95       	lsr	r29
    4326:	c7 95       	ror	r28
    4328:	d6 95       	lsr	r29
    432a:	c7 95       	ror	r28
    432c:	01 50       	subi	r16, 0x01	; 1
    432e:	11 09       	sbc	r17, r1
    4330:	01 15       	cp	r16, r1
    4332:	11 05       	cpc	r17, r1
    4334:	c9 f6       	brne	.-78     	; 0x42e8 <_Z15tx_u16_to_asciij+0x20>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    4336:	80 e3       	ldi	r24, 0x30	; 48
    4338:	8f 0d       	add	r24, r15
    433a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
}
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	ff 90       	pop	r15
    4348:	ef 90       	pop	r14
    434a:	df 90       	pop	r13
    434c:	08 95       	ret

0000434e <_Z15tx_u32_to_asciim>:

//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
    434e:	4f 92       	push	r4
    4350:	5f 92       	push	r5
    4352:	6f 92       	push	r6
    4354:	7f 92       	push	r7
    4356:	8f 92       	push	r8
    4358:	9f 92       	push	r9
    435a:	af 92       	push	r10
    435c:	bf 92       	push	r11
    435e:	cf 92       	push	r12
    4360:	df 92       	push	r13
    4362:	ef 92       	push	r14
    4364:	ff 92       	push	r15
    4366:	0f 93       	push	r16
    4368:	1f 93       	push	r17
    436a:	cf 93       	push	r28
    436c:	df 93       	push	r29
    436e:	16 2f       	mov	r17, r22
    4370:	67 2e       	mov	r6, r23
    4372:	78 2e       	mov	r7, r24
    4374:	09 2f       	mov	r16, r25
    4376:	c9 e0       	ldi	r28, 0x09	; 9
    4378:	d0 e0       	ldi	r29, 0x00	; 0
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    437a:	0f 2e       	mov	r0, r31
    437c:	c1 2c       	mov	r12, r1
    437e:	fa ec       	ldi	r31, 0xCA	; 202
    4380:	df 2e       	mov	r13, r31
    4382:	fa e9       	ldi	r31, 0x9A	; 154
    4384:	ef 2e       	mov	r14, r31
    4386:	fb e3       	ldi	r31, 0x3B	; 59
    4388:	ff 2e       	mov	r15, r31
    438a:	f0 2d       	mov	r31, r0
}

//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
    438c:	51 2c       	mov	r5, r1
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    438e:	44 24       	eor	r4, r4
    4390:	43 94       	inc	r4
//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    4392:	0f 2e       	mov	r0, r31
    4394:	fa e0       	ldi	r31, 0x0A	; 10
    4396:	8f 2e       	mov	r8, r31
    4398:	91 2c       	mov	r9, r1
    439a:	a1 2c       	mov	r10, r1
    439c:	b1 2c       	mov	r11, r1
    439e:	f0 2d       	mov	r31, r0
	{
		if(number / i || number_started)
    43a0:	61 2f       	mov	r22, r17
    43a2:	76 2d       	mov	r23, r6
    43a4:	87 2d       	mov	r24, r7
    43a6:	90 2f       	mov	r25, r16
    43a8:	a7 01       	movw	r20, r14
    43aa:	96 01       	movw	r18, r12
    43ac:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    43b0:	21 15       	cp	r18, r1
    43b2:	31 05       	cpc	r19, r1
    43b4:	41 05       	cpc	r20, r1
    43b6:	51 05       	cpc	r21, r1
    43b8:	11 f4       	brne	.+4      	; 0x43be <_Z15tx_u32_to_asciim+0x70>
    43ba:	55 20       	and	r5, r5
    43bc:	89 f0       	breq	.+34     	; 0x43e0 <_Z15tx_u32_to_asciim+0x92>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    43be:	80 e3       	ldi	r24, 0x30	; 48
    43c0:	82 0f       	add	r24, r18
    43c2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    43c6:	61 2f       	mov	r22, r17
    43c8:	76 2d       	mov	r23, r6
    43ca:	87 2d       	mov	r24, r7
    43cc:	90 2f       	mov	r25, r16
    43ce:	a7 01       	movw	r20, r14
    43d0:	96 01       	movw	r18, r12
    43d2:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    43d6:	16 2f       	mov	r17, r22
    43d8:	67 2e       	mov	r6, r23
    43da:	78 2e       	mov	r7, r24
    43dc:	09 2f       	mov	r16, r25
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    43de:	54 2c       	mov	r5, r4
//Convert a 32-bit unsigned integer to an ASCII string and transmit it out the UART.
void tx_u32_to_ascii(uint32_t number)
{
	bool number_started = false; //Indicate conversion has started.
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    43e0:	c7 01       	movw	r24, r14
    43e2:	b6 01       	movw	r22, r12
    43e4:	a5 01       	movw	r20, r10
    43e6:	94 01       	movw	r18, r8
    43e8:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    43ec:	69 01       	movw	r12, r18
    43ee:	7a 01       	movw	r14, r20
    43f0:	21 97       	sbiw	r28, 0x01	; 1
    43f2:	20 97       	sbiw	r28, 0x00	; 0
    43f4:	a9 f6       	brne	.-86     	; 0x43a0 <_Z15tx_u32_to_asciim+0x52>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    43f6:	80 e3       	ldi	r24, 0x30	; 48
    43f8:	81 0f       	add	r24, r17
    43fa:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
}
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	1f 91       	pop	r17
    4404:	0f 91       	pop	r16
    4406:	ff 90       	pop	r15
    4408:	ef 90       	pop	r14
    440a:	df 90       	pop	r13
    440c:	cf 90       	pop	r12
    440e:	bf 90       	pop	r11
    4410:	af 90       	pop	r10
    4412:	9f 90       	pop	r9
    4414:	8f 90       	pop	r8
    4416:	7f 90       	pop	r7
    4418:	6f 90       	pop	r6
    441a:	5f 90       	pop	r5
    441c:	4f 90       	pop	r4
    441e:	08 95       	ret

00004420 <_Z13calibrate_oscv>:
//register.  Once it can no longer detect Us on the serial port, it
//finds the midpoint of the oscillation calibration register values
//that Us were detected and uses this value as the final oscillator
//calibration value.  The processor then freezes until reset.
void calibrate_osc()
{
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
	uint8_t cal_start = 0, cal_stop = 0, rx_byte, cal_state = CALREADY;
	
	//Exit if calibration header is not in place.
	if(PIND & OCAL) return;
    4424:	4a 99       	sbic	0x09, 2	; 9
    4426:	4b c0       	rjmp	.+150    	; 0x44be <_Z13calibrate_oscv+0x9e>
	
	OSCCAL = 0;
    4428:	10 92 66 00 	sts	0x0066, r1
//finds the midpoint of the oscillation calibration register values
//that Us were detected and uses this value as the final oscillator
//calibration value.  The processor then freezes until reset.
void calibrate_osc()
{
	uint8_t cal_start = 0, cal_stop = 0, rx_byte, cal_state = CALREADY;
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	40 e0       	ldi	r20, 0x00	; 0
	
	//Else go into calibration loop.
	while(1)
	{
		//Check if byte received.
		if(UCSR0A & flgRXC0)
    4432:	a0 ec       	ldi	r26, 0xC0	; 192
    4434:	b0 e0       	ldi	r27, 0x00	; 0
		{
			rx_byte = UDR0;
    4436:	c6 ec       	ldi	r28, 0xC6	; 198
    4438:	d0 e0       	ldi	r29, 0x00	; 0
				if(rx_byte == 'U')
				{
					cal_start = OSCCAL;
					cal_state = CALSTART;
				}
				OSCCAL++;
    443a:	e6 e6       	ldi	r30, 0x66	; 102
    443c:	f0 e0       	ldi	r31, 0x00	; 0
				//Increment oscillation calibration register until 'U' is detected.
				case CALREADY:
				if(rx_byte == 'U')
				{
					cal_start = OSCCAL;
					cal_state = CALSTART;
    443e:	51 e0       	ldi	r21, 0x01	; 1
				}
				//Find OSCCAL range that allows the correct detection of U.
				else
				{
					cal_stop = OSCCAL - 1;
					cal_state = CALSTOP;
    4440:	32 e0       	ldi	r19, 0x02	; 2
	
	//Else go into calibration loop.
	while(1)
	{
		//Check if byte received.
		if(UCSR0A & flgRXC0)
    4442:	8c 91       	ld	r24, X
    4444:	88 23       	and	r24, r24
    4446:	ec f7       	brge	.-6      	; 0x4442 <_Z13calibrate_oscv+0x22>
		{
			rx_byte = UDR0;
    4448:	88 81       	ld	r24, Y
			
			switch(cal_state)
    444a:	99 23       	and	r25, r25
    444c:	19 f0       	breq	.+6      	; 0x4454 <_Z13calibrate_oscv+0x34>
    444e:	91 30       	cpi	r25, 0x01	; 1
    4450:	49 f0       	breq	.+18     	; 0x4464 <_Z13calibrate_oscv+0x44>
    4452:	12 c0       	rjmp	.+36     	; 0x4478 <_Z13calibrate_oscv+0x58>
			{
				//Increment oscillation calibration register until 'U' is detected.
				case CALREADY:
				if(rx_byte == 'U')
    4454:	85 35       	cpi	r24, 0x55	; 85
    4456:	11 f4       	brne	.+4      	; 0x445c <_Z13calibrate_oscv+0x3c>
				{
					cal_start = OSCCAL;
    4458:	40 81       	ld	r20, Z
					cal_state = CALSTART;
    445a:	95 2f       	mov	r25, r21
				}
				OSCCAL++;
    445c:	80 81       	ld	r24, Z
    445e:	8f 5f       	subi	r24, 0xFF	; 255
    4460:	80 83       	st	Z, r24
				break;
    4462:	ef cf       	rjmp	.-34     	; 0x4442 <_Z13calibrate_oscv+0x22>
				
				case CALSTART:
				//Increment OSCCAL until U is no longer detected.
				if(rx_byte == 'U')
    4464:	85 35       	cpi	r24, 0x55	; 85
    4466:	21 f4       	brne	.+8      	; 0x4470 <_Z13calibrate_oscv+0x50>
				{
					OSCCAL++;
    4468:	80 81       	ld	r24, Z
    446a:	8f 5f       	subi	r24, 0xFF	; 255
    446c:	80 83       	st	Z, r24
    446e:	e9 cf       	rjmp	.-46     	; 0x4442 <_Z13calibrate_oscv+0x22>
				}
				//Find OSCCAL range that allows the correct detection of U.
				else
				{
					cal_stop = OSCCAL - 1;
    4470:	20 81       	ld	r18, Z
    4472:	21 50       	subi	r18, 0x01	; 1
					cal_state = CALSTOP;
    4474:	93 2f       	mov	r25, r19
    4476:	e5 cf       	rjmp	.-54     	; 0x4442 <_Z13calibrate_oscv+0x22>
				
				//Calibration complete. Save value and spin lock the processor.
				case CALSTOP:
				default:
				//Calculate final OSCCAL value.
				OSCCAL = cal_start + (cal_stop - cal_start) / 2;
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	24 1b       	sub	r18, r20
    447c:	31 09       	sbc	r19, r1
    447e:	c9 01       	movw	r24, r18
    4480:	99 23       	and	r25, r25
    4482:	0c f4       	brge	.+2      	; 0x4486 <_Z13calibrate_oscv+0x66>
    4484:	01 96       	adiw	r24, 0x01	; 1
    4486:	95 95       	asr	r25
    4488:	87 95       	ror	r24
    448a:	84 0f       	add	r24, r20
    448c:	c6 e6       	ldi	r28, 0x66	; 102
    448e:	d0 e0       	ldi	r29, 0x00	; 0
    4490:	88 83       	st	Y, r24
				
				//Indicate calibration complete.
				atmega_uart::tx_string_p(PSTR("OK. OSCCAL = "));
    4492:	80 e2       	ldi	r24, 0x20	; 32
    4494:	9f e0       	ldi	r25, 0x0F	; 15
    4496:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
				tx_u32_to_ascii(OSCCAL);
    449a:	68 81       	ld	r22, Y
    449c:	70 e0       	ldi	r23, 0x00	; 0
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
				atmega_uart::tx_byte('\r');
    44a6:	8d e0       	ldi	r24, 0x0D	; 13
    44a8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				
				//Save oscillator calibration value.
				fram1_write_byte(OSC_ADDR, OSCCAL);
    44ac:	48 81       	ld	r20, Y
    44ae:	60 ed       	ldi	r22, 0xD0	; 208
    44b0:	7b ef       	ldi	r23, 0xFB	; 251
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_Z16fram1_write_bytemh>
				cli();	//Disable interrupts.
    44ba:	f8 94       	cli
    44bc:	ff cf       	rjmp	.-2      	; 0x44bc <_Z13calibrate_oscv+0x9c>
				while(1);	//Done. Spin lock processor.
				break;
			}
		}
	}
}
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	08 95       	ret

000044c4 <_Z14init_processorP8as_class>:
bool bin_overflowed;

/*******************************************Initialization and Configuration Routines****************************************/
//Initialize the MCU.
void init_processor(as_class *as)
{
    44c4:	0f 93       	push	r16
    44c6:	1f 93       	push	r17
    44c8:	cf 93       	push	r28
    44ca:	df 93       	push	r29
    44cc:	00 d0       	rcall	.+0      	; 0x44ce <_Z14init_processorP8as_class+0xa>
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
    44d2:	8c 01       	movw	r16, r24
	//Wait for voltage to stabilize on sensor board.
	for(volatile int i = 0; i < 10000; i++);
    44d4:	1a 82       	std	Y+2, r1	; 0x02
    44d6:	19 82       	std	Y+1, r1	; 0x01
    44d8:	89 81       	ldd	r24, Y+1	; 0x01
    44da:	9a 81       	ldd	r25, Y+2	; 0x02
    44dc:	80 31       	cpi	r24, 0x10	; 16
    44de:	97 42       	sbci	r25, 0x27	; 39
    44e0:	5c f4       	brge	.+22     	; 0x44f8 <_Z14init_processorP8as_class+0x34>
    44e2:	29 81       	ldd	r18, Y+1	; 0x01
    44e4:	3a 81       	ldd	r19, Y+2	; 0x02
    44e6:	2f 5f       	subi	r18, 0xFF	; 255
    44e8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ea:	3a 83       	std	Y+2, r19	; 0x02
    44ec:	29 83       	std	Y+1, r18	; 0x01
    44ee:	29 81       	ldd	r18, Y+1	; 0x01
    44f0:	3a 81       	ldd	r19, Y+2	; 0x02
    44f2:	20 31       	cpi	r18, 0x10	; 16
    44f4:	37 42       	sbci	r19, 0x27	; 39
    44f6:	ac f3       	brlt	.-22     	; 0x44e2 <_Z14init_processorP8as_class+0x1e>
	
	atmega_twi::twi_master_init();	//I2C init.
    44f8:	0e 94 81 1b 	call	0x3702	; 0x3702 <_ZN10atmega_twi15twi_master_initEv>
	atmega_spi::spi_master_init();	//SPI init.
    44fc:	0e 94 6d 1b 	call	0x36da	; 0x36da <_ZN10atmega_spi15spi_master_initEv>
	atmega_uart::uart_init(UBRR);	//UART init.
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <_ZN11atmega_uart9uart_initEj>
	
	//Turn off unused hardware.
	PRR =  (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRADC);
    4508:	81 e6       	ldi	r24, 0x61	; 97
    450a:	80 93 64 00 	sts	0x0064, r24
	ACSR = (1  << ACD); //Turn off analog comparator.
    450e:	80 e8       	ldi	r24, 0x80	; 128
    4510:	80 bf       	out	0x30, r24	; 48
	
	//Pull up unused pins.
	PORTB |= 0xC0;
    4512:	85 b1       	in	r24, 0x05	; 5
    4514:	80 6c       	ori	r24, 0xC0	; 192
    4516:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0xFF;
    4518:	88 b1       	in	r24, 0x08	; 8
    451a:	8f ef       	ldi	r24, 0xFF	; 255
    451c:	88 b9       	out	0x08, r24	; 8
	PORTD |= 0xFC;
    451e:	8b b1       	in	r24, 0x0b	; 11
    4520:	8c 6f       	ori	r24, 0xFC	; 252
    4522:	8b b9       	out	0x0b, r24	; 11
	
	//Set pins as outputs.
	ddrADCS |= (1 << ADCS);
    4524:	21 9a       	sbi	0x04, 1	; 4
	ddrDACS |= (1 << DACS);
    4526:	22 9a       	sbi	0x04, 2	; 4
	ddrRCS1 |= (1 << RCS1);
    4528:	53 9a       	sbi	0x0a, 3	; 10
	ddrRCS2 |= (1 << RCS2);
    452a:	54 9a       	sbi	0x0a, 4	; 10
	DDRB |= (1 << PORTB0);
    452c:	20 9a       	sbi	0x04, 0	; 4
	
	//Disable ADC and DAC.
	prtADCS |= (1 << ADCS);
    452e:	29 9a       	sbi	0x05, 1	; 5
	prtDACS |= (1 << DACS);
    4530:	2a 9a       	sbi	0x05, 2	; 5
	
	//Disable the FRAM.
	prtRCS1 |= (1 << RCS1);
    4532:	5b 9a       	sbi	0x0b, 3	; 11
	prtRCS2 |= (1 << RCS2);
    4534:	5c 9a       	sbi	0x0b, 4	; 11
	
	//Load TIMER1 configuration.
	TCCR1B = 0x09;					//No prescaling, CTC.
    4536:	89 e0       	ldi	r24, 0x09	; 9
    4538:	80 93 81 00 	sts	0x0081, r24
	OCR1A  = INT_TIME;				//Match counter every 1 ms.
    453c:	8f e0       	ldi	r24, 0x0F	; 15
    453e:	9d e1       	ldi	r25, 0x1D	; 29
    4540:	90 93 89 00 	sts	0x0089, r25
    4544:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02;					//Enable TIMER1_COMPA interrupt.
    4548:	82 e0       	ldi	r24, 0x02	; 2
    454a:	80 93 6f 00 	sts	0x006F, r24
	
	//Zero the DAC.
	write_dac(ZERO_VOLT);
    454e:	8f ef       	ldi	r24, 0xFF	; 255
    4550:	97 e0       	ldi	r25, 0x07	; 7
    4552:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z9write_dacj>
	
	//Set initial config for digital pot and analog switches.
	init_i2c_devices(as);
    4556:	c8 01       	movw	r24, r16
    4558:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <_Z16init_i2c_devicesP8as_class>
	
	//Calibrate oscillator if necessary.
	calibrate_osc();
    455c:	0e 94 10 22 	call	0x4420	; 0x4420 <_Z13calibrate_oscv>
	
	//Load oscillator calibration value.
	OSCCAL = fram1_read_byte(OSC_ADDR);
    4560:	60 ed       	ldi	r22, 0xD0	; 208
    4562:	7b ef       	ldi	r23, 0xFB	; 251
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <_Z15fram1_read_bytem>
    456c:	80 93 66 00 	sts	0x0066, r24
	
	sei(); //Enable global interrupts.
    4570:	78 94       	sei
}
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	df 91       	pop	r29
    4578:	cf 91       	pop	r28
    457a:	1f 91       	pop	r17
    457c:	0f 91       	pop	r16
    457e:	08 95       	ret

00004580 <_Z15tx_int_to_asciil>:
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}

//Convert a 32-bit signed integer to an ASCII string and transmit it out the UART.
void tx_int_to_ascii(int32_t number)
{
    4580:	2f 92       	push	r2
    4582:	3f 92       	push	r3
    4584:	4f 92       	push	r4
    4586:	5f 92       	push	r5
    4588:	6f 92       	push	r6
    458a:	7f 92       	push	r7
    458c:	8f 92       	push	r8
    458e:	9f 92       	push	r9
    4590:	af 92       	push	r10
    4592:	bf 92       	push	r11
    4594:	cf 92       	push	r12
    4596:	df 92       	push	r13
    4598:	ef 92       	push	r14
    459a:	ff 92       	push	r15
    459c:	0f 93       	push	r16
    459e:	1f 93       	push	r17
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	00 d0       	rcall	.+0      	; 0x45a6 <_Z15tx_int_to_asciil+0x26>
    45a6:	1f 92       	push	r1
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62
    45ac:	6b 01       	movw	r12, r22
    45ae:	7c 01       	movw	r14, r24
	bool number_started = false; //Indicate conversion has started.
	
	//Check if negative.
	if(number < 0)
    45b0:	99 23       	and	r25, r25
    45b2:	0c f0       	brlt	.+2      	; 0x45b6 <_Z15tx_int_to_asciil+0x36>
    45b4:	41 c0       	rjmp	.+130    	; 0x4638 <_Z15tx_int_to_asciil+0xb8>
	{
		atmega_uart::tx_byte('-');
    45b6:	8d e2       	ldi	r24, 0x2D	; 45
    45b8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		number *= -1;
    45bc:	f0 94       	com	r15
    45be:	e0 94       	com	r14
    45c0:	d0 94       	com	r13
    45c2:	c0 94       	com	r12
    45c4:	c1 1c       	adc	r12, r1
    45c6:	d1 1c       	adc	r13, r1
    45c8:	e1 1c       	adc	r14, r1
    45ca:	f1 1c       	adc	r15, r1
    45cc:	35 c0       	rjmp	.+106    	; 0x4638 <_Z15tx_int_to_asciil+0xb8>
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
    45ce:	0c 2d       	mov	r16, r12
    45d0:	1d 2d       	mov	r17, r13
    45d2:	eb 82       	std	Y+3, r14	; 0x03
    45d4:	fa 82       	std	Y+2, r15	; 0x02
    45d6:	c7 01       	movw	r24, r14
    45d8:	b6 01       	movw	r22, r12
    45da:	a5 01       	movw	r20, r10
    45dc:	94 01       	movw	r18, r8
    45de:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    45e2:	21 15       	cp	r18, r1
    45e4:	31 05       	cpc	r19, r1
    45e6:	41 05       	cpc	r20, r1
    45e8:	51 05       	cpc	r21, r1
    45ea:	19 f4       	brne	.+6      	; 0x45f2 <_Z15tx_int_to_asciil+0x72>
    45ec:	89 81       	ldd	r24, Y+1	; 0x01
    45ee:	88 23       	and	r24, r24
    45f0:	81 f0       	breq	.+32     	; 0x4612 <_Z15tx_int_to_asciil+0x92>
		{
			number_started = true;
			atmega_uart::tx_byte(number / i + '0');
    45f2:	80 e3       	ldi	r24, 0x30	; 48
    45f4:	82 0f       	add	r24, r18
    45f6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			number %= i;
    45fa:	60 2f       	mov	r22, r16
    45fc:	71 2f       	mov	r23, r17
    45fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4600:	9a 81       	ldd	r25, Y+2	; 0x02
    4602:	a5 01       	movw	r20, r10
    4604:	94 01       	movw	r18, r8
    4606:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    460a:	6b 01       	movw	r12, r22
    460c:	7c 01       	movw	r14, r24
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
	{
		if(number / i || number_started)
		{
			number_started = true;
    460e:	e1 e0       	ldi	r30, 0x01	; 1
    4610:	e9 83       	std	Y+1, r30	; 0x01
	{
		atmega_uart::tx_byte('-');
		number *= -1;
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    4612:	c5 01       	movw	r24, r10
    4614:	b4 01       	movw	r22, r8
    4616:	a3 01       	movw	r20, r6
    4618:	92 01       	movw	r18, r4
    461a:	0e 94 00 3c 	call	0x7800	; 0x7800 <__udivmodsi4>
    461e:	49 01       	movw	r8, r18
    4620:	5a 01       	movw	r10, r20
    4622:	f1 e0       	ldi	r31, 0x01	; 1
    4624:	2f 1a       	sub	r2, r31
    4626:	31 08       	sbc	r3, r1
    4628:	21 14       	cp	r2, r1
    462a:	31 04       	cpc	r3, r1
    462c:	81 f6       	brne	.-96     	; 0x45ce <_Z15tx_int_to_asciil+0x4e>
			number %= i;
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
    462e:	80 e3       	ldi	r24, 0x30	; 48
    4630:	8c 0d       	add	r24, r12
    4632:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    4636:	15 c0       	rjmp	.+42     	; 0x4662 <_Z15tx_int_to_asciil+0xe2>
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}

//Convert a 32-bit signed integer to an ASCII string and transmit it out the UART.
void tx_int_to_ascii(int32_t number)
{
    4638:	09 e0       	ldi	r16, 0x09	; 9
    463a:	10 e0       	ldi	r17, 0x00	; 0
    463c:	0f 2e       	mov	r0, r31
    463e:	81 2c       	mov	r8, r1
    4640:	fa ec       	ldi	r31, 0xCA	; 202
    4642:	9f 2e       	mov	r9, r31
    4644:	fa e9       	ldi	r31, 0x9A	; 154
    4646:	af 2e       	mov	r10, r31
    4648:	fb e3       	ldi	r31, 0x3B	; 59
    464a:	bf 2e       	mov	r11, r31
    464c:	f0 2d       	mov	r31, r0
    464e:	19 82       	std	Y+1, r1	; 0x01
	{
		atmega_uart::tx_byte('-');
		number *= -1;
	}
	
	for(uint32_t i = 1000000000; i >= 10; i /= 10)
    4650:	0f 2e       	mov	r0, r31
    4652:	fa e0       	ldi	r31, 0x0A	; 10
    4654:	4f 2e       	mov	r4, r31
    4656:	51 2c       	mov	r5, r1
    4658:	61 2c       	mov	r6, r1
    465a:	71 2c       	mov	r7, r1
    465c:	f0 2d       	mov	r31, r0
    465e:	18 01       	movw	r2, r16
    4660:	b6 cf       	rjmp	.-148    	; 0x45ce <_Z15tx_int_to_asciil+0x4e>
		}
	}
	
	//Always do last steps.
	atmega_uart::tx_byte(number + 0x30); //Get last digit.
}
    4662:	0f 90       	pop	r0
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	df 91       	pop	r29
    466a:	cf 91       	pop	r28
    466c:	1f 91       	pop	r17
    466e:	0f 91       	pop	r16
    4670:	ff 90       	pop	r15
    4672:	ef 90       	pop	r14
    4674:	df 90       	pop	r13
    4676:	cf 90       	pop	r12
    4678:	bf 90       	pop	r11
    467a:	af 90       	pop	r10
    467c:	9f 90       	pop	r9
    467e:	8f 90       	pop	r8
    4680:	7f 90       	pop	r7
    4682:	6f 90       	pop	r6
    4684:	5f 90       	pop	r5
    4686:	4f 90       	pop	r4
    4688:	3f 90       	pop	r3
    468a:	2f 90       	pop	r2
    468c:	08 95       	ret

0000468e <_Z13string_to_u32PKhPhh>:

//Converts a string into an unsigned integer.
//This function looks for user defined character to stop the conversion.
uint32_t string_to_u32(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
    468e:	2f 92       	push	r2
    4690:	3f 92       	push	r3
    4692:	4f 92       	push	r4
    4694:	5f 92       	push	r5
    4696:	6f 92       	push	r6
    4698:	7f 92       	push	r7
    469a:	8f 92       	push	r8
    469c:	9f 92       	push	r9
    469e:	af 92       	push	r10
    46a0:	bf 92       	push	r11
    46a2:	cf 92       	push	r12
    46a4:	df 92       	push	r13
    46a6:	ef 92       	push	r14
    46a8:	ff 92       	push	r15
    46aa:	0f 93       	push	r16
    46ac:	1f 93       	push	r17
    46ae:	cf 93       	push	r28
    46b0:	df 93       	push	r29
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	28 97       	sbiw	r28, 0x08	; 8
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	9e 83       	std	Y+6, r25	; 0x06
    46c4:	8d 83       	std	Y+5, r24	; 0x05
    46c6:	7c 83       	std	Y+4, r23	; 0x04
    46c8:	6b 83       	std	Y+3, r22	; 0x03
    46ca:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    46cc:	dc 01       	movw	r26, r24
    46ce:	5c 91       	ld	r21, X
    46d0:	54 17       	cp	r21, r20
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <_Z13string_to_u32PKhPhh+0x48>
    46d4:	97 c0       	rjmp	.+302    	; 0x4804 <_Z13string_to_u32PKhPhh+0x176>
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
    46d6:	80 ed       	ldi	r24, 0xD0	; 208
    46d8:	85 0f       	add	r24, r21
    46da:	8a 30       	cpi	r24, 0x0A	; 10
    46dc:	08 f0       	brcs	.+2      	; 0x46e0 <_Z13string_to_u32PKhPhh+0x52>
    46de:	6b c0       	rjmp	.+214    	; 0x47b6 <_Z13string_to_u32PKhPhh+0x128>
    46e0:	4d 01       	movw	r8, r26
    46e2:	bf ef       	ldi	r27, 0xFF	; 255
    46e4:	8b 1a       	sub	r8, r27
    46e6:	9b 0a       	sbc	r9, r27
    46e8:	e1 e0       	ldi	r30, 0x01	; 1
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    46ec:	61 2c       	mov	r6, r1
    46ee:	71 2c       	mov	r7, r1
//Converts a string into an unsigned integer.
//This function looks for user defined character to stop the conversion.
uint32_t string_to_u32(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
	uint8_t index = 0;
	uint64_t number = 0;
    46f0:	d1 2c       	mov	r13, r1
    46f2:	e1 2c       	mov	r14, r1
    46f4:	f1 2c       	mov	r15, r1
    46f6:	00 e0       	ldi	r16, 0x00	; 0
    46f8:	b1 2c       	mov	r11, r1
    46fa:	c1 2c       	mov	r12, r1
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	0a c0       	rjmp	.+20     	; 0x4716 <_Z13string_to_u32PKhPhh+0x88>
    4702:	9f 01       	movw	r18, r30
    4704:	2f 5f       	subi	r18, 0xFF	; 255
    4706:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
    4708:	40 ed       	ldi	r20, 0xD0	; 208
    470a:	45 0f       	add	r20, r21
    470c:	4a 30       	cpi	r20, 0x0A	; 10
    470e:	08 f0       	brcs	.+2      	; 0x4712 <_Z13string_to_u32PKhPhh+0x84>
    4710:	52 c0       	rjmp	.+164    	; 0x47b6 <_Z13string_to_u32PKhPhh+0x128>
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    4712:	3f 01       	movw	r6, r30
    4714:	f9 01       	movw	r30, r18
    4716:	55 24       	eor	r5, r5
    4718:	5a 94       	dec	r5
    471a:	5e 0e       	add	r5, r30
	{
		//Check if valid number character.
		if(array[index] >= '0' && array[index] <= '9')
		{
			//Add character to number.
			number += (array[index] - '0');
    471c:	a5 2f       	mov	r26, r21
    471e:	b0 e0       	ldi	r27, 0x00	; 0
    4720:	d0 97       	sbiw	r26, 0x30	; 48
    4722:	1b 2f       	mov	r17, r27
    4724:	11 0f       	add	r17, r17
    4726:	11 0b       	sbc	r17, r17
    4728:	2d 2d       	mov	r18, r13
    472a:	3e 2d       	mov	r19, r14
    472c:	4f 2d       	mov	r20, r15
    472e:	50 2f       	mov	r21, r16
    4730:	6b 2d       	mov	r22, r11
    4732:	7c 2d       	mov	r23, r12
    4734:	aa 2e       	mov	r10, r26
    4736:	bb 2e       	mov	r11, r27
    4738:	c1 2e       	mov	r12, r17
    473a:	d1 2e       	mov	r13, r17
    473c:	e1 2e       	mov	r14, r17
    473e:	f1 2e       	mov	r15, r17
    4740:	01 2f       	mov	r16, r17
    4742:	0e 94 57 3c 	call	0x78ae	; 0x78ae <__adddi3>
    4746:	19 2f       	mov	r17, r25
    4748:	d2 2e       	mov	r13, r18
    474a:	e3 2e       	mov	r14, r19
    474c:	f4 2e       	mov	r15, r20
    474e:	05 2f       	mov	r16, r21
    4750:	b6 2e       	mov	r11, r22
    4752:	c7 2e       	mov	r12, r23
    4754:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(array[index + 1] >= '0' && array[index + 1] <= '9')
    4756:	ad 81       	ldd	r26, Y+5	; 0x05
    4758:	be 81       	ldd	r27, Y+6	; 0x06
    475a:	a6 0d       	add	r26, r6
    475c:	b7 1d       	adc	r27, r7
    475e:	11 96       	adiw	r26, 0x01	; 1
    4760:	ac 91       	ld	r26, X
    4762:	a0 53       	subi	r26, 0x30	; 48
    4764:	aa 30       	cpi	r26, 0x0A	; 10
    4766:	80 f5       	brcc	.+96     	; 0x47c8 <_Z13string_to_u32PKhPhh+0x13a>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    4768:	01 e0       	ldi	r16, 0x01	; 1
    476a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__ashldi3>
    476e:	22 2e       	mov	r2, r18
    4770:	33 2e       	mov	r3, r19
    4772:	44 2e       	mov	r4, r20
    4774:	65 2e       	mov	r6, r21
    4776:	76 2e       	mov	r7, r22
    4778:	a7 2f       	mov	r26, r23
    477a:	8f 83       	std	Y+7, r24	; 0x07
    477c:	b9 2f       	mov	r27, r25
    477e:	02 e0       	ldi	r16, 0x02	; 2
    4780:	0e 94 3e 3c 	call	0x787c	; 0x787c <__ashldi3>
    4784:	a2 2e       	mov	r10, r18
    4786:	b3 2e       	mov	r11, r19
    4788:	c4 2e       	mov	r12, r20
    478a:	d5 2e       	mov	r13, r21
    478c:	e6 2e       	mov	r14, r22
    478e:	f7 2e       	mov	r15, r23
    4790:	08 2f       	mov	r16, r24
    4792:	19 2f       	mov	r17, r25
    4794:	22 2d       	mov	r18, r2
    4796:	33 2d       	mov	r19, r3
    4798:	44 2d       	mov	r20, r4
    479a:	56 2d       	mov	r21, r6
    479c:	67 2d       	mov	r22, r7
    479e:	7a 2f       	mov	r23, r26
    47a0:	8f 81       	ldd	r24, Y+7	; 0x07
    47a2:	9b 2f       	mov	r25, r27
    47a4:	0e 94 57 3c 	call	0x78ae	; 0x78ae <__adddi3>
    47a8:	d2 2e       	mov	r13, r18
    47aa:	e3 2e       	mov	r14, r19
    47ac:	f4 2e       	mov	r15, r20
    47ae:	05 2f       	mov	r16, r21
    47b0:	b6 2e       	mov	r11, r22
    47b2:	c7 2e       	mov	r12, r23
    47b4:	09 c0       	rjmp	.+18     	; 0x47c8 <_Z13string_to_u32PKhPhh+0x13a>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	eb 81       	ldd	r30, Y+3	; 0x03
    47ba:	fc 81       	ldd	r31, Y+4	; 0x04
    47bc:	80 83       	st	Z, r24
			return 0;
    47be:	60 e0       	ldi	r22, 0x00	; 0
    47c0:	70 e0       	ldi	r23, 0x00	; 0
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	2e c0       	rjmp	.+92     	; 0x4824 <_Z13string_to_u32PKhPhh+0x196>
{
	uint8_t index = 0;
	uint64_t number = 0;
	
	//Continue until termination character is found or function errors out.
	while(array[index] != term && index < 10)
    47c8:	d4 01       	movw	r26, r8
    47ca:	5d 91       	ld	r21, X+
    47cc:	4d 01       	movw	r8, r26
    47ce:	ba 81       	ldd	r27, Y+2	; 0x02
    47d0:	5b 17       	cp	r21, r27
    47d2:	21 f0       	breq	.+8      	; 0x47dc <_Z13string_to_u32PKhPhh+0x14e>
    47d4:	ea 30       	cpi	r30, 0x0A	; 10
    47d6:	f1 05       	cpc	r31, r1
    47d8:	09 f0       	breq	.+2      	; 0x47dc <_Z13string_to_u32PKhPhh+0x14e>
    47da:	93 cf       	rjmp	.-218    	; 0x4702 <_Z13string_to_u32PKhPhh+0x74>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, number out of range or no digits at all.
	if((index > 10) || (number > U32_MAX) || (!index)) 
    47dc:	26 ef       	ldi	r18, 0xF6	; 246
    47de:	25 0d       	add	r18, r5
    47e0:	26 3f       	cpi	r18, 0xF6	; 246
    47e2:	80 f0       	brcs	.+32     	; 0x4804 <_Z13string_to_u32PKhPhh+0x176>
    47e4:	2d 2d       	mov	r18, r13
    47e6:	3e 2d       	mov	r19, r14
    47e8:	4f 2d       	mov	r20, r15
    47ea:	50 2f       	mov	r21, r16
    47ec:	6b 2d       	mov	r22, r11
    47ee:	7c 2d       	mov	r23, r12
    47f0:	2f 3f       	cpi	r18, 0xFF	; 255
    47f2:	3f 4f       	sbci	r19, 0xFF	; 255
    47f4:	4f 4f       	sbci	r20, 0xFF	; 255
    47f6:	5f 4f       	sbci	r21, 0xFF	; 255
    47f8:	61 05       	cpc	r22, r1
    47fa:	71 05       	cpc	r23, r1
    47fc:	81 05       	cpc	r24, r1
    47fe:	91 05       	cpc	r25, r1
    4800:	51 f0       	breq	.+20     	; 0x4816 <_Z13string_to_u32PKhPhh+0x188>
    4802:	48 f0       	brcs	.+18     	; 0x4816 <_Z13string_to_u32PKhPhh+0x188>
	{
		*errno = ER_ERROR;
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	ab 81       	ldd	r26, Y+3	; 0x03
    4808:	bc 81       	ldd	r27, Y+4	; 0x04
    480a:	8c 93       	st	X, r24
		return 0;
    480c:	60 e0       	ldi	r22, 0x00	; 0
    480e:	70 e0       	ldi	r23, 0x00	; 0
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	07 c0       	rjmp	.+14     	; 0x4824 <_Z13string_to_u32PKhPhh+0x196>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    4816:	eb 81       	ldd	r30, Y+3	; 0x03
    4818:	fc 81       	ldd	r31, Y+4	; 0x04
    481a:	10 82       	st	Z, r1
	return (uint32_t)number;
    481c:	6d 2d       	mov	r22, r13
    481e:	7e 2d       	mov	r23, r14
    4820:	8f 2d       	mov	r24, r15
    4822:	90 2f       	mov	r25, r16
}
    4824:	28 96       	adiw	r28, 0x08	; 8
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	f8 94       	cli
    482a:	de bf       	out	0x3e, r29	; 62
    482c:	0f be       	out	0x3f, r0	; 63
    482e:	cd bf       	out	0x3d, r28	; 61
    4830:	df 91       	pop	r29
    4832:	cf 91       	pop	r28
    4834:	1f 91       	pop	r17
    4836:	0f 91       	pop	r16
    4838:	ff 90       	pop	r15
    483a:	ef 90       	pop	r14
    483c:	df 90       	pop	r13
    483e:	cf 90       	pop	r12
    4840:	bf 90       	pop	r11
    4842:	af 90       	pop	r10
    4844:	9f 90       	pop	r9
    4846:	8f 90       	pop	r8
    4848:	7f 90       	pop	r7
    484a:	6f 90       	pop	r6
    484c:	5f 90       	pop	r5
    484e:	4f 90       	pop	r4
    4850:	3f 90       	pop	r3
    4852:	2f 90       	pop	r2
    4854:	08 95       	ret

00004856 <_Z13string_to_intPKhPhh>:

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
int32_t string_to_int(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
    4856:	2f 92       	push	r2
    4858:	3f 92       	push	r3
    485a:	4f 92       	push	r4
    485c:	5f 92       	push	r5
    485e:	6f 92       	push	r6
    4860:	7f 92       	push	r7
    4862:	8f 92       	push	r8
    4864:	9f 92       	push	r9
    4866:	af 92       	push	r10
    4868:	bf 92       	push	r11
    486a:	cf 92       	push	r12
    486c:	df 92       	push	r13
    486e:	ef 92       	push	r14
    4870:	ff 92       	push	r15
    4872:	0f 93       	push	r16
    4874:	1f 93       	push	r17
    4876:	cf 93       	push	r28
    4878:	df 93       	push	r29
    487a:	cd b7       	in	r28, 0x3d	; 61
    487c:	de b7       	in	r29, 0x3e	; 62
    487e:	29 97       	sbiw	r28, 0x09	; 9
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	f8 94       	cli
    4884:	de bf       	out	0x3e, r29	; 62
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	9f 83       	std	Y+7, r25	; 0x07
    488c:	8e 83       	std	Y+6, r24	; 0x06
    488e:	7c 83       	std	Y+4, r23	; 0x04
    4890:	6b 83       	std	Y+3, r22	; 0x03
    4892:	4a 83       	std	Y+2, r20	; 0x02
	
	//Switch to new array pointer to account for any negative sign.
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
    4894:	dc 01       	movw	r26, r24
    4896:	8c 91       	ld	r24, X
    4898:	8d 32       	cpi	r24, 0x2D	; 45
    489a:	31 f4       	brne	.+12     	; 0x48a8 <_Z13string_to_intPKhPhh+0x52>
	{
		is_neg = true;
		arr++;
    489c:	11 96       	adiw	r26, 0x01	; 1
    489e:	bf 83       	std	Y+7, r27	; 0x07
    48a0:	ae 83       	std	Y+6, r26	; 0x06
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
	{
		is_neg = true;
    48a2:	b1 e0       	ldi	r27, 0x01	; 1
    48a4:	bd 83       	std	Y+5, r27	; 0x05
    48a6:	01 c0       	rjmp	.+2      	; 0x48aa <_Z13string_to_intPKhPhh+0x54>

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
int32_t string_to_int(const uint8_t *array, uint8_t *errno, uint8_t term = '\r')
{
	bool is_neg = false;
    48a8:	1d 82       	std	Y+5, r1	; 0x05
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    48aa:	ee 81       	ldd	r30, Y+6	; 0x06
    48ac:	ff 81       	ldd	r31, Y+7	; 0x07
    48ae:	50 81       	ld	r21, Z
    48b0:	fa 81       	ldd	r31, Y+2	; 0x02
    48b2:	5f 17       	cp	r21, r31
    48b4:	09 f4       	brne	.+2      	; 0x48b8 <_Z13string_to_intPKhPhh+0x62>
    48b6:	87 c0       	rjmp	.+270    	; 0x49c6 <_Z13string_to_intPKhPhh+0x170>
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    48b8:	80 ed       	ldi	r24, 0xD0	; 208
    48ba:	85 0f       	add	r24, r21
    48bc:	8a 30       	cpi	r24, 0x0A	; 10
    48be:	08 f0       	brcs	.+2      	; 0x48c2 <_Z13string_to_intPKhPhh+0x6c>
    48c0:	6c c0       	rjmp	.+216    	; 0x499a <_Z13string_to_intPKhPhh+0x144>
    48c2:	8e 80       	ldd	r8, Y+6	; 0x06
    48c4:	9f 80       	ldd	r9, Y+7	; 0x07
    48c6:	2f ef       	ldi	r18, 0xFF	; 255
    48c8:	82 1a       	sub	r8, r18
    48ca:	92 0a       	sbc	r9, r18
    48cc:	e1 e0       	ldi	r30, 0x01	; 1
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    48d0:	61 2c       	mov	r6, r1
    48d2:	71 2c       	mov	r7, r1
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    48d4:	d1 2c       	mov	r13, r1
    48d6:	e1 2c       	mov	r14, r1
    48d8:	f1 2c       	mov	r15, r1
    48da:	00 e0       	ldi	r16, 0x00	; 0
    48dc:	b1 2c       	mov	r11, r1
    48de:	c1 2c       	mov	r12, r1
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0a c0       	rjmp	.+20     	; 0x48fa <_Z13string_to_intPKhPhh+0xa4>
    48e6:	9f 01       	movw	r18, r30
    48e8:	2f 5f       	subi	r18, 0xFF	; 255
    48ea:	3f 4f       	sbci	r19, 0xFF	; 255
    48ec:	40 ed       	ldi	r20, 0xD0	; 208
    48ee:	45 0f       	add	r20, r21
    48f0:	4a 30       	cpi	r20, 0x0A	; 10
    48f2:	08 f0       	brcs	.+2      	; 0x48f6 <_Z13string_to_intPKhPhh+0xa0>
    48f4:	52 c0       	rjmp	.+164    	; 0x499a <_Z13string_to_intPKhPhh+0x144>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    48f6:	3f 01       	movw	r6, r30
    48f8:	f9 01       	movw	r30, r18
    48fa:	55 24       	eor	r5, r5
    48fc:	5a 94       	dec	r5
    48fe:	5e 0e       	add	r5, r30
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
		{
			//Add character to number.
			number += (arr[index] - '0');
    4900:	a5 2f       	mov	r26, r21
    4902:	b0 e0       	ldi	r27, 0x00	; 0
    4904:	d0 97       	sbiw	r26, 0x30	; 48
    4906:	1b 2f       	mov	r17, r27
    4908:	11 0f       	add	r17, r17
    490a:	11 0b       	sbc	r17, r17
    490c:	2d 2d       	mov	r18, r13
    490e:	3e 2d       	mov	r19, r14
    4910:	4f 2d       	mov	r20, r15
    4912:	50 2f       	mov	r21, r16
    4914:	6b 2d       	mov	r22, r11
    4916:	7c 2d       	mov	r23, r12
    4918:	aa 2e       	mov	r10, r26
    491a:	bb 2e       	mov	r11, r27
    491c:	c1 2e       	mov	r12, r17
    491e:	d1 2e       	mov	r13, r17
    4920:	e1 2e       	mov	r14, r17
    4922:	f1 2e       	mov	r15, r17
    4924:	01 2f       	mov	r16, r17
    4926:	0e 94 57 3c 	call	0x78ae	; 0x78ae <__adddi3>
    492a:	19 2f       	mov	r17, r25
    492c:	d2 2e       	mov	r13, r18
    492e:	e3 2e       	mov	r14, r19
    4930:	f4 2e       	mov	r15, r20
    4932:	05 2f       	mov	r16, r21
    4934:	b6 2e       	mov	r11, r22
    4936:	c7 2e       	mov	r12, r23
    4938:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(arr[index + 1] >= '0' && arr[index + 1] <= '9')
    493a:	ae 81       	ldd	r26, Y+6	; 0x06
    493c:	bf 81       	ldd	r27, Y+7	; 0x07
    493e:	a6 0d       	add	r26, r6
    4940:	b7 1d       	adc	r27, r7
    4942:	11 96       	adiw	r26, 0x01	; 1
    4944:	ac 91       	ld	r26, X
    4946:	a0 53       	subi	r26, 0x30	; 48
    4948:	aa 30       	cpi	r26, 0x0A	; 10
    494a:	80 f5       	brcc	.+96     	; 0x49ac <_Z13string_to_intPKhPhh+0x156>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    494c:	01 e0       	ldi	r16, 0x01	; 1
    494e:	0e 94 3e 3c 	call	0x787c	; 0x787c <__ashldi3>
    4952:	22 2e       	mov	r2, r18
    4954:	33 2e       	mov	r3, r19
    4956:	44 2e       	mov	r4, r20
    4958:	65 2e       	mov	r6, r21
    495a:	76 2e       	mov	r7, r22
    495c:	a7 2f       	mov	r26, r23
    495e:	88 87       	std	Y+8, r24	; 0x08
    4960:	b9 2f       	mov	r27, r25
    4962:	02 e0       	ldi	r16, 0x02	; 2
    4964:	0e 94 3e 3c 	call	0x787c	; 0x787c <__ashldi3>
    4968:	a2 2e       	mov	r10, r18
    496a:	b3 2e       	mov	r11, r19
    496c:	c4 2e       	mov	r12, r20
    496e:	d5 2e       	mov	r13, r21
    4970:	e6 2e       	mov	r14, r22
    4972:	f7 2e       	mov	r15, r23
    4974:	08 2f       	mov	r16, r24
    4976:	19 2f       	mov	r17, r25
    4978:	22 2d       	mov	r18, r2
    497a:	33 2d       	mov	r19, r3
    497c:	44 2d       	mov	r20, r4
    497e:	56 2d       	mov	r21, r6
    4980:	67 2d       	mov	r22, r7
    4982:	7a 2f       	mov	r23, r26
    4984:	88 85       	ldd	r24, Y+8	; 0x08
    4986:	9b 2f       	mov	r25, r27
    4988:	0e 94 57 3c 	call	0x78ae	; 0x78ae <__adddi3>
    498c:	d2 2e       	mov	r13, r18
    498e:	e3 2e       	mov	r14, r19
    4990:	f4 2e       	mov	r15, r20
    4992:	05 2f       	mov	r16, r21
    4994:	b6 2e       	mov	r11, r22
    4996:	c7 2e       	mov	r12, r23
    4998:	09 c0       	rjmp	.+18     	; 0x49ac <_Z13string_to_intPKhPhh+0x156>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	ab 81       	ldd	r26, Y+3	; 0x03
    499e:	bc 81       	ldd	r27, Y+4	; 0x04
    49a0:	8c 93       	st	X, r24
			return 0;
    49a2:	60 e0       	ldi	r22, 0x00	; 0
    49a4:	70 e0       	ldi	r23, 0x00	; 0
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	64 c0       	rjmp	.+200    	; 0x4a74 <_Z13string_to_intPKhPhh+0x21e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    49ac:	d4 01       	movw	r26, r8
    49ae:	5d 91       	ld	r21, X+
    49b0:	4d 01       	movw	r8, r26
    49b2:	ba 81       	ldd	r27, Y+2	; 0x02
    49b4:	5b 17       	cp	r21, r27
    49b6:	21 f0       	breq	.+8      	; 0x49c0 <_Z13string_to_intPKhPhh+0x16a>
    49b8:	ea 30       	cpi	r30, 0x0A	; 10
    49ba:	f1 05       	cpc	r31, r1
    49bc:	09 f0       	breq	.+2      	; 0x49c0 <_Z13string_to_intPKhPhh+0x16a>
    49be:	93 cf       	rjmp	.-218    	; 0x48e6 <_Z13string_to_intPKhPhh+0x90>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, no digits at all.
	if((index > 10) || (!index))
    49c0:	e9 e0       	ldi	r30, 0x09	; 9
    49c2:	e5 15       	cp	r30, r5
    49c4:	48 f4       	brcc	.+18     	; 0x49d8 <_Z13string_to_intPKhPhh+0x182>
	{
		*errno = ER_ERROR;
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	ab 81       	ldd	r26, Y+3	; 0x03
    49ca:	bc 81       	ldd	r27, Y+4	; 0x04
    49cc:	8c 93       	st	X, r24
		return 0;
    49ce:	60 e0       	ldi	r22, 0x00	; 0
    49d0:	70 e0       	ldi	r23, 0x00	; 0
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	4e c0       	rjmp	.+156    	; 0x4a74 <_Z13string_to_intPKhPhh+0x21e>
	}
	
	//Check to see if number is too big.
	if(!is_neg && (number > INT_MAX))
    49d8:	bd 81       	ldd	r27, Y+5	; 0x05
    49da:	b1 11       	cpse	r27, r1
    49dc:	19 c0       	rjmp	.+50     	; 0x4a10 <_Z13string_to_intPKhPhh+0x1ba>
    49de:	2d 2d       	mov	r18, r13
    49e0:	3e 2d       	mov	r19, r14
    49e2:	4f 2d       	mov	r20, r15
    49e4:	50 2f       	mov	r21, r16
    49e6:	6b 2d       	mov	r22, r11
    49e8:	7c 2d       	mov	r23, r12
    49ea:	2f 3f       	cpi	r18, 0xFF	; 255
    49ec:	3f 4f       	sbci	r19, 0xFF	; 255
    49ee:	4f 4f       	sbci	r20, 0xFF	; 255
    49f0:	5f 47       	sbci	r21, 0x7F	; 127
    49f2:	61 05       	cpc	r22, r1
    49f4:	71 05       	cpc	r23, r1
    49f6:	81 05       	cpc	r24, r1
    49f8:	91 05       	cpc	r25, r1
    49fa:	b9 f1       	breq	.+110    	; 0x4a6a <_Z13string_to_intPKhPhh+0x214>
    49fc:	b0 f1       	brcs	.+108    	; 0x4a6a <_Z13string_to_intPKhPhh+0x214>
	{
		*errno = ER_ERROR;
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	ab 81       	ldd	r26, Y+3	; 0x03
    4a02:	bc 81       	ldd	r27, Y+4	; 0x04
    4a04:	8c 93       	st	X, r24
		return 0;
    4a06:	60 e0       	ldi	r22, 0x00	; 0
    4a08:	70 e0       	ldi	r23, 0x00	; 0
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	32 c0       	rjmp	.+100    	; 0x4a74 <_Z13string_to_intPKhPhh+0x21e>
	}
	
	//Check if number is too small.
	if(is_neg && number > INT_MIN)
    4a10:	2d 2d       	mov	r18, r13
    4a12:	3e 2d       	mov	r19, r14
    4a14:	4f 2d       	mov	r20, r15
    4a16:	50 2f       	mov	r21, r16
    4a18:	6b 2d       	mov	r22, r11
    4a1a:	7c 2d       	mov	r23, r12
    4a1c:	21 15       	cp	r18, r1
    4a1e:	31 05       	cpc	r19, r1
    4a20:	41 05       	cpc	r20, r1
    4a22:	50 48       	sbci	r21, 0x80	; 128
    4a24:	61 05       	cpc	r22, r1
    4a26:	71 05       	cpc	r23, r1
    4a28:	81 05       	cpc	r24, r1
    4a2a:	91 05       	cpc	r25, r1
    4a2c:	91 f0       	breq	.+36     	; 0x4a52 <_Z13string_to_intPKhPhh+0x1fc>
    4a2e:	88 f0       	brcs	.+34     	; 0x4a52 <_Z13string_to_intPKhPhh+0x1fc>
	{
		*errno = ER_ERROR;
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	eb 81       	ldd	r30, Y+3	; 0x03
    4a34:	fc 81       	ldd	r31, Y+4	; 0x04
    4a36:	80 83       	st	Z, r24
		return 0;
    4a38:	60 e0       	ldi	r22, 0x00	; 0
    4a3a:	70 e0       	ldi	r23, 0x00	; 0
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	19 c0       	rjmp	.+50     	; 0x4a74 <_Z13string_to_intPKhPhh+0x21e>
	{
		num *= -1;
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    4a42:	ab 81       	ldd	r26, Y+3	; 0x03
    4a44:	bc 81       	ldd	r27, Y+4	; 0x04
    4a46:	1c 92       	st	X, r1
	return num;
    4a48:	6c 2d       	mov	r22, r12
    4a4a:	7d 2d       	mov	r23, r13
    4a4c:	8e 2d       	mov	r24, r14
    4a4e:	9f 2d       	mov	r25, r15
    4a50:	11 c0       	rjmp	.+34     	; 0x4a74 <_Z13string_to_intPKhPhh+0x21e>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    4a52:	4d 2d       	mov	r20, r13
    4a54:	5e 2d       	mov	r21, r14
    4a56:	6f 2d       	mov	r22, r15
    4a58:	70 2f       	mov	r23, r16
	
	//Convert to a negative number, if necessary.
	if(is_neg)
	{
		num *= -1;
    4a5a:	cc 24       	eor	r12, r12
    4a5c:	dd 24       	eor	r13, r13
    4a5e:	76 01       	movw	r14, r12
    4a60:	c4 1a       	sub	r12, r20
    4a62:	d5 0a       	sbc	r13, r21
    4a64:	e6 0a       	sbc	r14, r22
    4a66:	f7 0a       	sbc	r15, r23
    4a68:	ec cf       	rjmp	.-40     	; 0x4a42 <_Z13string_to_intPKhPhh+0x1ec>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    4a6a:	cd 2c       	mov	r12, r13
    4a6c:	de 2c       	mov	r13, r14
    4a6e:	ef 2c       	mov	r14, r15
    4a70:	f0 2e       	mov	r15, r16
    4a72:	e7 cf       	rjmp	.-50     	; 0x4a42 <_Z13string_to_intPKhPhh+0x1ec>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
	return num;
}
    4a74:	29 96       	adiw	r28, 0x09	; 9
    4a76:	0f b6       	in	r0, 0x3f	; 63
    4a78:	f8 94       	cli
    4a7a:	de bf       	out	0x3e, r29	; 62
    4a7c:	0f be       	out	0x3f, r0	; 63
    4a7e:	cd bf       	out	0x3d, r28	; 61
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	1f 91       	pop	r17
    4a86:	0f 91       	pop	r16
    4a88:	ff 90       	pop	r15
    4a8a:	ef 90       	pop	r14
    4a8c:	df 90       	pop	r13
    4a8e:	cf 90       	pop	r12
    4a90:	bf 90       	pop	r11
    4a92:	af 90       	pop	r10
    4a94:	9f 90       	pop	r9
    4a96:	8f 90       	pop	r8
    4a98:	7f 90       	pop	r7
    4a9a:	6f 90       	pop	r6
    4a9c:	5f 90       	pop	r5
    4a9e:	4f 90       	pop	r4
    4aa0:	3f 90       	pop	r3
    4aa2:	2f 90       	pop	r2
    4aa4:	08 95       	ret

00004aa6 <_Z15string_to_int_pPKhPhS1_h>:

//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
//Also, it gives the index where the number was terminated.
int32_t string_to_int_p(const uint8_t *array, uint8_t *errno, uint8_t *pend, uint8_t term = '\r')
{
    4aa6:	2f 92       	push	r2
    4aa8:	3f 92       	push	r3
    4aaa:	4f 92       	push	r4
    4aac:	5f 92       	push	r5
    4aae:	6f 92       	push	r6
    4ab0:	7f 92       	push	r7
    4ab2:	8f 92       	push	r8
    4ab4:	9f 92       	push	r9
    4ab6:	af 92       	push	r10
    4ab8:	bf 92       	push	r11
    4aba:	cf 92       	push	r12
    4abc:	df 92       	push	r13
    4abe:	ef 92       	push	r14
    4ac0:	ff 92       	push	r15
    4ac2:	0f 93       	push	r16
    4ac4:	1f 93       	push	r17
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	cd b7       	in	r28, 0x3d	; 61
    4acc:	de b7       	in	r29, 0x3e	; 62
    4ace:	29 97       	sbiw	r28, 0x09	; 9
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	cd bf       	out	0x3d, r28	; 61
    4ada:	3c 01       	movw	r6, r24
    4adc:	7c 83       	std	Y+4, r23	; 0x04
    4ade:	6b 83       	std	Y+3, r22	; 0x03
    4ae0:	5f 83       	std	Y+7, r21	; 0x07
    4ae2:	4e 83       	std	Y+6, r20	; 0x06
    4ae4:	92 2e       	mov	r9, r18
	
	//Switch to new array pointer to account for any negative sign.
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	8c 91       	ld	r24, X
    4aea:	8d 32       	cpi	r24, 0x2D	; 45
    4aec:	31 f4       	brne	.+12     	; 0x4afa <_Z15string_to_int_pPKhPhS1_h+0x54>
	{
		is_neg = true;
		arr++;
    4aee:	bf ef       	ldi	r27, 0xFF	; 255
    4af0:	6b 1a       	sub	r6, r27
    4af2:	7b 0a       	sbc	r7, r27
	uint8_t *arr = (uint8_t *)array;
	
	//Looks to see if first character is negative sign, if so, set is_neg to true.
	if(arr[index] == '-')
	{
		is_neg = true;
    4af4:	e1 e0       	ldi	r30, 0x01	; 1
    4af6:	ed 83       	std	Y+5, r30	; 0x05
    4af8:	01 c0       	rjmp	.+2      	; 0x4afc <_Z15string_to_int_pPKhPhS1_h+0x56>
//Converts a string into a signed integer.
//This function looks for user defined character to stop the conversion.
//Also, it gives the index where the number was terminated.
int32_t string_to_int_p(const uint8_t *array, uint8_t *errno, uint8_t *pend, uint8_t term = '\r')
{
	bool is_neg = false;
    4afa:	1d 82       	std	Y+5, r1	; 0x05
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    4afc:	f3 01       	movw	r30, r6
    4afe:	a0 81       	ld	r26, Z
    4b00:	a9 15       	cp	r26, r9
    4b02:	09 f4       	brne	.+2      	; 0x4b06 <_Z15string_to_int_pPKhPhS1_h+0x60>
    4b04:	86 c0       	rjmp	.+268    	; 0x4c12 <_Z15string_to_int_pPKhPhS1_h+0x16c>
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    4b06:	80 ed       	ldi	r24, 0xD0	; 208
    4b08:	8a 0f       	add	r24, r26
    4b0a:	8a 30       	cpi	r24, 0x0A	; 10
    4b0c:	08 f0       	brcs	.+2      	; 0x4b10 <_Z15string_to_int_pPKhPhS1_h+0x6a>
    4b0e:	6a c0       	rjmp	.+212    	; 0x4be4 <_Z15string_to_int_pPKhPhS1_h+0x13e>
    4b10:	31 96       	adiw	r30, 0x01	; 1
    4b12:	fa 83       	std	Y+2, r31	; 0x02
    4b14:	e9 83       	std	Y+1, r30	; 0x01
    4b16:	e1 e0       	ldi	r30, 0x01	; 1
    4b18:	f0 e0       	ldi	r31, 0x00	; 0
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    4b1a:	41 2c       	mov	r4, r1
    4b1c:	51 2c       	mov	r5, r1
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
    4b1e:	f1 2c       	mov	r15, r1
    4b20:	00 e0       	ldi	r16, 0x00	; 0
    4b22:	a1 2c       	mov	r10, r1
    4b24:	b1 2c       	mov	r11, r1
    4b26:	d1 2c       	mov	r13, r1
    4b28:	e1 2c       	mov	r14, r1
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	5a 2f       	mov	r21, r26
    4b30:	0a c0       	rjmp	.+20     	; 0x4b46 <_Z15string_to_int_pPKhPhS1_h+0xa0>
    4b32:	9f 01       	movw	r18, r30
    4b34:	2f 5f       	subi	r18, 0xFF	; 255
    4b36:	3f 4f       	sbci	r19, 0xFF	; 255
    4b38:	40 ed       	ldi	r20, 0xD0	; 208
    4b3a:	45 0f       	add	r20, r21
    4b3c:	4a 30       	cpi	r20, 0x0A	; 10
    4b3e:	08 f0       	brcs	.+2      	; 0x4b42 <_Z15string_to_int_pPKhPhS1_h+0x9c>
    4b40:	51 c0       	rjmp	.+162    	; 0x4be4 <_Z15string_to_int_pPKhPhS1_h+0x13e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    4b42:	2f 01       	movw	r4, r30
    4b44:	f9 01       	movw	r30, r18
    4b46:	88 24       	eor	r8, r8
    4b48:	8a 94       	dec	r8
    4b4a:	8e 0e       	add	r8, r30
	{
		//Check if valid number character.
		if(arr[index] >= '0' && arr[index] <= '9')
		{
			//Add character to number.
			number += (arr[index] - '0');
    4b4c:	a5 2f       	mov	r26, r21
    4b4e:	b0 e0       	ldi	r27, 0x00	; 0
    4b50:	d0 97       	sbiw	r26, 0x30	; 48
    4b52:	1b 2f       	mov	r17, r27
    4b54:	11 0f       	add	r17, r17
    4b56:	11 0b       	sbc	r17, r17
    4b58:	2f 2d       	mov	r18, r15
    4b5a:	30 2f       	mov	r19, r16
    4b5c:	4a 2d       	mov	r20, r10
    4b5e:	5b 2d       	mov	r21, r11
    4b60:	6d 2d       	mov	r22, r13
    4b62:	7e 2d       	mov	r23, r14
    4b64:	aa 2e       	mov	r10, r26
    4b66:	bb 2e       	mov	r11, r27
    4b68:	c1 2e       	mov	r12, r17
    4b6a:	d1 2e       	mov	r13, r17
    4b6c:	e1 2e       	mov	r14, r17
    4b6e:	f1 2e       	mov	r15, r17
    4b70:	01 2f       	mov	r16, r17
    4b72:	0e 94 57 3c 	call	0x78ae	; 0x78ae <__adddi3>
    4b76:	19 2f       	mov	r17, r25
    4b78:	f2 2e       	mov	r15, r18
    4b7a:	03 2f       	mov	r16, r19
    4b7c:	a4 2e       	mov	r10, r20
    4b7e:	b5 2e       	mov	r11, r21
    4b80:	d6 2e       	mov	r13, r22
    4b82:	e7 2e       	mov	r14, r23
    4b84:	91 2f       	mov	r25, r17
			
			//Look ahead to see if there is another valid number coming up.
			if(arr[index + 1] >= '0' && arr[index + 1] <= '9')
    4b86:	d3 01       	movw	r26, r6
    4b88:	a4 0d       	add	r26, r4
    4b8a:	b5 1d       	adc	r27, r5
    4b8c:	11 96       	adiw	r26, 0x01	; 1
    4b8e:	ac 91       	ld	r26, X
    4b90:	a0 53       	subi	r26, 0x30	; 48
    4b92:	aa 30       	cpi	r26, 0x0A	; 10
    4b94:	80 f5       	brcc	.+96     	; 0x4bf6 <_Z15string_to_int_pPKhPhS1_h+0x150>
			{
				//If so, shift to make room for next digit.
				number *= 10;
    4b96:	01 e0       	ldi	r16, 0x01	; 1
    4b98:	0e 94 3e 3c 	call	0x787c	; 0x787c <__ashldi3>
    4b9c:	22 2e       	mov	r2, r18
    4b9e:	33 2e       	mov	r3, r19
    4ba0:	44 2e       	mov	r4, r20
    4ba2:	55 2e       	mov	r5, r21
    4ba4:	69 87       	std	Y+9, r22	; 0x09
    4ba6:	78 87       	std	Y+8, r23	; 0x08
    4ba8:	b8 2f       	mov	r27, r24
    4baa:	a9 2f       	mov	r26, r25
    4bac:	02 e0       	ldi	r16, 0x02	; 2
    4bae:	0e 94 3e 3c 	call	0x787c	; 0x787c <__ashldi3>
    4bb2:	a2 2e       	mov	r10, r18
    4bb4:	b3 2e       	mov	r11, r19
    4bb6:	c4 2e       	mov	r12, r20
    4bb8:	d5 2e       	mov	r13, r21
    4bba:	e6 2e       	mov	r14, r22
    4bbc:	f7 2e       	mov	r15, r23
    4bbe:	08 2f       	mov	r16, r24
    4bc0:	19 2f       	mov	r17, r25
    4bc2:	22 2d       	mov	r18, r2
    4bc4:	33 2d       	mov	r19, r3
    4bc6:	44 2d       	mov	r20, r4
    4bc8:	55 2d       	mov	r21, r5
    4bca:	69 85       	ldd	r22, Y+9	; 0x09
    4bcc:	78 85       	ldd	r23, Y+8	; 0x08
    4bce:	8b 2f       	mov	r24, r27
    4bd0:	9a 2f       	mov	r25, r26
    4bd2:	0e 94 57 3c 	call	0x78ae	; 0x78ae <__adddi3>
    4bd6:	f2 2e       	mov	r15, r18
    4bd8:	03 2f       	mov	r16, r19
    4bda:	a4 2e       	mov	r10, r20
    4bdc:	b5 2e       	mov	r11, r21
    4bde:	d6 2e       	mov	r13, r22
    4be0:	e7 2e       	mov	r14, r23
    4be2:	09 c0       	rjmp	.+18     	; 0x4bf6 <_Z15string_to_int_pPKhPhS1_h+0x150>
			}
		}
		else //Invalid character.
		{
			*errno = ER_ERROR;
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	ab 81       	ldd	r26, Y+3	; 0x03
    4be8:	bc 81       	ldd	r27, Y+4	; 0x04
    4bea:	8c 93       	st	X, r24
			return 0;
    4bec:	60 e0       	ldi	r22, 0x00	; 0
    4bee:	70 e0       	ldi	r23, 0x00	; 0
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	6f c0       	rjmp	.+222    	; 0x4cd4 <_Z15string_to_int_pPKhPhS1_h+0x22e>
		is_neg = true;
		arr++;
	}
	
	//Continue until termination character is found or function errors out.
	while(arr[index] != term && index < 10)
    4bf6:	a9 81       	ldd	r26, Y+1	; 0x01
    4bf8:	ba 81       	ldd	r27, Y+2	; 0x02
    4bfa:	5d 91       	ld	r21, X+
    4bfc:	ba 83       	std	Y+2, r27	; 0x02
    4bfe:	a9 83       	std	Y+1, r26	; 0x01
    4c00:	59 15       	cp	r21, r9
    4c02:	21 f0       	breq	.+8      	; 0x4c0c <_Z15string_to_int_pPKhPhS1_h+0x166>
    4c04:	ea 30       	cpi	r30, 0x0A	; 10
    4c06:	f1 05       	cpc	r31, r1
    4c08:	09 f0       	breq	.+2      	; 0x4c0c <_Z15string_to_int_pPKhPhS1_h+0x166>
    4c0a:	93 cf       	rjmp	.-218    	; 0x4b32 <_Z15string_to_int_pPKhPhS1_h+0x8c>
		}
		index++;	//Move to next digit.
	}
	
	//Check to see if there are too many digits, no digits at all.
	if((index > 10) || (!index))
    4c0c:	b9 e0       	ldi	r27, 0x09	; 9
    4c0e:	b8 15       	cp	r27, r8
    4c10:	48 f4       	brcc	.+18     	; 0x4c24 <_Z15string_to_int_pPKhPhS1_h+0x17e>
	{
		*errno = ER_ERROR;
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	eb 81       	ldd	r30, Y+3	; 0x03
    4c16:	fc 81       	ldd	r31, Y+4	; 0x04
    4c18:	80 83       	st	Z, r24
		return 0;
    4c1a:	60 e0       	ldi	r22, 0x00	; 0
    4c1c:	70 e0       	ldi	r23, 0x00	; 0
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	58 c0       	rjmp	.+176    	; 0x4cd4 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	}
	
	//Check to see if number is too big.
	if(!is_neg && (number > INT_MAX))
    4c24:	fd 81       	ldd	r31, Y+5	; 0x05
    4c26:	f1 11       	cpse	r31, r1
    4c28:	19 c0       	rjmp	.+50     	; 0x4c5c <_Z15string_to_int_pPKhPhS1_h+0x1b6>
    4c2a:	2f 2d       	mov	r18, r15
    4c2c:	30 2f       	mov	r19, r16
    4c2e:	4a 2d       	mov	r20, r10
    4c30:	5b 2d       	mov	r21, r11
    4c32:	6d 2d       	mov	r22, r13
    4c34:	7e 2d       	mov	r23, r14
    4c36:	2f 3f       	cpi	r18, 0xFF	; 255
    4c38:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3a:	4f 4f       	sbci	r20, 0xFF	; 255
    4c3c:	5f 47       	sbci	r21, 0x7F	; 127
    4c3e:	61 05       	cpc	r22, r1
    4c40:	71 05       	cpc	r23, r1
    4c42:	81 05       	cpc	r24, r1
    4c44:	91 05       	cpc	r25, r1
    4c46:	e1 f1       	breq	.+120    	; 0x4cc0 <_Z15string_to_int_pPKhPhS1_h+0x21a>
    4c48:	d8 f1       	brcs	.+118    	; 0x4cc0 <_Z15string_to_int_pPKhPhS1_h+0x21a>
	{
		*errno = ER_ERROR;
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	eb 81       	ldd	r30, Y+3	; 0x03
    4c4e:	fc 81       	ldd	r31, Y+4	; 0x04
    4c50:	80 83       	st	Z, r24
		return 0;
    4c52:	60 e0       	ldi	r22, 0x00	; 0
    4c54:	70 e0       	ldi	r23, 0x00	; 0
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	3c c0       	rjmp	.+120    	; 0x4cd4 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	}
	
	//Check if number is too small.
	if(is_neg && number > INT_MIN)
    4c5c:	2f 2d       	mov	r18, r15
    4c5e:	30 2f       	mov	r19, r16
    4c60:	4a 2d       	mov	r20, r10
    4c62:	5b 2d       	mov	r21, r11
    4c64:	6d 2d       	mov	r22, r13
    4c66:	7e 2d       	mov	r23, r14
    4c68:	21 15       	cp	r18, r1
    4c6a:	31 05       	cpc	r19, r1
    4c6c:	41 05       	cpc	r20, r1
    4c6e:	50 48       	sbci	r21, 0x80	; 128
    4c70:	61 05       	cpc	r22, r1
    4c72:	71 05       	cpc	r23, r1
    4c74:	81 05       	cpc	r24, r1
    4c76:	91 05       	cpc	r25, r1
    4c78:	91 f0       	breq	.+36     	; 0x4c9e <_Z15string_to_int_pPKhPhS1_h+0x1f8>
    4c7a:	88 f0       	brcs	.+34     	; 0x4c9e <_Z15string_to_int_pPKhPhS1_h+0x1f8>
	{
		*errno = ER_ERROR;
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	ab 81       	ldd	r26, Y+3	; 0x03
    4c80:	bc 81       	ldd	r27, Y+4	; 0x04
    4c82:	8c 93       	st	X, r24
		return 0;
    4c84:	60 e0       	ldi	r22, 0x00	; 0
    4c86:	70 e0       	ldi	r23, 0x00	; 0
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	23 c0       	rjmp	.+70     	; 0x4cd4 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	{
		(*pend)++;
	}
	
	//Success.
	*errno = ER_NO_ERROR;
    4c8e:	eb 81       	ldd	r30, Y+3	; 0x03
    4c90:	fc 81       	ldd	r31, Y+4	; 0x04
    4c92:	10 82       	st	Z, r1
	return num;
    4c94:	6c 2d       	mov	r22, r12
    4c96:	7d 2d       	mov	r23, r13
    4c98:	8e 2d       	mov	r24, r14
    4c9a:	9f 2d       	mov	r25, r15
    4c9c:	1b c0       	rjmp	.+54     	; 0x4cd4 <_Z15string_to_int_pPKhPhS1_h+0x22e>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    4c9e:	4f 2d       	mov	r20, r15
    4ca0:	50 2f       	mov	r21, r16
    4ca2:	6a 2d       	mov	r22, r10
    4ca4:	7b 2d       	mov	r23, r11
	
	//Convert to a negative number, if necessary.
	if(is_neg)
	{
		num *= -1;
    4ca6:	cc 24       	eor	r12, r12
    4ca8:	dd 24       	eor	r13, r13
    4caa:	76 01       	movw	r14, r12
    4cac:	c4 1a       	sub	r12, r20
    4cae:	d5 0a       	sbc	r13, r21
    4cb0:	e6 0a       	sbc	r14, r22
    4cb2:	f7 0a       	sbc	r15, r23
	
	//Update the pointer to the end of the number.
	*pend = index + 1;
	if(is_neg)
	{
		(*pend)++;
    4cb4:	83 e0       	ldi	r24, 0x03	; 3
    4cb6:	88 0d       	add	r24, r8
    4cb8:	ae 81       	ldd	r26, Y+6	; 0x06
    4cba:	bf 81       	ldd	r27, Y+7	; 0x07
    4cbc:	8c 93       	st	X, r24
    4cbe:	e7 cf       	rjmp	.-50     	; 0x4c8e <_Z15string_to_int_pPKhPhS1_h+0x1e8>
	{
		*errno = ER_ERROR;
		return 0;
	}
	
	num = number;
    4cc0:	cf 2c       	mov	r12, r15
    4cc2:	d0 2e       	mov	r13, r16
    4cc4:	ea 2c       	mov	r14, r10
    4cc6:	fb 2c       	mov	r15, r11
	{
		num *= -1;
	}
	
	//Update the pointer to the end of the number.
	*pend = index + 1;
    4cc8:	83 94       	inc	r8
    4cca:	83 94       	inc	r8
    4ccc:	ee 81       	ldd	r30, Y+6	; 0x06
    4cce:	ff 81       	ldd	r31, Y+7	; 0x07
    4cd0:	80 82       	st	Z, r8
    4cd2:	dd cf       	rjmp	.-70     	; 0x4c8e <_Z15string_to_int_pPKhPhS1_h+0x1e8>
	}
	
	//Success.
	*errno = ER_NO_ERROR;
	return num;
}
    4cd4:	29 96       	adiw	r28, 0x09	; 9
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	f8 94       	cli
    4cda:	de bf       	out	0x3e, r29	; 62
    4cdc:	0f be       	out	0x3f, r0	; 63
    4cde:	cd bf       	out	0x3d, r28	; 61
    4ce0:	df 91       	pop	r29
    4ce2:	cf 91       	pop	r28
    4ce4:	1f 91       	pop	r17
    4ce6:	0f 91       	pop	r16
    4ce8:	ff 90       	pop	r15
    4cea:	ef 90       	pop	r14
    4cec:	df 90       	pop	r13
    4cee:	cf 90       	pop	r12
    4cf0:	bf 90       	pop	r11
    4cf2:	af 90       	pop	r10
    4cf4:	9f 90       	pop	r9
    4cf6:	8f 90       	pop	r8
    4cf8:	7f 90       	pop	r7
    4cfa:	6f 90       	pop	r6
    4cfc:	5f 90       	pop	r5
    4cfe:	4f 90       	pop	r4
    4d00:	3f 90       	pop	r3
    4d02:	2f 90       	pop	r2
    4d04:	08 95       	ret

00004d06 <_Z8load_u32PKh>:
	return temp16;
}

//Takes a unit8_t array and takes the first 4 values and loads them into a uint32_t.
uint32_t load_u32(const uint8_t *array)
{
    4d06:	0f 93       	push	r16
    4d08:	1f 93       	push	r17
    4d0a:	fc 01       	movw	r30, r24
	uint32_t temp32_1, temp32_2, temp32_3;
	
	temp32_1 = array[0];
    4d0c:	00 81       	ld	r16, Z
    4d0e:	10 e0       	ldi	r17, 0x00	; 0
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
	temp32_1 <<= 24;
	temp32_2 = array[1];
    4d14:	41 81       	ldd	r20, Z+1	; 0x01
    4d16:	50 e0       	ldi	r21, 0x00	; 0
    4d18:	60 e0       	ldi	r22, 0x00	; 0
    4d1a:	70 e0       	ldi	r23, 0x00	; 0
	temp32_2 <<= 16;
	temp32_3 = array[2];
    4d1c:	82 81       	ldd	r24, Z+2	; 0x02
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	a0 e0       	ldi	r26, 0x00	; 0
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
uint32_t load_u32(const uint8_t *array)
{
	uint32_t temp32_1, temp32_2, temp32_3;
	
	temp32_1 = array[0];
	temp32_1 <<= 24;
    4d24:	30 2f       	mov	r19, r16
    4d26:	22 27       	eor	r18, r18
    4d28:	11 27       	eor	r17, r17
    4d2a:	00 27       	eor	r16, r16
	temp32_2 = array[1];
	temp32_2 <<= 16;
    4d2c:	ba 01       	movw	r22, r20
    4d2e:	55 27       	eor	r21, r21
    4d30:	44 27       	eor	r20, r20
	temp32_3 = array[2];
	temp32_3 <<= 8;
	return temp32_1 + temp32_2 + temp32_3 + array[3];
    4d32:	40 0f       	add	r20, r16
    4d34:	51 1f       	adc	r21, r17
    4d36:	62 1f       	adc	r22, r18
    4d38:	73 1f       	adc	r23, r19
    4d3a:	23 81       	ldd	r18, Z+3	; 0x03
    4d3c:	42 0f       	add	r20, r18
    4d3e:	51 1d       	adc	r21, r1
    4d40:	61 1d       	adc	r22, r1
    4d42:	71 1d       	adc	r23, r1
	temp32_1 = array[0];
	temp32_1 <<= 24;
	temp32_2 = array[1];
	temp32_2 <<= 16;
	temp32_3 = array[2];
	temp32_3 <<= 8;
    4d44:	ba 2f       	mov	r27, r26
    4d46:	a9 2f       	mov	r26, r25
    4d48:	98 2f       	mov	r25, r24
    4d4a:	88 27       	eor	r24, r24
	return temp32_1 + temp32_2 + temp32_3 + array[3];
    4d4c:	8a 01       	movw	r16, r20
    4d4e:	9b 01       	movw	r18, r22
    4d50:	08 0f       	add	r16, r24
    4d52:	19 1f       	adc	r17, r25
    4d54:	2a 1f       	adc	r18, r26
    4d56:	3b 1f       	adc	r19, r27
    4d58:	c9 01       	movw	r24, r18
    4d5a:	b8 01       	movw	r22, r16
}
    4d5c:	1f 91       	pop	r17
    4d5e:	0f 91       	pop	r16
    4d60:	08 95       	ret

00004d62 <_Z11uart_yes_nob>:
}

//Write a Y or N character out the UART.
void uart_yes_no(bool yes_no)
{
	yes_no ? atmega_uart::tx_byte('Y') : atmega_uart::tx_byte('N');
    4d62:	88 23       	and	r24, r24
    4d64:	21 f0       	breq	.+8      	; 0x4d6e <_Z11uart_yes_nob+0xc>
    4d66:	89 e5       	ldi	r24, 0x59	; 89
    4d68:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    4d6c:	03 c0       	rjmp	.+6      	; 0x4d74 <_Z11uart_yes_nob+0x12>
    4d6e:	8e e4       	ldi	r24, 0x4E	; 78
    4d70:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4d74:	8d e0       	ldi	r24, 0x0D	; 13
    4d76:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    4d7a:	08 95       	ret

00004d7c <_Z16uart_min_max_u32mm>:
}

//Write minimum and maximum unsigned range of value out the UART.
void uart_min_max_u32(uint32_t min, uint32_t max)
{
    4d7c:	8f 92       	push	r8
    4d7e:	9f 92       	push	r9
    4d80:	af 92       	push	r10
    4d82:	bf 92       	push	r11
    4d84:	cf 92       	push	r12
    4d86:	df 92       	push	r13
    4d88:	ef 92       	push	r14
    4d8a:	ff 92       	push	r15
    4d8c:	4b 01       	movw	r8, r22
    4d8e:	5c 01       	movw	r10, r24
    4d90:	69 01       	movw	r12, r18
    4d92:	7a 01       	movw	r14, r20
	atmega_uart::tx_string_p(PSTR(" ("));
    4d94:	8d e5       	ldi	r24, 0x5D	; 93
    4d96:	9e e0       	ldi	r25, 0x0E	; 14
    4d98:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(min);
    4d9c:	c5 01       	movw	r24, r10
    4d9e:	b4 01       	movw	r22, r8
    4da0:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_string_p(PSTR(" to "));
    4da4:	88 e5       	ldi	r24, 0x58	; 88
    4da6:	9e e0       	ldi	r25, 0x0E	; 14
    4da8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(max);
    4dac:	c7 01       	movw	r24, r14
    4dae:	b6 01       	movw	r22, r12
    4db0:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_string_p(PSTR("): "));
    4db4:	84 e5       	ldi	r24, 0x54	; 84
    4db6:	9e e0       	ldi	r25, 0x0E	; 14
    4db8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
}
    4dbc:	ff 90       	pop	r15
    4dbe:	ef 90       	pop	r14
    4dc0:	df 90       	pop	r13
    4dc2:	cf 90       	pop	r12
    4dc4:	bf 90       	pop	r11
    4dc6:	af 90       	pop	r10
    4dc8:	9f 90       	pop	r9
    4dca:	8f 90       	pop	r8
    4dcc:	08 95       	ret

00004dce <_Z16uart_min_max_intii>:

//Write minimum and maximum signed range of value out the UART.
void uart_min_max_int(int min, int max)
{
    4dce:	0f 93       	push	r16
    4dd0:	1f 93       	push	r17
    4dd2:	cf 93       	push	r28
    4dd4:	df 93       	push	r29
    4dd6:	8c 01       	movw	r16, r24
    4dd8:	eb 01       	movw	r28, r22
	atmega_uart::tx_string_p(PSTR(" ("));
    4dda:	81 e5       	ldi	r24, 0x51	; 81
    4ddc:	9e e0       	ldi	r25, 0x0E	; 14
    4dde:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(min);
    4de2:	b8 01       	movw	r22, r16
    4de4:	88 27       	eor	r24, r24
    4de6:	77 fd       	sbrc	r23, 7
    4de8:	80 95       	com	r24
    4dea:	98 2f       	mov	r25, r24
    4dec:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
	atmega_uart::tx_string_p(PSTR(" to "));
    4df0:	8c e4       	ldi	r24, 0x4C	; 76
    4df2:	9e e0       	ldi	r25, 0x0E	; 14
    4df4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(max);
    4df8:	be 01       	movw	r22, r28
    4dfa:	88 27       	eor	r24, r24
    4dfc:	77 fd       	sbrc	r23, 7
    4dfe:	80 95       	com	r24
    4e00:	98 2f       	mov	r25, r24
    4e02:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
	atmega_uart::tx_string_p(PSTR("): "));
    4e06:	88 e4       	ldi	r24, 0x48	; 72
    4e08:	9e e0       	ldi	r25, 0x0E	; 14
    4e0a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
}
    4e0e:	df 91       	pop	r29
    4e10:	cf 91       	pop	r28
    4e12:	1f 91       	pop	r17
    4e14:	0f 91       	pop	r16
    4e16:	08 95       	ret

00004e18 <_Z15uart_true_falseb>:

//Print "true" or "false" out the UART.
void uart_true_false(bool t_f)
{
	t_f ? atmega_uart::tx_string_p(PSTR("true")) : atmega_uart::tx_string_p(PSTR("false"));
    4e18:	88 23       	and	r24, r24
    4e1a:	29 f0       	breq	.+10     	; 0x4e26 <_Z15uart_true_falseb+0xe>
    4e1c:	83 e4       	ldi	r24, 0x43	; 67
    4e1e:	9e e0       	ldi	r25, 0x0E	; 14
    4e20:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    4e24:	04 c0       	rjmp	.+8      	; 0x4e2e <_Z15uart_true_falseb+0x16>
    4e26:	8d e3       	ldi	r24, 0x3D	; 61
    4e28:	9e e0       	ldi	r25, 0x0E	; 14
    4e2a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	atmega_uart::tx_byte(';');
    4e2e:	8b e3       	ldi	r24, 0x3B	; 59
    4e30:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4e34:	8d e0       	ldi	r24, 0x0D	; 13
    4e36:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    4e3a:	08 95       	ret

00004e3c <_Z19uart_print_settingsP8as_class>:
}

/*****************************************************Menu Writing Rountines*************************************************/
//Print device settings.
void uart_print_settings(as_class *as)
{
    4e3c:	0f 93       	push	r16
    4e3e:	1f 93       	push	r17
    4e40:	cf 93       	push	r28
    4e42:	df 93       	push	r29
    4e44:	ec 01       	movw	r28, r24
	uint8_t temp;
	uint16_t arb_num;
	bool t_f;
	
	arb_num = fram1_read_word(ARB_NUM);
    4e46:	62 ed       	ldi	r22, 0xD2	; 210
    4e48:	7b ef       	ldi	r23, 0xFB	; 251
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    4e52:	8c 01       	movw	r16, r24
	
	atmega_uart::tx_string_p(PSTR("tx_m=\'"));
    4e54:	89 e1       	ldi	r24, 0x19	; 25
    4e56:	9f e0       	ldi	r25, 0x0F	; 15
    4e58:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	temp = as->get_tx_mode();
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
	if(temp == TX_MODE_ASCII)
    4e62:	81 11       	cpse	r24, r1
    4e64:	04 c0       	rjmp	.+8      	; 0x4e6e <_Z19uart_print_settingsP8as_class+0x32>
	{
		atmega_uart::tx_byte('A');
    4e66:	81 e4       	ldi	r24, 0x41	; 65
    4e68:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    4e6c:	09 c0       	rjmp	.+18     	; 0x4e80 <_Z19uart_print_settingsP8as_class+0x44>
	}
	else if(temp == TX_MODE_MATLAB)
    4e6e:	81 30       	cpi	r24, 0x01	; 1
    4e70:	21 f4       	brne	.+8      	; 0x4e7a <_Z19uart_print_settingsP8as_class+0x3e>
	{
		atmega_uart::tx_byte('M');
    4e72:	8d e4       	ldi	r24, 0x4D	; 77
    4e74:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    4e78:	03 c0       	rjmp	.+6      	; 0x4e80 <_Z19uart_print_settingsP8as_class+0x44>
	}
	else
	{
		atmega_uart::tx_byte('B');
    4e7a:	82 e4       	ldi	r24, 0x42	; 66
    4e7c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	}
	atmega_uart::tx_string_p(PSTR("\';\r"));
    4e80:	85 e1       	ldi	r24, 0x15	; 21
    4e82:	9f e0       	ldi	r25, 0x0F	; 15
    4e84:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	
	atmega_uart::tx_string_p(PSTR("num_e="));
    4e88:	8e e0       	ldi	r24, 0x0E	; 14
    4e8a:	9f e0       	ldi	r25, 0x0F	; 15
    4e8c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	temp = as->get_num_electrodes();
    4e90:	ce 01       	movw	r24, r28
    4e92:	0e 94 f5 19 	call	0x33ea	; 0x33ea <_ZN8as_class18get_num_electrodesEv>
	
	(temp == ELEC_2) ? atmega_uart::tx_byte('2') : atmega_uart::tx_byte('3');
    4e96:	81 11       	cpse	r24, r1
    4e98:	04 c0       	rjmp	.+8      	; 0x4ea2 <_Z19uart_print_settingsP8as_class+0x66>
    4e9a:	82 e3       	ldi	r24, 0x32	; 50
    4e9c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    4ea0:	03 c0       	rjmp	.+6      	; 0x4ea8 <_Z19uart_print_settingsP8as_class+0x6c>
    4ea2:	83 e3       	ldi	r24, 0x33	; 51
    4ea4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte(';');
    4ea8:	8b e3       	ldi	r24, 0x3B	; 59
    4eaa:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4eae:	8d e0       	ldi	r24, 0x0D	; 13
    4eb0:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("adc_r="));
    4eb4:	87 e0       	ldi	r24, 0x07	; 7
    4eb6:	9f e0       	ldi	r25, 0x0F	; 15
    4eb8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_adc_rate());
    4ebc:	ce 01       	movw	r24, r28
    4ebe:	0e 94 08 1a 	call	0x3410	; 0x3410 <_ZN8as_class12get_adc_rateEv>
    4ec2:	bc 01       	movw	r22, r24
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4ecc:	8b e3       	ldi	r24, 0x3B	; 59
    4ece:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4ed2:	8d e0       	ldi	r24, 0x0D	; 13
    4ed4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("tia_r="));
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	9f e0       	ldi	r25, 0x0F	; 15
    4edc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	temp =as->get_tia_res();
    4ee0:	ce 01       	movw	r24, r28
    4ee2:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN8as_class11get_tia_resEv>
	if(temp == 1)
    4ee6:	81 30       	cpi	r24, 0x01	; 1
    4ee8:	29 f4       	brne	.+10     	; 0x4ef4 <_Z19uart_print_settingsP8as_class+0xb8>
		tx_u16_to_ascii(100);
    4eea:	84 e6       	ldi	r24, 0x64	; 100
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
    4ef2:	22 c0       	rjmp	.+68     	; 0x4f38 <_Z19uart_print_settingsP8as_class+0xfc>
	else if(temp == 2)
    4ef4:	82 30       	cpi	r24, 0x02	; 2
    4ef6:	29 f4       	brne	.+10     	; 0x4f02 <_Z19uart_print_settingsP8as_class+0xc6>
		tx_u16_to_ascii(1000);
    4ef8:	88 ee       	ldi	r24, 0xE8	; 232
    4efa:	93 e0       	ldi	r25, 0x03	; 3
    4efc:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
    4f00:	1b c0       	rjmp	.+54     	; 0x4f38 <_Z19uart_print_settingsP8as_class+0xfc>
	else if(temp == 3)
    4f02:	83 30       	cpi	r24, 0x03	; 3
    4f04:	29 f4       	brne	.+10     	; 0x4f10 <_Z19uart_print_settingsP8as_class+0xd4>
		tx_u16_to_ascii(5100);
    4f06:	8c ee       	ldi	r24, 0xEC	; 236
    4f08:	93 e1       	ldi	r25, 0x13	; 19
    4f0a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
    4f0e:	14 c0       	rjmp	.+40     	; 0x4f38 <_Z19uart_print_settingsP8as_class+0xfc>
	else if(temp == 4)
    4f10:	84 30       	cpi	r24, 0x04	; 4
    4f12:	29 f4       	brne	.+10     	; 0x4f1e <_Z19uart_print_settingsP8as_class+0xe2>
		tx_u16_to_ascii(10000);
    4f14:	80 e1       	ldi	r24, 0x10	; 16
    4f16:	97 e2       	ldi	r25, 0x27	; 39
    4f18:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
    4f1c:	0d c0       	rjmp	.+26     	; 0x4f38 <_Z19uart_print_settingsP8as_class+0xfc>
	else if(temp == 5)
    4f1e:	85 30       	cpi	r24, 0x05	; 5
    4f20:	29 f4       	brne	.+10     	; 0x4f2c <_Z19uart_print_settingsP8as_class+0xf0>
		tx_u16_to_ascii(51000);
    4f22:	88 e3       	ldi	r24, 0x38	; 56
    4f24:	97 ec       	ldi	r25, 0xC7	; 199
    4f26:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
    4f2a:	06 c0       	rjmp	.+12     	; 0x4f38 <_Z19uart_print_settingsP8as_class+0xfc>
	else
		tx_u32_to_ascii(100000);
    4f2c:	60 ea       	ldi	r22, 0xA0	; 160
    4f2e:	76 e8       	ldi	r23, 0x86	; 134
    4f30:	81 e0       	ldi	r24, 0x01	; 1
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4f38:	8b e3       	ldi	r24, 0x3B	; 59
    4f3a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4f3e:	8d e0       	ldi	r24, 0x0D	; 13
    4f40:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_e="));
    4f44:	89 ef       	ldi	r24, 0xF9	; 249
    4f46:	9e e0       	ldi	r25, 0x0E	; 14
    4f48:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_dep_enable();
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN8as_class14get_dep_enableEv>
	uart_true_false(t_f);
    4f52:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("dep_t="));
    4f56:	82 ef       	ldi	r24, 0xF2	; 242
    4f58:	9e e0       	ldi	r25, 0x0E	; 14
    4f5a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_dep_time());
    4f5e:	ce 01       	movw	r24, r28
    4f60:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN8as_class12get_dep_timeEv>
    4f64:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4f68:	8b e3       	ldi	r24, 0x3B	; 59
    4f6a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4f6e:	8d e0       	ldi	r24, 0x0D	; 13
    4f70:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_v="));
    4f74:	8b ee       	ldi	r24, 0xEB	; 235
    4f76:	9e e0       	ldi	r25, 0x0E	; 14
    4f78:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_dep_volt());
    4f7c:	ce 01       	movw	r24, r28
    4f7e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <_ZN8as_class12get_dep_voltEv>
    4f82:	bc 01       	movw	r22, r24
    4f84:	88 27       	eor	r24, r24
    4f86:	77 fd       	sbrc	r23, 7
    4f88:	80 95       	com	r24
    4f8a:	98 2f       	mov	r25, r24
    4f8c:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    4f90:	8b e3       	ldi	r24, 0x3B	; 59
    4f92:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4f96:	8d e0       	ldi	r24, 0x0D	; 13
    4f98:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("quiet_t="));
    4f9c:	82 ee       	ldi	r24, 0xE2	; 226
    4f9e:	9e e0       	ldi	r25, 0x0E	; 14
    4fa0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_quiet_time());
    4fa4:	ce 01       	movw	r24, r28
    4fa6:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN8as_class14get_quiet_timeEv>
    4faa:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    4fae:	8b e3       	ldi	r24, 0x3B	; 59
    4fb0:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4fb4:	8d e0       	ldi	r24, 0x0D	; 13
    4fb6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dep_r="));
    4fba:	8b ed       	ldi	r24, 0xDB	; 219
    4fbc:	9e e0       	ldi	r25, 0x0E	; 14
    4fbe:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_dep_rec();
    4fc2:	ce 01       	movw	r24, r28
    4fc4:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
	uart_true_false(t_f);
    4fc8:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("sweep_vs="));
    4fcc:	81 ed       	ldi	r24, 0xD1	; 209
    4fce:	9e e0       	ldi	r25, 0x0E	; 14
    4fd0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_sweep_volt_start());
    4fd4:	ce 01       	movw	r24, r28
    4fd6:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN8as_class20get_sweep_volt_startEv>
    4fda:	bc 01       	movw	r22, r24
    4fdc:	88 27       	eor	r24, r24
    4fde:	77 fd       	sbrc	r23, 7
    4fe0:	80 95       	com	r24
    4fe2:	98 2f       	mov	r25, r24
    4fe4:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    4fe8:	8b e3       	ldi	r24, 0x3B	; 59
    4fea:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    4fee:	8d e0       	ldi	r24, 0x0D	; 13
    4ff0:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_ve="));
    4ff4:	87 ec       	ldi	r24, 0xC7	; 199
    4ff6:	9e e0       	ldi	r25, 0x0E	; 14
    4ff8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_sweep_volt_end());
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN8as_class18get_sweep_volt_endEv>
    5002:	bc 01       	movw	r22, r24
    5004:	88 27       	eor	r24, r24
    5006:	77 fd       	sbrc	r23, 7
    5008:	80 95       	com	r24
    500a:	98 2f       	mov	r25, r24
    500c:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    5010:	8b e3       	ldi	r24, 0x3B	; 59
    5012:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    5016:	8d e0       	ldi	r24, 0x0D	; 13
    5018:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_r="));
    501c:	8e eb       	ldi	r24, 0xBE	; 190
    501e:	9e e0       	ldi	r25, 0x0E	; 14
    5020:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_sweep_rate());
    5024:	ce 01       	movw	r24, r28
    5026:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN8as_class14get_sweep_rateEv>
    502a:	bc 01       	movw	r22, r24
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    5034:	8b e3       	ldi	r24, 0x3B	; 59
    5036:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    503a:	8d e0       	ldi	r24, 0x0D	; 13
    503c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("sweep_c="));
    5040:	85 eb       	ldi	r24, 0xB5	; 181
    5042:	9e e0       	ldi	r25, 0x0E	; 14
    5044:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	t_f = as->get_sweep_cyclic();
    5048:	ce 01       	movw	r24, r28
    504a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN8as_class16get_sweep_cyclicEv>
	uart_true_false(t_f);
    504e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <_Z15uart_true_falseb>
	
	atmega_uart::tx_string_p(PSTR("sweep_cs="));
    5052:	8b ea       	ldi	r24, 0xAB	; 171
    5054:	9e e0       	ldi	r25, 0x0E	; 14
    5056:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_sweep_cycles());
    505a:	ce 01       	movw	r24, r28
    505c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_ZN8as_class16get_sweep_cyclesEv>
    5060:	68 2f       	mov	r22, r24
    5062:	70 e0       	ldi	r23, 0x00	; 0
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    506c:	8b e3       	ldi	r24, 0x3B	; 59
    506e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    5072:	8d e0       	ldi	r24, 0x0D	; 13
    5074:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dif_vs="));
    5078:	83 ea       	ldi	r24, 0xA3	; 163
    507a:	9e e0       	ldi	r25, 0x0E	; 14
    507c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_dif_volt_start());
    5080:	ce 01       	movw	r24, r28
    5082:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    5086:	bc 01       	movw	r22, r24
    5088:	88 27       	eor	r24, r24
    508a:	77 fd       	sbrc	r23, 7
    508c:	80 95       	com	r24
    508e:	98 2f       	mov	r25, r24
    5090:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    5094:	8b e3       	ldi	r24, 0x3B	; 59
    5096:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    509a:	8d e0       	ldi	r24, 0x0D	; 13
    509c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dif_ve="));
    50a0:	8b e9       	ldi	r24, 0x9B	; 155
    50a2:	9e e0       	ldi	r25, 0x0E	; 14
    50a4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_int_to_ascii(as->get_dif_volt_end());
    50a8:	ce 01       	movw	r24, r28
    50aa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    50ae:	bc 01       	movw	r22, r24
    50b0:	88 27       	eor	r24, r24
    50b2:	77 fd       	sbrc	r23, 7
    50b4:	80 95       	com	r24
    50b6:	98 2f       	mov	r25, r24
    50b8:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
	atmega_uart::tx_byte(';');
    50bc:	8b e3       	ldi	r24, 0x3B	; 59
    50be:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    50c2:	8d e0       	ldi	r24, 0x0D	; 13
    50c4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dif_vi="));
    50c8:	83 e9       	ldi	r24, 0x93	; 147
    50ca:	9e e0       	ldi	r25, 0x0E	; 14
    50cc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u16_to_ascii(as->get_dif_volt_inc());
    50d0:	ce 01       	movw	r24, r28
    50d2:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN8as_class16get_dif_volt_incEv>
    50d6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
	atmega_uart::tx_byte(';');
    50da:	8b e3       	ldi	r24, 0x3B	; 59
    50dc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    50e0:	8d e0       	ldi	r24, 0x0D	; 13
    50e2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dif_vpl="));
    50e6:	8a e8       	ldi	r24, 0x8A	; 138
    50e8:	9e e0       	ldi	r25, 0x0E	; 14
    50ea:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u16_to_ascii(as->get_dif_volt_pls());
    50ee:	ce 01       	movw	r24, r28
    50f0:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    50f4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
	atmega_uart::tx_byte(';');
    50f8:	8b e3       	ldi	r24, 0x3B	; 59
    50fa:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    50fe:	8d e0       	ldi	r24, 0x0D	; 13
    5100:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dif_tpr="));
    5104:	81 e8       	ldi	r24, 0x81	; 129
    5106:	9e e0       	ldi	r25, 0x0E	; 14
    5108:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u16_to_ascii(as->get_dif_time_pre());
    510c:	ce 01       	movw	r24, r28
    510e:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN8as_class16get_dif_time_preEv>
    5112:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
	atmega_uart::tx_byte(';');
    5116:	8b e3       	ldi	r24, 0x3B	; 59
    5118:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    511c:	8d e0       	ldi	r24, 0x0D	; 13
    511e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dif_tpl="));
    5122:	88 e7       	ldi	r24, 0x78	; 120
    5124:	9e e0       	ldi	r25, 0x0E	; 14
    5126:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u16_to_ascii(as->get_dif_time_pls());
    512a:	ce 01       	movw	r24, r28
    512c:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN8as_class16get_dif_time_plsEv>
    5130:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
	atmega_uart::tx_byte(';');
    5134:	8b e3       	ldi	r24, 0x3B	; 59
    5136:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    513a:	8d e0       	ldi	r24, 0x0D	; 13
    513c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("dif_win="));
    5140:	8f e6       	ldi	r24, 0x6F	; 111
    5142:	9e e0       	ldi	r25, 0x0E	; 14
    5144:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u16_to_ascii(as->get_dif_time_win());
    5148:	ce 01       	movw	r24, r28
    514a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN8as_class16get_dif_time_winEv>
    514e:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_Z15tx_u16_to_asciij>
	atmega_uart::tx_byte(';');
    5152:	8b e3       	ldi	r24, 0x3B	; 59
    5154:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    5158:	8d e0       	ldi	r24, 0x0D	; 13
    515a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("arb_n="));
    515e:	88 e6       	ldi	r24, 0x68	; 104
    5160:	9e e0       	ldi	r25, 0x0E	; 14
    5162:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(arb_num);
    5166:	b8 01       	movw	r22, r16
    5168:	80 e0       	ldi	r24, 0x00	; 0
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    5170:	8b e3       	ldi	r24, 0x3B	; 59
    5172:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    5176:	8d e0       	ldi	r24, 0x0D	; 13
    5178:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	atmega_uart::tx_string_p(PSTR("filt_s="));
    517c:	80 e6       	ldi	r24, 0x60	; 96
    517e:	9e e0       	ldi	r25, 0x0E	; 14
    5180:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
	tx_u32_to_ascii(as->get_soft_sel());
    5184:	ce 01       	movw	r24, r28
    5186:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8as_class12get_soft_selEv>
    518a:	68 2f       	mov	r22, r24
    518c:	70 e0       	ldi	r23, 0x00	; 0
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
	atmega_uart::tx_byte(';');
    5196:	8b e3       	ldi	r24, 0x3B	; 59
    5198:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    519c:	8d e0       	ldi	r24, 0x0D	; 13
    519e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	atmega_uart::tx_byte('\r');
    51a2:	8d e0       	ldi	r24, 0x0D	; 13
    51a4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
}
    51a8:	df 91       	pop	r29
    51aa:	cf 91       	pop	r28
    51ac:	1f 91       	pop	r17
    51ae:	0f 91       	pop	r16
    51b0:	08 95       	ret

000051b2 <_Z17uart_print_spacesv>:
	atmega_uart::tx_byte('\r');
}

//Print 8 spaces out the UART for indenting.
void uart_print_spaces()
{
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
    51b6:	c8 e0       	ldi	r28, 0x08	; 8
    51b8:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		atmega_uart::tx_byte(' ');
    51ba:	80 e2       	ldi	r24, 0x20	; 32
    51bc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    51c0:	21 97       	sbiw	r28, 0x01	; 1
}

//Print 8 spaces out the UART for indenting.
void uart_print_spaces()
{
	for(int i = 0; i < 8; i++)
    51c2:	20 97       	sbiw	r28, 0x00	; 0
    51c4:	d1 f7       	brne	.-12     	; 0x51ba <_Z17uart_print_spacesv+0x8>
	{
		atmega_uart::tx_byte(' ');
	}
}
    51c6:	df 91       	pop	r29
    51c8:	cf 91       	pop	r28
    51ca:	08 95       	ret

000051cc <_Z8uart_errv>:

//Write "ERR" in the terminal window.
void uart_err()
{
	atmega_uart::tx_string_p(PSTR("ERR\r"));
    51cc:	88 e3       	ldi	r24, 0x38	; 56
    51ce:	9e e0       	ldi	r25, 0x0E	; 14
    51d0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    51d4:	08 95       	ret

000051d6 <_Z7uart_okv>:
}

//Write "OK" in the terminal window.
void uart_ok()
{
	atmega_uart::tx_string_p(PSTR("OK\r"));
    51d6:	84 e3       	ldi	r24, 0x34	; 52
    51d8:	9e e0       	ldi	r25, 0x0E	; 14
    51da:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
    51de:	08 95       	ret

000051e0 <_Z10arb_appendPKh>:
	return;
}

//Append arbitrary waveform data to end of saved list.
uint8_t arb_append(const uint8_t *rx_array)
{
    51e0:	2f 92       	push	r2
    51e2:	3f 92       	push	r3
    51e4:	4f 92       	push	r4
    51e6:	5f 92       	push	r5
    51e8:	6f 92       	push	r6
    51ea:	7f 92       	push	r7
    51ec:	8f 92       	push	r8
    51ee:	9f 92       	push	r9
    51f0:	af 92       	push	r10
    51f2:	bf 92       	push	r11
    51f4:	cf 92       	push	r12
    51f6:	df 92       	push	r13
    51f8:	ef 92       	push	r14
    51fa:	ff 92       	push	r15
    51fc:	0f 93       	push	r16
    51fe:	1f 93       	push	r17
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	00 d0       	rcall	.+0      	; 0x5206 <_Z10arb_appendPKh+0x26>
    5206:	1f 92       	push	r1
    5208:	cd b7       	in	r28, 0x3d	; 61
    520a:	de b7       	in	r29, 0x3e	; 62
    520c:	5c 01       	movw	r10, r24
	int16_t start_v, end_v;
	uint16_t rate, entries;
	uint8_t errno, pend1, pend2;
	
	//Get number of entries already in list.
	entries = fram1_read_word(ARB_NUM);
    520e:	62 ed       	ldi	r22, 0xD2	; 210
    5210:	7b ef       	ldi	r23, 0xFB	; 251
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    521a:	8c 01       	movw	r16, r24
	
	//Error out if memory is already full.
	if(entries >= ARB_ENTRIES_MAX)
    521c:	80 32       	cpi	r24, 0x20	; 32
    521e:	2e e4       	ldi	r18, 0x4E	; 78
    5220:	92 07       	cpc	r25, r18
    5222:	30 f0       	brcs	.+12     	; 0x5230 <_Z10arb_appendPKh+0x50>
	{
		atmega_uart::tx_string_p(PSTR("Memory Full\r"));
    5224:	81 e4       	ldi	r24, 0x41	; 65
    5226:	97 e0       	ldi	r25, 0x07	; 7
    5228:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return ER_ERROR;
    522c:	81 e0       	ldi	r24, 0x01	; 1
    522e:	7d c0       	rjmp	.+250    	; 0x532a <_Z10arb_appendPKh+0x14a>
	}
	
	//Attempt to convert first user input to number.
	start_v = string_to_int_p(rx_array, &errno, &pend1, ' ');
    5230:	20 e2       	ldi	r18, 0x20	; 32
    5232:	ae 01       	movw	r20, r28
    5234:	4e 5f       	subi	r20, 0xFE	; 254
    5236:	5f 4f       	sbci	r21, 0xFF	; 255
    5238:	be 01       	movw	r22, r28
    523a:	6d 5f       	subi	r22, 0xFD	; 253
    523c:	7f 4f       	sbci	r23, 0xFF	; 255
    523e:	c5 01       	movw	r24, r10
    5240:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_Z15string_to_int_pPKhPhS1_h>
    5244:	6b 01       	movw	r12, r22
    5246:	7c 01       	movw	r14, r24
	
	if(errno)
    5248:	8b 81       	ldd	r24, Y+3	; 0x03
    524a:	81 11       	cpse	r24, r1
    524c:	63 c0       	rjmp	.+198    	; 0x5314 <_Z10arb_appendPKh+0x134>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
    524e:	c6 01       	movw	r24, r12
    5250:	8e 58       	subi	r24, 0x8E	; 142
    5252:	99 4f       	sbci	r25, 0xF9	; 249
    5254:	85 3e       	cpi	r24, 0xE5	; 229
    5256:	9c 40       	sbci	r25, 0x0C	; 12
    5258:	08 f0       	brcs	.+2      	; 0x525c <_Z10arb_appendPKh+0x7c>
    525a:	5e c0       	rjmp	.+188    	; 0x5318 <_Z10arb_appendPKh+0x138>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert second user input to number.
	end_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
    525c:	8a 81       	ldd	r24, Y+2	; 0x02
    525e:	20 e2       	ldi	r18, 0x20	; 32
    5260:	ae 01       	movw	r20, r28
    5262:	4f 5f       	subi	r20, 0xFF	; 255
    5264:	5f 4f       	sbci	r21, 0xFF	; 255
    5266:	be 01       	movw	r22, r28
    5268:	6d 5f       	subi	r22, 0xFD	; 253
    526a:	7f 4f       	sbci	r23, 0xFF	; 255
    526c:	f5 01       	movw	r30, r10
    526e:	e8 0f       	add	r30, r24
    5270:	f1 1d       	adc	r31, r1
    5272:	cf 01       	movw	r24, r30
    5274:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_Z15string_to_int_pPKhPhS1_h>
    5278:	2b 01       	movw	r4, r22
    527a:	3c 01       	movw	r6, r24
	
	if(errno)
    527c:	8b 81       	ldd	r24, Y+3	; 0x03
    527e:	81 11       	cpse	r24, r1
    5280:	4d c0       	rjmp	.+154    	; 0x531c <_Z10arb_appendPKh+0x13c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
    5282:	c2 01       	movw	r24, r4
    5284:	8e 58       	subi	r24, 0x8E	; 142
    5286:	99 4f       	sbci	r25, 0xF9	; 249
    5288:	85 3e       	cpi	r24, 0xE5	; 229
    528a:	9c 40       	sbci	r25, 0x0C	; 12
    528c:	08 f0       	brcs	.+2      	; 0x5290 <_Z10arb_appendPKh+0xb0>
    528e:	48 c0       	rjmp	.+144    	; 0x5320 <_Z10arb_appendPKh+0x140>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert third user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend2, '\r');
    5290:	29 81       	ldd	r18, Y+1	; 0x01
    5292:	8a 81       	ldd	r24, Y+2	; 0x02
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	82 0f       	add	r24, r18
    5298:	91 1d       	adc	r25, r1
    529a:	2d e0       	ldi	r18, 0x0D	; 13
    529c:	ae 01       	movw	r20, r28
    529e:	4f 5f       	subi	r20, 0xFF	; 255
    52a0:	5f 4f       	sbci	r21, 0xFF	; 255
    52a2:	be 01       	movw	r22, r28
    52a4:	6d 5f       	subi	r22, 0xFD	; 253
    52a6:	7f 4f       	sbci	r23, 0xFF	; 255
    52a8:	8a 0d       	add	r24, r10
    52aa:	9b 1d       	adc	r25, r11
    52ac:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_Z15string_to_int_pPKhPhS1_h>
    52b0:	4b 01       	movw	r8, r22
    52b2:	5c 01       	movw	r10, r24
	
	if(errno)
    52b4:	8b 81       	ldd	r24, Y+3	; 0x03
    52b6:	81 11       	cpse	r24, r1
    52b8:	35 c0       	rjmp	.+106    	; 0x5324 <_Z10arb_appendPKh+0x144>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
    52ba:	c4 01       	movw	r24, r8
    52bc:	01 97       	sbiw	r24, 0x01	; 1
    52be:	80 3e       	cpi	r24, 0xE0	; 224
    52c0:	9e 42       	sbci	r25, 0x2E	; 46
    52c2:	90 f5       	brcc	.+100    	; 0x5328 <_Z10arb_appendPKh+0x148>
	{
		return ER_ERROR;
	}
	
	//Save values in the EEPROM.
	fram1_write_word(ARB_START + 6 * entries, start_v);
    52c4:	18 01       	movw	r2, r16
    52c6:	22 0c       	add	r2, r2
    52c8:	33 1c       	adc	r3, r3
    52ca:	20 0e       	add	r2, r16
    52cc:	31 1e       	adc	r3, r17
    52ce:	22 0c       	add	r2, r2
    52d0:	33 1c       	adc	r3, r3
    52d2:	b1 01       	movw	r22, r2
    52d4:	80 e0       	ldi	r24, 0x00	; 0
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	a6 01       	movw	r20, r12
    52da:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
	fram1_write_word(ARB_START + 2 + 6 * entries, end_v);
    52de:	b1 01       	movw	r22, r2
    52e0:	6e 5f       	subi	r22, 0xFE	; 254
    52e2:	7f 4f       	sbci	r23, 0xFF	; 255
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	a2 01       	movw	r20, r4
    52ea:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
	fram1_write_word(ARB_START + 4 + 6 * entries, rate);
    52ee:	b1 01       	movw	r22, r2
    52f0:	6c 5f       	subi	r22, 0xFC	; 252
    52f2:	7f 4f       	sbci	r23, 0xFF	; 255
    52f4:	80 e0       	ldi	r24, 0x00	; 0
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	a4 01       	movw	r20, r8
    52fa:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
	
	//Update number of entries stored.
	fram1_write_word(ARB_NUM, entries + 1);
    52fe:	a8 01       	movw	r20, r16
    5300:	4f 5f       	subi	r20, 0xFF	; 255
    5302:	5f 4f       	sbci	r21, 0xFF	; 255
    5304:	62 ed       	ldi	r22, 0xD2	; 210
    5306:	7b ef       	ldi	r23, 0xFB	; 251
    5308:	81 e0       	ldi	r24, 0x01	; 1
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
	
	return ER_NO_ERROR;
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	0b c0       	rjmp	.+22     	; 0x532a <_Z10arb_appendPKh+0x14a>
	//Attempt to convert first user input to number.
	start_v = string_to_int_p(rx_array, &errno, &pend1, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    5314:	81 e0       	ldi	r24, 0x01	; 1
    5316:	09 c0       	rjmp	.+18     	; 0x532a <_Z10arb_appendPKh+0x14a>
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    5318:	81 e0       	ldi	r24, 0x01	; 1
    531a:	07 c0       	rjmp	.+14     	; 0x532a <_Z10arb_appendPKh+0x14a>
	//Attempt to convert second user input to number.
	end_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	05 c0       	rjmp	.+10     	; 0x532a <_Z10arb_appendPKh+0x14a>
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    5320:	81 e0       	ldi	r24, 0x01	; 1
    5322:	03 c0       	rjmp	.+6      	; 0x532a <_Z10arb_appendPKh+0x14a>
	//Attempt to convert third user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend2, '\r');
	
	if(errno)
	{
		return ER_ERROR;
    5324:	81 e0       	ldi	r24, 0x01	; 1
    5326:	01 c0       	rjmp	.+2      	; 0x532a <_Z10arb_appendPKh+0x14a>
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
	{
		return ER_ERROR;
    5328:	81 e0       	ldi	r24, 0x01	; 1
	
	//Update number of entries stored.
	fram1_write_word(ARB_NUM, entries + 1);
	
	return ER_NO_ERROR;
}
    532a:	0f 90       	pop	r0
    532c:	0f 90       	pop	r0
    532e:	0f 90       	pop	r0
    5330:	df 91       	pop	r29
    5332:	cf 91       	pop	r28
    5334:	1f 91       	pop	r17
    5336:	0f 91       	pop	r16
    5338:	ff 90       	pop	r15
    533a:	ef 90       	pop	r14
    533c:	df 90       	pop	r13
    533e:	cf 90       	pop	r12
    5340:	bf 90       	pop	r11
    5342:	af 90       	pop	r10
    5344:	9f 90       	pop	r9
    5346:	8f 90       	pop	r8
    5348:	7f 90       	pop	r7
    534a:	6f 90       	pop	r6
    534c:	5f 90       	pop	r5
    534e:	4f 90       	pop	r4
    5350:	3f 90       	pop	r3
    5352:	2f 90       	pop	r2
    5354:	08 95       	ret

00005356 <_Z11arb_replacePKh>:

//Replace arbitrary waveform data at specified location.
uint8_t arb_replace(const uint8_t *rx_array)
{
    5356:	4f 92       	push	r4
    5358:	5f 92       	push	r5
    535a:	6f 92       	push	r6
    535c:	7f 92       	push	r7
    535e:	8f 92       	push	r8
    5360:	9f 92       	push	r9
    5362:	af 92       	push	r10
    5364:	bf 92       	push	r11
    5366:	cf 92       	push	r12
    5368:	df 92       	push	r13
    536a:	ef 92       	push	r14
    536c:	ff 92       	push	r15
    536e:	0f 93       	push	r16
    5370:	1f 93       	push	r17
    5372:	cf 93       	push	r28
    5374:	df 93       	push	r29
    5376:	cd b7       	in	r28, 0x3d	; 61
    5378:	de b7       	in	r29, 0x3e	; 62
    537a:	28 97       	sbiw	r28, 0x08	; 8
    537c:	0f b6       	in	r0, 0x3f	; 63
    537e:	f8 94       	cli
    5380:	de bf       	out	0x3e, r29	; 62
    5382:	0f be       	out	0x3f, r0	; 63
    5384:	cd bf       	out	0x3d, r28	; 61
    5386:	8c 01       	movw	r16, r24
	int16_t start_v, end_v;
	uint16_t ent, rate, entries;
	uint8_t errno, pend1, pend2, pend3;
	
	//Get number of entries already in list.
	entries = fram1_read_word(ARB_NUM);
    5388:	62 ed       	ldi	r22, 0xD2	; 210
    538a:	7b ef       	ldi	r23, 0xFB	; 251
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    5394:	5c 01       	movw	r10, r24
	
	//Attempt to convert first user input to number.
	ent = string_to_int_p(rx_array, &errno, &pend1, ' ');
    5396:	20 e2       	ldi	r18, 0x20	; 32
    5398:	ae 01       	movw	r20, r28
    539a:	4d 5f       	subi	r20, 0xFD	; 253
    539c:	5f 4f       	sbci	r21, 0xFF	; 255
    539e:	be 01       	movw	r22, r28
    53a0:	6c 5f       	subi	r22, 0xFC	; 252
    53a2:	7f 4f       	sbci	r23, 0xFF	; 255
    53a4:	c8 01       	movw	r24, r16
    53a6:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_Z15string_to_int_pPKhPhS1_h>
    53aa:	6b 01       	movw	r12, r22
    53ac:	7c 01       	movw	r14, r24
	
	if(errno)
    53ae:	8c 81       	ldd	r24, Y+4	; 0x04
    53b0:	81 11       	cpse	r24, r1
    53b2:	81 c0       	rjmp	.+258    	; 0x54b6 <_Z11arb_replacePKh+0x160>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(ent > entries)
    53b4:	ac 14       	cp	r10, r12
    53b6:	bd 04       	cpc	r11, r13
    53b8:	30 f4       	brcc	.+12     	; 0x53c6 <_Z11arb_replacePKh+0x70>
	{
		atmega_uart::tx_string_p(PSTR("Entry Out of Range\r"));
    53ba:	8d e2       	ldi	r24, 0x2D	; 45
    53bc:	97 e0       	ldi	r25, 0x07	; 7
    53be:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return ER_ERROR;
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	85 c0       	rjmp	.+266    	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	}
	
	//Attempt to convert second user input to number.
	start_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
    53c6:	8b 81       	ldd	r24, Y+3	; 0x03
    53c8:	20 e2       	ldi	r18, 0x20	; 32
    53ca:	ae 01       	movw	r20, r28
    53cc:	4e 5f       	subi	r20, 0xFE	; 254
    53ce:	5f 4f       	sbci	r21, 0xFF	; 255
    53d0:	be 01       	movw	r22, r28
    53d2:	6c 5f       	subi	r22, 0xFC	; 252
    53d4:	7f 4f       	sbci	r23, 0xFF	; 255
    53d6:	f8 01       	movw	r30, r16
    53d8:	e8 0f       	add	r30, r24
    53da:	f1 1d       	adc	r31, r1
    53dc:	cf 01       	movw	r24, r30
    53de:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_Z15string_to_int_pPKhPhS1_h>
    53e2:	4b 01       	movw	r8, r22
    53e4:	5c 01       	movw	r10, r24
	
	if(errno)
    53e6:	8c 81       	ldd	r24, Y+4	; 0x04
    53e8:	81 11       	cpse	r24, r1
    53ea:	67 c0       	rjmp	.+206    	; 0x54ba <_Z11arb_replacePKh+0x164>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
    53ec:	c4 01       	movw	r24, r8
    53ee:	8e 58       	subi	r24, 0x8E	; 142
    53f0:	99 4f       	sbci	r25, 0xF9	; 249
    53f2:	85 3e       	cpi	r24, 0xE5	; 229
    53f4:	9c 40       	sbci	r25, 0x0C	; 12
    53f6:	08 f0       	brcs	.+2      	; 0x53fa <_Z11arb_replacePKh+0xa4>
    53f8:	62 c0       	rjmp	.+196    	; 0x54be <_Z11arb_replacePKh+0x168>
	{
		return ER_ERROR;
	}
	
	//Attempt to convert third user input to number.
	end_v = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend3, ' ');
    53fa:	2a 81       	ldd	r18, Y+2	; 0x02
    53fc:	8b 81       	ldd	r24, Y+3	; 0x03
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	82 0f       	add	r24, r18
    5402:	91 1d       	adc	r25, r1
    5404:	20 e2       	ldi	r18, 0x20	; 32
    5406:	ae 01       	movw	r20, r28
    5408:	4f 5f       	subi	r20, 0xFF	; 255
    540a:	5f 4f       	sbci	r21, 0xFF	; 255
    540c:	be 01       	movw	r22, r28
    540e:	6c 5f       	subi	r22, 0xFC	; 252
    5410:	7f 4f       	sbci	r23, 0xFF	; 255
    5412:	80 0f       	add	r24, r16
    5414:	91 1f       	adc	r25, r17
    5416:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_Z15string_to_int_pPKhPhS1_h>
    541a:	2b 01       	movw	r4, r22
    541c:	3c 01       	movw	r6, r24
	
	if(errno)
    541e:	8c 81       	ldd	r24, Y+4	; 0x04
    5420:	81 11       	cpse	r24, r1
    5422:	4f c0       	rjmp	.+158    	; 0x54c2 <_Z11arb_replacePKh+0x16c>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
    5424:	c2 01       	movw	r24, r4
    5426:	8e 58       	subi	r24, 0x8E	; 142
    5428:	99 4f       	sbci	r25, 0xF9	; 249
    542a:	85 3e       	cpi	r24, 0xE5	; 229
    542c:	9c 40       	sbci	r25, 0x0C	; 12
    542e:	08 f0       	brcs	.+2      	; 0x5432 <_Z11arb_replacePKh+0xdc>
    5430:	4a c0       	rjmp	.+148    	; 0x54c6 <_Z11arb_replacePKh+0x170>
		return ER_ERROR;
	}
	
	
	//Attempt to convert fourth user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2 + pend3, &errno, &pend2, '\r');
    5432:	2a 81       	ldd	r18, Y+2	; 0x02
    5434:	8b 81       	ldd	r24, Y+3	; 0x03
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	82 0f       	add	r24, r18
    543a:	91 1d       	adc	r25, r1
    543c:	29 81       	ldd	r18, Y+1	; 0x01
    543e:	82 0f       	add	r24, r18
    5440:	91 1d       	adc	r25, r1
    5442:	2d e0       	ldi	r18, 0x0D	; 13
    5444:	ae 01       	movw	r20, r28
    5446:	4e 5f       	subi	r20, 0xFE	; 254
    5448:	5f 4f       	sbci	r21, 0xFF	; 255
    544a:	be 01       	movw	r22, r28
    544c:	6c 5f       	subi	r22, 0xFC	; 252
    544e:	7f 4f       	sbci	r23, 0xFF	; 255
    5450:	80 0f       	add	r24, r16
    5452:	91 1f       	adc	r25, r17
    5454:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_Z15string_to_int_pPKhPhS1_h>
    5458:	6d 83       	std	Y+5, r22	; 0x05
    545a:	7e 83       	std	Y+6, r23	; 0x06
    545c:	8f 83       	std	Y+7, r24	; 0x07
    545e:	98 87       	std	Y+8, r25	; 0x08
	
	if(errno)
    5460:	8c 81       	ldd	r24, Y+4	; 0x04
    5462:	81 11       	cpse	r24, r1
    5464:	32 c0       	rjmp	.+100    	; 0x54ca <_Z11arb_replacePKh+0x174>
	{
		return ER_ERROR;
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
    5466:	8d 81       	ldd	r24, Y+5	; 0x05
    5468:	9e 81       	ldd	r25, Y+6	; 0x06
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	80 3e       	cpi	r24, 0xE0	; 224
    546e:	9e 42       	sbci	r25, 0x2E	; 46
    5470:	70 f5       	brcc	.+92     	; 0x54ce <_Z11arb_replacePKh+0x178>
	{
		return ER_ERROR;
	}
	
	//Save values in the EEPROM.
	fram1_write_word(ARB_START + 6 * (ent - 1), start_v);
    5472:	c6 01       	movw	r24, r12
    5474:	88 0f       	add	r24, r24
    5476:	99 1f       	adc	r25, r25
    5478:	c8 0e       	add	r12, r24
    547a:	d9 1e       	adc	r13, r25
    547c:	cc 0c       	add	r12, r12
    547e:	dd 1c       	adc	r13, r13
    5480:	b6 01       	movw	r22, r12
    5482:	66 50       	subi	r22, 0x06	; 6
    5484:	71 09       	sbc	r23, r1
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	a4 01       	movw	r20, r8
    548c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
	fram1_write_word(ARB_START + 2 + 6 * (ent - 1), end_v);
    5490:	b6 01       	movw	r22, r12
    5492:	64 50       	subi	r22, 0x04	; 4
    5494:	71 09       	sbc	r23, r1
    5496:	80 e0       	ldi	r24, 0x00	; 0
    5498:	90 e0       	ldi	r25, 0x00	; 0
    549a:	a2 01       	movw	r20, r4
    549c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
	fram1_write_word(ARB_START + 4 + 6 * (ent - 1), rate);
    54a0:	b6 01       	movw	r22, r12
    54a2:	62 50       	subi	r22, 0x02	; 2
    54a4:	71 09       	sbc	r23, r1
    54a6:	80 e0       	ldi	r24, 0x00	; 0
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	4d 81       	ldd	r20, Y+5	; 0x05
    54ac:	5e 81       	ldd	r21, Y+6	; 0x06
    54ae:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
	
	return ER_NO_ERROR;
    54b2:	80 e0       	ldi	r24, 0x00	; 0
    54b4:	0d c0       	rjmp	.+26     	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	//Attempt to convert first user input to number.
	ent = string_to_int_p(rx_array, &errno, &pend1, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	0b c0       	rjmp	.+22     	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	//Attempt to convert second user input to number.
	start_v = string_to_int_p(rx_array + pend1, &errno, &pend2, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    54ba:	81 e0       	ldi	r24, 0x01	; 1
    54bc:	09 c0       	rjmp	.+18     	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	}
	
	//Make sure the number falls within the proper range.
	if(start_v > ARB_VOLT_MAX || start_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	07 c0       	rjmp	.+14     	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	//Attempt to convert third user input to number.
	end_v = string_to_int_p(rx_array + pend1 + pend2, &errno, &pend3, ' ');
	
	if(errno)
	{
		return ER_ERROR;
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	05 c0       	rjmp	.+10     	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	}
	
	//Make sure the number falls within the proper range.
	if(end_v > ARB_VOLT_MAX || end_v < ARB_VOLT_MIN)
	{
		return ER_ERROR;
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	03 c0       	rjmp	.+6      	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	//Attempt to convert fourth user input to number.
	rate = string_to_int_p(rx_array + pend1 + pend2 + pend3, &errno, &pend2, '\r');
	
	if(errno)
	{
		return ER_ERROR;
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	01 c0       	rjmp	.+2      	; 0x54d0 <_Z11arb_replacePKh+0x17a>
	}
	
	//Make sure the number falls within the proper range.
	if(rate > ARB_RATE_MAX || rate < ARB_RATE_MIN)
	{
		return ER_ERROR;
    54ce:	81 e0       	ldi	r24, 0x01	; 1
	fram1_write_word(ARB_START + 6 * (ent - 1), start_v);
	fram1_write_word(ARB_START + 2 + 6 * (ent - 1), end_v);
	fram1_write_word(ARB_START + 4 + 6 * (ent - 1), rate);
	
	return ER_NO_ERROR;
}
    54d0:	28 96       	adiw	r28, 0x08	; 8
    54d2:	0f b6       	in	r0, 0x3f	; 63
    54d4:	f8 94       	cli
    54d6:	de bf       	out	0x3e, r29	; 62
    54d8:	0f be       	out	0x3f, r0	; 63
    54da:	cd bf       	out	0x3d, r28	; 61
    54dc:	df 91       	pop	r29
    54de:	cf 91       	pop	r28
    54e0:	1f 91       	pop	r17
    54e2:	0f 91       	pop	r16
    54e4:	ff 90       	pop	r15
    54e6:	ef 90       	pop	r14
    54e8:	df 90       	pop	r13
    54ea:	cf 90       	pop	r12
    54ec:	bf 90       	pop	r11
    54ee:	af 90       	pop	r10
    54f0:	9f 90       	pop	r9
    54f2:	8f 90       	pop	r8
    54f4:	7f 90       	pop	r7
    54f6:	6f 90       	pop	r6
    54f8:	5f 90       	pop	r5
    54fa:	4f 90       	pop	r4
    54fc:	08 95       	ret

000054fe <_Z8set_boolPKhP8as_classMS1_FhbE>:

//Set value in as_class object that is a bool value (ASCII).
uint8_t set_bool(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_tf)(bool))
{
    54fe:	cf 92       	push	r12
    5500:	df 92       	push	r13
    5502:	ef 92       	push	r14
    5504:	ff 92       	push	r15
    5506:	0f 93       	push	r16
    5508:	1f 93       	push	r17
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	8c 01       	movw	r16, r24
    5510:	eb 01       	movw	r28, r22
    5512:	69 01       	movw	r12, r18
    5514:	7a 01       	movw	r14, r20
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    5516:	cb 01       	movw	r24, r22
    5518:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    551c:	82 30       	cpi	r24, 0x02	; 2
    551e:	09 f0       	breq	.+2      	; 0x5522 <_Z8set_boolPKhP8as_classMS1_FhbE+0x24>
    5520:	4f c0       	rjmp	.+158    	; 0x55c0 <_Z8set_boolPKhP8as_classMS1_FhbE+0xc2>
	{
		if(bin_index == 2)
    5522:	80 91 85 01 	lds	r24, 0x0185
    5526:	82 30       	cpi	r24, 0x02	; 2
    5528:	09 f0       	breq	.+2      	; 0x552c <_Z8set_boolPKhP8as_classMS1_FhbE+0x2e>
    552a:	45 c0       	rjmp	.+138    	; 0x55b6 <_Z8set_boolPKhP8as_classMS1_FhbE+0xb8>
		{
			if(arr.bin_rx[1] == 0x00)
    552c:	80 91 87 01 	lds	r24, 0x0187
    5530:	81 11       	cpse	r24, r1
    5532:	1d c0       	rjmp	.+58     	; 0x556e <_Z8set_boolPKhP8as_classMS1_FhbE+0x70>
			{
				(as->*func_tf)(false);
    5534:	e0 fe       	sbrs	r14, 0
    5536:	0e c0       	rjmp	.+28     	; 0x5554 <_Z8set_boolPKhP8as_classMS1_FhbE+0x56>
    5538:	f7 01       	movw	r30, r14
    553a:	f5 95       	asr	r31
    553c:	e7 95       	ror	r30
    553e:	ec 0f       	add	r30, r28
    5540:	fd 1f       	adc	r31, r29
    5542:	01 90       	ld	r0, Z+
    5544:	f0 81       	ld	r31, Z
    5546:	e0 2d       	mov	r30, r0
    5548:	ec 0d       	add	r30, r12
    554a:	fd 1d       	adc	r31, r13
    554c:	01 90       	ld	r0, Z+
    554e:	f0 81       	ld	r31, Z
    5550:	e0 2d       	mov	r30, r0
    5552:	01 c0       	rjmp	.+2      	; 0x5556 <_Z8set_boolPKhP8as_classMS1_FhbE+0x58>
    5554:	f6 01       	movw	r30, r12
    5556:	c7 01       	movw	r24, r14
    5558:	95 95       	asr	r25
    555a:	87 95       	ror	r24
    555c:	60 e0       	ldi	r22, 0x00	; 0
    555e:	8c 0f       	add	r24, r28
    5560:	9d 1f       	adc	r25, r29
    5562:	09 95       	icall
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	6f c0       	rjmp	.+222    	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
			{
				(as->*func_tf)(false);
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
				
			}
			else if(arr.bin_rx[1] == 0x01)
    556e:	81 30       	cpi	r24, 0x01	; 1
    5570:	e9 f4       	brne	.+58     	; 0x55ac <_Z8set_boolPKhP8as_classMS1_FhbE+0xae>
			{
				(as->*func_tf)(true);
    5572:	e0 fe       	sbrs	r14, 0
    5574:	0e c0       	rjmp	.+28     	; 0x5592 <_Z8set_boolPKhP8as_classMS1_FhbE+0x94>
    5576:	f7 01       	movw	r30, r14
    5578:	f5 95       	asr	r31
    557a:	e7 95       	ror	r30
    557c:	ec 0f       	add	r30, r28
    557e:	fd 1f       	adc	r31, r29
    5580:	01 90       	ld	r0, Z+
    5582:	f0 81       	ld	r31, Z
    5584:	e0 2d       	mov	r30, r0
    5586:	ec 0d       	add	r30, r12
    5588:	fd 1d       	adc	r31, r13
    558a:	01 90       	ld	r0, Z+
    558c:	f0 81       	ld	r31, Z
    558e:	e0 2d       	mov	r30, r0
    5590:	01 c0       	rjmp	.+2      	; 0x5594 <_Z8set_boolPKhP8as_classMS1_FhbE+0x96>
    5592:	f6 01       	movw	r30, r12
    5594:	c7 01       	movw	r24, r14
    5596:	95 95       	asr	r25
    5598:	87 95       	ror	r24
    559a:	61 e0       	ldi	r22, 0x01	; 1
    559c:	8c 0f       	add	r24, r28
    559e:	9d 1f       	adc	r25, r29
    55a0:	09 95       	icall
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    55a2:	80 e0       	ldi	r24, 0x00	; 0
    55a4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    55a8:	80 e0       	ldi	r24, 0x00	; 0
    55aa:	50 c0       	rjmp	.+160    	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
				(as->*func_tf)(true);
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
			}
			else
			{
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    55ac:	83 e0       	ldi	r24, 0x03	; 3
    55ae:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
		}
		return ER_NO_ERROR;
    55b2:	80 e0       	ldi	r24, 0x00	; 0
    55b4:	4b c0       	rjmp	.+150    	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
			}
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    55b6:	83 e0       	ldi	r24, 0x03	; 3
    55b8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		}
		return ER_NO_ERROR;
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	46 c0       	rjmp	.+140    	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
	}
	else//ASCII or MatLab mode.
	{
		if(rx_array[0] == 'Y' && rx_array[1] == '\r')
    55c0:	f8 01       	movw	r30, r16
    55c2:	80 81       	ld	r24, Z
    55c4:	89 35       	cpi	r24, 0x59	; 89
    55c6:	e9 f4       	brne	.+58     	; 0x5602 <_Z8set_boolPKhP8as_classMS1_FhbE+0x104>
    55c8:	81 81       	ldd	r24, Z+1	; 0x01
    55ca:	8d 30       	cpi	r24, 0x0D	; 13
    55cc:	d1 f5       	brne	.+116    	; 0x5642 <_Z8set_boolPKhP8as_classMS1_FhbE+0x144>
		{
			(as->*func_tf)(true);
    55ce:	e0 fe       	sbrs	r14, 0
    55d0:	0e c0       	rjmp	.+28     	; 0x55ee <_Z8set_boolPKhP8as_classMS1_FhbE+0xf0>
    55d2:	f7 01       	movw	r30, r14
    55d4:	f5 95       	asr	r31
    55d6:	e7 95       	ror	r30
    55d8:	ec 0f       	add	r30, r28
    55da:	fd 1f       	adc	r31, r29
    55dc:	01 90       	ld	r0, Z+
    55de:	f0 81       	ld	r31, Z
    55e0:	e0 2d       	mov	r30, r0
    55e2:	ec 0d       	add	r30, r12
    55e4:	fd 1d       	adc	r31, r13
    55e6:	01 90       	ld	r0, Z+
    55e8:	f0 81       	ld	r31, Z
    55ea:	e0 2d       	mov	r30, r0
    55ec:	01 c0       	rjmp	.+2      	; 0x55f0 <_Z8set_boolPKhP8as_classMS1_FhbE+0xf2>
    55ee:	f6 01       	movw	r30, r12
    55f0:	c7 01       	movw	r24, r14
    55f2:	95 95       	asr	r25
    55f4:	87 95       	ror	r24
    55f6:	61 e0       	ldi	r22, 0x01	; 1
    55f8:	8c 0f       	add	r24, r28
    55fa:	9d 1f       	adc	r25, r29
    55fc:	09 95       	icall
			return ER_NO_ERROR;
    55fe:	80 e0       	ldi	r24, 0x00	; 0
    5600:	25 c0       	rjmp	.+74     	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
		}
		
		if(rx_array[0] == 'N' && rx_array[1] == '\r')
    5602:	8e 34       	cpi	r24, 0x4E	; 78
    5604:	01 f5       	brne	.+64     	; 0x5646 <_Z8set_boolPKhP8as_classMS1_FhbE+0x148>
    5606:	f8 01       	movw	r30, r16
    5608:	81 81       	ldd	r24, Z+1	; 0x01
    560a:	8d 30       	cpi	r24, 0x0D	; 13
    560c:	f1 f4       	brne	.+60     	; 0x564a <_Z8set_boolPKhP8as_classMS1_FhbE+0x14c>
		{
			(as->*func_tf)(false);
    560e:	e0 fe       	sbrs	r14, 0
    5610:	0e c0       	rjmp	.+28     	; 0x562e <_Z8set_boolPKhP8as_classMS1_FhbE+0x130>
    5612:	f7 01       	movw	r30, r14
    5614:	f5 95       	asr	r31
    5616:	e7 95       	ror	r30
    5618:	ec 0f       	add	r30, r28
    561a:	fd 1f       	adc	r31, r29
    561c:	01 90       	ld	r0, Z+
    561e:	f0 81       	ld	r31, Z
    5620:	e0 2d       	mov	r30, r0
    5622:	ec 0d       	add	r30, r12
    5624:	fd 1d       	adc	r31, r13
    5626:	01 90       	ld	r0, Z+
    5628:	f0 81       	ld	r31, Z
    562a:	e0 2d       	mov	r30, r0
    562c:	01 c0       	rjmp	.+2      	; 0x5630 <_Z8set_boolPKhP8as_classMS1_FhbE+0x132>
    562e:	f6 01       	movw	r30, r12
    5630:	c7 01       	movw	r24, r14
    5632:	95 95       	asr	r25
    5634:	87 95       	ror	r24
    5636:	60 e0       	ldi	r22, 0x00	; 0
    5638:	8c 0f       	add	r24, r28
    563a:	9d 1f       	adc	r25, r29
    563c:	09 95       	icall
			return ER_NO_ERROR;
    563e:	80 e0       	ldi	r24, 0x00	; 0
    5640:	05 c0       	rjmp	.+10     	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
		}
		
		return ER_ERROR;
    5642:	81 e0       	ldi	r24, 0x01	; 1
    5644:	03 c0       	rjmp	.+6      	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	01 c0       	rjmp	.+2      	; 0x564c <_Z8set_boolPKhP8as_classMS1_FhbE+0x14e>
    564a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	1f 91       	pop	r17
    5652:	0f 91       	pop	r16
    5654:	ff 90       	pop	r15
    5656:	ef 90       	pop	r14
    5658:	df 90       	pop	r13
    565a:	cf 90       	pop	r12
    565c:	08 95       	ret

0000565e <_Z6set_u8PKhP8as_classMS1_FhhE>:

//Set value in as_class object that is an unsigned 8 bit value (ASCII).
uint8_t set_u8(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u8)(uint8_t))
{
    565e:	af 92       	push	r10
    5660:	bf 92       	push	r11
    5662:	cf 92       	push	r12
    5664:	df 92       	push	r13
    5666:	ef 92       	push	r14
    5668:	ff 92       	push	r15
    566a:	0f 93       	push	r16
    566c:	1f 93       	push	r17
    566e:	cf 93       	push	r28
    5670:	df 93       	push	r29
    5672:	1f 92       	push	r1
    5674:	cd b7       	in	r28, 0x3d	; 61
    5676:	de b7       	in	r29, 0x3e	; 62
    5678:	5c 01       	movw	r10, r24
    567a:	8b 01       	movw	r16, r22
    567c:	69 01       	movw	r12, r18
    567e:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    5680:	cb 01       	movw	r24, r22
    5682:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    5686:	82 30       	cpi	r24, 0x02	; 2
    5688:	31 f5       	brne	.+76     	; 0x56d6 <_Z6set_u8PKhP8as_classMS1_FhhE+0x78>
	{
		if(bin_index == 2)
    568a:	80 91 85 01 	lds	r24, 0x0185
    568e:	82 30       	cpi	r24, 0x02	; 2
    5690:	e9 f4       	brne	.+58     	; 0x56cc <_Z6set_u8PKhP8as_classMS1_FhhE+0x6e>
		{
			errno = (as->*func_u8)(arr.bin_rx[1]);
    5692:	e0 fe       	sbrs	r14, 0
    5694:	0e c0       	rjmp	.+28     	; 0x56b2 <_Z6set_u8PKhP8as_classMS1_FhhE+0x54>
    5696:	f7 01       	movw	r30, r14
    5698:	f5 95       	asr	r31
    569a:	e7 95       	ror	r30
    569c:	e0 0f       	add	r30, r16
    569e:	f1 1f       	adc	r31, r17
    56a0:	01 90       	ld	r0, Z+
    56a2:	f0 81       	ld	r31, Z
    56a4:	e0 2d       	mov	r30, r0
    56a6:	ec 0d       	add	r30, r12
    56a8:	fd 1d       	adc	r31, r13
    56aa:	01 90       	ld	r0, Z+
    56ac:	f0 81       	ld	r31, Z
    56ae:	e0 2d       	mov	r30, r0
    56b0:	01 c0       	rjmp	.+2      	; 0x56b4 <_Z6set_u8PKhP8as_classMS1_FhhE+0x56>
    56b2:	f6 01       	movw	r30, r12
    56b4:	c7 01       	movw	r24, r14
    56b6:	95 95       	asr	r25
    56b8:	87 95       	ror	r24
    56ba:	60 91 87 01 	lds	r22, 0x0187
    56be:	80 0f       	add	r24, r16
    56c0:	91 1f       	adc	r25, r17
    56c2:	09 95       	icall
    56c4:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    56c6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    56ca:	03 c0       	rjmp	.+6      	; 0x56d2 <_Z6set_u8PKhP8as_classMS1_FhhE+0x74>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    56cc:	83 e0       	ldi	r24, 0x03	; 3
    56ce:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    56d2:	99 81       	ldd	r25, Y+1	; 0x01
    56d4:	27 c0       	rjmp	.+78     	; 0x5724 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
	}
	else//ASCII or MatLab mode;
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    56d6:	4d e0       	ldi	r20, 0x0D	; 13
    56d8:	be 01       	movw	r22, r28
    56da:	6f 5f       	subi	r22, 0xFF	; 255
    56dc:	7f 4f       	sbci	r23, 0xFF	; 255
    56de:	c5 01       	movw	r24, r10
    56e0:	0e 94 47 23 	call	0x468e	; 0x468e <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    56e4:	89 81       	ldd	r24, Y+1	; 0x01
    56e6:	81 11       	cpse	r24, r1
    56e8:	1c c0       	rjmp	.+56     	; 0x5722 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc4>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_u8)(number);
    56ea:	e0 fe       	sbrs	r14, 0
    56ec:	0e c0       	rjmp	.+28     	; 0x570a <_Z6set_u8PKhP8as_classMS1_FhhE+0xac>
    56ee:	f7 01       	movw	r30, r14
    56f0:	f5 95       	asr	r31
    56f2:	e7 95       	ror	r30
    56f4:	e0 0f       	add	r30, r16
    56f6:	f1 1f       	adc	r31, r17
    56f8:	01 90       	ld	r0, Z+
    56fa:	f0 81       	ld	r31, Z
    56fc:	e0 2d       	mov	r30, r0
    56fe:	ec 0d       	add	r30, r12
    5700:	fd 1d       	adc	r31, r13
    5702:	01 90       	ld	r0, Z+
    5704:	f0 81       	ld	r31, Z
    5706:	e0 2d       	mov	r30, r0
    5708:	01 c0       	rjmp	.+2      	; 0x570c <_Z6set_u8PKhP8as_classMS1_FhhE+0xae>
    570a:	f6 01       	movw	r30, r12
    570c:	c7 01       	movw	r24, r14
    570e:	95 95       	asr	r25
    5710:	87 95       	ror	r24
    5712:	80 0f       	add	r24, r16
    5714:	91 1f       	adc	r25, r17
    5716:	09 95       	icall
		
		if(errno)
    5718:	91 e0       	ldi	r25, 0x01	; 1
    571a:	81 11       	cpse	r24, r1
    571c:	03 c0       	rjmp	.+6      	; 0x5724 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	01 c0       	rjmp	.+2      	; 0x5724 <_Z6set_u8PKhP8as_classMS1_FhhE+0xc6>
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
		{
			return ER_ERROR;
    5722:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    5724:	89 2f       	mov	r24, r25
    5726:	0f 90       	pop	r0
    5728:	df 91       	pop	r29
    572a:	cf 91       	pop	r28
    572c:	1f 91       	pop	r17
    572e:	0f 91       	pop	r16
    5730:	ff 90       	pop	r15
    5732:	ef 90       	pop	r14
    5734:	df 90       	pop	r13
    5736:	cf 90       	pop	r12
    5738:	bf 90       	pop	r11
    573a:	af 90       	pop	r10
    573c:	08 95       	ret

0000573e <_Z9set_int16PKhP8as_classMS1_FhiE>:

//Set value in as_class object that is a signed 16 bit value (ASCII).
uint8_t set_int16(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_int16)(int16_t))
{
    573e:	af 92       	push	r10
    5740:	bf 92       	push	r11
    5742:	cf 92       	push	r12
    5744:	df 92       	push	r13
    5746:	ef 92       	push	r14
    5748:	ff 92       	push	r15
    574a:	0f 93       	push	r16
    574c:	1f 93       	push	r17
    574e:	cf 93       	push	r28
    5750:	df 93       	push	r29
    5752:	1f 92       	push	r1
    5754:	cd b7       	in	r28, 0x3d	; 61
    5756:	de b7       	in	r29, 0x3e	; 62
    5758:	5c 01       	movw	r10, r24
    575a:	8b 01       	movw	r16, r22
    575c:	69 01       	movw	r12, r18
    575e:	7a 01       	movw	r14, r20
	uint8_t errno;
	int16_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    5760:	cb 01       	movw	r24, r22
    5762:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    5766:	82 30       	cpi	r24, 0x02	; 2
    5768:	81 f5       	brne	.+96     	; 0x57ca <_Z9set_int16PKhP8as_classMS1_FhiE+0x8c>
	{
		if(bin_index == 3)
    576a:	80 91 85 01 	lds	r24, 0x0185
    576e:	83 30       	cpi	r24, 0x03	; 3
    5770:	39 f5       	brne	.+78     	; 0x57c0 <_Z9set_int16PKhP8as_classMS1_FhiE+0x82>
		{
			errno = (as->*func_int16)(load_u16(&(arr.bin_rx[1])));
    5772:	e0 fe       	sbrs	r14, 0
    5774:	0e c0       	rjmp	.+28     	; 0x5792 <_Z9set_int16PKhP8as_classMS1_FhiE+0x54>
    5776:	f7 01       	movw	r30, r14
    5778:	f5 95       	asr	r31
    577a:	e7 95       	ror	r30
    577c:	e0 0f       	add	r30, r16
    577e:	f1 1f       	adc	r31, r17
    5780:	01 90       	ld	r0, Z+
    5782:	f0 81       	ld	r31, Z
    5784:	e0 2d       	mov	r30, r0
    5786:	ec 0d       	add	r30, r12
    5788:	fd 1d       	adc	r31, r13
    578a:	01 90       	ld	r0, Z+
    578c:	f0 81       	ld	r31, Z
    578e:	e0 2d       	mov	r30, r0
    5790:	01 c0       	rjmp	.+2      	; 0x5794 <_Z9set_int16PKhP8as_classMS1_FhiE+0x56>
    5792:	f6 01       	movw	r30, r12
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    5794:	a6 e8       	ldi	r26, 0x86	; 134
    5796:	b1 e0       	ldi	r27, 0x01	; 1
    5798:	11 96       	adiw	r26, 0x01	; 1
    579a:	6c 91       	ld	r22, X
    579c:	11 97       	sbiw	r26, 0x01	; 1
    579e:	70 e0       	ldi	r23, 0x00	; 0
	temp16 <<= 8;
    57a0:	76 2f       	mov	r23, r22
    57a2:	66 27       	eor	r22, r22
	temp16 += array[1];
    57a4:	12 96       	adiw	r26, 0x02	; 2
    57a6:	8c 91       	ld	r24, X
    57a8:	68 0f       	add	r22, r24
    57aa:	71 1d       	adc	r23, r1
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
	{
		if(bin_index == 3)
		{
			errno = (as->*func_int16)(load_u16(&(arr.bin_rx[1])));
    57ac:	c7 01       	movw	r24, r14
    57ae:	95 95       	asr	r25
    57b0:	87 95       	ror	r24
    57b2:	80 0f       	add	r24, r16
    57b4:	91 1f       	adc	r25, r17
    57b6:	09 95       	icall
    57b8:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    57ba:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    57be:	03 c0       	rjmp	.+6      	; 0x57c6 <_Z9set_int16PKhP8as_classMS1_FhiE+0x88>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    57c0:	83 e0       	ldi	r24, 0x03	; 3
    57c2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    57c6:	99 81       	ldd	r25, Y+1	; 0x01
    57c8:	28 c0       	rjmp	.+80     	; 0x581a <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_int(rx_array, &errno);
    57ca:	4d e0       	ldi	r20, 0x0D	; 13
    57cc:	be 01       	movw	r22, r28
    57ce:	6f 5f       	subi	r22, 0xFF	; 255
    57d0:	7f 4f       	sbci	r23, 0xFF	; 255
    57d2:	c5 01       	movw	r24, r10
    57d4:	0e 94 2b 24 	call	0x4856	; 0x4856 <_Z13string_to_intPKhPhh>
		
		if(errno)	//Exit if invalid integer detected.
    57d8:	29 81       	ldd	r18, Y+1	; 0x01
    57da:	21 11       	cpse	r18, r1
    57dc:	1d c0       	rjmp	.+58     	; 0x5818 <_Z9set_int16PKhP8as_classMS1_FhiE+0xda>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_int16)(number);
    57de:	e0 fe       	sbrs	r14, 0
    57e0:	0e c0       	rjmp	.+28     	; 0x57fe <_Z9set_int16PKhP8as_classMS1_FhiE+0xc0>
    57e2:	f7 01       	movw	r30, r14
    57e4:	f5 95       	asr	r31
    57e6:	e7 95       	ror	r30
    57e8:	e0 0f       	add	r30, r16
    57ea:	f1 1f       	adc	r31, r17
    57ec:	01 90       	ld	r0, Z+
    57ee:	f0 81       	ld	r31, Z
    57f0:	e0 2d       	mov	r30, r0
    57f2:	ec 0d       	add	r30, r12
    57f4:	fd 1d       	adc	r31, r13
    57f6:	01 90       	ld	r0, Z+
    57f8:	f0 81       	ld	r31, Z
    57fa:	e0 2d       	mov	r30, r0
    57fc:	01 c0       	rjmp	.+2      	; 0x5800 <_Z9set_int16PKhP8as_classMS1_FhiE+0xc2>
    57fe:	f6 01       	movw	r30, r12
    5800:	97 01       	movw	r18, r14
    5802:	35 95       	asr	r19
    5804:	27 95       	ror	r18
    5806:	c8 01       	movw	r24, r16
    5808:	82 0f       	add	r24, r18
    580a:	93 1f       	adc	r25, r19
    580c:	09 95       	icall
		
		if(errno)
    580e:	91 e0       	ldi	r25, 0x01	; 1
    5810:	81 11       	cpse	r24, r1
    5812:	03 c0       	rjmp	.+6      	; 0x581a <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	01 c0       	rjmp	.+2      	; 0x581a <_Z9set_int16PKhP8as_classMS1_FhiE+0xdc>
		//Attempt to convert user input to number.
		number = string_to_int(rx_array, &errno);
		
		if(errno)	//Exit if invalid integer detected.
		{
			return ER_ERROR;
    5818:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    581a:	89 2f       	mov	r24, r25
    581c:	0f 90       	pop	r0
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	1f 91       	pop	r17
    5824:	0f 91       	pop	r16
    5826:	ff 90       	pop	r15
    5828:	ef 90       	pop	r14
    582a:	df 90       	pop	r13
    582c:	cf 90       	pop	r12
    582e:	bf 90       	pop	r11
    5830:	af 90       	pop	r10
    5832:	08 95       	ret

00005834 <_Z7set_u16PKhP8as_classMS1_FhjE>:

//Set value in as_class object that is an unsigned 16 bit value (ASCII).
uint8_t set_u16(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u16)(uint16_t))
{
    5834:	af 92       	push	r10
    5836:	bf 92       	push	r11
    5838:	cf 92       	push	r12
    583a:	df 92       	push	r13
    583c:	ef 92       	push	r14
    583e:	ff 92       	push	r15
    5840:	0f 93       	push	r16
    5842:	1f 93       	push	r17
    5844:	cf 93       	push	r28
    5846:	df 93       	push	r29
    5848:	1f 92       	push	r1
    584a:	cd b7       	in	r28, 0x3d	; 61
    584c:	de b7       	in	r29, 0x3e	; 62
    584e:	5c 01       	movw	r10, r24
    5850:	8b 01       	movw	r16, r22
    5852:	69 01       	movw	r12, r18
    5854:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    5856:	cb 01       	movw	r24, r22
    5858:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    585c:	82 30       	cpi	r24, 0x02	; 2
    585e:	81 f5       	brne	.+96     	; 0x58c0 <_Z7set_u16PKhP8as_classMS1_FhjE+0x8c>
	{
		if(bin_index == 3)
    5860:	80 91 85 01 	lds	r24, 0x0185
    5864:	83 30       	cpi	r24, 0x03	; 3
    5866:	39 f5       	brne	.+78     	; 0x58b6 <_Z7set_u16PKhP8as_classMS1_FhjE+0x82>
		{
			errno = (as->*func_u16)(load_u16(&(arr.bin_rx[1])));
    5868:	e0 fe       	sbrs	r14, 0
    586a:	0e c0       	rjmp	.+28     	; 0x5888 <_Z7set_u16PKhP8as_classMS1_FhjE+0x54>
    586c:	f7 01       	movw	r30, r14
    586e:	f5 95       	asr	r31
    5870:	e7 95       	ror	r30
    5872:	e0 0f       	add	r30, r16
    5874:	f1 1f       	adc	r31, r17
    5876:	01 90       	ld	r0, Z+
    5878:	f0 81       	ld	r31, Z
    587a:	e0 2d       	mov	r30, r0
    587c:	ec 0d       	add	r30, r12
    587e:	fd 1d       	adc	r31, r13
    5880:	01 90       	ld	r0, Z+
    5882:	f0 81       	ld	r31, Z
    5884:	e0 2d       	mov	r30, r0
    5886:	01 c0       	rjmp	.+2      	; 0x588a <_Z7set_u16PKhP8as_classMS1_FhjE+0x56>
    5888:	f6 01       	movw	r30, r12
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    588a:	a6 e8       	ldi	r26, 0x86	; 134
    588c:	b1 e0       	ldi	r27, 0x01	; 1
    588e:	11 96       	adiw	r26, 0x01	; 1
    5890:	6c 91       	ld	r22, X
    5892:	11 97       	sbiw	r26, 0x01	; 1
    5894:	70 e0       	ldi	r23, 0x00	; 0
	temp16 <<= 8;
    5896:	76 2f       	mov	r23, r22
    5898:	66 27       	eor	r22, r22
	temp16 += array[1];
    589a:	12 96       	adiw	r26, 0x02	; 2
    589c:	8c 91       	ld	r24, X
    589e:	68 0f       	add	r22, r24
    58a0:	71 1d       	adc	r23, r1
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
	{
		if(bin_index == 3)
		{
			errno = (as->*func_u16)(load_u16(&(arr.bin_rx[1])));
    58a2:	c7 01       	movw	r24, r14
    58a4:	95 95       	asr	r25
    58a6:	87 95       	ror	r24
    58a8:	80 0f       	add	r24, r16
    58aa:	91 1f       	adc	r25, r17
    58ac:	09 95       	icall
    58ae:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    58b0:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    58b4:	03 c0       	rjmp	.+6      	; 0x58bc <_Z7set_u16PKhP8as_classMS1_FhjE+0x88>
		}
		else//Transmit error.
		{
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    58b6:	83 e0       	ldi	r24, 0x03	; 3
    58b8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		}
		return errno;
    58bc:	99 81       	ldd	r25, Y+1	; 0x01
    58be:	28 c0       	rjmp	.+80     	; 0x5910 <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    58c0:	4d e0       	ldi	r20, 0x0D	; 13
    58c2:	be 01       	movw	r22, r28
    58c4:	6f 5f       	subi	r22, 0xFF	; 255
    58c6:	7f 4f       	sbci	r23, 0xFF	; 255
    58c8:	c5 01       	movw	r24, r10
    58ca:	0e 94 47 23 	call	0x468e	; 0x468e <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    58ce:	29 81       	ldd	r18, Y+1	; 0x01
    58d0:	21 11       	cpse	r18, r1
    58d2:	1d c0       	rjmp	.+58     	; 0x590e <_Z7set_u16PKhP8as_classMS1_FhjE+0xda>
		{
			return ER_ERROR;
		}
		
		//Update parameter.
		errno = (as->*func_u16)(number);
    58d4:	e0 fe       	sbrs	r14, 0
    58d6:	0e c0       	rjmp	.+28     	; 0x58f4 <_Z7set_u16PKhP8as_classMS1_FhjE+0xc0>
    58d8:	f7 01       	movw	r30, r14
    58da:	f5 95       	asr	r31
    58dc:	e7 95       	ror	r30
    58de:	e0 0f       	add	r30, r16
    58e0:	f1 1f       	adc	r31, r17
    58e2:	01 90       	ld	r0, Z+
    58e4:	f0 81       	ld	r31, Z
    58e6:	e0 2d       	mov	r30, r0
    58e8:	ec 0d       	add	r30, r12
    58ea:	fd 1d       	adc	r31, r13
    58ec:	01 90       	ld	r0, Z+
    58ee:	f0 81       	ld	r31, Z
    58f0:	e0 2d       	mov	r30, r0
    58f2:	01 c0       	rjmp	.+2      	; 0x58f6 <_Z7set_u16PKhP8as_classMS1_FhjE+0xc2>
    58f4:	f6 01       	movw	r30, r12
    58f6:	97 01       	movw	r18, r14
    58f8:	35 95       	asr	r19
    58fa:	27 95       	ror	r18
    58fc:	c8 01       	movw	r24, r16
    58fe:	82 0f       	add	r24, r18
    5900:	93 1f       	adc	r25, r19
    5902:	09 95       	icall
		
		if(errno)
    5904:	91 e0       	ldi	r25, 0x01	; 1
    5906:	81 11       	cpse	r24, r1
    5908:	03 c0       	rjmp	.+6      	; 0x5910 <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	01 c0       	rjmp	.+2      	; 0x5910 <_Z7set_u16PKhP8as_classMS1_FhjE+0xdc>
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
		{
			return ER_ERROR;
    590e:	91 e0       	ldi	r25, 0x01	; 1
			return ER_ERROR;
		}
		
		return ER_NO_ERROR;
	}
}
    5910:	89 2f       	mov	r24, r25
    5912:	0f 90       	pop	r0
    5914:	df 91       	pop	r29
    5916:	cf 91       	pop	r28
    5918:	1f 91       	pop	r17
    591a:	0f 91       	pop	r16
    591c:	ff 90       	pop	r15
    591e:	ef 90       	pop	r14
    5920:	df 90       	pop	r13
    5922:	cf 90       	pop	r12
    5924:	bf 90       	pop	r11
    5926:	af 90       	pop	r10
    5928:	08 95       	ret

0000592a <_Z7set_u32PKhP8as_classMS1_FhmE>:

//Set value in as_class object that is an unsigned 32 bit value (ASCII).
uint8_t set_u32(const uint8_t *rx_array, as_class *as, uint8_t (as_class::*func_u32)(uint32_t))
{
    592a:	af 92       	push	r10
    592c:	bf 92       	push	r11
    592e:	cf 92       	push	r12
    5930:	df 92       	push	r13
    5932:	ef 92       	push	r14
    5934:	ff 92       	push	r15
    5936:	0f 93       	push	r16
    5938:	1f 93       	push	r17
    593a:	cf 93       	push	r28
    593c:	df 93       	push	r29
    593e:	1f 92       	push	r1
    5940:	cd b7       	in	r28, 0x3d	; 61
    5942:	de b7       	in	r29, 0x3e	; 62
    5944:	5c 01       	movw	r10, r24
    5946:	8b 01       	movw	r16, r22
    5948:	69 01       	movw	r12, r18
    594a:	7a 01       	movw	r14, r20
	uint8_t errno;
	uint32_t number;
	
	if(as->get_tx_mode() == TX_MODE_BIN)//Binary mode.
    594c:	cb 01       	movw	r24, r22
    594e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    5952:	82 30       	cpi	r24, 0x02	; 2
    5954:	51 f5       	brne	.+84     	; 0x59aa <_Z7set_u32PKhP8as_classMS1_FhmE+0x80>
	{
		if(bin_index == 5)
    5956:	80 91 85 01 	lds	r24, 0x0185
    595a:	85 30       	cpi	r24, 0x05	; 5
    595c:	09 f5       	brne	.+66     	; 0x59a0 <_Z7set_u32PKhP8as_classMS1_FhmE+0x76>
		{
			errno = (as->*func_u32)(load_u32(&(arr.bin_rx[1])));
    595e:	e0 fe       	sbrs	r14, 0
    5960:	0d c0       	rjmp	.+26     	; 0x597c <_Z7set_u32PKhP8as_classMS1_FhmE+0x52>
    5962:	f7 01       	movw	r30, r14
    5964:	f5 95       	asr	r31
    5966:	e7 95       	ror	r30
    5968:	e0 0f       	add	r30, r16
    596a:	f1 1f       	adc	r31, r17
    596c:	01 90       	ld	r0, Z+
    596e:	f0 81       	ld	r31, Z
    5970:	e0 2d       	mov	r30, r0
    5972:	ec 0d       	add	r30, r12
    5974:	fd 1d       	adc	r31, r13
    5976:	a0 80       	ld	r10, Z
    5978:	b1 80       	ldd	r11, Z+1	; 0x01
    597a:	01 c0       	rjmp	.+2      	; 0x597e <_Z7set_u32PKhP8as_classMS1_FhmE+0x54>
    597c:	56 01       	movw	r10, r12
    597e:	87 e8       	ldi	r24, 0x87	; 135
    5980:	91 e0       	ldi	r25, 0x01	; 1
    5982:	0e 94 83 26 	call	0x4d06	; 0x4d06 <_Z8load_u32PKh>
    5986:	ab 01       	movw	r20, r22
    5988:	bc 01       	movw	r22, r24
    598a:	c7 01       	movw	r24, r14
    598c:	95 95       	asr	r25
    598e:	87 95       	ror	r24
    5990:	80 0f       	add	r24, r16
    5992:	91 1f       	adc	r25, r17
    5994:	f5 01       	movw	r30, r10
    5996:	09 95       	icall
    5998:	89 83       	std	Y+1, r24	; 0x01
			atmega_uart::tx_byte(errno);
    599a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    599e:	03 c0       	rjmp	.+6      	; 0x59a6 <_Z7set_u32PKhP8as_classMS1_FhmE+0x7c>
		}
		else//Transmit error.
			atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    59a0:	83 e0       	ldi	r24, 0x03	; 3
    59a2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		return errno;
    59a6:	99 81       	ldd	r25, Y+1	; 0x01
    59a8:	2a c0       	rjmp	.+84     	; 0x59fe <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
	}
	else//ASCII or MatLab mode.
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
    59aa:	4d e0       	ldi	r20, 0x0D	; 13
    59ac:	be 01       	movw	r22, r28
    59ae:	6f 5f       	subi	r22, 0xFF	; 255
    59b0:	7f 4f       	sbci	r23, 0xFF	; 255
    59b2:	c5 01       	movw	r24, r10
    59b4:	0e 94 47 23 	call	0x468e	; 0x468e <_Z13string_to_u32PKhPhh>
		
		if(errno)//Exit if invalid integer detected.
    59b8:	29 81       	ldd	r18, Y+1	; 0x01
    59ba:	21 11       	cpse	r18, r1
    59bc:	1f c0       	rjmp	.+62     	; 0x59fc <_Z7set_u32PKhP8as_classMS1_FhmE+0xd2>
			return ER_ERROR;
		
		//Update parameter.
		errno = (as->*func_u32)(number);
    59be:	e0 fe       	sbrs	r14, 0
    59c0:	0e c0       	rjmp	.+28     	; 0x59de <_Z7set_u32PKhP8as_classMS1_FhmE+0xb4>
    59c2:	f7 01       	movw	r30, r14
    59c4:	f5 95       	asr	r31
    59c6:	e7 95       	ror	r30
    59c8:	e0 0f       	add	r30, r16
    59ca:	f1 1f       	adc	r31, r17
    59cc:	01 90       	ld	r0, Z+
    59ce:	f0 81       	ld	r31, Z
    59d0:	e0 2d       	mov	r30, r0
    59d2:	ec 0d       	add	r30, r12
    59d4:	fd 1d       	adc	r31, r13
    59d6:	01 90       	ld	r0, Z+
    59d8:	f0 81       	ld	r31, Z
    59da:	e0 2d       	mov	r30, r0
    59dc:	01 c0       	rjmp	.+2      	; 0x59e0 <_Z7set_u32PKhP8as_classMS1_FhmE+0xb6>
    59de:	f6 01       	movw	r30, r12
    59e0:	97 01       	movw	r18, r14
    59e2:	35 95       	asr	r19
    59e4:	27 95       	ror	r18
    59e6:	ab 01       	movw	r20, r22
    59e8:	bc 01       	movw	r22, r24
    59ea:	c8 01       	movw	r24, r16
    59ec:	82 0f       	add	r24, r18
    59ee:	93 1f       	adc	r25, r19
    59f0:	09 95       	icall
		
		if(errno)
    59f2:	91 e0       	ldi	r25, 0x01	; 1
    59f4:	81 11       	cpse	r24, r1
    59f6:	03 c0       	rjmp	.+6      	; 0x59fe <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	01 c0       	rjmp	.+2      	; 0x59fe <_Z7set_u32PKhP8as_classMS1_FhmE+0xd4>
	{
		//Attempt to convert user input to number.
		number = string_to_u32(rx_array, &errno);
		
		if(errno)//Exit if invalid integer detected.
			return ER_ERROR;
    59fc:	91 e0       	ldi	r25, 0x01	; 1
		if(errno)
			return ER_ERROR;
		
		return ER_NO_ERROR;
	}
}
    59fe:	89 2f       	mov	r24, r25
    5a00:	0f 90       	pop	r0
    5a02:	df 91       	pop	r29
    5a04:	cf 91       	pop	r28
    5a06:	1f 91       	pop	r17
    5a08:	0f 91       	pop	r16
    5a0a:	ff 90       	pop	r15
    5a0c:	ef 90       	pop	r14
    5a0e:	df 90       	pop	r13
    5a10:	cf 90       	pop	r12
    5a12:	bf 90       	pop	r11
    5a14:	af 90       	pop	r10
    5a16:	08 95       	ret

00005a18 <_Z14uart_tokenizerhP8as_class>:
}

/**************************************************Update Menu Items Rountines***********************************************/
//Tokenize the user input.
void uart_tokenizer(uint8_t rx_byte, as_class *as)
{
    5a18:	bf 92       	push	r11
    5a1a:	cf 92       	push	r12
    5a1c:	df 92       	push	r13
    5a1e:	ef 92       	push	r14
    5a20:	ff 92       	push	r15
    5a22:	0f 93       	push	r16
    5a24:	1f 93       	push	r17
    5a26:	cf 93       	push	r28
    5a28:	df 93       	push	r29
    5a2a:	1f 92       	push	r1
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	f8 2e       	mov	r15, r24
    5a32:	8b 01       	movw	r16, r22
	uint8_t errno = ER_ERROR;
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	89 83       	std	Y+1, r24	; 0x01
	
	//Look for single byte commands. when input array is empty.
	if(!array_index && (rx_byte == 't' || rx_byte == 'T'))
    5a38:	80 91 84 01 	lds	r24, 0x0184
    5a3c:	81 11       	cpse	r24, r1
    5a3e:	32 c0       	rjmp	.+100    	; 0x5aa4 <_Z14uart_tokenizerhP8as_class+0x8c>
    5a40:	8f 2d       	mov	r24, r15
    5a42:	8f 7d       	andi	r24, 0xDF	; 223
    5a44:	84 35       	cpi	r24, 0x54	; 84
    5a46:	69 f4       	brne	.+26     	; 0x5a62 <_Z14uart_tokenizerhP8as_class+0x4a>
	{
		//Send transmission type byte.
		if(as->get_tx_mode() == TX_MODE_ASCII)
    5a48:	cb 01       	movw	r24, r22
    5a4a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    5a4e:	81 11       	cpse	r24, r1
    5a50:	04 c0       	rjmp	.+8      	; 0x5a5a <_Z14uart_tokenizerhP8as_class+0x42>
			atmega_uart::tx_byte('A');
    5a52:	81 e4       	ldi	r24, 0x41	; 65
    5a54:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    5a58:	ee c7       	rjmp	.+4060   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
		else
			atmega_uart::tx_byte('M');
    5a5a:	8d e4       	ldi	r24, 0x4D	; 77
    5a5c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    5a60:	ea c7       	rjmp	.+4052   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
		return;
	}
	
	//Start linear sweep test.
	else if(!array_index && (rx_byte == 'l' || rx_byte == 'L'))
    5a62:	8c 34       	cpi	r24, 0x4C	; 76
    5a64:	49 f4       	brne	.+18     	; 0x5a78 <_Z14uart_tokenizerhP8as_class+0x60>
	{
		as->set_test_type(TEST_LIN);
    5a66:	60 e0       	ldi	r22, 0x00	; 0
    5a68:	c8 01       	movw	r24, r16
    5a6a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    5a6e:	61 e0       	ldi	r22, 0x01	; 1
    5a70:	c8 01       	movw	r24, r16
    5a72:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		return;
    5a76:	df c7       	rjmp	.+4030   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Start differential pulse test.
	else if(!array_index && (rx_byte == 'd' || rx_byte == 'D'))
    5a78:	84 34       	cpi	r24, 0x44	; 68
    5a7a:	49 f4       	brne	.+18     	; 0x5a8e <_Z14uart_tokenizerhP8as_class+0x76>
	{
		as->set_test_type(TEST_DIF);
    5a7c:	61 e0       	ldi	r22, 0x01	; 1
    5a7e:	c8 01       	movw	r24, r16
    5a80:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    5a84:	61 e0       	ldi	r22, 0x01	; 1
    5a86:	c8 01       	movw	r24, r16
    5a88:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		return;
    5a8c:	d4 c7       	rjmp	.+4008   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Start arbitrary waveform test.
	else if(!array_index && (rx_byte == 'a' || rx_byte == 'A'))
    5a8e:	81 34       	cpi	r24, 0x41	; 65
    5a90:	49 f4       	brne	.+18     	; 0x5aa4 <_Z14uart_tokenizerhP8as_class+0x8c>
	{
		as->set_test_type(TEST_ARB);
    5a92:	62 e0       	ldi	r22, 0x02	; 2
    5a94:	c8 01       	movw	r24, r16
    5a96:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN8as_class13set_test_typeE10test_types>
		as->set_test_state(DEP_INIT);
    5a9a:	61 e0       	ldi	r22, 0x01	; 1
    5a9c:	c8 01       	movw	r24, r16
    5a9e:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
		return;
    5aa2:	c9 c7       	rjmp	.+3986   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Keep building input string.
	atmega_uart::tx_byte(rx_byte);//Echo byte.
    5aa4:	8f 2d       	mov	r24, r15
    5aa6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
	
	//Save byte from UART.
	arr.rx_array[array_index++] = rx_byte;
    5aaa:	e0 91 84 01 	lds	r30, 0x0184
    5aae:	81 e0       	ldi	r24, 0x01	; 1
    5ab0:	8e 0f       	add	r24, r30
    5ab2:	80 93 84 01 	sts	0x0184, r24
    5ab6:	f0 e0       	ldi	r31, 0x00	; 0
    5ab8:	ea 57       	subi	r30, 0x7A	; 122
    5aba:	fe 4f       	sbci	r31, 0xFE	; 254
    5abc:	f0 82       	st	Z, r15
	
	//Check if array is going to overflow.
	if((array_index >= RX_ARRAY_LENGTH) && (arr.rx_array[RX_ARRAY_LENGTH - 1] != '\r'))
    5abe:	89 31       	cpi	r24, 0x19	; 25
    5ac0:	48 f0       	brcs	.+18     	; 0x5ad4 <_Z14uart_tokenizerhP8as_class+0xbc>
    5ac2:	90 91 9e 01 	lds	r25, 0x019E
    5ac6:	9d 30       	cpi	r25, 0x0D	; 13
    5ac8:	29 f0       	breq	.+10     	; 0x5ad4 <_Z14uart_tokenizerhP8as_class+0xbc>
	{
		array_index = 0;
    5aca:	10 92 84 01 	sts	0x0184, r1
		uart_err();
    5ace:	0e 94 e6 28 	call	0x51cc	; 0x51cc <_Z8uart_errv>
		return;
    5ad2:	b1 c7       	rjmp	.+3938   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Special case. empty array prints the menu.
	if(arr.rx_array[0] == '\r')
    5ad4:	90 91 86 01 	lds	r25, 0x0186
    5ad8:	9d 30       	cpi	r25, 0x0D	; 13
    5ada:	09 f0       	breq	.+2      	; 0x5ade <_Z14uart_tokenizerhP8as_class+0xc6>
    5adc:	91 c0       	rjmp	.+290    	; 0x5c00 <_Z14uart_tokenizerhP8as_class+0x1e8>
	{
		array_index = 0;
    5ade:	10 92 84 01 	sts	0x0184, r1
		
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---MAIN MENU---\r"));
    5ae2:	83 e2       	ldi	r24, 0x23	; 35
    5ae4:	9e e0       	ldi	r25, 0x0E	; 14
    5ae6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Transmission mode.
		atmega_uart::tx_string_p(PSTR("1.  Transmission Mode (A)SCII, (M)atLab, (B)inary: "));
    5aea:	8f ee       	ldi	r24, 0xEF	; 239
    5aec:	9d e0       	ldi	r25, 0x0D	; 13
    5aee:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		if(as->get_tx_mode() == TX_MODE_ASCII)
    5af2:	c8 01       	movw	r24, r16
    5af4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    5af8:	81 11       	cpse	r24, r1
    5afa:	04 c0       	rjmp	.+8      	; 0x5b04 <_Z14uart_tokenizerhP8as_class+0xec>
			atmega_uart::tx_byte('A');
    5afc:	81 e4       	ldi	r24, 0x41	; 65
    5afe:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    5b02:	0c c0       	rjmp	.+24     	; 0x5b1c <_Z14uart_tokenizerhP8as_class+0x104>
		else if(as->get_tx_mode() == TX_MODE_MATLAB)
    5b04:	c8 01       	movw	r24, r16
    5b06:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8as_class11get_tx_modeEv>
    5b0a:	81 30       	cpi	r24, 0x01	; 1
    5b0c:	21 f4       	brne	.+8      	; 0x5b16 <_Z14uart_tokenizerhP8as_class+0xfe>
			atmega_uart::tx_byte('M');
    5b0e:	8d e4       	ldi	r24, 0x4D	; 77
    5b10:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    5b14:	03 c0       	rjmp	.+6      	; 0x5b1c <_Z14uart_tokenizerhP8as_class+0x104>
		else
			atmega_uart::tx_byte('B');
    5b16:	82 e4       	ldi	r24, 0x42	; 66
    5b18:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_byte('\r');
    5b1c:	8d e0       	ldi	r24, 0x0D	; 13
    5b1e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Number of electrodes.
		atmega_uart::tx_string_p(PSTR("2.  Number of Electrodes (2 or 3): "));
    5b22:	8b ec       	ldi	r24, 0xCB	; 203
    5b24:	9d e0       	ldi	r25, 0x0D	; 13
    5b26:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		(as->get_num_electrodes() == ELEC_2) ? atmega_uart::tx_byte('2') : atmega_uart::tx_byte('3');
    5b2a:	c8 01       	movw	r24, r16
    5b2c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <_ZN8as_class18get_num_electrodesEv>
    5b30:	81 11       	cpse	r24, r1
    5b32:	04 c0       	rjmp	.+8      	; 0x5b3c <_Z14uart_tokenizerhP8as_class+0x124>
    5b34:	82 e3       	ldi	r24, 0x32	; 50
    5b36:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    5b3a:	03 c0       	rjmp	.+6      	; 0x5b42 <_Z14uart_tokenizerhP8as_class+0x12a>
    5b3c:	83 e3       	ldi	r24, 0x33	; 51
    5b3e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_byte('\r');
    5b42:	8d e0       	ldi	r24, 0x0D	; 13
    5b44:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//ADC sample interval.
		atmega_uart::tx_string_p(PSTR("3.  Output Sample Interval ms"));
    5b48:	8d ea       	ldi	r24, 0xAD	; 173
    5b4a:	9d e0       	ldi	r25, 0x0D	; 13
    5b4c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(ADC_RATE_MIN, ADC_RATE_MAX);
    5b50:	28 ee       	ldi	r18, 0xE8	; 232
    5b52:	33 e0       	ldi	r19, 0x03	; 3
    5b54:	40 e0       	ldi	r20, 0x00	; 0
    5b56:	50 e0       	ldi	r21, 0x00	; 0
    5b58:	61 e0       	ldi	r22, 0x01	; 1
    5b5a:	70 e0       	ldi	r23, 0x00	; 0
    5b5c:	80 e0       	ldi	r24, 0x00	; 0
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_adc_rate());
    5b64:	c8 01       	movw	r24, r16
    5b66:	0e 94 08 1a 	call	0x3410	; 0x3410 <_ZN8as_class12get_adc_rateEv>
    5b6a:	bc 01       	movw	r22, r24
    5b6c:	80 e0       	ldi	r24, 0x00	; 0
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5b74:	8d e0       	ldi	r24, 0x0D	; 13
    5b76:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Menus.
		atmega_uart::tx_string_p(PSTR("4.  Transimpedance Amplifier Menu\r"));
    5b7a:	8a e8       	ldi	r24, 0x8A	; 138
    5b7c:	9d e0       	ldi	r25, 0x0D	; 13
    5b7e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("5.  Deposition Menu\r"));
    5b82:	85 e7       	ldi	r24, 0x75	; 117
    5b84:	9d e0       	ldi	r25, 0x0D	; 13
    5b86:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("6.  Linear Sweep Menu\r"));
    5b8a:	8e e5       	ldi	r24, 0x5E	; 94
    5b8c:	9d e0       	ldi	r25, 0x0D	; 13
    5b8e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("7.  Differential Pulse Menu\r"));
    5b92:	81 e4       	ldi	r24, 0x41	; 65
    5b94:	9d e0       	ldi	r25, 0x0D	; 13
    5b96:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("8.  Arbitrary Waveform Menu\r"));
    5b9a:	84 e2       	ldi	r24, 0x24	; 36
    5b9c:	9d e0       	ldi	r25, 0x0D	; 13
    5b9e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("9.  Low-pass Filter Menu\r"));
    5ba2:	8a e0       	ldi	r24, 0x0A	; 10
    5ba4:	9d e0       	ldi	r25, 0x0D	; 13
    5ba6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Get settings.
		atmega_uart::tx_string_p(PSTR("10. Get Settings\r\r"));
    5baa:	87 ef       	ldi	r24, 0xF7	; 247
    5bac:	9c e0       	ldi	r25, 0x0C	; 12
    5bae:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Unique identifier info.
		atmega_uart::tx_string_p(PSTR("Firmware Revision: "));
    5bb2:	83 ee       	ldi	r24, 0xE3	; 227
    5bb4:	9c e0       	ldi	r25, 0x0C	; 12
    5bb6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string(FIRMWARE);
    5bba:	84 e1       	ldi	r24, 0x14	; 20
    5bbc:	91 e0       	ldi	r25, 0x01	; 1
    5bbe:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN11atmega_uart9tx_stringEPKc>
		atmega_uart::tx_byte('\r');
    5bc2:	8d e0       	ldi	r24, 0x0D	; 13
    5bc4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		atmega_uart::tx_string_p(PSTR("Product ID: "));
    5bc8:	86 ed       	ldi	r24, 0xD6	; 214
    5bca:	9c e0       	ldi	r25, 0x0C	; 12
    5bcc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string(PRODUCT_ID);
    5bd0:	8a e1       	ldi	r24, 0x1A	; 26
    5bd2:	91 e0       	ldi	r25, 0x01	; 1
    5bd4:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN11atmega_uart9tx_stringEPKc>
		atmega_uart::tx_byte('\r');
    5bd8:	8d e0       	ldi	r24, 0x0D	; 13
    5bda:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Start and stop tests.
		atmega_uart::tx_string_p(PSTR("\rL Start Linear Sweep Test\r"));
    5bde:	8a eb       	ldi	r24, 0xBA	; 186
    5be0:	9c e0       	ldi	r25, 0x0C	; 12
    5be2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("D Start Differential Pulse Test\r"));
    5be6:	89 e9       	ldi	r24, 0x99	; 153
    5be8:	9c e0       	ldi	r25, 0x0C	; 12
    5bea:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("A Start Arbitrary Waveform Test\r"));
    5bee:	88 e7       	ldi	r24, 0x78	; 120
    5bf0:	9c e0       	ldi	r25, 0x0C	; 12
    5bf2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("X Abort Test\r\r\r\r\r"));
    5bf6:	86 e6       	ldi	r24, 0x66	; 102
    5bf8:	9c e0       	ldi	r25, 0x0C	; 12
    5bfa:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    5bfe:	1b c7       	rjmp	.+3638   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//If enter not pressed, keep building array.
	if(arr.rx_array[array_index - 1] != '\r')
    5c00:	28 2f       	mov	r18, r24
    5c02:	30 e0       	ldi	r19, 0x00	; 0
    5c04:	f9 01       	movw	r30, r18
    5c06:	eb 57       	subi	r30, 0x7B	; 123
    5c08:	fe 4f       	sbci	r31, 0xFE	; 254
    5c0a:	90 81       	ld	r25, Z
    5c0c:	9d 30       	cpi	r25, 0x0D	; 13
    5c0e:	09 f0       	breq	.+2      	; 0x5c12 <_Z14uart_tokenizerhP8as_class+0x1fa>
    5c10:	12 c7       	rjmp	.+3620   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
		return;
	
	//At this point, enter has been pressed and array is ready for processing.
	//Convert array hex values to uppercase.
	for(int i = 0; i < array_index; i++)
    5c12:	12 16       	cp	r1, r18
    5c14:	13 06       	cpc	r1, r19
    5c16:	84 f4       	brge	.+32     	; 0x5c38 <_Z14uart_tokenizerhP8as_class+0x220>
    5c18:	e6 e8       	ldi	r30, 0x86	; 134
    5c1a:	f1 e0       	ldi	r31, 0x01	; 1
    5c1c:	c9 01       	movw	r24, r18
    5c1e:	8a 57       	subi	r24, 0x7A	; 122
    5c20:	9e 4f       	sbci	r25, 0xFE	; 254
		if(arr.rx_array[i] >= 'a' && arr.rx_array[i] <= 'z')
    5c22:	20 81       	ld	r18, Z
    5c24:	3f e9       	ldi	r19, 0x9F	; 159
    5c26:	32 0f       	add	r19, r18
    5c28:	3a 31       	cpi	r19, 0x1A	; 26
    5c2a:	10 f4       	brcc	.+4      	; 0x5c30 <_Z14uart_tokenizerhP8as_class+0x218>
			arr.rx_array[i] -= 0x20;
    5c2c:	20 52       	subi	r18, 0x20	; 32
    5c2e:	20 83       	st	Z, r18
    5c30:	31 96       	adiw	r30, 0x01	; 1
	if(arr.rx_array[array_index - 1] != '\r')
		return;
	
	//At this point, enter has been pressed and array is ready for processing.
	//Convert array hex values to uppercase.
	for(int i = 0; i < array_index; i++)
    5c32:	e8 17       	cp	r30, r24
    5c34:	f9 07       	cpc	r31, r25
    5c36:	a9 f7       	brne	.-22     	; 0x5c22 <_Z14uart_tokenizerhP8as_class+0x20a>
		if(arr.rx_array[i] >= 'a' && arr.rx_array[i] <= 'z')
			arr.rx_array[i] -= 0x20;
	
	//Reset array index for next input string.
	array_index = 0;
    5c38:	10 92 84 01 	sts	0x0184, r1
	
	//Get number selection from user input and call appropriate function.
	//Change tx mode.
	if(arr.rx_array[0] == '1' && arr.rx_array[1] == ' ')
    5c3c:	80 91 86 01 	lds	r24, 0x0186
    5c40:	81 33       	cpi	r24, 0x31	; 49
    5c42:	69 f5       	brne	.+90     	; 0x5c9e <_Z14uart_tokenizerhP8as_class+0x286>
    5c44:	90 91 87 01 	lds	r25, 0x0187
    5c48:	90 32       	cpi	r25, 0x20	; 32
    5c4a:	09 f0       	breq	.+2      	; 0x5c4e <_Z14uart_tokenizerhP8as_class+0x236>
    5c4c:	64 c0       	rjmp	.+200    	; 0x5d16 <_Z14uart_tokenizerhP8as_class+0x2fe>
	{		
		//Check if setting to ASCII mode.
		if(arr.rx_array[2] == 'A' && arr.rx_array[3] == '\r')
    5c4e:	80 91 88 01 	lds	r24, 0x0188
    5c52:	81 34       	cpi	r24, 0x41	; 65
    5c54:	51 f4       	brne	.+20     	; 0x5c6a <_Z14uart_tokenizerhP8as_class+0x252>
    5c56:	80 91 89 01 	lds	r24, 0x0189
    5c5a:	8d 30       	cpi	r24, 0x0D	; 13
    5c5c:	e9 f4       	brne	.+58     	; 0x5c98 <_Z14uart_tokenizerhP8as_class+0x280>
		{
			as->set_tx_mode(TX_MODE_ASCII);
    5c5e:	60 e0       	ldi	r22, 0x00	; 0
    5c60:	c8 01       	movw	r24, r16
    5c62:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN8as_class11set_tx_modeE8tx_modes>
			errno = ER_NO_ERROR;
    5c66:	19 82       	std	Y+1, r1	; 0x01
    5c68:	e4 c6       	rjmp	.+3528   	; 0x6a32 <_Z14uart_tokenizerhP8as_class+0x101a>
		}
		
		//Check if setting to MatLab mode.
		else if(arr.rx_array[2] == 'M' && arr.rx_array[3] == '\r')
    5c6a:	8d 34       	cpi	r24, 0x4D	; 77
    5c6c:	51 f4       	brne	.+20     	; 0x5c82 <_Z14uart_tokenizerhP8as_class+0x26a>
    5c6e:	80 91 89 01 	lds	r24, 0x0189
    5c72:	8d 30       	cpi	r24, 0x0D	; 13
    5c74:	89 f4       	brne	.+34     	; 0x5c98 <_Z14uart_tokenizerhP8as_class+0x280>
		{
			as->set_tx_mode(TX_MODE_MATLAB);
    5c76:	61 e0       	ldi	r22, 0x01	; 1
    5c78:	c8 01       	movw	r24, r16
    5c7a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN8as_class11set_tx_modeE8tx_modes>
			errno = ER_NO_ERROR;
    5c7e:	19 82       	std	Y+1, r1	; 0x01
    5c80:	d8 c6       	rjmp	.+3504   	; 0x6a32 <_Z14uart_tokenizerhP8as_class+0x101a>
		}
		
		//Check if setting to binary mode.
		else if(arr.rx_array[2] == 'B' && arr.rx_array[3] == '\r')
    5c82:	82 34       	cpi	r24, 0x42	; 66
    5c84:	49 f4       	brne	.+18     	; 0x5c98 <_Z14uart_tokenizerhP8as_class+0x280>
    5c86:	80 91 89 01 	lds	r24, 0x0189
    5c8a:	8d 30       	cpi	r24, 0x0D	; 13
    5c8c:	29 f4       	brne	.+10     	; 0x5c98 <_Z14uart_tokenizerhP8as_class+0x280>
		{
			as->set_tx_mode(TX_MODE_BIN);
    5c8e:	62 e0       	ldi	r22, 0x02	; 2
    5c90:	c8 01       	movw	r24, r16
    5c92:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN8as_class11set_tx_modeE8tx_modes>
			return; //Do not print "OK" if just switched to binary mode.
    5c96:	cf c6       	rjmp	.+3486   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
		}
		else errno = ER_ERROR;//Invalid input.
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	89 83       	std	Y+1, r24	; 0x01
    5c9c:	c7 c6       	rjmp	.+3470   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
	}
	
	//Change number of electrodes.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == ' ')
    5c9e:	82 33       	cpi	r24, 0x32	; 50
    5ca0:	41 f5       	brne	.+80     	; 0x5cf2 <_Z14uart_tokenizerhP8as_class+0x2da>
    5ca2:	90 91 87 01 	lds	r25, 0x0187
    5ca6:	90 32       	cpi	r25, 0x20	; 32
    5ca8:	09 f0       	breq	.+2      	; 0x5cac <_Z14uart_tokenizerhP8as_class+0x294>
    5caa:	80 c0       	rjmp	.+256    	; 0x5dac <_Z14uart_tokenizerhP8as_class+0x394>
	{
		//Check if changing to 2 electrode configuration.
		if(arr.rx_array[2] == '2' && arr.rx_array[3] == '\r')
    5cac:	80 91 88 01 	lds	r24, 0x0188
    5cb0:	82 33       	cpi	r24, 0x32	; 50
    5cb2:	69 f4       	brne	.+26     	; 0x5cce <_Z14uart_tokenizerhP8as_class+0x2b6>
    5cb4:	80 91 89 01 	lds	r24, 0x0189
    5cb8:	8d 30       	cpi	r24, 0x0D	; 13
    5cba:	c1 f4       	brne	.+48     	; 0x5cec <_Z14uart_tokenizerhP8as_class+0x2d4>
		{
			as->set_num_electrodes(ELEC_2);
    5cbc:	60 e0       	ldi	r22, 0x00	; 0
    5cbe:	c8 01       	movw	r24, r16
    5cc0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN8as_class18set_num_electrodesE9num_elecs>
			i2c_load_electrodes(as);
    5cc4:	c8 01       	movw	r24, r16
    5cc6:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_Z19i2c_load_electrodesP8as_class>
			errno = ER_NO_ERROR;
    5cca:	19 82       	std	Y+1, r1	; 0x01
    5ccc:	b2 c6       	rjmp	.+3428   	; 0x6a32 <_Z14uart_tokenizerhP8as_class+0x101a>
		}
		
		//Check if changing to 3 electrode configuration.
		else if(arr.rx_array[2] == '3' && arr.rx_array[3] == '\r')
    5cce:	83 33       	cpi	r24, 0x33	; 51
    5cd0:	69 f4       	brne	.+26     	; 0x5cec <_Z14uart_tokenizerhP8as_class+0x2d4>
    5cd2:	80 91 89 01 	lds	r24, 0x0189
    5cd6:	8d 30       	cpi	r24, 0x0D	; 13
    5cd8:	49 f4       	brne	.+18     	; 0x5cec <_Z14uart_tokenizerhP8as_class+0x2d4>
		{
			as->set_num_electrodes(ELEC_3);
    5cda:	61 e0       	ldi	r22, 0x01	; 1
    5cdc:	c8 01       	movw	r24, r16
    5cde:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN8as_class18set_num_electrodesE9num_elecs>
			i2c_load_electrodes(as);
    5ce2:	c8 01       	movw	r24, r16
    5ce4:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_Z19i2c_load_electrodesP8as_class>
			errno = ER_NO_ERROR;
    5ce8:	19 82       	std	Y+1, r1	; 0x01
    5cea:	a3 c6       	rjmp	.+3398   	; 0x6a32 <_Z14uart_tokenizerhP8as_class+0x101a>
		}
		else errno = ER_ERROR;//Invalid input.
    5cec:	81 e0       	ldi	r24, 0x01	; 1
    5cee:	89 83       	std	Y+1, r24	; 0x01
    5cf0:	9d c6       	rjmp	.+3386   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
	}
	
	//Change ADC sample interval.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == ' ')
    5cf2:	83 33       	cpi	r24, 0x33	; 51
    5cf4:	81 f4       	brne	.+32     	; 0x5d16 <_Z14uart_tokenizerhP8as_class+0x2fe>
    5cf6:	90 91 87 01 	lds	r25, 0x0187
    5cfa:	90 32       	cpi	r25, 0x20	; 32
    5cfc:	09 f0       	breq	.+2      	; 0x5d00 <_Z14uart_tokenizerhP8as_class+0x2e8>
    5cfe:	bb c0       	rjmp	.+374    	; 0x5e76 <_Z14uart_tokenizerhP8as_class+0x45e>
		errno = set_u16(&(arr.rx_array[2]), as, &as_class::set_adc_rate);
    5d00:	28 ef       	ldi	r18, 0xF8	; 248
    5d02:	39 e1       	ldi	r19, 0x19	; 25
    5d04:	40 e0       	ldi	r20, 0x00	; 0
    5d06:	50 e0       	ldi	r21, 0x00	; 0
    5d08:	b8 01       	movw	r22, r16
    5d0a:	88 e8       	ldi	r24, 0x88	; 136
    5d0c:	91 e0       	ldi	r25, 0x01	; 1
    5d0e:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    5d12:	89 83       	std	Y+1, r24	; 0x01
    5d14:	88 c6       	rjmp	.+3344   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Print TIA menu.
	else if(arr.rx_array[0] == '4' && arr.rx_array[1] == '\r')
    5d16:	84 33       	cpi	r24, 0x34	; 52
    5d18:	09 f0       	breq	.+2      	; 0x5d1c <_Z14uart_tokenizerhP8as_class+0x304>
    5d1a:	48 c0       	rjmp	.+144    	; 0x5dac <_Z14uart_tokenizerhP8as_class+0x394>
    5d1c:	90 91 87 01 	lds	r25, 0x0187
    5d20:	9d 30       	cpi	r25, 0x0D	; 13
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <_Z14uart_tokenizerhP8as_class+0x30e>
    5d24:	20 c1       	rjmp	.+576    	; 0x5f66 <_Z14uart_tokenizerhP8as_class+0x54e>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---TIA MENU---\r"));
    5d26:	86 e5       	ldi	r24, 0x56	; 86
    5d28:	9c e0       	ldi	r25, 0x0C	; 12
    5d2a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Resistor tap.
		atmega_uart::tx_string_p(PSTR("11. TIA Gain Resistor "));
    5d2e:	8f e3       	ldi	r24, 0x3F	; 63
    5d30:	9c e0       	ldi	r25, 0x0C	; 12
    5d32:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(RES_MIN, RES_MAX);
    5d36:	26 e0       	ldi	r18, 0x06	; 6
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	40 e0       	ldi	r20, 0x00	; 0
    5d3c:	50 e0       	ldi	r21, 0x00	; 0
    5d3e:	61 e0       	ldi	r22, 0x01	; 1
    5d40:	70 e0       	ldi	r23, 0x00	; 0
    5d42:	80 e0       	ldi	r24, 0x00	; 0
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_tia_res());
    5d4a:	c8 01       	movw	r24, r16
    5d4c:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN8as_class11get_tia_resEv>
    5d50:	68 2f       	mov	r22, r24
    5d52:	70 e0       	ldi	r23, 0x00	; 0
    5d54:	80 e0       	ldi	r24, 0x00	; 0
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5d5c:	8d e0       	ldi	r24, 0x0D	; 13
    5d5e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		uart_print_spaces();
    5d62:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("1. 100\r"));
    5d66:	87 e3       	ldi	r24, 0x37	; 55
    5d68:	9c e0       	ldi	r25, 0x0C	; 12
    5d6a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5d6e:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("2. 1k\r"));
    5d72:	80 e3       	ldi	r24, 0x30	; 48
    5d74:	9c e0       	ldi	r25, 0x0C	; 12
    5d76:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5d7a:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("3. 5.1k\r"));
    5d7e:	87 e2       	ldi	r24, 0x27	; 39
    5d80:	9c e0       	ldi	r25, 0x0C	; 12
    5d82:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5d86:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("4. 10k\r"));
    5d8a:	8f e1       	ldi	r24, 0x1F	; 31
    5d8c:	9c e0       	ldi	r25, 0x0C	; 12
    5d8e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5d92:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("5. 51k\r"));
    5d96:	87 e1       	ldi	r24, 0x17	; 23
    5d98:	9c e0       	ldi	r25, 0x0C	; 12
    5d9a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    5d9e:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("6. 100k\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    5da2:	8f ef       	ldi	r24, 0xFF	; 255
    5da4:	9b e0       	ldi	r25, 0x0B	; 11
    5da6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    5daa:	45 c6       	rjmp	.+3210   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Print deposition menu.
	else if(arr.rx_array[0] == '5' && arr.rx_array[1] == '\r')
    5dac:	85 33       	cpi	r24, 0x35	; 53
    5dae:	09 f0       	breq	.+2      	; 0x5db2 <_Z14uart_tokenizerhP8as_class+0x39a>
    5db0:	62 c0       	rjmp	.+196    	; 0x5e76 <_Z14uart_tokenizerhP8as_class+0x45e>
    5db2:	90 91 87 01 	lds	r25, 0x0187
    5db6:	9d 30       	cpi	r25, 0x0D	; 13
    5db8:	09 f0       	breq	.+2      	; 0x5dbc <_Z14uart_tokenizerhP8as_class+0x3a4>
    5dba:	8c c1       	rjmp	.+792    	; 0x60d4 <_Z14uart_tokenizerhP8as_class+0x6bc>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---DEPOSITION MENU---\r"));
    5dbc:	88 ee       	ldi	r24, 0xE8	; 232
    5dbe:	9b e0       	ldi	r25, 0x0B	; 11
    5dc0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Enable deposition.
		atmega_uart::tx_string_p(PSTR("12. Enable Deposition (Y/N): "));
    5dc4:	8a ec       	ldi	r24, 0xCA	; 202
    5dc6:	9b e0       	ldi	r25, 0x0B	; 11
    5dc8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_dep_enable());
    5dcc:	c8 01       	movw	r24, r16
    5dce:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN8as_class14get_dep_enableEv>
    5dd2:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_Z11uart_yes_nob>
		
		//Deposition time.
		atmega_uart::tx_string_p(PSTR("13. Deposition Time ms"));
    5dd6:	83 eb       	ldi	r24, 0xB3	; 179
    5dd8:	9b e0       	ldi	r25, 0x0B	; 11
    5dda:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(DEP_TIME_MIN, DEP_TIME_MAX);
    5dde:	20 e0       	ldi	r18, 0x00	; 0
    5de0:	35 e3       	ldi	r19, 0x35	; 53
    5de2:	4c e0       	ldi	r20, 0x0C	; 12
    5de4:	50 e0       	ldi	r21, 0x00	; 0
    5de6:	61 e0       	ldi	r22, 0x01	; 1
    5de8:	70 e0       	ldi	r23, 0x00	; 0
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_dep_time());
    5df2:	c8 01       	movw	r24, r16
    5df4:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN8as_class12get_dep_timeEv>
    5df8:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5dfc:	8d e0       	ldi	r24, 0x0D	; 13
    5dfe:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Deposition Voltage.
		atmega_uart::tx_string_p(PSTR("14. Deposition Voltage mV"));
    5e02:	89 e9       	ldi	r24, 0x99	; 153
    5e04:	9b e0       	ldi	r25, 0x0B	; 11
    5e06:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(DEP_VOLT_MIN, DEP_VOLT_MAX);
    5e0a:	62 e7       	ldi	r22, 0x72	; 114
    5e0c:	76 e0       	ldi	r23, 0x06	; 6
    5e0e:	8e e8       	ldi	r24, 0x8E	; 142
    5e10:	99 ef       	ldi	r25, 0xF9	; 249
    5e12:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_dep_volt());
    5e16:	c8 01       	movw	r24, r16
    5e18:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <_ZN8as_class12get_dep_voltEv>
    5e1c:	bc 01       	movw	r22, r24
    5e1e:	88 27       	eor	r24, r24
    5e20:	77 fd       	sbrc	r23, 7
    5e22:	80 95       	com	r24
    5e24:	98 2f       	mov	r25, r24
    5e26:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5e2a:	8d e0       	ldi	r24, 0x0D	; 13
    5e2c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Quiet time.
		atmega_uart::tx_string_p(PSTR("15. Quiet Time ms"));
    5e30:	87 e8       	ldi	r24, 0x87	; 135
    5e32:	9b e0       	ldi	r25, 0x0B	; 11
    5e34:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(QUIET_TIME_MIN, QUIET_TIME_MAX);
    5e38:	20 e0       	ldi	r18, 0x00	; 0
    5e3a:	35 e3       	ldi	r19, 0x35	; 53
    5e3c:	4c e0       	ldi	r20, 0x0C	; 12
    5e3e:	50 e0       	ldi	r21, 0x00	; 0
    5e40:	60 e0       	ldi	r22, 0x00	; 0
    5e42:	70 e0       	ldi	r23, 0x00	; 0
    5e44:	cb 01       	movw	r24, r22
    5e46:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_quiet_time());
    5e4a:	c8 01       	movw	r24, r16
    5e4c:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN8as_class14get_quiet_timeEv>
    5e50:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5e54:	8d e0       	ldi	r24, 0x0D	; 13
    5e56:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Record deposition sequence.
		atmega_uart::tx_string_p(PSTR("16. Record Deposition Sequence (Y/N): "));
    5e5a:	80 e6       	ldi	r24, 0x60	; 96
    5e5c:	9b e0       	ldi	r25, 0x0B	; 11
    5e5e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_dep_rec());
    5e62:	c8 01       	movw	r24, r16
    5e64:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    5e68:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_Z11uart_yes_nob>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    5e6c:	8e e4       	ldi	r24, 0x4E	; 78
    5e6e:	9b e0       	ldi	r25, 0x0B	; 11
    5e70:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    5e74:	e0 c5       	rjmp	.+3008   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Print linear sweep menu.
	else if(arr.rx_array[0] == '6' && arr.rx_array[1] == '\r')
    5e76:	86 33       	cpi	r24, 0x36	; 54
    5e78:	09 f0       	breq	.+2      	; 0x5e7c <_Z14uart_tokenizerhP8as_class+0x464>
    5e7a:	75 c0       	rjmp	.+234    	; 0x5f66 <_Z14uart_tokenizerhP8as_class+0x54e>
    5e7c:	90 91 87 01 	lds	r25, 0x0187
    5e80:	9d 30       	cpi	r25, 0x0D	; 13
    5e82:	09 f0       	breq	.+2      	; 0x5e86 <_Z14uart_tokenizerhP8as_class+0x46e>
    5e84:	a5 c1       	rjmp	.+842    	; 0x61d0 <_Z14uart_tokenizerhP8as_class+0x7b8>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---LINEAR SWEEP MENU---\r"));
    5e86:	85 e3       	ldi	r24, 0x35	; 53
    5e88:	9b e0       	ldi	r25, 0x0B	; 11
    5e8a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Start Voltage.
		atmega_uart::tx_string_p(PSTR("17. Start Voltage mV"));
    5e8e:	80 e2       	ldi	r24, 0x20	; 32
    5e90:	9b e0       	ldi	r25, 0x0B	; 11
    5e92:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SWEEP_VOLT_MIN, SWEEP_VOLT_MAX);
    5e96:	62 e7       	ldi	r22, 0x72	; 114
    5e98:	76 e0       	ldi	r23, 0x06	; 6
    5e9a:	8e e8       	ldi	r24, 0x8E	; 142
    5e9c:	99 ef       	ldi	r25, 0xF9	; 249
    5e9e:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_sweep_volt_start());
    5ea2:	c8 01       	movw	r24, r16
    5ea4:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN8as_class20get_sweep_volt_startEv>
    5ea8:	bc 01       	movw	r22, r24
    5eaa:	88 27       	eor	r24, r24
    5eac:	77 fd       	sbrc	r23, 7
    5eae:	80 95       	com	r24
    5eb0:	98 2f       	mov	r25, r24
    5eb2:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5eb6:	8d e0       	ldi	r24, 0x0D	; 13
    5eb8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//End voltage.
		atmega_uart::tx_string_p(PSTR("18. End Voltage mV"));
    5ebc:	8d e0       	ldi	r24, 0x0D	; 13
    5ebe:	9b e0       	ldi	r25, 0x0B	; 11
    5ec0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(SWEEP_VOLT_MIN, SWEEP_VOLT_MAX);
    5ec4:	62 e7       	ldi	r22, 0x72	; 114
    5ec6:	76 e0       	ldi	r23, 0x06	; 6
    5ec8:	8e e8       	ldi	r24, 0x8E	; 142
    5eca:	99 ef       	ldi	r25, 0xF9	; 249
    5ecc:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_sweep_volt_end());
    5ed0:	c8 01       	movw	r24, r16
    5ed2:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN8as_class18get_sweep_volt_endEv>
    5ed6:	bc 01       	movw	r22, r24
    5ed8:	88 27       	eor	r24, r24
    5eda:	77 fd       	sbrc	r23, 7
    5edc:	80 95       	com	r24
    5ede:	98 2f       	mov	r25, r24
    5ee0:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5ee4:	8d e0       	ldi	r24, 0x0D	; 13
    5ee6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Sweep rate.
		atmega_uart::tx_string_p(PSTR("19. Sweep Rate mV/s"));
    5eea:	89 ef       	ldi	r24, 0xF9	; 249
    5eec:	9a e0       	ldi	r25, 0x0A	; 10
    5eee:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SWEEP_RATE_MIN, SWEEP_RATE_MAX);
    5ef2:	20 ea       	ldi	r18, 0xA0	; 160
    5ef4:	3f e0       	ldi	r19, 0x0F	; 15
    5ef6:	40 e0       	ldi	r20, 0x00	; 0
    5ef8:	50 e0       	ldi	r21, 0x00	; 0
    5efa:	61 e0       	ldi	r22, 0x01	; 1
    5efc:	70 e0       	ldi	r23, 0x00	; 0
    5efe:	80 e0       	ldi	r24, 0x00	; 0
    5f00:	90 e0       	ldi	r25, 0x00	; 0
    5f02:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_sweep_rate());
    5f06:	c8 01       	movw	r24, r16
    5f08:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN8as_class14get_sweep_rateEv>
    5f0c:	bc 01       	movw	r22, r24
    5f0e:	80 e0       	ldi	r24, 0x00	; 0
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    5f16:	8d e0       	ldi	r24, 0x0D	; 13
    5f18:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Cyclic.
		atmega_uart::tx_string_p(PSTR("20. Cyclic (Y/N): "));
    5f1c:	86 ee       	ldi	r24, 0xE6	; 230
    5f1e:	9a e0       	ldi	r25, 0x0A	; 10
    5f20:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_yes_no(as->get_sweep_cyclic());
    5f24:	c8 01       	movw	r24, r16
    5f26:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN8as_class16get_sweep_cyclicEv>
    5f2a:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_Z11uart_yes_nob>
		
		//Number of cycles.
		atmega_uart::tx_string_p(PSTR("21. Number of Cycles"));
    5f2e:	81 ed       	ldi	r24, 0xD1	; 209
    5f30:	9a e0       	ldi	r25, 0x0A	; 10
    5f32:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(SWEEP_CYCLES_MIN, SWEEP_CYCLES_MAX);
    5f36:	24 e6       	ldi	r18, 0x64	; 100
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	40 e0       	ldi	r20, 0x00	; 0
    5f3c:	50 e0       	ldi	r21, 0x00	; 0
    5f3e:	61 e0       	ldi	r22, 0x01	; 1
    5f40:	70 e0       	ldi	r23, 0x00	; 0
    5f42:	80 e0       	ldi	r24, 0x00	; 0
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_sweep_cycles());
    5f4a:	c8 01       	movw	r24, r16
    5f4c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_ZN8as_class16get_sweep_cyclesEv>
    5f50:	68 2f       	mov	r22, r24
    5f52:	70 e0       	ldi	r23, 0x00	; 0
    5f54:	80 e0       	ldi	r24, 0x00	; 0
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    5f5c:	8e eb       	ldi	r24, 0xBE	; 190
    5f5e:	9a e0       	ldi	r25, 0x0A	; 10
    5f60:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    5f64:	68 c5       	rjmp	.+2768   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Print differential pulse menu.
	else if(arr.rx_array[0] == '7' && arr.rx_array[1] == '\r')
    5f66:	87 33       	cpi	r24, 0x37	; 55
    5f68:	09 f0       	breq	.+2      	; 0x5f6c <_Z14uart_tokenizerhP8as_class+0x554>
    5f6a:	b4 c0       	rjmp	.+360    	; 0x60d4 <_Z14uart_tokenizerhP8as_class+0x6bc>
    5f6c:	90 91 87 01 	lds	r25, 0x0187
    5f70:	9d 30       	cpi	r25, 0x0D	; 13
    5f72:	09 f0       	breq	.+2      	; 0x5f76 <_Z14uart_tokenizerhP8as_class+0x55e>
    5f74:	89 c1       	rjmp	.+786    	; 0x6288 <_Z14uart_tokenizerhP8as_class+0x870>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---DIFFERENTIAL PULSE MENU---\r"));
    5f76:	8f e9       	ldi	r24, 0x9F	; 159
    5f78:	9a e0       	ldi	r25, 0x0A	; 10
    5f7a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Start voltage.
		atmega_uart::tx_string_p(PSTR("22. Start Voltage mV"));
    5f7e:	8a e8       	ldi	r24, 0x8A	; 138
    5f80:	9a e0       	ldi	r25, 0x0A	; 10
    5f82:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(DIF_VOLT_MIN, DIF_VOLT_MAX);
    5f86:	62 e7       	ldi	r22, 0x72	; 114
    5f88:	76 e0       	ldi	r23, 0x06	; 6
    5f8a:	8e e8       	ldi	r24, 0x8E	; 142
    5f8c:	99 ef       	ldi	r25, 0xF9	; 249
    5f8e:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_dif_volt_start());
    5f92:	c8 01       	movw	r24, r16
    5f94:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    5f98:	bc 01       	movw	r22, r24
    5f9a:	88 27       	eor	r24, r24
    5f9c:	77 fd       	sbrc	r23, 7
    5f9e:	80 95       	com	r24
    5fa0:	98 2f       	mov	r25, r24
    5fa2:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5fa6:	8d e0       	ldi	r24, 0x0D	; 13
    5fa8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//End voltage.
		atmega_uart::tx_string_p(PSTR("23. End Voltage mV"));
    5fac:	87 e7       	ldi	r24, 0x77	; 119
    5fae:	9a e0       	ldi	r25, 0x0A	; 10
    5fb0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(DIF_VOLT_MIN, DIF_VOLT_MAX);
    5fb4:	62 e7       	ldi	r22, 0x72	; 114
    5fb6:	76 e0       	ldi	r23, 0x06	; 6
    5fb8:	8e e8       	ldi	r24, 0x8E	; 142
    5fba:	99 ef       	ldi	r25, 0xF9	; 249
    5fbc:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_dif_volt_end());
    5fc0:	c8 01       	movw	r24, r16
    5fc2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    5fc6:	bc 01       	movw	r22, r24
    5fc8:	88 27       	eor	r24, r24
    5fca:	77 fd       	sbrc	r23, 7
    5fcc:	80 95       	com	r24
    5fce:	98 2f       	mov	r25, r24
    5fd0:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    5fd4:	8d e0       	ldi	r24, 0x0D	; 13
    5fd6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Differential pulse increment.
		atmega_uart::tx_string_p(PSTR("24. Increment mV"));
    5fda:	86 e6       	ldi	r24, 0x66	; 102
    5fdc:	9a e0       	ldi	r25, 0x0A	; 10
    5fde:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(DIF_INC_MIN, DIF_INC_MAX);
    5fe2:	22 e7       	ldi	r18, 0x72	; 114
    5fe4:	36 e0       	ldi	r19, 0x06	; 6
    5fe6:	40 e0       	ldi	r20, 0x00	; 0
    5fe8:	50 e0       	ldi	r21, 0x00	; 0
    5fea:	61 e0       	ldi	r22, 0x01	; 1
    5fec:	70 e0       	ldi	r23, 0x00	; 0
    5fee:	80 e0       	ldi	r24, 0x00	; 0
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_dif_volt_inc());
    5ff6:	c8 01       	movw	r24, r16
    5ff8:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN8as_class16get_dif_volt_incEv>
    5ffc:	bc 01       	movw	r22, r24
    5ffe:	80 e0       	ldi	r24, 0x00	; 0
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    6006:	8d e0       	ldi	r24, 0x0D	; 13
    6008:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Differential pulse voltage.
		atmega_uart::tx_string_p(PSTR("25. Pulse Voltage mV"));
    600c:	81 e5       	ldi	r24, 0x51	; 81
    600e:	9a e0       	ldi	r25, 0x0A	; 10
    6010:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_int(DIF_AMP_MIN, DIF_AMP_MAX);
    6014:	62 e7       	ldi	r22, 0x72	; 114
    6016:	76 e0       	ldi	r23, 0x06	; 6
    6018:	8e e8       	ldi	r24, 0x8E	; 142
    601a:	99 ef       	ldi	r25, 0xF9	; 249
    601c:	0e 94 e7 26 	call	0x4dce	; 0x4dce <_Z16uart_min_max_intii>
		tx_int_to_ascii(as->get_dif_volt_pls());
    6020:	c8 01       	movw	r24, r16
    6022:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6026:	bc 01       	movw	r22, r24
    6028:	88 27       	eor	r24, r24
    602a:	77 fd       	sbrc	r23, 7
    602c:	80 95       	com	r24
    602e:	98 2f       	mov	r25, r24
    6030:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_byte('\r');
    6034:	8d e0       	ldi	r24, 0x0D	; 13
    6036:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Differential pulse pre-pulse time.
		atmega_uart::tx_string_p(PSTR("26. Pre-pulse Time ms"));
    603a:	8b e3       	ldi	r24, 0x3B	; 59
    603c:	9a e0       	ldi	r25, 0x0A	; 10
    603e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(DIF_PRE_MIN, DIF_PRE_MAX);
    6042:	20 e1       	ldi	r18, 0x10	; 16
    6044:	37 e2       	ldi	r19, 0x27	; 39
    6046:	40 e0       	ldi	r20, 0x00	; 0
    6048:	50 e0       	ldi	r21, 0x00	; 0
    604a:	61 e0       	ldi	r22, 0x01	; 1
    604c:	70 e0       	ldi	r23, 0x00	; 0
    604e:	80 e0       	ldi	r24, 0x00	; 0
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_dif_time_pre());
    6056:	c8 01       	movw	r24, r16
    6058:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN8as_class16get_dif_time_preEv>
    605c:	bc 01       	movw	r22, r24
    605e:	80 e0       	ldi	r24, 0x00	; 0
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    6066:	8d e0       	ldi	r24, 0x0D	; 13
    6068:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Differential pulse time.
		atmega_uart::tx_string_p(PSTR("27. Pulse Time ms"));
    606c:	89 e2       	ldi	r24, 0x29	; 41
    606e:	9a e0       	ldi	r25, 0x0A	; 10
    6070:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(DIF_PLS_MIN, DIF_PLS_MAX);
    6074:	20 e1       	ldi	r18, 0x10	; 16
    6076:	37 e2       	ldi	r19, 0x27	; 39
    6078:	40 e0       	ldi	r20, 0x00	; 0
    607a:	50 e0       	ldi	r21, 0x00	; 0
    607c:	61 e0       	ldi	r22, 0x01	; 1
    607e:	70 e0       	ldi	r23, 0x00	; 0
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_dif_time_pls());
    6088:	c8 01       	movw	r24, r16
    608a:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN8as_class16get_dif_time_plsEv>
    608e:	bc 01       	movw	r22, r24
    6090:	80 e0       	ldi	r24, 0x00	; 0
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    6098:	8d e0       	ldi	r24, 0x0D	; 13
    609a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Sampling window width.
		atmega_uart::tx_string_p(PSTR("28. Sampling Window Width ms"));
    609e:	8c e0       	ldi	r24, 0x0C	; 12
    60a0:	9a e0       	ldi	r25, 0x0A	; 10
    60a2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(DIF_WIN_MIN, DIF_WIN_MAX);
    60a6:	20 e1       	ldi	r18, 0x10	; 16
    60a8:	37 e2       	ldi	r19, 0x27	; 39
    60aa:	40 e0       	ldi	r20, 0x00	; 0
    60ac:	50 e0       	ldi	r21, 0x00	; 0
    60ae:	61 e0       	ldi	r22, 0x01	; 1
    60b0:	70 e0       	ldi	r23, 0x00	; 0
    60b2:	80 e0       	ldi	r24, 0x00	; 0
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_dif_time_win());
    60ba:	c8 01       	movw	r24, r16
    60bc:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN8as_class16get_dif_time_winEv>
    60c0:	bc 01       	movw	r22, r24
    60c2:	80 e0       	ldi	r24, 0x00	; 0
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    60ca:	8b ef       	ldi	r24, 0xFB	; 251
    60cc:	99 e0       	ldi	r25, 0x09	; 9
    60ce:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    60d2:	b1 c4       	rjmp	.+2402   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Print arbitrary waveform menu.
	else if(arr.rx_array[0] == '8' && arr.rx_array[1] == '\r')
    60d4:	88 33       	cpi	r24, 0x38	; 56
    60d6:	09 f0       	breq	.+2      	; 0x60da <_Z14uart_tokenizerhP8as_class+0x6c2>
    60d8:	7b c0       	rjmp	.+246    	; 0x61d0 <_Z14uart_tokenizerhP8as_class+0x7b8>
    60da:	90 91 87 01 	lds	r25, 0x0187
    60de:	9d 30       	cpi	r25, 0x0D	; 13
    60e0:	09 f0       	breq	.+2      	; 0x60e4 <_Z14uart_tokenizerhP8as_class+0x6cc>
    60e2:	80 c1       	rjmp	.+768    	; 0x63e4 <_Z14uart_tokenizerhP8as_class+0x9cc>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---ARBITRARY WAVEFORM MENU---\r"));
    60e4:	8c ed       	ldi	r24, 0xDC	; 220
    60e6:	99 e0       	ldi	r25, 0x09	; 9
    60e8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Append entry.
		atmega_uart::tx_string_p(PSTR("29. Append Entry (StartmV StopmV RatemV/s)\r"));
    60ec:	80 eb       	ldi	r24, 0xB0	; 176
    60ee:	99 e0       	ldi	r25, 0x09	; 9
    60f0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Replace entry.
		atmega_uart::tx_string_p(PSTR("30. Replace Entry (Entry# StartmV StopmV RatemV/s)\r"));
    60f4:	8c e7       	ldi	r24, 0x7C	; 124
    60f6:	99 e0       	ldi	r25, 0x09	; 9
    60f8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Delete last entry.
		atmega_uart::tx_string_p(PSTR("31. Delete Last Entry\r"));
    60fc:	85 e6       	ldi	r24, 0x65	; 101
    60fe:	99 e0       	ldi	r25, 0x09	; 9
    6100:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Delete all entries.
		atmega_uart::tx_string_p(PSTR("32. Delete All Entries\r"));
    6104:	8d e4       	ldi	r24, 0x4D	; 77
    6106:	99 e0       	ldi	r25, 0x09	; 9
    6108:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Show stored values
		atmega_uart::tx_string_p(PSTR("33. Get Stored Values\r"));
    610c:	86 e3       	ldi	r24, 0x36	; 54
    610e:	99 e0       	ldi	r25, 0x09	; 9
    6110:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		atmega_uart::tx_string_p(PSTR("\r"));
    6114:	84 e3       	ldi	r24, 0x34	; 52
    6116:	99 e0       	ldi	r25, 0x09	; 9
    6118:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Stored entries.
		atmega_uart::tx_string_p(PSTR("Number of Stored Entries (Up to "));
    611c:	83 e1       	ldi	r24, 0x13	; 19
    611e:	99 e0       	ldi	r25, 0x09	; 9
    6120:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_ENTRIES_MAX);
    6124:	60 e2       	ldi	r22, 0x20	; 32
    6126:	7e e4       	ldi	r23, 0x4E	; 78
    6128:	80 e0       	ldi	r24, 0x00	; 0
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("): "));
    6130:	8f e0       	ldi	r24, 0x0F	; 15
    6132:	99 e0       	ldi	r25, 0x09	; 9
    6134:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(fram1_read_word(ARB_NUM));
    6138:	62 ed       	ldi	r22, 0xD2	; 210
    613a:	7b ef       	ldi	r23, 0xFB	; 251
    613c:	81 e0       	ldi	r24, 0x01	; 1
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    6144:	bc 01       	movw	r22, r24
    6146:	80 e0       	ldi	r24, 0x00	; 0
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		
		//Arbitrary waveform value limits.
		atmega_uart::tx_string_p(PSTR("\r\rStartmV: "));
    614e:	83 e0       	ldi	r24, 0x03	; 3
    6150:	99 e0       	ldi	r25, 0x09	; 9
    6152:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MIN);
    6156:	6e e8       	ldi	r22, 0x8E	; 142
    6158:	79 ef       	ldi	r23, 0xF9	; 249
    615a:	8f ef       	ldi	r24, 0xFF	; 255
    615c:	9f ef       	ldi	r25, 0xFF	; 255
    615e:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR(" to "));
    6162:	8e ef       	ldi	r24, 0xFE	; 254
    6164:	98 e0       	ldi	r25, 0x08	; 8
    6166:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MAX);
    616a:	62 e7       	ldi	r22, 0x72	; 114
    616c:	76 e0       	ldi	r23, 0x06	; 6
    616e:	80 e0       	ldi	r24, 0x00	; 0
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("\rEndmV:   "));
    6176:	83 ef       	ldi	r24, 0xF3	; 243
    6178:	98 e0       	ldi	r25, 0x08	; 8
    617a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MIN);
    617e:	6e e8       	ldi	r22, 0x8E	; 142
    6180:	79 ef       	ldi	r23, 0xF9	; 249
    6182:	8f ef       	ldi	r24, 0xFF	; 255
    6184:	9f ef       	ldi	r25, 0xFF	; 255
    6186:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR(" to "));
    618a:	8e ee       	ldi	r24, 0xEE	; 238
    618c:	98 e0       	ldi	r25, 0x08	; 8
    618e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_int_to_ascii(ARB_VOLT_MAX);
    6192:	62 e7       	ldi	r22, 0x72	; 114
    6194:	76 e0       	ldi	r23, 0x06	; 6
    6196:	80 e0       	ldi	r24, 0x00	; 0
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
		atmega_uart::tx_string_p(PSTR("\rRatemV/s: "));
    619e:	82 ee       	ldi	r24, 0xE2	; 226
    61a0:	98 e0       	ldi	r25, 0x08	; 8
    61a2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(ARB_RATE_MIN);
    61a6:	61 e0       	ldi	r22, 0x01	; 1
    61a8:	70 e0       	ldi	r23, 0x00	; 0
    61aa:	80 e0       	ldi	r24, 0x00	; 0
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR(" to "));
    61b2:	8d ed       	ldi	r24, 0xDD	; 221
    61b4:	98 e0       	ldi	r25, 0x08	; 8
    61b6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		tx_u32_to_ascii(ARB_RATE_MAX);
    61ba:	60 ee       	ldi	r22, 0xE0	; 224
    61bc:	7e e2       	ldi	r23, 0x2E	; 46
    61be:	80 e0       	ldi	r24, 0x00	; 0
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_string_p(PSTR("\r\r\r\r\r\r\r\r\r\r\r\r"));
    61c6:	80 ed       	ldi	r24, 0xD0	; 208
    61c8:	98 e0       	ldi	r25, 0x08	; 8
    61ca:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    61ce:	33 c4       	rjmp	.+2150   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Print low-pass filter menu.
	else if(arr.rx_array[0] == '9' && arr.rx_array[1] == '\r')
    61d0:	89 33       	cpi	r24, 0x39	; 57
    61d2:	09 f0       	breq	.+2      	; 0x61d6 <_Z14uart_tokenizerhP8as_class+0x7be>
    61d4:	59 c0       	rjmp	.+178    	; 0x6288 <_Z14uart_tokenizerhP8as_class+0x870>
    61d6:	90 91 87 01 	lds	r25, 0x0187
    61da:	9d 30       	cpi	r25, 0x0D	; 13
    61dc:	09 f0       	breq	.+2      	; 0x61e0 <_Z14uart_tokenizerhP8as_class+0x7c8>
    61de:	07 c3       	rjmp	.+1550   	; 0x67ee <_Z14uart_tokenizerhP8as_class+0xdd6>
	{
		//Menu header.
		atmega_uart::tx_string_p(PSTR("---LOW-PASS FILTER MENU---\r"));
    61e0:	84 eb       	ldi	r24, 0xB4	; 180
    61e2:	98 e0       	ldi	r25, 0x08	; 8
    61e4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Selected software filter.
		atmega_uart::tx_string_p(PSTR("34. Selected Filter"));
    61e8:	80 ea       	ldi	r24, 0xA0	; 160
    61ea:	98 e0       	ldi	r25, 0x08	; 8
    61ec:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_min_max_u32(LPF_FILT_MIN, LPF_FILT_MAX);
    61f0:	27 e0       	ldi	r18, 0x07	; 7
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	40 e0       	ldi	r20, 0x00	; 0
    61f6:	50 e0       	ldi	r21, 0x00	; 0
    61f8:	60 e0       	ldi	r22, 0x00	; 0
    61fa:	70 e0       	ldi	r23, 0x00	; 0
    61fc:	cb 01       	movw	r24, r22
    61fe:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_Z16uart_min_max_u32mm>
		tx_u32_to_ascii(as->get_soft_sel());
    6202:	c8 01       	movw	r24, r16
    6204:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8as_class12get_soft_selEv>
    6208:	68 2f       	mov	r22, r24
    620a:	70 e0       	ldi	r23, 0x00	; 0
    620c:	80 e0       	ldi	r24, 0x00	; 0
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
		atmega_uart::tx_byte('\r');
    6214:	8d e0       	ldi	r24, 0x0D	; 13
    6216:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		uart_print_spaces();
    621a:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("Cutoff Frequency\r"));
    621e:	8e e8       	ldi	r24, 0x8E	; 142
    6220:	98 e0       	ldi	r25, 0x08	; 8
    6222:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    6226:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("0: No Filter\r"));
    622a:	80 e8       	ldi	r24, 0x80	; 128
    622c:	98 e0       	ldi	r25, 0x08	; 8
    622e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    6232:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("1:   1Hz\r"));
    6236:	86 e7       	ldi	r24, 0x76	; 118
    6238:	98 e0       	ldi	r25, 0x08	; 8
    623a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    623e:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("2:   5Hz\r"));
    6242:	8c e6       	ldi	r24, 0x6C	; 108
    6244:	98 e0       	ldi	r25, 0x08	; 8
    6246:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    624a:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("3:  10Hz\r"));
    624e:	82 e6       	ldi	r24, 0x62	; 98
    6250:	98 e0       	ldi	r25, 0x08	; 8
    6252:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    6256:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("4:  50Hz\r"));
    625a:	88 e5       	ldi	r24, 0x58	; 88
    625c:	98 e0       	ldi	r25, 0x08	; 8
    625e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    6262:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("5: 100Hz\r"));
    6266:	8e e4       	ldi	r24, 0x4E	; 78
    6268:	98 e0       	ldi	r25, 0x08	; 8
    626a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    626e:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("6: 150Hz\r"));
    6272:	84 e4       	ldi	r24, 0x44	; 68
    6274:	98 e0       	ldi	r25, 0x08	; 8
    6276:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		uart_print_spaces();
    627a:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <_Z17uart_print_spacesv>
		atmega_uart::tx_string_p(PSTR("7: 200Hz\r\r\r\r\r\r\r\r\r\r\r\r\r"));
    627e:	8e e2       	ldi	r24, 0x2E	; 46
    6280:	98 e0       	ldi	r25, 0x08	; 8
    6282:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		return;
    6286:	d7 c3       	rjmp	.+1966   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Print settings.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '0' && arr.rx_array[2] == '\r')
    6288:	81 33       	cpi	r24, 0x31	; 49
    628a:	09 f0       	breq	.+2      	; 0x628e <_Z14uart_tokenizerhP8as_class+0x876>
    628c:	ab c0       	rjmp	.+342    	; 0x63e4 <_Z14uart_tokenizerhP8as_class+0x9cc>
    628e:	80 91 87 01 	lds	r24, 0x0187
    6292:	80 33       	cpi	r24, 0x30	; 48
    6294:	41 f4       	brne	.+16     	; 0x62a6 <_Z14uart_tokenizerhP8as_class+0x88e>
    6296:	90 91 88 01 	lds	r25, 0x0188
    629a:	9d 30       	cpi	r25, 0x0D	; 13
    629c:	c1 f4       	brne	.+48     	; 0x62ce <_Z14uart_tokenizerhP8as_class+0x8b6>
	{
		uart_print_settings(as);
    629e:	c8 01       	movw	r24, r16
    62a0:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <_Z19uart_print_settingsP8as_class>
		return;
    62a4:	c8 c3       	rjmp	.+1936   	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	//Change the TIA resistor.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '1' && arr.rx_array[2] == ' ')
    62a6:	81 33       	cpi	r24, 0x31	; 49
    62a8:	91 f4       	brne	.+36     	; 0x62ce <_Z14uart_tokenizerhP8as_class+0x8b6>
    62aa:	90 91 88 01 	lds	r25, 0x0188
    62ae:	90 32       	cpi	r25, 0x20	; 32
    62b0:	f9 f4       	brne	.+62     	; 0x62f0 <_Z14uart_tokenizerhP8as_class+0x8d8>
	{
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_tia_res);
    62b2:	2c e0       	ldi	r18, 0x0C	; 12
    62b4:	3a e1       	ldi	r19, 0x1A	; 26
    62b6:	40 e0       	ldi	r20, 0x00	; 0
    62b8:	50 e0       	ldi	r21, 0x00	; 0
    62ba:	b8 01       	movw	r22, r16
    62bc:	89 e8       	ldi	r24, 0x89	; 137
    62be:	91 e0       	ldi	r25, 0x01	; 1
    62c0:	0e 94 2f 2b 	call	0x565e	; 0x565e <_Z6set_u8PKhP8as_classMS1_FhhE>
    62c4:	89 83       	std	Y+1, r24	; 0x01
		
		//Update TIA resistor.
		i2c_load_res(as);
    62c6:	c8 01       	movw	r24, r16
    62c8:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_Z12i2c_load_resP8as_class>
    62cc:	ac c3       	rjmp	.+1880   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	}
	
	//Enable deposition sequence.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '2' && arr.rx_array[2] == ' ')
    62ce:	82 33       	cpi	r24, 0x32	; 50
    62d0:	79 f4       	brne	.+30     	; 0x62f0 <_Z14uart_tokenizerhP8as_class+0x8d8>
    62d2:	90 91 88 01 	lds	r25, 0x0188
    62d6:	90 32       	cpi	r25, 0x20	; 32
    62d8:	e1 f4       	brne	.+56     	; 0x6312 <_Z14uart_tokenizerhP8as_class+0x8fa>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_dep_enable);
    62da:	2b e1       	ldi	r18, 0x1B	; 27
    62dc:	3a e1       	ldi	r19, 0x1A	; 26
    62de:	40 e0       	ldi	r20, 0x00	; 0
    62e0:	50 e0       	ldi	r21, 0x00	; 0
    62e2:	b8 01       	movw	r22, r16
    62e4:	89 e8       	ldi	r24, 0x89	; 137
    62e6:	91 e0       	ldi	r25, 0x01	; 1
    62e8:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <_Z8set_boolPKhP8as_classMS1_FhbE>
    62ec:	89 83       	std	Y+1, r24	; 0x01
    62ee:	9b c3       	rjmp	.+1846   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//change deposition time.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    62f0:	83 33       	cpi	r24, 0x33	; 51
    62f2:	79 f4       	brne	.+30     	; 0x6312 <_Z14uart_tokenizerhP8as_class+0x8fa>
    62f4:	90 91 88 01 	lds	r25, 0x0188
    62f8:	90 32       	cpi	r25, 0x20	; 32
    62fa:	e1 f4       	brne	.+56     	; 0x6334 <_Z14uart_tokenizerhP8as_class+0x91c>
		errno = set_u32(&(arr.rx_array[3]), as, &as_class::set_dep_time);
    62fc:	22 e2       	ldi	r18, 0x22	; 34
    62fe:	3a e1       	ldi	r19, 0x1A	; 26
    6300:	40 e0       	ldi	r20, 0x00	; 0
    6302:	50 e0       	ldi	r21, 0x00	; 0
    6304:	b8 01       	movw	r22, r16
    6306:	89 e8       	ldi	r24, 0x89	; 137
    6308:	91 e0       	ldi	r25, 0x01	; 1
    630a:	0e 94 95 2c 	call	0x592a	; 0x592a <_Z7set_u32PKhP8as_classMS1_FhmE>
    630e:	89 83       	std	Y+1, r24	; 0x01
    6310:	8a c3       	rjmp	.+1812   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change deposition voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    6312:	84 33       	cpi	r24, 0x34	; 52
    6314:	79 f4       	brne	.+30     	; 0x6334 <_Z14uart_tokenizerhP8as_class+0x91c>
    6316:	90 91 88 01 	lds	r25, 0x0188
    631a:	90 32       	cpi	r25, 0x20	; 32
    631c:	e1 f4       	brne	.+56     	; 0x6356 <_Z14uart_tokenizerhP8as_class+0x93e>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_dep_volt);
    631e:	2f e3       	ldi	r18, 0x3F	; 63
    6320:	3a e1       	ldi	r19, 0x1A	; 26
    6322:	40 e0       	ldi	r20, 0x00	; 0
    6324:	50 e0       	ldi	r21, 0x00	; 0
    6326:	b8 01       	movw	r22, r16
    6328:	89 e8       	ldi	r24, 0x89	; 137
    632a:	91 e0       	ldi	r25, 0x01	; 1
    632c:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
    6330:	89 83       	std	Y+1, r24	; 0x01
    6332:	79 c3       	rjmp	.+1778   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change quiet time.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    6334:	85 33       	cpi	r24, 0x35	; 53
    6336:	79 f4       	brne	.+30     	; 0x6356 <_Z14uart_tokenizerhP8as_class+0x93e>
    6338:	90 91 88 01 	lds	r25, 0x0188
    633c:	90 32       	cpi	r25, 0x20	; 32
    633e:	e1 f4       	brne	.+56     	; 0x6378 <_Z14uart_tokenizerhP8as_class+0x960>
		errno = set_u32(&(arr.rx_array[3]), as, &as_class::set_quiet_time);
    6340:	24 e5       	ldi	r18, 0x54	; 84
    6342:	3a e1       	ldi	r19, 0x1A	; 26
    6344:	40 e0       	ldi	r20, 0x00	; 0
    6346:	50 e0       	ldi	r21, 0x00	; 0
    6348:	b8 01       	movw	r22, r16
    634a:	89 e8       	ldi	r24, 0x89	; 137
    634c:	91 e0       	ldi	r25, 0x01	; 1
    634e:	0e 94 95 2c 	call	0x592a	; 0x592a <_Z7set_u32PKhP8as_classMS1_FhmE>
    6352:	89 83       	std	Y+1, r24	; 0x01
    6354:	68 c3       	rjmp	.+1744   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Record deposition sequence.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    6356:	86 33       	cpi	r24, 0x36	; 54
    6358:	79 f4       	brne	.+30     	; 0x6378 <_Z14uart_tokenizerhP8as_class+0x960>
    635a:	90 91 88 01 	lds	r25, 0x0188
    635e:	90 32       	cpi	r25, 0x20	; 32
    6360:	e1 f4       	brne	.+56     	; 0x639a <_Z14uart_tokenizerhP8as_class+0x982>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_dep_rec);
    6362:	2a e6       	ldi	r18, 0x6A	; 106
    6364:	3a e1       	ldi	r19, 0x1A	; 26
    6366:	40 e0       	ldi	r20, 0x00	; 0
    6368:	50 e0       	ldi	r21, 0x00	; 0
    636a:	b8 01       	movw	r22, r16
    636c:	89 e8       	ldi	r24, 0x89	; 137
    636e:	91 e0       	ldi	r25, 0x01	; 1
    6370:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <_Z8set_boolPKhP8as_classMS1_FhbE>
    6374:	89 83       	std	Y+1, r24	; 0x01
    6376:	57 c3       	rjmp	.+1710   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change sweep start voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '7' && arr.rx_array[2] == ' ')
    6378:	87 33       	cpi	r24, 0x37	; 55
    637a:	79 f4       	brne	.+30     	; 0x639a <_Z14uart_tokenizerhP8as_class+0x982>
    637c:	90 91 88 01 	lds	r25, 0x0188
    6380:	90 32       	cpi	r25, 0x20	; 32
    6382:	e9 f4       	brne	.+58     	; 0x63be <_Z14uart_tokenizerhP8as_class+0x9a6>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_sweep_volt_start);
    6384:	21 e7       	ldi	r18, 0x71	; 113
    6386:	3a e1       	ldi	r19, 0x1A	; 26
    6388:	40 e0       	ldi	r20, 0x00	; 0
    638a:	50 e0       	ldi	r21, 0x00	; 0
    638c:	b8 01       	movw	r22, r16
    638e:	89 e8       	ldi	r24, 0x89	; 137
    6390:	91 e0       	ldi	r25, 0x01	; 1
    6392:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
    6396:	89 83       	std	Y+1, r24	; 0x01
    6398:	46 c3       	rjmp	.+1676   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change sweep end voltage.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '8' && arr.rx_array[2] == ' ')
    639a:	88 33       	cpi	r24, 0x38	; 56
    639c:	81 f4       	brne	.+32     	; 0x63be <_Z14uart_tokenizerhP8as_class+0x9a6>
    639e:	80 91 88 01 	lds	r24, 0x0188
    63a2:	80 32       	cpi	r24, 0x20	; 32
    63a4:	09 f0       	breq	.+2      	; 0x63a8 <_Z14uart_tokenizerhP8as_class+0x990>
    63a6:	3c c3       	rjmp	.+1656   	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
		errno = set_int16(&(arr.rx_array[3]), as, &as_class::set_sweep_volt_end);
    63a8:	26 e8       	ldi	r18, 0x86	; 134
    63aa:	3a e1       	ldi	r19, 0x1A	; 26
    63ac:	40 e0       	ldi	r20, 0x00	; 0
    63ae:	50 e0       	ldi	r21, 0x00	; 0
    63b0:	b8 01       	movw	r22, r16
    63b2:	89 e8       	ldi	r24, 0x89	; 137
    63b4:	91 e0       	ldi	r25, 0x01	; 1
    63b6:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
    63ba:	89 83       	std	Y+1, r24	; 0x01
    63bc:	34 c3       	rjmp	.+1640   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change sweep rate.
	else if(arr.rx_array[0] == '1' && arr.rx_array[1] == '9' && arr.rx_array[2] == ' ')
    63be:	89 33       	cpi	r24, 0x39	; 57
    63c0:	09 f0       	breq	.+2      	; 0x63c4 <_Z14uart_tokenizerhP8as_class+0x9ac>
    63c2:	2e c3       	rjmp	.+1628   	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
    63c4:	80 91 88 01 	lds	r24, 0x0188
    63c8:	80 32       	cpi	r24, 0x20	; 32
    63ca:	09 f0       	breq	.+2      	; 0x63ce <_Z14uart_tokenizerhP8as_class+0x9b6>
    63cc:	29 c3       	rjmp	.+1618   	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
		errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_sweep_rate);
    63ce:	2b e9       	ldi	r18, 0x9B	; 155
    63d0:	3a e1       	ldi	r19, 0x1A	; 26
    63d2:	40 e0       	ldi	r20, 0x00	; 0
    63d4:	50 e0       	ldi	r21, 0x00	; 0
    63d6:	b8 01       	movw	r22, r16
    63d8:	89 e8       	ldi	r24, 0x89	; 137
    63da:	91 e0       	ldi	r25, 0x01	; 1
    63dc:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    63e0:	89 83       	std	Y+1, r24	; 0x01
    63e2:	21 c3       	rjmp	.+1602   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change if sweep function is cyclic.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '0' && arr.rx_array[2] == ' ')
    63e4:	82 33       	cpi	r24, 0x32	; 50
    63e6:	09 f0       	breq	.+2      	; 0x63ea <_Z14uart_tokenizerhP8as_class+0x9d2>
    63e8:	02 c2       	rjmp	.+1028   	; 0x67ee <_Z14uart_tokenizerhP8as_class+0xdd6>
    63ea:	80 91 87 01 	lds	r24, 0x0187
    63ee:	80 33       	cpi	r24, 0x30	; 48
    63f0:	79 f4       	brne	.+30     	; 0x6410 <_Z14uart_tokenizerhP8as_class+0x9f8>
    63f2:	90 91 88 01 	lds	r25, 0x0188
    63f6:	90 32       	cpi	r25, 0x20	; 32
    63f8:	e9 f4       	brne	.+58     	; 0x6434 <_Z14uart_tokenizerhP8as_class+0xa1c>
		errno = set_bool(&(arr.rx_array[3]), as, &as_class::set_sweep_cyclic);
    63fa:	2f ea       	ldi	r18, 0xAF	; 175
    63fc:	3a e1       	ldi	r19, 0x1A	; 26
    63fe:	40 e0       	ldi	r20, 0x00	; 0
    6400:	50 e0       	ldi	r21, 0x00	; 0
    6402:	b8 01       	movw	r22, r16
    6404:	89 e8       	ldi	r24, 0x89	; 137
    6406:	91 e0       	ldi	r25, 0x01	; 1
    6408:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <_Z8set_boolPKhP8as_classMS1_FhbE>
    640c:	89 83       	std	Y+1, r24	; 0x01
    640e:	0b c3       	rjmp	.+1558   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change number of sweep cycles.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '1' && arr.rx_array[2] == ' ')
    6410:	81 33       	cpi	r24, 0x31	; 49
    6412:	81 f4       	brne	.+32     	; 0x6434 <_Z14uart_tokenizerhP8as_class+0xa1c>
    6414:	90 91 88 01 	lds	r25, 0x0188
    6418:	90 32       	cpi	r25, 0x20	; 32
    641a:	09 f0       	breq	.+2      	; 0x641e <_Z14uart_tokenizerhP8as_class+0xa06>
    641c:	57 c0       	rjmp	.+174    	; 0x64cc <_Z14uart_tokenizerhP8as_class+0xab4>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_sweep_cycles);
    641e:	26 eb       	ldi	r18, 0xB6	; 182
    6420:	3a e1       	ldi	r19, 0x1A	; 26
    6422:	40 e0       	ldi	r20, 0x00	; 0
    6424:	50 e0       	ldi	r21, 0x00	; 0
    6426:	b8 01       	movw	r22, r16
    6428:	89 e8       	ldi	r24, 0x89	; 137
    642a:	91 e0       	ldi	r25, 0x01	; 1
    642c:	0e 94 2f 2b 	call	0x565e	; 0x565e <_Z6set_u8PKhP8as_classMS1_FhhE>
    6430:	89 83       	std	Y+1, r24	; 0x01
    6432:	f9 c2       	rjmp	.+1522   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change differential pulse start voltage.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '2' && arr.rx_array[2] == ' ')
    6434:	82 33       	cpi	r24, 0x32	; 50
    6436:	09 f0       	breq	.+2      	; 0x643a <_Z14uart_tokenizerhP8as_class+0xa22>
    6438:	49 c0       	rjmp	.+146    	; 0x64cc <_Z14uart_tokenizerhP8as_class+0xab4>
    643a:	90 91 88 01 	lds	r25, 0x0188
    643e:	90 32       	cpi	r25, 0x20	; 32
    6440:	09 f0       	breq	.+2      	; 0x6444 <_Z14uart_tokenizerhP8as_class+0xa2c>
    6442:	90 c0       	rjmp	.+288    	; 0x6564 <_Z14uart_tokenizerhP8as_class+0xb4c>
	{
		int32_t start_v;
		
		//Attempt to convert user input to number.
		start_v = string_to_int(&arr.rx_array[3], &errno);
    6444:	4d e0       	ldi	r20, 0x0D	; 13
    6446:	be 01       	movw	r22, r28
    6448:	6f 5f       	subi	r22, 0xFF	; 255
    644a:	7f 4f       	sbci	r23, 0xFF	; 255
    644c:	89 e8       	ldi	r24, 0x89	; 137
    644e:	91 e0       	ldi	r25, 0x01	; 1
    6450:	0e 94 2b 24 	call	0x4856	; 0x4856 <_Z13string_to_intPKhPhh>
    6454:	6b 01       	movw	r12, r22
    6456:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    6458:	89 81       	ldd	r24, Y+1	; 0x01
    645a:	88 23       	and	r24, r24
    645c:	19 f0       	breq	.+6      	; 0x6464 <_Z14uart_tokenizerhP8as_class+0xa4c>
		{
			errno = ER_ERROR;	
    645e:	81 e0       	ldi	r24, 0x01	; 1
    6460:	89 83       	std	Y+1, r24	; 0x01
    6462:	e4 c2       	rjmp	.+1480   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		//Check to make sure range is valid.
		else if(start_v + as->get_dif_volt_pls() > DIF_VOLT_MAX)
    6464:	c8 01       	movw	r24, r16
    6466:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    646a:	aa 27       	eor	r26, r26
    646c:	97 fd       	sbrc	r25, 7
    646e:	a0 95       	com	r26
    6470:	ba 2f       	mov	r27, r26
    6472:	8c 0d       	add	r24, r12
    6474:	9d 1d       	adc	r25, r13
    6476:	ae 1d       	adc	r26, r14
    6478:	bf 1d       	adc	r27, r15
    647a:	83 37       	cpi	r24, 0x73	; 115
    647c:	96 40       	sbci	r25, 0x06	; 6
    647e:	a1 05       	cpc	r26, r1
    6480:	b1 05       	cpc	r27, r1
    6482:	3c f0       	brlt	.+14     	; 0x6492 <_Z14uart_tokenizerhP8as_class+0xa7a>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp High "));
    6484:	8e e1       	ldi	r24, 0x1E	; 30
    6486:	98 e0       	ldi	r25, 0x08	; 8
    6488:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	89 83       	std	Y+1, r24	; 0x01
    6490:	cd c2       	rjmp	.+1434   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else if(start_v + as->get_dif_volt_pls() < DIF_VOLT_MIN)
    6492:	c8 01       	movw	r24, r16
    6494:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6498:	aa 27       	eor	r26, r26
    649a:	97 fd       	sbrc	r25, 7
    649c:	a0 95       	com	r26
    649e:	ba 2f       	mov	r27, r26
    64a0:	8c 0d       	add	r24, r12
    64a2:	9d 1d       	adc	r25, r13
    64a4:	ae 1d       	adc	r26, r14
    64a6:	bf 1d       	adc	r27, r15
    64a8:	8e 38       	cpi	r24, 0x8E	; 142
    64aa:	99 4f       	sbci	r25, 0xF9	; 249
    64ac:	af 4f       	sbci	r26, 0xFF	; 255
    64ae:	bf 4f       	sbci	r27, 0xFF	; 255
    64b0:	3c f4       	brge	.+14     	; 0x64c0 <_Z14uart_tokenizerhP8as_class+0xaa8>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp Low "));
    64b2:	8f e0       	ldi	r24, 0x0F	; 15
    64b4:	98 e0       	ldi	r25, 0x08	; 8
    64b6:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    64ba:	81 e0       	ldi	r24, 0x01	; 1
    64bc:	89 83       	std	Y+1, r24	; 0x01
    64be:	b6 c2       	rjmp	.+1388   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else
		{
			errno = as->set_dif_volt_start(start_v);
    64c0:	b6 01       	movw	r22, r12
    64c2:	c8 01       	movw	r24, r16
    64c4:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN8as_class18set_dif_volt_startEi>
    64c8:	89 83       	std	Y+1, r24	; 0x01
    64ca:	ad c2       	rjmp	.+1370   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
		}
	}
	
	//Change differential pulse end voltage.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '3' && arr.rx_array[2] == ' ')
    64cc:	83 33       	cpi	r24, 0x33	; 51
    64ce:	09 f0       	breq	.+2      	; 0x64d2 <_Z14uart_tokenizerhP8as_class+0xaba>
    64d0:	49 c0       	rjmp	.+146    	; 0x6564 <_Z14uart_tokenizerhP8as_class+0xb4c>
    64d2:	90 91 88 01 	lds	r25, 0x0188
    64d6:	90 32       	cpi	r25, 0x20	; 32
    64d8:	09 f0       	breq	.+2      	; 0x64dc <_Z14uart_tokenizerhP8as_class+0xac4>
    64da:	56 c0       	rjmp	.+172    	; 0x6588 <_Z14uart_tokenizerhP8as_class+0xb70>
	{
		int32_t end_v;
		
		//Attempt to convert user input to number.
		end_v = string_to_int(&arr.rx_array[3], &errno);
    64dc:	4d e0       	ldi	r20, 0x0D	; 13
    64de:	be 01       	movw	r22, r28
    64e0:	6f 5f       	subi	r22, 0xFF	; 255
    64e2:	7f 4f       	sbci	r23, 0xFF	; 255
    64e4:	89 e8       	ldi	r24, 0x89	; 137
    64e6:	91 e0       	ldi	r25, 0x01	; 1
    64e8:	0e 94 2b 24 	call	0x4856	; 0x4856 <_Z13string_to_intPKhPhh>
    64ec:	6b 01       	movw	r12, r22
    64ee:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    64f0:	89 81       	ldd	r24, Y+1	; 0x01
    64f2:	88 23       	and	r24, r24
    64f4:	19 f0       	breq	.+6      	; 0x64fc <_Z14uart_tokenizerhP8as_class+0xae4>
		{
			errno = ER_ERROR;
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	89 83       	std	Y+1, r24	; 0x01
    64fa:	98 c2       	rjmp	.+1328   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		//Check to make sure range is valid.
		else if(end_v + as->get_dif_volt_pls() > DIF_VOLT_MAX)
    64fc:	c8 01       	movw	r24, r16
    64fe:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6502:	aa 27       	eor	r26, r26
    6504:	97 fd       	sbrc	r25, 7
    6506:	a0 95       	com	r26
    6508:	ba 2f       	mov	r27, r26
    650a:	8c 0d       	add	r24, r12
    650c:	9d 1d       	adc	r25, r13
    650e:	ae 1d       	adc	r26, r14
    6510:	bf 1d       	adc	r27, r15
    6512:	83 37       	cpi	r24, 0x73	; 115
    6514:	96 40       	sbci	r25, 0x06	; 6
    6516:	a1 05       	cpc	r26, r1
    6518:	b1 05       	cpc	r27, r1
    651a:	3c f0       	brlt	.+14     	; 0x652a <_Z14uart_tokenizerhP8as_class+0xb12>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp High "));
    651c:	81 e0       	ldi	r24, 0x01	; 1
    651e:	98 e0       	ldi	r25, 0x08	; 8
    6520:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    6524:	81 e0       	ldi	r24, 0x01	; 1
    6526:	89 83       	std	Y+1, r24	; 0x01
    6528:	81 c2       	rjmp	.+1282   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else if(end_v + as->get_dif_volt_pls() < DIF_VOLT_MIN)
    652a:	c8 01       	movw	r24, r16
    652c:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6530:	aa 27       	eor	r26, r26
    6532:	97 fd       	sbrc	r25, 7
    6534:	a0 95       	com	r26
    6536:	ba 2f       	mov	r27, r26
    6538:	8c 0d       	add	r24, r12
    653a:	9d 1d       	adc	r25, r13
    653c:	ae 1d       	adc	r26, r14
    653e:	bf 1d       	adc	r27, r15
    6540:	8e 38       	cpi	r24, 0x8E	; 142
    6542:	99 4f       	sbci	r25, 0xF9	; 249
    6544:	af 4f       	sbci	r26, 0xFF	; 255
    6546:	bf 4f       	sbci	r27, 0xFF	; 255
    6548:	3c f4       	brge	.+14     	; 0x6558 <_Z14uart_tokenizerhP8as_class+0xb40>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp Low "));
    654a:	84 ef       	ldi	r24, 0xF4	; 244
    654c:	97 e0       	ldi	r25, 0x07	; 7
    654e:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    6552:	81 e0       	ldi	r24, 0x01	; 1
    6554:	89 83       	std	Y+1, r24	; 0x01
    6556:	6a c2       	rjmp	.+1236   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else
		{
			errno = as->set_dif_volt_end(end_v);
    6558:	b6 01       	movw	r22, r12
    655a:	c8 01       	movw	r24, r16
    655c:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <_ZN8as_class16set_dif_volt_endEi>
    6560:	89 83       	std	Y+1, r24	; 0x01
    6562:	61 c2       	rjmp	.+1218   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
		}
	}
	
	//Change differential pulse increment.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    6564:	84 33       	cpi	r24, 0x34	; 52
    6566:	81 f4       	brne	.+32     	; 0x6588 <_Z14uart_tokenizerhP8as_class+0xb70>
    6568:	90 91 88 01 	lds	r25, 0x0188
    656c:	90 32       	cpi	r25, 0x20	; 32
    656e:	09 f0       	breq	.+2      	; 0x6572 <_Z14uart_tokenizerhP8as_class+0xb5a>
    6570:	85 c0       	rjmp	.+266    	; 0x667c <_Z14uart_tokenizerhP8as_class+0xc64>
	errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_dif_volt_inc);
    6572:	24 e0       	ldi	r18, 0x04	; 4
    6574:	3b e1       	ldi	r19, 0x1B	; 27
    6576:	40 e0       	ldi	r20, 0x00	; 0
    6578:	50 e0       	ldi	r21, 0x00	; 0
    657a:	b8 01       	movw	r22, r16
    657c:	89 e8       	ldi	r24, 0x89	; 137
    657e:	91 e0       	ldi	r25, 0x01	; 1
    6580:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    6584:	89 83       	std	Y+1, r24	; 0x01
    6586:	4f c2       	rjmp	.+1182   	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Change differential pulse amplitude.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '5' && arr.rx_array[2] == ' ')
    6588:	85 33       	cpi	r24, 0x35	; 53
    658a:	09 f0       	breq	.+2      	; 0x658e <_Z14uart_tokenizerhP8as_class+0xb76>
    658c:	77 c0       	rjmp	.+238    	; 0x667c <_Z14uart_tokenizerhP8as_class+0xc64>
    658e:	90 91 88 01 	lds	r25, 0x0188
    6592:	90 32       	cpi	r25, 0x20	; 32
    6594:	09 f0       	breq	.+2      	; 0x6598 <_Z14uart_tokenizerhP8as_class+0xb80>
    6596:	a5 c0       	rjmp	.+330    	; 0x66e2 <_Z14uart_tokenizerhP8as_class+0xcca>
	{
		int32_t amp;
		
		//Attempt to convert user input to number.
		amp = string_to_int(&arr.rx_array[3], &errno);
    6598:	4d e0       	ldi	r20, 0x0D	; 13
    659a:	be 01       	movw	r22, r28
    659c:	6f 5f       	subi	r22, 0xFF	; 255
    659e:	7f 4f       	sbci	r23, 0xFF	; 255
    65a0:	89 e8       	ldi	r24, 0x89	; 137
    65a2:	91 e0       	ldi	r25, 0x01	; 1
    65a4:	0e 94 2b 24 	call	0x4856	; 0x4856 <_Z13string_to_intPKhPhh>
    65a8:	6b 01       	movw	r12, r22
    65aa:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    65ac:	89 81       	ldd	r24, Y+1	; 0x01
    65ae:	88 23       	and	r24, r24
    65b0:	19 f0       	breq	.+6      	; 0x65b8 <_Z14uart_tokenizerhP8as_class+0xba0>
		{
			errno = ER_ERROR;
    65b2:	81 e0       	ldi	r24, 0x01	; 1
    65b4:	89 83       	std	Y+1, r24	; 0x01
    65b6:	3a c2       	rjmp	.+1140   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		//Check to make sure range is valid.
		else if(as->get_dif_volt_start() + amp > DIF_VOLT_MAX)
    65b8:	c8 01       	movw	r24, r16
    65ba:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    65be:	aa 27       	eor	r26, r26
    65c0:	97 fd       	sbrc	r25, 7
    65c2:	a0 95       	com	r26
    65c4:	ba 2f       	mov	r27, r26
    65c6:	8c 0d       	add	r24, r12
    65c8:	9d 1d       	adc	r25, r13
    65ca:	ae 1d       	adc	r26, r14
    65cc:	bf 1d       	adc	r27, r15
    65ce:	83 37       	cpi	r24, 0x73	; 115
    65d0:	96 40       	sbci	r25, 0x06	; 6
    65d2:	a1 05       	cpc	r26, r1
    65d4:	b1 05       	cpc	r27, r1
    65d6:	3c f0       	brlt	.+14     	; 0x65e6 <_Z14uart_tokenizerhP8as_class+0xbce>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp High "));
    65d8:	84 ee       	ldi	r24, 0xE4	; 228
    65da:	97 e0       	ldi	r25, 0x07	; 7
    65dc:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    65e0:	81 e0       	ldi	r24, 0x01	; 1
    65e2:	89 83       	std	Y+1, r24	; 0x01
    65e4:	23 c2       	rjmp	.+1094   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else if(as->get_dif_volt_start() + amp < DIF_VOLT_MIN)
    65e6:	c8 01       	movw	r24, r16
    65e8:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    65ec:	aa 27       	eor	r26, r26
    65ee:	97 fd       	sbrc	r25, 7
    65f0:	a0 95       	com	r26
    65f2:	ba 2f       	mov	r27, r26
    65f4:	8c 0d       	add	r24, r12
    65f6:	9d 1d       	adc	r25, r13
    65f8:	ae 1d       	adc	r26, r14
    65fa:	bf 1d       	adc	r27, r15
    65fc:	8e 38       	cpi	r24, 0x8E	; 142
    65fe:	99 4f       	sbci	r25, 0xF9	; 249
    6600:	af 4f       	sbci	r26, 0xFF	; 255
    6602:	bf 4f       	sbci	r27, 0xFF	; 255
    6604:	3c f4       	brge	.+14     	; 0x6614 <_Z14uart_tokenizerhP8as_class+0xbfc>
		{
			atmega_uart::tx_string_p(PSTR("Start+Amp Low "));
    6606:	85 ed       	ldi	r24, 0xD5	; 213
    6608:	97 e0       	ldi	r25, 0x07	; 7
    660a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    660e:	81 e0       	ldi	r24, 0x01	; 1
    6610:	89 83       	std	Y+1, r24	; 0x01
    6612:	0c c2       	rjmp	.+1048   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else if(as->get_dif_volt_end() + amp > DIF_VOLT_MAX)
    6614:	c8 01       	movw	r24, r16
    6616:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    661a:	aa 27       	eor	r26, r26
    661c:	97 fd       	sbrc	r25, 7
    661e:	a0 95       	com	r26
    6620:	ba 2f       	mov	r27, r26
    6622:	8c 0d       	add	r24, r12
    6624:	9d 1d       	adc	r25, r13
    6626:	ae 1d       	adc	r26, r14
    6628:	bf 1d       	adc	r27, r15
    662a:	83 37       	cpi	r24, 0x73	; 115
    662c:	96 40       	sbci	r25, 0x06	; 6
    662e:	a1 05       	cpc	r26, r1
    6630:	b1 05       	cpc	r27, r1
    6632:	3c f0       	brlt	.+14     	; 0x6642 <_Z14uart_tokenizerhP8as_class+0xc2a>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp High "));
    6634:	87 ec       	ldi	r24, 0xC7	; 199
    6636:	97 e0       	ldi	r25, 0x07	; 7
    6638:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    663c:	81 e0       	ldi	r24, 0x01	; 1
    663e:	89 83       	std	Y+1, r24	; 0x01
    6640:	f5 c1       	rjmp	.+1002   	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else if(as->get_dif_volt_end() + amp < DIF_VOLT_MIN)
    6642:	c8 01       	movw	r24, r16
    6644:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    6648:	aa 27       	eor	r26, r26
    664a:	97 fd       	sbrc	r25, 7
    664c:	a0 95       	com	r26
    664e:	ba 2f       	mov	r27, r26
    6650:	8c 0d       	add	r24, r12
    6652:	9d 1d       	adc	r25, r13
    6654:	ae 1d       	adc	r26, r14
    6656:	bf 1d       	adc	r27, r15
    6658:	8e 38       	cpi	r24, 0x8E	; 142
    665a:	99 4f       	sbci	r25, 0xF9	; 249
    665c:	af 4f       	sbci	r26, 0xFF	; 255
    665e:	bf 4f       	sbci	r27, 0xFF	; 255
    6660:	3c f4       	brge	.+14     	; 0x6670 <_Z14uart_tokenizerhP8as_class+0xc58>
		{
			atmega_uart::tx_string_p(PSTR("End+Amp Low "));
    6662:	8a eb       	ldi	r24, 0xBA	; 186
    6664:	97 e0       	ldi	r25, 0x07	; 7
    6666:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    666a:	81 e0       	ldi	r24, 0x01	; 1
    666c:	89 83       	std	Y+1, r24	; 0x01
    666e:	de c1       	rjmp	.+956    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else
		{
			errno = as->set_dif_volt_pls(amp);
    6670:	b6 01       	movw	r22, r12
    6672:	c8 01       	movw	r24, r16
    6674:	0e 94 ef 1a 	call	0x35de	; 0x35de <_ZN8as_class16set_dif_volt_plsEi>
    6678:	89 83       	std	Y+1, r24	; 0x01
    667a:	d5 c1       	rjmp	.+938    	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
		}
	}

	//Change differential pulse pre-pulse time.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '6' && arr.rx_array[2] == ' ')
    667c:	86 33       	cpi	r24, 0x36	; 54
    667e:	89 f5       	brne	.+98     	; 0x66e2 <_Z14uart_tokenizerhP8as_class+0xcca>
    6680:	90 91 88 01 	lds	r25, 0x0188
    6684:	90 32       	cpi	r25, 0x20	; 32
    6686:	09 f0       	breq	.+2      	; 0x668a <_Z14uart_tokenizerhP8as_class+0xc72>
    6688:	5f c0       	rjmp	.+190    	; 0x6748 <_Z14uart_tokenizerhP8as_class+0xd30>
	{
		uint32_t temp;
		
		//Attempt to convert user input to number.
		temp = string_to_u32(&arr.rx_array[3], &errno);
    668a:	4d e0       	ldi	r20, 0x0D	; 13
    668c:	be 01       	movw	r22, r28
    668e:	6f 5f       	subi	r22, 0xFF	; 255
    6690:	7f 4f       	sbci	r23, 0xFF	; 255
    6692:	89 e8       	ldi	r24, 0x89	; 137
    6694:	91 e0       	ldi	r25, 0x01	; 1
    6696:	0e 94 47 23 	call	0x468e	; 0x468e <_Z13string_to_u32PKhPhh>
    669a:	6b 01       	movw	r12, r22
    669c:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    669e:	89 81       	ldd	r24, Y+1	; 0x01
    66a0:	88 23       	and	r24, r24
    66a2:	19 f0       	breq	.+6      	; 0x66aa <_Z14uart_tokenizerhP8as_class+0xc92>
			errno = ER_ERROR;
    66a4:	81 e0       	ldi	r24, 0x01	; 1
    66a6:	89 83       	std	Y+1, r24	; 0x01
    66a8:	c1 c1       	rjmp	.+898    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		//Check to make sure range is valid.
		else if(temp < as->get_dif_time_win())
    66aa:	c8 01       	movw	r24, r16
    66ac:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN8as_class16get_dif_time_winEv>
    66b0:	a0 e0       	ldi	r26, 0x00	; 0
    66b2:	b0 e0       	ldi	r27, 0x00	; 0
    66b4:	c8 16       	cp	r12, r24
    66b6:	d9 06       	cpc	r13, r25
    66b8:	ea 06       	cpc	r14, r26
    66ba:	fb 06       	cpc	r15, r27
    66bc:	38 f4       	brcc	.+14     	; 0x66cc <_Z14uart_tokenizerhP8as_class+0xcb4>
		{
			atmega_uart::tx_string_p(PSTR("Pre-pulse < Width "));
    66be:	87 ea       	ldi	r24, 0xA7	; 167
    66c0:	97 e0       	ldi	r25, 0x07	; 7
    66c2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    66c6:	81 e0       	ldi	r24, 0x01	; 1
    66c8:	89 83       	std	Y+1, r24	; 0x01
    66ca:	b0 c1       	rjmp	.+864    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else		
			errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_dif_time_pre);
    66cc:	28 e1       	ldi	r18, 0x18	; 24
    66ce:	3b e1       	ldi	r19, 0x1B	; 27
    66d0:	40 e0       	ldi	r20, 0x00	; 0
    66d2:	50 e0       	ldi	r21, 0x00	; 0
    66d4:	b8 01       	movw	r22, r16
    66d6:	89 e8       	ldi	r24, 0x89	; 137
    66d8:	91 e0       	ldi	r25, 0x01	; 1
    66da:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    66de:	89 83       	std	Y+1, r24	; 0x01
    66e0:	a2 c1       	rjmp	.+836    	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	}
		
	//Change differential pulse time.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '7' && arr.rx_array[2] == ' ')
    66e2:	87 33       	cpi	r24, 0x37	; 55
    66e4:	89 f5       	brne	.+98     	; 0x6748 <_Z14uart_tokenizerhP8as_class+0xd30>
    66e6:	90 91 88 01 	lds	r25, 0x0188
    66ea:	90 32       	cpi	r25, 0x20	; 32
    66ec:	09 f0       	breq	.+2      	; 0x66f0 <_Z14uart_tokenizerhP8as_class+0xcd8>
    66ee:	71 c0       	rjmp	.+226    	; 0x67d2 <_Z14uart_tokenizerhP8as_class+0xdba>
	{
		uint32_t temp;
		
		//Attempt to convert user input to number.
		temp = string_to_u32(&arr.rx_array[3], &errno);
    66f0:	4d e0       	ldi	r20, 0x0D	; 13
    66f2:	be 01       	movw	r22, r28
    66f4:	6f 5f       	subi	r22, 0xFF	; 255
    66f6:	7f 4f       	sbci	r23, 0xFF	; 255
    66f8:	89 e8       	ldi	r24, 0x89	; 137
    66fa:	91 e0       	ldi	r25, 0x01	; 1
    66fc:	0e 94 47 23 	call	0x468e	; 0x468e <_Z13string_to_u32PKhPhh>
    6700:	6b 01       	movw	r12, r22
    6702:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    6704:	89 81       	ldd	r24, Y+1	; 0x01
    6706:	88 23       	and	r24, r24
    6708:	19 f0       	breq	.+6      	; 0x6710 <_Z14uart_tokenizerhP8as_class+0xcf8>
			errno = ER_ERROR;
    670a:	81 e0       	ldi	r24, 0x01	; 1
    670c:	89 83       	std	Y+1, r24	; 0x01
    670e:	8e c1       	rjmp	.+796    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		//Check to make sure range is valid.
		else if(temp < as->get_dif_time_win())
    6710:	c8 01       	movw	r24, r16
    6712:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN8as_class16get_dif_time_winEv>
    6716:	a0 e0       	ldi	r26, 0x00	; 0
    6718:	b0 e0       	ldi	r27, 0x00	; 0
    671a:	c8 16       	cp	r12, r24
    671c:	d9 06       	cpc	r13, r25
    671e:	ea 06       	cpc	r14, r26
    6720:	fb 06       	cpc	r15, r27
    6722:	38 f4       	brcc	.+14     	; 0x6732 <_Z14uart_tokenizerhP8as_class+0xd1a>
		{
			atmega_uart::tx_string_p(PSTR("Pulse < Width "));
    6724:	88 e9       	ldi	r24, 0x98	; 152
    6726:	97 e0       	ldi	r25, 0x07	; 7
    6728:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    672c:	81 e0       	ldi	r24, 0x01	; 1
    672e:	89 83       	std	Y+1, r24	; 0x01
    6730:	7d c1       	rjmp	.+762    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else
			errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_dif_time_pls);
    6732:	2c e2       	ldi	r18, 0x2C	; 44
    6734:	3b e1       	ldi	r19, 0x1B	; 27
    6736:	40 e0       	ldi	r20, 0x00	; 0
    6738:	50 e0       	ldi	r21, 0x00	; 0
    673a:	b8 01       	movw	r22, r16
    673c:	89 e8       	ldi	r24, 0x89	; 137
    673e:	91 e0       	ldi	r25, 0x01	; 1
    6740:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    6744:	89 83       	std	Y+1, r24	; 0x01
    6746:	6f c1       	rjmp	.+734    	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	}
	
	//Change differential sampling window width.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '8' && arr.rx_array[2] == ' ')
    6748:	88 33       	cpi	r24, 0x38	; 56
    674a:	09 f0       	breq	.+2      	; 0x674e <_Z14uart_tokenizerhP8as_class+0xd36>
    674c:	42 c0       	rjmp	.+132    	; 0x67d2 <_Z14uart_tokenizerhP8as_class+0xdba>
    674e:	80 91 88 01 	lds	r24, 0x0188
    6752:	80 32       	cpi	r24, 0x20	; 32
    6754:	09 f0       	breq	.+2      	; 0x6758 <_Z14uart_tokenizerhP8as_class+0xd40>
    6756:	64 c1       	rjmp	.+712    	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
	{
		uint32_t temp;
		
		//Attempt to convert user input to number.
		temp = string_to_u32(&arr.rx_array[3], &errno);
    6758:	4d e0       	ldi	r20, 0x0D	; 13
    675a:	be 01       	movw	r22, r28
    675c:	6f 5f       	subi	r22, 0xFF	; 255
    675e:	7f 4f       	sbci	r23, 0xFF	; 255
    6760:	89 e8       	ldi	r24, 0x89	; 137
    6762:	91 e0       	ldi	r25, 0x01	; 1
    6764:	0e 94 47 23 	call	0x468e	; 0x468e <_Z13string_to_u32PKhPhh>
    6768:	6b 01       	movw	r12, r22
    676a:	7c 01       	movw	r14, r24
		
		if(errno)//Exit if invalid integer detected.
    676c:	89 81       	ldd	r24, Y+1	; 0x01
    676e:	88 23       	and	r24, r24
    6770:	19 f0       	breq	.+6      	; 0x6778 <_Z14uart_tokenizerhP8as_class+0xd60>
			errno = ER_ERROR;
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	89 83       	std	Y+1, r24	; 0x01
    6776:	5a c1       	rjmp	.+692    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		//Check to make sure range is valid.
		else if(temp > as->get_dif_time_pre())
    6778:	c8 01       	movw	r24, r16
    677a:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN8as_class16get_dif_time_preEv>
    677e:	a0 e0       	ldi	r26, 0x00	; 0
    6780:	b0 e0       	ldi	r27, 0x00	; 0
    6782:	8c 15       	cp	r24, r12
    6784:	9d 05       	cpc	r25, r13
    6786:	ae 05       	cpc	r26, r14
    6788:	bf 05       	cpc	r27, r15
    678a:	38 f4       	brcc	.+14     	; 0x679a <_Z14uart_tokenizerhP8as_class+0xd82>
		{
			atmega_uart::tx_string_p(PSTR("Width > Pre-pulse "));
    678c:	85 e8       	ldi	r24, 0x85	; 133
    678e:	97 e0       	ldi	r25, 0x07	; 7
    6790:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	89 83       	std	Y+1, r24	; 0x01
    6798:	49 c1       	rjmp	.+658    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else if(temp > as->get_dif_time_pls())
    679a:	c8 01       	movw	r24, r16
    679c:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN8as_class16get_dif_time_plsEv>
    67a0:	a0 e0       	ldi	r26, 0x00	; 0
    67a2:	b0 e0       	ldi	r27, 0x00	; 0
    67a4:	8c 15       	cp	r24, r12
    67a6:	9d 05       	cpc	r25, r13
    67a8:	ae 05       	cpc	r26, r14
    67aa:	bf 05       	cpc	r27, r15
    67ac:	38 f4       	brcc	.+14     	; 0x67bc <_Z14uart_tokenizerhP8as_class+0xda4>
		{
			atmega_uart::tx_string_p(PSTR("Width > Pulse "));
    67ae:	86 e7       	ldi	r24, 0x76	; 118
    67b0:	97 e0       	ldi	r25, 0x07	; 7
    67b2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			errno = ER_ERROR;
    67b6:	81 e0       	ldi	r24, 0x01	; 1
    67b8:	89 83       	std	Y+1, r24	; 0x01
    67ba:	38 c1       	rjmp	.+624    	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
		}
		else
			errno = set_u16(&(arr.rx_array[3]), as, &as_class::set_dif_time_win);
    67bc:	20 e4       	ldi	r18, 0x40	; 64
    67be:	3b e1       	ldi	r19, 0x1B	; 27
    67c0:	40 e0       	ldi	r20, 0x00	; 0
    67c2:	50 e0       	ldi	r21, 0x00	; 0
    67c4:	b8 01       	movw	r22, r16
    67c6:	89 e8       	ldi	r24, 0x89	; 137
    67c8:	91 e0       	ldi	r25, 0x01	; 1
    67ca:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    67ce:	89 83       	std	Y+1, r24	; 0x01
    67d0:	2a c1       	rjmp	.+596    	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	}
	
	//Append arbitrary waveform data to end of saved list.
	else if(arr.rx_array[0] == '2' && arr.rx_array[1] == '9' && arr.rx_array[2] == ' ')
    67d2:	89 33       	cpi	r24, 0x39	; 57
    67d4:	09 f0       	breq	.+2      	; 0x67d8 <_Z14uart_tokenizerhP8as_class+0xdc0>
    67d6:	24 c1       	rjmp	.+584    	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
    67d8:	80 91 88 01 	lds	r24, 0x0188
    67dc:	80 32       	cpi	r24, 0x20	; 32
    67de:	09 f0       	breq	.+2      	; 0x67e2 <_Z14uart_tokenizerhP8as_class+0xdca>
    67e0:	1f c1       	rjmp	.+574    	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
		errno = arb_append(&(arr.rx_array[3]));
    67e2:	89 e8       	ldi	r24, 0x89	; 137
    67e4:	91 e0       	ldi	r25, 0x01	; 1
    67e6:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <_Z10arb_appendPKh>
    67ea:	89 83       	std	Y+1, r24	; 0x01
    67ec:	1c c1       	rjmp	.+568    	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Replace arbitrary waveform data at specified location.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '0' && arr.rx_array[2] == ' ')
    67ee:	83 33       	cpi	r24, 0x33	; 51
    67f0:	09 f0       	breq	.+2      	; 0x67f4 <_Z14uart_tokenizerhP8as_class+0xddc>
    67f2:	16 c1       	rjmp	.+556    	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
    67f4:	80 91 87 01 	lds	r24, 0x0187
    67f8:	80 33       	cpi	r24, 0x30	; 48
    67fa:	51 f4       	brne	.+20     	; 0x6810 <_Z14uart_tokenizerhP8as_class+0xdf8>
    67fc:	90 91 88 01 	lds	r25, 0x0188
    6800:	90 32       	cpi	r25, 0x20	; 32
    6802:	01 f5       	brne	.+64     	; 0x6844 <_Z14uart_tokenizerhP8as_class+0xe2c>
		errno = arb_replace(&(arr.rx_array[3]));
    6804:	89 e8       	ldi	r24, 0x89	; 137
    6806:	91 e0       	ldi	r25, 0x01	; 1
    6808:	0e 94 ab 29 	call	0x5356	; 0x5356 <_Z11arb_replacePKh>
    680c:	89 83       	std	Y+1, r24	; 0x01
    680e:	0b c1       	rjmp	.+534    	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	//Delete last entry in arbitrary waveform data list.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '1' && arr.rx_array[2] == '\r')
    6810:	81 33       	cpi	r24, 0x31	; 49
    6812:	c1 f4       	brne	.+48     	; 0x6844 <_Z14uart_tokenizerhP8as_class+0xe2c>
    6814:	90 91 88 01 	lds	r25, 0x0188
    6818:	9d 30       	cpi	r25, 0x0D	; 13
    681a:	29 f5       	brne	.+74     	; 0x6866 <_Z14uart_tokenizerhP8as_class+0xe4e>
	{
		uint8_t entries;
		
		//Get number of entries already in list.
		entries = fram1_read_word(ARB_NUM);
    681c:	62 ed       	ldi	r22, 0xD2	; 210
    681e:	7b ef       	ldi	r23, 0xFB	; 251
    6820:	81 e0       	ldi	r24, 0x01	; 1
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
		
		if(entries)//decrement and save.
    6828:	88 23       	and	r24, r24
    682a:	51 f0       	breq	.+20     	; 0x6840 <_Z14uart_tokenizerhP8as_class+0xe28>
    682c:	99 27       	eor	r25, r25
			fram1_write_word(ARB_NUM, entries - 1);
    682e:	ac 01       	movw	r20, r24
    6830:	41 50       	subi	r20, 0x01	; 1
    6832:	51 09       	sbc	r21, r1
    6834:	62 ed       	ldi	r22, 0xD2	; 210
    6836:	7b ef       	ldi	r23, 0xFB	; 251
    6838:	81 e0       	ldi	r24, 0x01	; 1
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
		
		errno = ER_NO_ERROR;
    6840:	19 82       	std	Y+1, r1	; 0x01
    6842:	f7 c0       	rjmp	.+494    	; 0x6a32 <_Z14uart_tokenizerhP8as_class+0x101a>
	}
	
	//Delete all stored arbitrary waveform data.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '2' && arr.rx_array[2] == '\r')
    6844:	82 33       	cpi	r24, 0x32	; 50
    6846:	79 f4       	brne	.+30     	; 0x6866 <_Z14uart_tokenizerhP8as_class+0xe4e>
    6848:	90 91 88 01 	lds	r25, 0x0188
    684c:	9d 30       	cpi	r25, 0x0D	; 13
    684e:	09 f0       	breq	.+2      	; 0x6852 <_Z14uart_tokenizerhP8as_class+0xe3a>
    6850:	d6 c0       	rjmp	.+428    	; 0x69fe <_Z14uart_tokenizerhP8as_class+0xfe6>
	{
		fram1_write_word(ARB_NUM, 0);
    6852:	40 e0       	ldi	r20, 0x00	; 0
    6854:	50 e0       	ldi	r21, 0x00	; 0
    6856:	62 ed       	ldi	r22, 0xD2	; 210
    6858:	7b ef       	ldi	r23, 0xFB	; 251
    685a:	81 e0       	ldi	r24, 0x01	; 1
    685c:	90 e0       	ldi	r25, 0x00	; 0
    685e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
		errno = ER_NO_ERROR;
    6862:	19 82       	std	Y+1, r1	; 0x01
    6864:	e6 c0       	rjmp	.+460    	; 0x6a32 <_Z14uart_tokenizerhP8as_class+0x101a>
	}
	
	//Print all saved arbitrary waveform data.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '3' && arr.rx_array[2] == '\r')
    6866:	83 33       	cpi	r24, 0x33	; 51
    6868:	09 f0       	breq	.+2      	; 0x686c <_Z14uart_tokenizerhP8as_class+0xe54>
    686a:	c9 c0       	rjmp	.+402    	; 0x69fe <_Z14uart_tokenizerhP8as_class+0xfe6>
    686c:	80 91 88 01 	lds	r24, 0x0188
    6870:	8d 30       	cpi	r24, 0x0D	; 13
    6872:	09 f0       	breq	.+2      	; 0x6876 <_Z14uart_tokenizerhP8as_class+0xe5e>
    6874:	d5 c0       	rjmp	.+426    	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
	{
		uint16_t entries;
		int16_t val1, val2;
		
		//Get number of entries already in list.
		entries = fram1_read_word(ARB_NUM);
    6876:	62 ed       	ldi	r22, 0xD2	; 210
    6878:	7b ef       	ldi	r23, 0xFB	; 251
    687a:	81 e0       	ldi	r24, 0x01	; 1
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    6882:	8c 01       	movw	r16, r24
		
		if(!entries)
    6884:	00 97       	sbiw	r24, 0x00	; 0
    6886:	29 f4       	brne	.+10     	; 0x6892 <_Z14uart_tokenizerhP8as_class+0xe7a>
		{
			atmega_uart::tx_string_p(PSTR("Memory Empty\r"));
    6888:	88 e6       	ldi	r24, 0x68	; 104
    688a:	97 e0       	ldi	r25, 0x07	; 7
    688c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
			return;
    6890:	d2 c0       	rjmp	.+420    	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
		}
		
		//Put header at top of data.
		atmega_uart::tx_string_p(PSTR("Entry StartmV EndmV Rate\r"));
    6892:	8e e4       	ldi	r24, 0x4E	; 78
    6894:	97 e0       	ldi	r25, 0x07	; 7
    6896:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN11atmega_uart11tx_string_pEPKc>
		
		//Get values from memory.
		for (uint8_t i = 0; i < entries; i++)
    689a:	b1 2c       	mov	r11, r1
		{
			//Align and print entry number.
			tx_u32_to_ascii(i + 1);
    689c:	eb 2c       	mov	r14, r11
    689e:	f1 2c       	mov	r15, r1
    68a0:	b7 01       	movw	r22, r14
    68a2:	6f 5f       	subi	r22, 0xFF	; 255
    68a4:	7f 4f       	sbci	r23, 0xFF	; 255
    68a6:	88 27       	eor	r24, r24
    68a8:	77 fd       	sbrc	r23, 7
    68aa:	80 95       	com	r24
    68ac:	98 2f       	mov	r25, r24
    68ae:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
			atmega_uart::tx_byte(' ');
    68b2:	80 e2       	ldi	r24, 0x20	; 32
    68b4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(i < 9999)
				atmega_uart::tx_byte(' ');
    68b8:	80 e2       	ldi	r24, 0x20	; 32
    68ba:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(i < 999)
				atmega_uart::tx_byte(' ');
    68be:	80 e2       	ldi	r24, 0x20	; 32
    68c0:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(i < 99)
    68c4:	82 e6       	ldi	r24, 0x62	; 98
    68c6:	8b 15       	cp	r24, r11
    68c8:	18 f0       	brcs	.+6      	; 0x68d0 <_Z14uart_tokenizerhP8as_class+0xeb8>
				atmega_uart::tx_byte(' ');
    68ca:	80 e2       	ldi	r24, 0x20	; 32
    68cc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(i < 9)
    68d0:	28 e0       	ldi	r18, 0x08	; 8
    68d2:	2b 15       	cp	r18, r11
    68d4:	18 f0       	brcs	.+6      	; 0x68dc <_Z14uart_tokenizerhP8as_class+0xec4>
				atmega_uart::tx_byte(' ');
    68d6:	80 e2       	ldi	r24, 0x20	; 32
    68d8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			
			//Align and print start voltage.
			val1 = fram1_read_word(ARB_START + 6 * i);
    68dc:	c7 01       	movw	r24, r14
    68de:	88 0f       	add	r24, r24
    68e0:	99 1f       	adc	r25, r25
    68e2:	e8 0e       	add	r14, r24
    68e4:	f9 1e       	adc	r15, r25
    68e6:	67 01       	movw	r12, r14
    68e8:	cc 0c       	add	r12, r12
    68ea:	dd 1c       	adc	r13, r13
    68ec:	b6 01       	movw	r22, r12
    68ee:	88 27       	eor	r24, r24
    68f0:	77 fd       	sbrc	r23, 7
    68f2:	80 95       	com	r24
    68f4:	98 2f       	mov	r25, r24
    68f6:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    68fa:	7c 01       	movw	r14, r24
			if(val1 >= 0)
    68fc:	99 23       	and	r25, r25
    68fe:	24 f0       	brlt	.+8      	; 0x6908 <_Z14uart_tokenizerhP8as_class+0xef0>
				atmega_uart::tx_byte(' ');
    6900:	80 e2       	ldi	r24, 0x20	; 32
    6902:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6906:	06 c0       	rjmp	.+12     	; 0x6914 <_Z14uart_tokenizerhP8as_class+0xefc>
			else
			{
				atmega_uart::tx_byte('-');
    6908:	8d e2       	ldi	r24, 0x2D	; 45
    690a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				val1 *= -1;
    690e:	f1 94       	neg	r15
    6910:	e1 94       	neg	r14
    6912:	f1 08       	sbc	r15, r1
			}
			tx_int_to_ascii(val1);
    6914:	b7 01       	movw	r22, r14
    6916:	88 27       	eor	r24, r24
    6918:	77 fd       	sbrc	r23, 7
    691a:	80 95       	com	r24
    691c:	98 2f       	mov	r25, r24
    691e:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
			if(val1 < 1000)
    6922:	88 ee       	ldi	r24, 0xE8	; 232
    6924:	e8 16       	cp	r14, r24
    6926:	83 e0       	ldi	r24, 0x03	; 3
    6928:	f8 06       	cpc	r15, r24
    692a:	1c f4       	brge	.+6      	; 0x6932 <_Z14uart_tokenizerhP8as_class+0xf1a>
				atmega_uart::tx_byte(' ');
    692c:	80 e2       	ldi	r24, 0x20	; 32
    692e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(val1 < 100)
    6932:	24 e6       	ldi	r18, 0x64	; 100
    6934:	e2 16       	cp	r14, r18
    6936:	f1 04       	cpc	r15, r1
    6938:	1c f4       	brge	.+6      	; 0x6940 <_Z14uart_tokenizerhP8as_class+0xf28>
				atmega_uart::tx_byte(' ');
    693a:	80 e2       	ldi	r24, 0x20	; 32
    693c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(val1 < 10)
    6940:	8a e0       	ldi	r24, 0x0A	; 10
    6942:	e8 16       	cp	r14, r24
    6944:	f1 04       	cpc	r15, r1
    6946:	1c f4       	brge	.+6      	; 0x694e <_Z14uart_tokenizerhP8as_class+0xf36>
				atmega_uart::tx_byte(' ');
    6948:	80 e2       	ldi	r24, 0x20	; 32
    694a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			atmega_uart::tx_byte(' ');
    694e:	80 e2       	ldi	r24, 0x20	; 32
    6950:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			atmega_uart::tx_byte(' ');
    6954:	80 e2       	ldi	r24, 0x20	; 32
    6956:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			atmega_uart::tx_byte(' ');
    695a:	80 e2       	ldi	r24, 0x20	; 32
    695c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			
			val2 = fram1_read_word(ARB_START + 2 + 6 * i);
    6960:	b6 01       	movw	r22, r12
    6962:	6e 5f       	subi	r22, 0xFE	; 254
    6964:	7f 4f       	sbci	r23, 0xFF	; 255
    6966:	88 27       	eor	r24, r24
    6968:	77 fd       	sbrc	r23, 7
    696a:	80 95       	com	r24
    696c:	98 2f       	mov	r25, r24
    696e:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    6972:	7c 01       	movw	r14, r24
			if(val2 >= 0)
    6974:	99 23       	and	r25, r25
    6976:	24 f0       	brlt	.+8      	; 0x6980 <_Z14uart_tokenizerhP8as_class+0xf68>
			atmega_uart::tx_byte(' ');
    6978:	80 e2       	ldi	r24, 0x20	; 32
    697a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    697e:	06 c0       	rjmp	.+12     	; 0x698c <_Z14uart_tokenizerhP8as_class+0xf74>
			else
			{
				atmega_uart::tx_byte('-');
    6980:	8d e2       	ldi	r24, 0x2D	; 45
    6982:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				val2 *= -1;
    6986:	f1 94       	neg	r15
    6988:	e1 94       	neg	r14
    698a:	f1 08       	sbc	r15, r1
			}
			tx_int_to_ascii(val2);
    698c:	b7 01       	movw	r22, r14
    698e:	88 27       	eor	r24, r24
    6990:	77 fd       	sbrc	r23, 7
    6992:	80 95       	com	r24
    6994:	98 2f       	mov	r25, r24
    6996:	0e 94 c0 22 	call	0x4580	; 0x4580 <_Z15tx_int_to_asciil>
			if(val2 < 1000)
    699a:	28 ee       	ldi	r18, 0xE8	; 232
    699c:	e2 16       	cp	r14, r18
    699e:	23 e0       	ldi	r18, 0x03	; 3
    69a0:	f2 06       	cpc	r15, r18
    69a2:	1c f4       	brge	.+6      	; 0x69aa <_Z14uart_tokenizerhP8as_class+0xf92>
				atmega_uart::tx_byte(' ');
    69a4:	80 e2       	ldi	r24, 0x20	; 32
    69a6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(val2 < 100)
    69aa:	84 e6       	ldi	r24, 0x64	; 100
    69ac:	e8 16       	cp	r14, r24
    69ae:	f1 04       	cpc	r15, r1
    69b0:	1c f4       	brge	.+6      	; 0x69b8 <_Z14uart_tokenizerhP8as_class+0xfa0>
				atmega_uart::tx_byte(' ');
    69b2:	80 e2       	ldi	r24, 0x20	; 32
    69b4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			if(val2 < 10)
    69b8:	2a e0       	ldi	r18, 0x0A	; 10
    69ba:	e2 16       	cp	r14, r18
    69bc:	f1 04       	cpc	r15, r1
    69be:	1c f4       	brge	.+6      	; 0x69c6 <_Z14uart_tokenizerhP8as_class+0xfae>
				atmega_uart::tx_byte(' ');
    69c0:	80 e2       	ldi	r24, 0x20	; 32
    69c2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			atmega_uart::tx_byte(' ');
    69c6:	80 e2       	ldi	r24, 0x20	; 32
    69c8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
			
			tx_u32_to_ascii(fram1_read_word(ARB_START + 4 + 6 * i));
    69cc:	b6 01       	movw	r22, r12
    69ce:	6c 5f       	subi	r22, 0xFC	; 252
    69d0:	7f 4f       	sbci	r23, 0xFF	; 255
    69d2:	88 27       	eor	r24, r24
    69d4:	77 fd       	sbrc	r23, 7
    69d6:	80 95       	com	r24
    69d8:	98 2f       	mov	r25, r24
    69da:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    69de:	bc 01       	movw	r22, r24
    69e0:	80 e0       	ldi	r24, 0x00	; 0
    69e2:	90 e0       	ldi	r25, 0x00	; 0
    69e4:	0e 94 a7 21 	call	0x434e	; 0x434e <_Z15tx_u32_to_asciim>
			atmega_uart::tx_byte('\r');
    69e8:	8d e0       	ldi	r24, 0x0D	; 13
    69ea:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		
		//Put header at top of data.
		atmega_uart::tx_string_p(PSTR("Entry StartmV EndmV Rate\r"));
		
		//Get values from memory.
		for (uint8_t i = 0; i < entries; i++)
    69ee:	b3 94       	inc	r11
    69f0:	8b 2d       	mov	r24, r11
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	80 17       	cp	r24, r16
    69f6:	91 07       	cpc	r25, r17
    69f8:	08 f4       	brcc	.+2      	; 0x69fc <_Z14uart_tokenizerhP8as_class+0xfe4>
    69fa:	50 cf       	rjmp	.-352    	; 0x689c <_Z14uart_tokenizerhP8as_class+0xe84>
    69fc:	1c c0       	rjmp	.+56     	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
		}
		return;
	}
	
	//Select which software filter to use.
	else if(arr.rx_array[0] == '3' && arr.rx_array[1] == '4' && arr.rx_array[2] == ' ')
    69fe:	84 33       	cpi	r24, 0x34	; 52
    6a00:	79 f4       	brne	.+30     	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
    6a02:	80 91 88 01 	lds	r24, 0x0188
    6a06:	80 32       	cpi	r24, 0x20	; 32
    6a08:	59 f4       	brne	.+22     	; 0x6a20 <_Z14uart_tokenizerhP8as_class+0x1008>
		errno = set_u8(&(arr.rx_array[3]), as, &as_class::set_soft_sel);
    6a0a:	24 e5       	ldi	r18, 0x54	; 84
    6a0c:	3b e1       	ldi	r19, 0x1B	; 27
    6a0e:	40 e0       	ldi	r20, 0x00	; 0
    6a10:	50 e0       	ldi	r21, 0x00	; 0
    6a12:	b8 01       	movw	r22, r16
    6a14:	89 e8       	ldi	r24, 0x89	; 137
    6a16:	91 e0       	ldi	r25, 0x01	; 1
    6a18:	0e 94 2f 2b 	call	0x565e	; 0x565e <_Z6set_u8PKhP8as_classMS1_FhhE>
    6a1c:	89 83       	std	Y+1, r24	; 0x01
    6a1e:	03 c0       	rjmp	.+6      	; 0x6a26 <_Z14uart_tokenizerhP8as_class+0x100e>
	
	else //Invalid selection.
		errno = ER_ERROR;
    6a20:	81 e0       	ldi	r24, 0x01	; 1
    6a22:	89 83       	std	Y+1, r24	; 0x01
    6a24:	03 c0       	rjmp	.+6      	; 0x6a2c <_Z14uart_tokenizerhP8as_class+0x1014>
	
	if(errno)	//Error out if there was a problem.
    6a26:	89 81       	ldd	r24, Y+1	; 0x01
    6a28:	88 23       	and	r24, r24
    6a2a:	19 f0       	breq	.+6      	; 0x6a32 <_Z14uart_tokenizerhP8as_class+0x101a>
	{
		uart_err();
    6a2c:	0e 94 e6 28 	call	0x51cc	; 0x51cc <_Z8uart_errv>
		return;
    6a30:	02 c0       	rjmp	.+4      	; 0x6a36 <_Z14uart_tokenizerhP8as_class+0x101e>
	}
	
	uart_ok();	
    6a32:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <_Z7uart_okv>
	return;
}
    6a36:	0f 90       	pop	r0
    6a38:	df 91       	pop	r29
    6a3a:	cf 91       	pop	r28
    6a3c:	1f 91       	pop	r17
    6a3e:	0f 91       	pop	r16
    6a40:	ff 90       	pop	r15
    6a42:	ef 90       	pop	r14
    6a44:	df 90       	pop	r13
    6a46:	cf 90       	pop	r12
    6a48:	bf 90       	pop	r11
    6a4a:	08 95       	ret

00006a4c <_Z15bin_build_arrayh>:
//Update input array function(binary).
void bin_build_array(uint8_t rx_byte)
{
	//Exit if an overflow occurred.  The tokenizer needs to clear it
	//before any new data can be processed.
	if(bin_overflowed)
    6a4c:	90 91 83 01 	lds	r25, 0x0183
    6a50:	91 11       	cpse	r25, r1
    6a52:	14 c0       	rjmp	.+40     	; 0x6a7c <_Z15bin_build_arrayh+0x30>
	{
		return;
	}
	
	//Add byte to array.
	arr.bin_rx[bin_index++] = rx_byte;
    6a54:	e0 91 85 01 	lds	r30, 0x0185
    6a58:	91 e0       	ldi	r25, 0x01	; 1
    6a5a:	9e 0f       	add	r25, r30
    6a5c:	90 93 85 01 	sts	0x0185, r25
    6a60:	f0 e0       	ldi	r31, 0x00	; 0
    6a62:	ea 57       	subi	r30, 0x7A	; 122
    6a64:	fe 4f       	sbci	r31, 0xFE	; 254
    6a66:	80 83       	st	Z, r24
	
	//Array overflow, error and reset array.
	if(bin_index >= BIN_RX_LENGTH)
    6a68:	99 30       	cpi	r25, 0x09	; 9
    6a6a:	40 f0       	brcs	.+16     	; 0x6a7c <_Z15bin_build_arrayh+0x30>
	{
		bin_index = 0;
    6a6c:	10 92 85 01 	sts	0x0185, r1
		atmega_uart::tx_byte(ER_BIN_AR_OVERFLOW);
    6a70:	84 e0       	ldi	r24, 0x04	; 4
    6a72:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		bin_overflowed = true;
    6a76:	81 e0       	ldi	r24, 0x01	; 1
    6a78:	80 93 83 01 	sts	0x0183, r24
    6a7c:	08 95       	ret

00006a7e <_Z12bin_tokenizeP8as_class>:
	}
}

//Tokenize binary array function.
void bin_tokenize(as_class *as)
{	
    6a7e:	cf 92       	push	r12
    6a80:	df 92       	push	r13
    6a82:	ef 92       	push	r14
    6a84:	ff 92       	push	r15
    6a86:	0f 93       	push	r16
    6a88:	1f 93       	push	r17
    6a8a:	cf 93       	push	r28
    6a8c:	df 93       	push	r29
    6a8e:	ec 01       	movw	r28, r24
	int16_t start_v, end_v, temp1;
	uint16_t rate, entries, ent, temp2;
	
	//Reset overflow and exit. This prevents partial
	//strings from corrupting the settings.
	if(bin_overflowed)
    6a90:	80 91 83 01 	lds	r24, 0x0183
    6a94:	88 23       	and	r24, r24
    6a96:	19 f0       	breq	.+6      	; 0x6a9e <_Z12bin_tokenizeP8as_class+0x20>
	{
		bin_overflowed = false;
    6a98:	10 92 83 01 	sts	0x0183, r1
		return;
    6a9c:	30 c4       	rjmp	.+2144   	; 0x72fe <_Z12bin_tokenizeP8as_class+0x880>
	}
	
	//Get command byte and act accordingly.
	switch (arr.bin_rx[0])
    6a9e:	40 91 86 01 	lds	r20, 0x0186
    6aa2:	50 e0       	ldi	r21, 0x00	; 0
    6aa4:	fa 01       	movw	r30, r20
    6aa6:	31 97       	sbiw	r30, 0x01	; 1
    6aa8:	e4 37       	cpi	r30, 0x74	; 116
    6aaa:	f1 05       	cpc	r31, r1
    6aac:	08 f0       	brcs	.+2      	; 0x6ab0 <_Z12bin_tokenizeP8as_class+0x32>
    6aae:	22 c4       	rjmp	.+2116   	; 0x72f4 <_Z12bin_tokenizeP8as_class+0x876>
    6ab0:	e8 5b       	subi	r30, 0xB8	; 184
    6ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab4:	0c 94 22 3c 	jmp	0x7844	; 0x7844 <__tablejump2__>
	{
		case BIN_GET_TX1://Transmit tx mode character.
		case BIN_GET_TX2:
			if(bin_index == 1)
    6ab8:	80 91 85 01 	lds	r24, 0x0185
    6abc:	81 30       	cpi	r24, 0x01	; 1
    6abe:	21 f4       	brne	.+8      	; 0x6ac8 <_Z12bin_tokenizeP8as_class+0x4a>
				atmega_uart::tx_byte('B');
    6ac0:	82 e4       	ldi	r24, 0x42	; 66
    6ac2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6ac6:	19 c4       	rjmp	.+2098   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6ac8:	83 e0       	ldi	r24, 0x03	; 3
    6aca:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6ace:	15 c4       	rjmp	.+2090   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_STRT_LIN1://Start linear sweep test.
		case BIN_STRT_LIN2:
			if(bin_index == 1)
    6ad0:	80 91 85 01 	lds	r24, 0x0185
    6ad4:	81 30       	cpi	r24, 0x01	; 1
    6ad6:	49 f4       	brne	.+18     	; 0x6aea <_Z12bin_tokenizeP8as_class+0x6c>
			{
				as->set_test_type(TEST_LIN);
    6ad8:	60 e0       	ldi	r22, 0x00	; 0
    6ada:	ce 01       	movw	r24, r28
    6adc:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    6ae0:	61 e0       	ldi	r22, 0x01	; 1
    6ae2:	ce 01       	movw	r24, r28
    6ae4:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    6ae8:	08 c4       	rjmp	.+2064   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6aea:	83 e0       	ldi	r24, 0x03	; 3
    6aec:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6af0:	04 c4       	rjmp	.+2056   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_STRT_DIF1://Start square wave test.
		case BIN_STRT_DIF2:
			if(bin_index == 1)
    6af2:	80 91 85 01 	lds	r24, 0x0185
    6af6:	81 30       	cpi	r24, 0x01	; 1
    6af8:	49 f4       	brne	.+18     	; 0x6b0c <_Z12bin_tokenizeP8as_class+0x8e>
			{
				as->set_test_type(TEST_DIF);
    6afa:	61 e0       	ldi	r22, 0x01	; 1
    6afc:	ce 01       	movw	r24, r28
    6afe:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    6b02:	61 e0       	ldi	r22, 0x01	; 1
    6b04:	ce 01       	movw	r24, r28
    6b06:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    6b0a:	f7 c3       	rjmp	.+2030   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6b0c:	83 e0       	ldi	r24, 0x03	; 3
    6b0e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6b12:	f3 c3       	rjmp	.+2022   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_STRT_ARB1://Start arbitrary waveform test.
		case BIN_STRT_ARB2:
			if(bin_index == 1)
    6b14:	80 91 85 01 	lds	r24, 0x0185
    6b18:	81 30       	cpi	r24, 0x01	; 1
    6b1a:	49 f4       	brne	.+18     	; 0x6b2e <_Z12bin_tokenizeP8as_class+0xb0>
			{
				as->set_test_type(TEST_ARB);
    6b1c:	62 e0       	ldi	r22, 0x02	; 2
    6b1e:	ce 01       	movw	r24, r28
    6b20:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN8as_class13set_test_typeE10test_types>
				as->set_test_state(DEP_INIT);
    6b24:	61 e0       	ldi	r22, 0x01	; 1
    6b26:	ce 01       	movw	r24, r28
    6b28:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN8as_class14set_test_stateE11test_states>
    6b2c:	e6 c3       	rjmp	.+1996   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6b2e:	83 e0       	ldi	r24, 0x03	; 3
    6b30:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6b34:	e2 c3       	rjmp	.+1988   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_TX://Change transmission mode.
			if(bin_index == 2)
    6b36:	80 91 85 01 	lds	r24, 0x0185
    6b3a:	82 30       	cpi	r24, 0x02	; 2
    6b3c:	41 f5       	brne	.+80     	; 0x6b8e <_Z12bin_tokenizeP8as_class+0x110>
				switch (arr.bin_rx[1])
    6b3e:	80 91 87 01 	lds	r24, 0x0187
    6b42:	8d 34       	cpi	r24, 0x4D	; 77
    6b44:	a1 f0       	breq	.+40     	; 0x6b6e <_Z12bin_tokenizeP8as_class+0xf0>
    6b46:	28 f4       	brcc	.+10     	; 0x6b52 <_Z12bin_tokenizeP8as_class+0xd4>
    6b48:	81 34       	cpi	r24, 0x41	; 65
    6b4a:	49 f0       	breq	.+18     	; 0x6b5e <_Z12bin_tokenizeP8as_class+0xe0>
    6b4c:	82 34       	cpi	r24, 0x42	; 66
    6b4e:	b9 f0       	breq	.+46     	; 0x6b7e <_Z12bin_tokenizeP8as_class+0x100>
    6b50:	1a c0       	rjmp	.+52     	; 0x6b86 <_Z12bin_tokenizeP8as_class+0x108>
    6b52:	82 36       	cpi	r24, 0x62	; 98
    6b54:	a1 f0       	breq	.+40     	; 0x6b7e <_Z12bin_tokenizeP8as_class+0x100>
    6b56:	8d 36       	cpi	r24, 0x6D	; 109
    6b58:	51 f0       	breq	.+20     	; 0x6b6e <_Z12bin_tokenizeP8as_class+0xf0>
    6b5a:	81 36       	cpi	r24, 0x61	; 97
    6b5c:	a1 f4       	brne	.+40     	; 0x6b86 <_Z12bin_tokenizeP8as_class+0x108>
				{
					case 'A'://Set to ASCII mode.
					case 'a':
						as->set_tx_mode(TX_MODE_ASCII);
    6b5e:	60 e0       	ldi	r22, 0x00	; 0
    6b60:	ce 01       	movw	r24, r28
    6b62:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN8as_class11set_tx_modeE8tx_modes>
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    6b66:	80 e0       	ldi	r24, 0x00	; 0
    6b68:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    6b6c:	c6 c3       	rjmp	.+1932   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
					case 'M'://Set to MatLab mode.
					case 'm':
						as->set_tx_mode(TX_MODE_MATLAB);
    6b6e:	61 e0       	ldi	r22, 0x01	; 1
    6b70:	ce 01       	movw	r24, r28
    6b72:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN8as_class11set_tx_modeE8tx_modes>
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    6b76:	80 e0       	ldi	r24, 0x00	; 0
    6b78:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    6b7c:	be c3       	rjmp	.+1916   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
					case 'B'://Set to binary mode.
					case 'b':
						atmega_uart::tx_byte(ER_BIN_NO_ERR);
    6b7e:	80 e0       	ldi	r24, 0x00	; 0
    6b80:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    6b84:	ba c3       	rjmp	.+1908   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
					default:
						atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6b86:	83 e0       	ldi	r24, 0x03	; 3
    6b88:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    6b8c:	b6 c3       	rjmp	.+1900   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6b8e:	83 e0       	ldi	r24, 0x03	; 3
    6b90:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6b94:	b2 c3       	rjmp	.+1892   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_ELECS://Change number of electrodes.
			if(bin_index == 2)
    6b96:	80 91 85 01 	lds	r24, 0x0185
    6b9a:	82 30       	cpi	r24, 0x02	; 2
    6b9c:	d1 f4       	brne	.+52     	; 0x6bd2 <_Z12bin_tokenizeP8as_class+0x154>
			{
				if(arr.bin_rx[1] == 0x02)
    6b9e:	80 91 87 01 	lds	r24, 0x0187
    6ba2:	82 30       	cpi	r24, 0x02	; 2
    6ba4:	41 f4       	brne	.+16     	; 0x6bb6 <_Z12bin_tokenizeP8as_class+0x138>
				{
					as->set_num_electrodes(ELEC_2);
    6ba6:	60 e0       	ldi	r22, 0x00	; 0
    6ba8:	ce 01       	movw	r24, r28
    6baa:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN8as_class18set_num_electrodesE9num_elecs>
					void i2c_load_electrodes(as_class *as);
					atmega_uart::tx_byte(ER_BIN_NO_ERR);
    6bae:	80 e0       	ldi	r24, 0x00	; 0
    6bb0:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6bb4:	a2 c3       	rjmp	.+1860   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else if(arr.bin_rx[1] == 0x03)
    6bb6:	83 30       	cpi	r24, 0x03	; 3
    6bb8:	41 f4       	brne	.+16     	; 0x6bca <_Z12bin_tokenizeP8as_class+0x14c>
				{
					as->set_num_electrodes(ELEC_3);
    6bba:	61 e0       	ldi	r22, 0x01	; 1
    6bbc:	ce 01       	movw	r24, r28
    6bbe:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN8as_class18set_num_electrodesE9num_elecs>
					void i2c_load_electrodes(as_class *as);
					atmega_uart::tx_byte(ER_BIN_NO_ERR);
    6bc2:	80 e0       	ldi	r24, 0x00	; 0
    6bc4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6bc8:	98 c3       	rjmp	.+1840   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else//Transmit error.
				{
					atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6bca:	83 e0       	ldi	r24, 0x03	; 3
    6bcc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6bd0:	94 c3       	rjmp	.+1832   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6bd2:	83 e0       	ldi	r24, 0x03	; 3
    6bd4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6bd8:	90 c3       	rjmp	.+1824   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_ADC:
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_adc_rate);
    6bda:	28 ef       	ldi	r18, 0xF8	; 248
    6bdc:	39 e1       	ldi	r19, 0x19	; 25
    6bde:	40 e0       	ldi	r20, 0x00	; 0
    6be0:	50 e0       	ldi	r21, 0x00	; 0
    6be2:	be 01       	movw	r22, r28
    6be4:	87 e8       	ldi	r24, 0x87	; 135
    6be6:	91 e0       	ldi	r25, 0x01	; 1
    6be8:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    6bec:	86 c3       	rjmp	.+1804   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_SET://Transmit settings.
			if(bin_index == 1)
    6bee:	80 91 85 01 	lds	r24, 0x0185
    6bf2:	81 30       	cpi	r24, 0x01	; 1
    6bf4:	09 f0       	breq	.+2      	; 0x6bf8 <_Z12bin_tokenizeP8as_class+0x17a>
    6bf6:	8b c0       	rjmp	.+278    	; 0x6d0e <_Z12bin_tokenizeP8as_class+0x290>
			{
				atmega_uart::tx_byte(BIN_FIRM_HI);
    6bf8:	80 e0       	ldi	r24, 0x00	; 0
    6bfa:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_FIRM_LO);
    6bfe:	82 e1       	ldi	r24, 0x12	; 18
    6c00:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID1);
    6c04:	81 e4       	ldi	r24, 0x41	; 65
    6c06:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID2);
    6c0a:	81 e5       	ldi	r24, 0x51	; 81
    6c0c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID3);
    6c10:	83 e5       	ldi	r24, 0x53	; 83
    6c12:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_byte(BIN_PID4);
    6c16:	81 e3       	ldi	r24, 0x31	; 49
    6c18:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				(as->get_num_electrodes() == ELEC_2) ? atmega_uart::tx_byte(0x02) : atmega_uart::tx_byte(0x03);
    6c1c:	ce 01       	movw	r24, r28
    6c1e:	0e 94 f5 19 	call	0x33ea	; 0x33ea <_ZN8as_class18get_num_electrodesEv>
    6c22:	81 11       	cpse	r24, r1
    6c24:	04 c0       	rjmp	.+8      	; 0x6c2e <_Z12bin_tokenizeP8as_class+0x1b0>
    6c26:	82 e0       	ldi	r24, 0x02	; 2
    6c28:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6c2c:	03 c0       	rjmp	.+6      	; 0x6c34 <_Z12bin_tokenizeP8as_class+0x1b6>
    6c2e:	83 e0       	ldi	r24, 0x03	; 3
    6c30:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_word(as->get_adc_rate());
    6c34:	ce 01       	movw	r24, r28
    6c36:	0e 94 08 1a 	call	0x3410	; 0x3410 <_ZN8as_class12get_adc_rateEv>
    6c3a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_byte(as->get_tia_res());
    6c3e:	ce 01       	movw	r24, r28
    6c40:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN8as_class11get_tia_resEv>
    6c44:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_tf(as->get_dep_enable());
    6c48:	ce 01       	movw	r24, r28
    6c4a:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN8as_class14get_dep_enableEv>
    6c4e:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_dword(as->get_dep_time());
    6c52:	ce 01       	movw	r24, r28
    6c54:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN8as_class12get_dep_timeEv>
    6c58:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN11atmega_uart8tx_dwordEm>
				atmega_uart::tx_word(as->get_dep_volt());
    6c5c:	ce 01       	movw	r24, r28
    6c5e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <_ZN8as_class12get_dep_voltEv>
    6c62:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_dword(as->get_quiet_time());
    6c66:	ce 01       	movw	r24, r28
    6c68:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN8as_class14get_quiet_timeEv>
    6c6c:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN11atmega_uart8tx_dwordEm>
				atmega_uart::tx_tf(as->get_dep_rec());
    6c70:	ce 01       	movw	r24, r28
    6c72:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <_ZN8as_class11get_dep_recEv>
    6c76:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_word(as->get_sweep_volt_start());
    6c7a:	ce 01       	movw	r24, r28
    6c7c:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN8as_class20get_sweep_volt_startEv>
    6c80:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_sweep_volt_end());
    6c84:	ce 01       	movw	r24, r28
    6c86:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN8as_class18get_sweep_volt_endEv>
    6c8a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_sweep_rate());
    6c8e:	ce 01       	movw	r24, r28
    6c90:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN8as_class14get_sweep_rateEv>
    6c94:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_tf(as->get_sweep_cyclic());
    6c98:	ce 01       	movw	r24, r28
    6c9a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN8as_class16get_sweep_cyclicEv>
    6c9e:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN11atmega_uart5tx_tfEb>
				atmega_uart::tx_byte(as->get_sweep_cycles());
    6ca2:	ce 01       	movw	r24, r28
    6ca4:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_ZN8as_class16get_sweep_cyclesEv>
    6ca8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				atmega_uart::tx_word(as->get_dif_volt_start());
    6cac:	ce 01       	movw	r24, r28
    6cae:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    6cb2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_dif_volt_end());
    6cb6:	ce 01       	movw	r24, r28
    6cb8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    6cbc:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_dif_volt_inc());
    6cc0:	ce 01       	movw	r24, r28
    6cc2:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN8as_class16get_dif_volt_incEv>
    6cc6:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_dif_volt_pls());
    6cca:	ce 01       	movw	r24, r28
    6ccc:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6cd0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_dif_time_pre());
    6cd4:	ce 01       	movw	r24, r28
    6cd6:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN8as_class16get_dif_time_preEv>
    6cda:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_dif_time_pls());
    6cde:	ce 01       	movw	r24, r28
    6ce0:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN8as_class16get_dif_time_plsEv>
    6ce4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(as->get_dif_time_win());
    6ce8:	ce 01       	movw	r24, r28
    6cea:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN8as_class16get_dif_time_winEv>
    6cee:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(fram1_read_word(ARB_NUM));
    6cf2:	62 ed       	ldi	r22, 0xD2	; 210
    6cf4:	7b ef       	ldi	r23, 0xFB	; 251
    6cf6:	81 e0       	ldi	r24, 0x01	; 1
    6cf8:	90 e0       	ldi	r25, 0x00	; 0
    6cfa:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    6cfe:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_byte(as->get_soft_sel());	
    6d02:	ce 01       	movw	r24, r28
    6d04:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8as_class12get_soft_selEv>
    6d08:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6d0c:	f6 c2       	rjmp	.+1516   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    6d0e:	83 e0       	ldi	r24, 0x03	; 3
    6d10:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6d14:	f2 c2       	rjmp	.+1508   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_RES: //Set TIA resistor.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_tia_res);
    6d16:	2c e0       	ldi	r18, 0x0C	; 12
    6d18:	3a e1       	ldi	r19, 0x1A	; 26
    6d1a:	40 e0       	ldi	r20, 0x00	; 0
    6d1c:	50 e0       	ldi	r21, 0x00	; 0
    6d1e:	be 01       	movw	r22, r28
    6d20:	87 e8       	ldi	r24, 0x87	; 135
    6d22:	91 e0       	ldi	r25, 0x01	; 1
    6d24:	0e 94 2f 2b 	call	0x565e	; 0x565e <_Z6set_u8PKhP8as_classMS1_FhhE>
			i2c_load_res(as);
    6d28:	ce 01       	movw	r24, r28
    6d2a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_Z12i2c_load_resP8as_class>
		break;
    6d2e:	e5 c2       	rjmp	.+1482   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_DEP_EN://Enable deposition sequence.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_dep_enable);
    6d30:	2b e1       	ldi	r18, 0x1B	; 27
    6d32:	3a e1       	ldi	r19, 0x1A	; 26
    6d34:	40 e0       	ldi	r20, 0x00	; 0
    6d36:	50 e0       	ldi	r21, 0x00	; 0
    6d38:	be 01       	movw	r22, r28
    6d3a:	87 e8       	ldi	r24, 0x87	; 135
    6d3c:	91 e0       	ldi	r25, 0x01	; 1
    6d3e:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    6d42:	db c2       	rjmp	.+1462   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_DEP_T://Change deposition time.
			set_u32(&(arr.bin_rx[1]), as, &as_class::set_dep_time);
    6d44:	22 e2       	ldi	r18, 0x22	; 34
    6d46:	3a e1       	ldi	r19, 0x1A	; 26
    6d48:	40 e0       	ldi	r20, 0x00	; 0
    6d4a:	50 e0       	ldi	r21, 0x00	; 0
    6d4c:	be 01       	movw	r22, r28
    6d4e:	87 e8       	ldi	r24, 0x87	; 135
    6d50:	91 e0       	ldi	r25, 0x01	; 1
    6d52:	0e 94 95 2c 	call	0x592a	; 0x592a <_Z7set_u32PKhP8as_classMS1_FhmE>
		break;
    6d56:	d1 c2       	rjmp	.+1442   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_DEP_V://Set deposition voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_dep_volt);
    6d58:	2f e3       	ldi	r18, 0x3F	; 63
    6d5a:	3a e1       	ldi	r19, 0x1A	; 26
    6d5c:	40 e0       	ldi	r20, 0x00	; 0
    6d5e:	50 e0       	ldi	r21, 0x00	; 0
    6d60:	be 01       	movw	r22, r28
    6d62:	87 e8       	ldi	r24, 0x87	; 135
    6d64:	91 e0       	ldi	r25, 0x01	; 1
    6d66:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    6d6a:	c7 c2       	rjmp	.+1422   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_QUIET_T://Set quiet time.
			set_u32(&(arr.bin_rx[1]), as, &as_class::set_quiet_time);
    6d6c:	24 e5       	ldi	r18, 0x54	; 84
    6d6e:	3a e1       	ldi	r19, 0x1A	; 26
    6d70:	40 e0       	ldi	r20, 0x00	; 0
    6d72:	50 e0       	ldi	r21, 0x00	; 0
    6d74:	be 01       	movw	r22, r28
    6d76:	87 e8       	ldi	r24, 0x87	; 135
    6d78:	91 e0       	ldi	r25, 0x01	; 1
    6d7a:	0e 94 95 2c 	call	0x592a	; 0x592a <_Z7set_u32PKhP8as_classMS1_FhmE>
		break;
    6d7e:	bd c2       	rjmp	.+1402   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_DEP_REC://Enable deposition recording.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_dep_rec);
    6d80:	2a e6       	ldi	r18, 0x6A	; 106
    6d82:	3a e1       	ldi	r19, 0x1A	; 26
    6d84:	40 e0       	ldi	r20, 0x00	; 0
    6d86:	50 e0       	ldi	r21, 0x00	; 0
    6d88:	be 01       	movw	r22, r28
    6d8a:	87 e8       	ldi	r24, 0x87	; 135
    6d8c:	91 e0       	ldi	r25, 0x01	; 1
    6d8e:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    6d92:	b3 c2       	rjmp	.+1382   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_LIN_SV://Set linear sweep start voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_sweep_volt_start);
    6d94:	21 e7       	ldi	r18, 0x71	; 113
    6d96:	3a e1       	ldi	r19, 0x1A	; 26
    6d98:	40 e0       	ldi	r20, 0x00	; 0
    6d9a:	50 e0       	ldi	r21, 0x00	; 0
    6d9c:	be 01       	movw	r22, r28
    6d9e:	87 e8       	ldi	r24, 0x87	; 135
    6da0:	91 e0       	ldi	r25, 0x01	; 1
    6da2:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    6da6:	a9 c2       	rjmp	.+1362   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_LIN_EV://Set linear sweep end voltage.
			set_int16(&(arr.bin_rx[1]), as, &as_class::set_sweep_volt_end);
    6da8:	26 e8       	ldi	r18, 0x86	; 134
    6daa:	3a e1       	ldi	r19, 0x1A	; 26
    6dac:	40 e0       	ldi	r20, 0x00	; 0
    6dae:	50 e0       	ldi	r21, 0x00	; 0
    6db0:	be 01       	movw	r22, r28
    6db2:	87 e8       	ldi	r24, 0x87	; 135
    6db4:	91 e0       	ldi	r25, 0x01	; 1
    6db6:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
		break;
    6dba:	9f c2       	rjmp	.+1342   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_LIN_SR://Set linear sweep rate.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_sweep_rate);
    6dbc:	2b e9       	ldi	r18, 0x9B	; 155
    6dbe:	3a e1       	ldi	r19, 0x1A	; 26
    6dc0:	40 e0       	ldi	r20, 0x00	; 0
    6dc2:	50 e0       	ldi	r21, 0x00	; 0
    6dc4:	be 01       	movw	r22, r28
    6dc6:	87 e8       	ldi	r24, 0x87	; 135
    6dc8:	91 e0       	ldi	r25, 0x01	; 1
    6dca:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    6dce:	95 c2       	rjmp	.+1322   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_LIN_C://Enable linear sweep cyclic voltammetry.
			set_bool(&(arr.bin_rx[1]), as, &as_class::set_sweep_cyclic);
    6dd0:	2f ea       	ldi	r18, 0xAF	; 175
    6dd2:	3a e1       	ldi	r19, 0x1A	; 26
    6dd4:	40 e0       	ldi	r20, 0x00	; 0
    6dd6:	50 e0       	ldi	r21, 0x00	; 0
    6dd8:	be 01       	movw	r22, r28
    6dda:	87 e8       	ldi	r24, 0x87	; 135
    6ddc:	91 e0       	ldi	r25, 0x01	; 1
    6dde:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <_Z8set_boolPKhP8as_classMS1_FhbE>
		break;
    6de2:	8b c2       	rjmp	.+1302   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_LIN_CS://Set number of linear sweep cycles.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_sweep_cycles);
    6de4:	26 eb       	ldi	r18, 0xB6	; 182
    6de6:	3a e1       	ldi	r19, 0x1A	; 26
    6de8:	40 e0       	ldi	r20, 0x00	; 0
    6dea:	50 e0       	ldi	r21, 0x00	; 0
    6dec:	be 01       	movw	r22, r28
    6dee:	87 e8       	ldi	r24, 0x87	; 135
    6df0:	91 e0       	ldi	r25, 0x01	; 1
    6df2:	0e 94 2f 2b 	call	0x565e	; 0x565e <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    6df6:	81 c2       	rjmp	.+1282   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    6df8:	e6 e8       	ldi	r30, 0x86	; 134
    6dfa:	f1 e0       	ldi	r31, 0x01	; 1
    6dfc:	01 81       	ldd	r16, Z+1	; 0x01
    6dfe:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    6e00:	10 2f       	mov	r17, r16
    6e02:	00 27       	eor	r16, r16
	temp16 += array[1];
    6e04:	82 81       	ldd	r24, Z+2	; 0x02
    6e06:	08 0f       	add	r16, r24
    6e08:	11 1d       	adc	r17, r1
		case BIN_DIF_SV://Set dif pulse start voltage.
			//Get data from input.
			start_v = load_int16(&arr.bin_rx[1]);
				
			//Check to make sure range is valid.
			if(start_v + as->get_dif_volt_pls() > DIF_VOLT_MAX)
    6e0a:	ce 01       	movw	r24, r28
    6e0c:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6e10:	80 0f       	add	r24, r16
    6e12:	91 1f       	adc	r25, r17
    6e14:	83 37       	cpi	r24, 0x73	; 115
    6e16:	96 40       	sbci	r25, 0x06	; 6
    6e18:	24 f0       	brlt	.+8      	; 0x6e22 <_Z12bin_tokenizeP8as_class+0x3a4>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6e1a:	87 e0       	ldi	r24, 0x07	; 7
    6e1c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6e20:	6c c2       	rjmp	.+1240   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else if(start_v + as->get_dif_volt_pls() < DIF_VOLT_MIN)
    6e22:	ce 01       	movw	r24, r28
    6e24:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6e28:	80 0f       	add	r24, r16
    6e2a:	91 1f       	adc	r25, r17
    6e2c:	8e 38       	cpi	r24, 0x8E	; 142
    6e2e:	99 4f       	sbci	r25, 0xF9	; 249
    6e30:	24 f4       	brge	.+8      	; 0x6e3a <_Z12bin_tokenizeP8as_class+0x3bc>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6e32:	87 e0       	ldi	r24, 0x07	; 7
    6e34:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6e38:	60 c2       	rjmp	.+1216   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else
				set_int16(&(arr.bin_rx[1]), as, &as_class::set_dif_volt_start);
    6e3a:	25 ec       	ldi	r18, 0xC5	; 197
    6e3c:	3a e1       	ldi	r19, 0x1A	; 26
    6e3e:	40 e0       	ldi	r20, 0x00	; 0
    6e40:	50 e0       	ldi	r21, 0x00	; 0
    6e42:	be 01       	movw	r22, r28
    6e44:	87 e8       	ldi	r24, 0x87	; 135
    6e46:	91 e0       	ldi	r25, 0x01	; 1
    6e48:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
    6e4c:	56 c2       	rjmp	.+1196   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    6e4e:	e6 e8       	ldi	r30, 0x86	; 134
    6e50:	f1 e0       	ldi	r31, 0x01	; 1
    6e52:	01 81       	ldd	r16, Z+1	; 0x01
    6e54:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    6e56:	10 2f       	mov	r17, r16
    6e58:	00 27       	eor	r16, r16
	temp16 += array[1];
    6e5a:	82 81       	ldd	r24, Z+2	; 0x02
    6e5c:	08 0f       	add	r16, r24
    6e5e:	11 1d       	adc	r17, r1
		case BIN_DIF_EV://Set dif pulse end voltage.
			//Get data from input.
			end_v = load_int16(&arr.bin_rx[1]);
			
			//Check to make sure range is valid.
			if(end_v + as->get_dif_volt_pls() > DIF_VOLT_MAX)
    6e60:	ce 01       	movw	r24, r28
    6e62:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6e66:	80 0f       	add	r24, r16
    6e68:	91 1f       	adc	r25, r17
    6e6a:	83 37       	cpi	r24, 0x73	; 115
    6e6c:	96 40       	sbci	r25, 0x06	; 6
    6e6e:	24 f0       	brlt	.+8      	; 0x6e78 <_Z12bin_tokenizeP8as_class+0x3fa>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6e70:	87 e0       	ldi	r24, 0x07	; 7
    6e72:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6e76:	41 c2       	rjmp	.+1154   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else if(end_v + as->get_dif_volt_pls() < DIF_VOLT_MIN)
    6e78:	ce 01       	movw	r24, r28
    6e7a:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN8as_class16get_dif_volt_plsEv>
    6e7e:	80 0f       	add	r24, r16
    6e80:	91 1f       	adc	r25, r17
    6e82:	8e 38       	cpi	r24, 0x8E	; 142
    6e84:	99 4f       	sbci	r25, 0xF9	; 249
    6e86:	24 f4       	brge	.+8      	; 0x6e90 <_Z12bin_tokenizeP8as_class+0x412>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6e88:	87 e0       	ldi	r24, 0x07	; 7
    6e8a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6e8e:	35 c2       	rjmp	.+1130   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else
				set_int16(&(arr.bin_rx[1]), as, &as_class::set_dif_volt_end);
    6e90:	2a ed       	ldi	r18, 0xDA	; 218
    6e92:	3a e1       	ldi	r19, 0x1A	; 26
    6e94:	40 e0       	ldi	r20, 0x00	; 0
    6e96:	50 e0       	ldi	r21, 0x00	; 0
    6e98:	be 01       	movw	r22, r28
    6e9a:	87 e8       	ldi	r24, 0x87	; 135
    6e9c:	91 e0       	ldi	r25, 0x01	; 1
    6e9e:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
    6ea2:	2b c2       	rjmp	.+1110   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_DIF_INC://Set dif pulse increment voltage.
			set_u16(&(arr.bin_rx[1]), as, &as_class::set_dif_volt_inc);
    6ea4:	24 e0       	ldi	r18, 0x04	; 4
    6ea6:	3b e1       	ldi	r19, 0x1B	; 27
    6ea8:	40 e0       	ldi	r20, 0x00	; 0
    6eaa:	50 e0       	ldi	r21, 0x00	; 0
    6eac:	be 01       	movw	r22, r28
    6eae:	87 e8       	ldi	r24, 0x87	; 135
    6eb0:	91 e0       	ldi	r25, 0x01	; 1
    6eb2:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
		break;
    6eb6:	21 c2       	rjmp	.+1090   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    6eb8:	e6 e8       	ldi	r30, 0x86	; 134
    6eba:	f1 e0       	ldi	r31, 0x01	; 1
    6ebc:	01 81       	ldd	r16, Z+1	; 0x01
    6ebe:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    6ec0:	10 2f       	mov	r17, r16
    6ec2:	00 27       	eor	r16, r16
	temp16 += array[1];
    6ec4:	82 81       	ldd	r24, Z+2	; 0x02
    6ec6:	08 0f       	add	r16, r24
    6ec8:	11 1d       	adc	r17, r1
		case BIN_DIF_AMP://Set dif pulse amplitude voltage.
			//Get data from input.
			temp1 = load_int16(&arr.bin_rx[1]);
			
			//Check to make sure range is valid.
			if(temp1 + as->get_dif_volt_start() > DIF_VOLT_MAX)
    6eca:	ce 01       	movw	r24, r28
    6ecc:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    6ed0:	80 0f       	add	r24, r16
    6ed2:	91 1f       	adc	r25, r17
    6ed4:	83 37       	cpi	r24, 0x73	; 115
    6ed6:	96 40       	sbci	r25, 0x06	; 6
    6ed8:	24 f0       	brlt	.+8      	; 0x6ee2 <_Z12bin_tokenizeP8as_class+0x464>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6eda:	87 e0       	ldi	r24, 0x07	; 7
    6edc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6ee0:	0c c2       	rjmp	.+1048   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else if(temp1 + as->get_dif_volt_start() < DIF_VOLT_MIN)
    6ee2:	ce 01       	movw	r24, r28
    6ee4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <_ZN8as_class18get_dif_volt_startEv>
    6ee8:	80 0f       	add	r24, r16
    6eea:	91 1f       	adc	r25, r17
    6eec:	8e 38       	cpi	r24, 0x8E	; 142
    6eee:	99 4f       	sbci	r25, 0xF9	; 249
    6ef0:	24 f4       	brge	.+8      	; 0x6efa <_Z12bin_tokenizeP8as_class+0x47c>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6ef2:	87 e0       	ldi	r24, 0x07	; 7
    6ef4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6ef8:	00 c2       	rjmp	.+1024   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else if(temp1 + as->get_dif_volt_end() > DIF_VOLT_MAX)
    6efa:	ce 01       	movw	r24, r28
    6efc:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    6f00:	80 0f       	add	r24, r16
    6f02:	91 1f       	adc	r25, r17
    6f04:	83 37       	cpi	r24, 0x73	; 115
    6f06:	96 40       	sbci	r25, 0x06	; 6
    6f08:	24 f0       	brlt	.+8      	; 0x6f12 <_Z12bin_tokenizeP8as_class+0x494>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6f0a:	87 e0       	ldi	r24, 0x07	; 7
    6f0c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6f10:	f4 c1       	rjmp	.+1000   	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else if(temp1 + as->get_dif_volt_end() < DIF_VOLT_MIN)
    6f12:	ce 01       	movw	r24, r28
    6f14:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN8as_class16get_dif_volt_endEv>
    6f18:	80 0f       	add	r24, r16
    6f1a:	91 1f       	adc	r25, r17
    6f1c:	8e 38       	cpi	r24, 0x8E	; 142
    6f1e:	99 4f       	sbci	r25, 0xF9	; 249
    6f20:	24 f4       	brge	.+8      	; 0x6f2a <_Z12bin_tokenizeP8as_class+0x4ac>
				atmega_uart::tx_byte(ER_BIN_DIF_RANGE);
    6f22:	87 e0       	ldi	r24, 0x07	; 7
    6f24:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6f28:	e8 c1       	rjmp	.+976    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else
				set_int16(&(arr.bin_rx[1]), as, &as_class::set_dif_volt_pls);
    6f2a:	2f ee       	ldi	r18, 0xEF	; 239
    6f2c:	3a e1       	ldi	r19, 0x1A	; 26
    6f2e:	40 e0       	ldi	r20, 0x00	; 0
    6f30:	50 e0       	ldi	r21, 0x00	; 0
    6f32:	be 01       	movw	r22, r28
    6f34:	87 e8       	ldi	r24, 0x87	; 135
    6f36:	91 e0       	ldi	r25, 0x01	; 1
    6f38:	0e 94 9f 2b 	call	0x573e	; 0x573e <_Z9set_int16PKhP8as_classMS1_FhiE>
    6f3c:	de c1       	rjmp	.+956    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    6f3e:	e6 e8       	ldi	r30, 0x86	; 134
    6f40:	f1 e0       	ldi	r31, 0x01	; 1
    6f42:	01 81       	ldd	r16, Z+1	; 0x01
    6f44:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    6f46:	10 2f       	mov	r17, r16
    6f48:	00 27       	eor	r16, r16
	temp16 += array[1];
    6f4a:	82 81       	ldd	r24, Z+2	; 0x02
    6f4c:	08 0f       	add	r16, r24
    6f4e:	11 1d       	adc	r17, r1
		case BIN_DIF_PRE://Set dif pulse pre-pulse time.
			//Get data from input.
			temp2 = load_u16(&arr.bin_rx[1]);
			
			//Check to make sure range is valid.
			if(temp2 < as->get_dif_time_win())
    6f50:	ce 01       	movw	r24, r28
    6f52:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN8as_class16get_dif_time_winEv>
    6f56:	08 17       	cp	r16, r24
    6f58:	19 07       	cpc	r17, r25
    6f5a:	20 f4       	brcc	.+8      	; 0x6f64 <_Z12bin_tokenizeP8as_class+0x4e6>
				atmega_uart::tx_byte(ER_BIN_SAMP_WIN);
    6f5c:	88 e0       	ldi	r24, 0x08	; 8
    6f5e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6f62:	cb c1       	rjmp	.+918    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else
				set_u16(&(arr.bin_rx[1]), as, &as_class::set_dif_time_pre);
    6f64:	28 e1       	ldi	r18, 0x18	; 24
    6f66:	3b e1       	ldi	r19, 0x1B	; 27
    6f68:	40 e0       	ldi	r20, 0x00	; 0
    6f6a:	50 e0       	ldi	r21, 0x00	; 0
    6f6c:	be 01       	movw	r22, r28
    6f6e:	87 e8       	ldi	r24, 0x87	; 135
    6f70:	91 e0       	ldi	r25, 0x01	; 1
    6f72:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    6f76:	c1 c1       	rjmp	.+898    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    6f78:	e6 e8       	ldi	r30, 0x86	; 134
    6f7a:	f1 e0       	ldi	r31, 0x01	; 1
    6f7c:	01 81       	ldd	r16, Z+1	; 0x01
    6f7e:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    6f80:	10 2f       	mov	r17, r16
    6f82:	00 27       	eor	r16, r16
	temp16 += array[1];
    6f84:	82 81       	ldd	r24, Z+2	; 0x02
    6f86:	08 0f       	add	r16, r24
    6f88:	11 1d       	adc	r17, r1
		case BIN_DIF_PLS://Set dif pulse time.
			//Get data from input.
			temp2 = load_u16(&arr.bin_rx[1]);
			
			//Check to make sure range is valid.
			if(temp2 < as->get_dif_time_win())
    6f8a:	ce 01       	movw	r24, r28
    6f8c:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN8as_class16get_dif_time_winEv>
    6f90:	08 17       	cp	r16, r24
    6f92:	19 07       	cpc	r17, r25
    6f94:	20 f4       	brcc	.+8      	; 0x6f9e <_Z12bin_tokenizeP8as_class+0x520>
				atmega_uart::tx_byte(ER_BIN_SAMP_WIN);
    6f96:	88 e0       	ldi	r24, 0x08	; 8
    6f98:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6f9c:	ae c1       	rjmp	.+860    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else
				set_u16(&(arr.bin_rx[1]), as, &as_class::set_dif_time_pls);
    6f9e:	2c e2       	ldi	r18, 0x2C	; 44
    6fa0:	3b e1       	ldi	r19, 0x1B	; 27
    6fa2:	40 e0       	ldi	r20, 0x00	; 0
    6fa4:	50 e0       	ldi	r21, 0x00	; 0
    6fa6:	be 01       	movw	r22, r28
    6fa8:	87 e8       	ldi	r24, 0x87	; 135
    6faa:	91 e0       	ldi	r25, 0x01	; 1
    6fac:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    6fb0:	a4 c1       	rjmp	.+840    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    6fb2:	e6 e8       	ldi	r30, 0x86	; 134
    6fb4:	f1 e0       	ldi	r31, 0x01	; 1
    6fb6:	01 81       	ldd	r16, Z+1	; 0x01
    6fb8:	10 e0       	ldi	r17, 0x00	; 0
	temp16 <<= 8;
    6fba:	10 2f       	mov	r17, r16
    6fbc:	00 27       	eor	r16, r16
	temp16 += array[1];
    6fbe:	82 81       	ldd	r24, Z+2	; 0x02
    6fc0:	08 0f       	add	r16, r24
    6fc2:	11 1d       	adc	r17, r1
		case BIN_DIF_WIN://Set dif pulse sampling window length.		
			//Get data from input.
			temp2 = load_u16(&arr.bin_rx[1]);
			
			//Check to make sure range is valid.
			if(temp2 > as->get_dif_time_pre())
    6fc4:	ce 01       	movw	r24, r28
    6fc6:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN8as_class16get_dif_time_preEv>
    6fca:	80 17       	cp	r24, r16
    6fcc:	91 07       	cpc	r25, r17
    6fce:	20 f4       	brcc	.+8      	; 0x6fd8 <_Z12bin_tokenizeP8as_class+0x55a>
				atmega_uart::tx_byte(ER_BIN_SAMP_WIN);
    6fd0:	88 e0       	ldi	r24, 0x08	; 8
    6fd2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6fd6:	91 c1       	rjmp	.+802    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else if(temp2 > as->get_dif_time_pls())
    6fd8:	ce 01       	movw	r24, r28
    6fda:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN8as_class16get_dif_time_plsEv>
    6fde:	80 17       	cp	r24, r16
    6fe0:	91 07       	cpc	r25, r17
    6fe2:	20 f4       	brcc	.+8      	; 0x6fec <_Z12bin_tokenizeP8as_class+0x56e>
				atmega_uart::tx_byte(ER_BIN_SAMP_WIN);
    6fe4:	88 e0       	ldi	r24, 0x08	; 8
    6fe6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    6fea:	87 c1       	rjmp	.+782    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			else
				set_u16(&(arr.bin_rx[1]), as, &as_class::set_dif_time_win);
    6fec:	20 e4       	ldi	r18, 0x40	; 64
    6fee:	3b e1       	ldi	r19, 0x1B	; 27
    6ff0:	40 e0       	ldi	r20, 0x00	; 0
    6ff2:	50 e0       	ldi	r21, 0x00	; 0
    6ff4:	be 01       	movw	r22, r28
    6ff6:	87 e8       	ldi	r24, 0x87	; 135
    6ff8:	91 e0       	ldi	r25, 0x01	; 1
    6ffa:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_Z7set_u16PKhP8as_classMS1_FhjE>
    6ffe:	7d c1       	rjmp	.+762    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_ARB_AE://Append arbitrary waveform entry
			
			if(bin_index == 7)
    7000:	80 91 85 01 	lds	r24, 0x0185
    7004:	87 30       	cpi	r24, 0x07	; 7
    7006:	09 f0       	breq	.+2      	; 0x700a <_Z12bin_tokenizeP8as_class+0x58c>
    7008:	80 c0       	rjmp	.+256    	; 0x710a <_Z12bin_tokenizeP8as_class+0x68c>
			{
				//Get number of entries already in list.
				entries = fram1_read_word(ARB_NUM);
    700a:	62 ed       	ldi	r22, 0xD2	; 210
    700c:	7b ef       	ldi	r23, 0xFB	; 251
    700e:	81 e0       	ldi	r24, 0x01	; 1
    7010:	90 e0       	ldi	r25, 0x00	; 0
    7012:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    7016:	ec 01       	movw	r28, r24
				
				//Error out if memory is already full.
				if(entries >= ARB_ENTRIES_MAX)
    7018:	c0 32       	cpi	r28, 0x20	; 32
    701a:	8e e4       	ldi	r24, 0x4E	; 78
    701c:	d8 07       	cpc	r29, r24
    701e:	20 f0       	brcs	.+8      	; 0x7028 <_Z12bin_tokenizeP8as_class+0x5aa>
				{
					atmega_uart::tx_byte(ER_BIN_MEM_FULL);
    7020:	85 e0       	ldi	r24, 0x05	; 5
    7022:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    7026:	69 c1       	rjmp	.+722    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    7028:	e6 e8       	ldi	r30, 0x86	; 134
    702a:	f1 e0       	ldi	r31, 0x01	; 1
    702c:	41 81       	ldd	r20, Z+1	; 0x01
    702e:	50 e0       	ldi	r21, 0x00	; 0
	temp16 <<= 8;
    7030:	54 2f       	mov	r21, r20
    7032:	44 27       	eor	r20, r20
	temp16 += array[1];
    7034:	82 81       	ldd	r24, Z+2	; 0x02
    7036:	48 0f       	add	r20, r24
    7038:	51 1d       	adc	r21, r1
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    703a:	c3 80       	ldd	r12, Z+3	; 0x03
	temp16 <<= 8;
	temp16 += array[1];
    703c:	94 81       	ldd	r25, Z+4	; 0x04
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    703e:	e5 80       	ldd	r14, Z+5	; 0x05
	temp16 <<= 8;
	temp16 += array[1];
    7040:	86 81       	ldd	r24, Z+6	; 0x06
				start_v = load_int16(&arr.bin_rx[1]);
				end_v = load_int16(&arr.bin_rx[3]);
				rate = load_u16(&arr.bin_rx[5]);
				
				//Make sure the number falls within the proper range.
				if(start_v > ARB_VOLT_MAX)
    7042:	43 37       	cpi	r20, 0x73	; 115
    7044:	26 e0       	ldi	r18, 0x06	; 6
    7046:	52 07       	cpc	r21, r18
    7048:	24 f0       	brlt	.+8      	; 0x7052 <_Z12bin_tokenizeP8as_class+0x5d4>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    704a:	82 e0       	ldi	r24, 0x02	; 2
    704c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    7050:	54 c1       	rjmp	.+680    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else if(start_v < ARB_VOLT_MIN)
    7052:	4e 38       	cpi	r20, 0x8E	; 142
    7054:	29 ef       	ldi	r18, 0xF9	; 249
    7056:	52 07       	cpc	r21, r18
    7058:	24 f4       	brge	.+8      	; 0x7062 <_Z12bin_tokenizeP8as_class+0x5e4>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    705a:	81 e0       	ldi	r24, 0x01	; 1
    705c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    7060:	4c c1       	rjmp	.+664    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    7062:	d1 2c       	mov	r13, r1
	temp16 <<= 8;
    7064:	dc 2c       	mov	r13, r12
    7066:	cc 24       	eor	r12, r12
	temp16 += array[1];
    7068:	c9 0e       	add	r12, r25
    706a:	d1 1c       	adc	r13, r1
				else if(start_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(end_v > ARB_VOLT_MAX)
    706c:	93 e7       	ldi	r25, 0x73	; 115
    706e:	c9 16       	cp	r12, r25
    7070:	96 e0       	ldi	r25, 0x06	; 6
    7072:	d9 06       	cpc	r13, r25
    7074:	24 f0       	brlt	.+8      	; 0x707e <_Z12bin_tokenizeP8as_class+0x600>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    7076:	82 e0       	ldi	r24, 0x02	; 2
    7078:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    707c:	3e c1       	rjmp	.+636    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else if(end_v < ARB_VOLT_MIN)
    707e:	2e e8       	ldi	r18, 0x8E	; 142
    7080:	c2 16       	cp	r12, r18
    7082:	29 ef       	ldi	r18, 0xF9	; 249
    7084:	d2 06       	cpc	r13, r18
    7086:	24 f4       	brge	.+8      	; 0x7090 <_Z12bin_tokenizeP8as_class+0x612>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    7088:	81 e0       	ldi	r24, 0x01	; 1
    708a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    708e:	35 c1       	rjmp	.+618    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    7090:	f1 2c       	mov	r15, r1
	temp16 <<= 8;
    7092:	fe 2c       	mov	r15, r14
    7094:	ee 24       	eor	r14, r14
	temp16 += array[1];
    7096:	e8 0e       	add	r14, r24
    7098:	f1 1c       	adc	r15, r1
				else if(end_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > ARB_RATE_MAX)
    709a:	81 ee       	ldi	r24, 0xE1	; 225
    709c:	e8 16       	cp	r14, r24
    709e:	8e e2       	ldi	r24, 0x2E	; 46
    70a0:	f8 06       	cpc	r15, r24
    70a2:	20 f0       	brcs	.+8      	; 0x70ac <_Z12bin_tokenizeP8as_class+0x62e>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    70a4:	82 e0       	ldi	r24, 0x02	; 2
    70a6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    70aa:	27 c1       	rjmp	.+590    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else if(rate < ARB_RATE_MIN)
    70ac:	e1 14       	cp	r14, r1
    70ae:	f1 04       	cpc	r15, r1
    70b0:	21 f4       	brne	.+8      	; 0x70ba <_Z12bin_tokenizeP8as_class+0x63c>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    70b2:	81 e0       	ldi	r24, 0x01	; 1
    70b4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    70b8:	20 c1       	rjmp	.+576    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				
				//Save values in the EEPROM.
				fram1_write_word(ARB_START + 6 * entries, start_v);
    70ba:	86 e0       	ldi	r24, 0x06	; 6
    70bc:	8c 9f       	mul	r24, r28
    70be:	80 01       	movw	r16, r0
    70c0:	8d 9f       	mul	r24, r29
    70c2:	10 0d       	add	r17, r0
    70c4:	11 24       	eor	r1, r1
    70c6:	b8 01       	movw	r22, r16
    70c8:	80 e0       	ldi	r24, 0x00	; 0
    70ca:	90 e0       	ldi	r25, 0x00	; 0
    70cc:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
				fram1_write_word(ARB_START + 2 + 6 * entries, end_v);
    70d0:	b8 01       	movw	r22, r16
    70d2:	6e 5f       	subi	r22, 0xFE	; 254
    70d4:	7f 4f       	sbci	r23, 0xFF	; 255
    70d6:	80 e0       	ldi	r24, 0x00	; 0
    70d8:	90 e0       	ldi	r25, 0x00	; 0
    70da:	a6 01       	movw	r20, r12
    70dc:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
				fram1_write_word(ARB_START + 4 + 6 * entries, rate);
    70e0:	b8 01       	movw	r22, r16
    70e2:	6c 5f       	subi	r22, 0xFC	; 252
    70e4:	7f 4f       	sbci	r23, 0xFF	; 255
    70e6:	80 e0       	ldi	r24, 0x00	; 0
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	a7 01       	movw	r20, r14
    70ec:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
				
				//Update number of entries stored.
				fram1_write_word(ARB_NUM, entries + 1);
    70f0:	ae 01       	movw	r20, r28
    70f2:	4f 5f       	subi	r20, 0xFF	; 255
    70f4:	5f 4f       	sbci	r21, 0xFF	; 255
    70f6:	62 ed       	ldi	r22, 0xD2	; 210
    70f8:	7b ef       	ldi	r23, 0xFB	; 251
    70fa:	81 e0       	ldi	r24, 0x01	; 1
    70fc:	90 e0       	ldi	r25, 0x00	; 0
    70fe:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
				
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    7102:	80 e0       	ldi	r24, 0x00	; 0
    7104:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    7108:	f8 c0       	rjmp	.+496    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    710a:	83 e0       	ldi	r24, 0x03	; 3
    710c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    7110:	f4 c0       	rjmp	.+488    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_ARB_RE://Replace arbitrary waveform entry.
			if(bin_index == 8)
    7112:	80 91 85 01 	lds	r24, 0x0185
    7116:	88 30       	cpi	r24, 0x08	; 8
    7118:	09 f0       	breq	.+2      	; 0x711c <_Z12bin_tokenizeP8as_class+0x69e>
    711a:	7f c0       	rjmp	.+254    	; 0x721a <_Z12bin_tokenizeP8as_class+0x79c>
			{
				//Get number of entries already in list.
				entries = fram1_read_word(ARB_NUM);
    711c:	62 ed       	ldi	r22, 0xD2	; 210
    711e:	7b ef       	ldi	r23, 0xFB	; 251
    7120:	81 e0       	ldi	r24, 0x01	; 1
    7122:	90 e0       	ldi	r25, 0x00	; 0
    7124:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
				
				//Get numbers out of the array.
				ent = arr.bin_rx[1];
    7128:	20 91 87 01 	lds	r18, 0x0187
    712c:	30 e0       	ldi	r19, 0x00	; 0
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    712e:	e6 e8       	ldi	r30, 0x86	; 134
    7130:	f1 e0       	ldi	r31, 0x01	; 1
    7132:	42 81       	ldd	r20, Z+2	; 0x02
	temp16 <<= 8;
	temp16 += array[1];
    7134:	63 81       	ldd	r22, Z+3	; 0x03
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    7136:	e4 80       	ldd	r14, Z+4	; 0x04
	temp16 <<= 8;
	temp16 += array[1];
    7138:	a5 81       	ldd	r26, Z+5	; 0x05
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    713a:	c6 81       	ldd	r28, Z+6	; 0x06
	temp16 <<= 8;
	temp16 += array[1];
    713c:	77 81       	ldd	r23, Z+7	; 0x07
				start_v = load_int16(&arr.bin_rx[2]);
				end_v = load_int16(&arr.bin_rx[4]);
				rate = load_u16(&arr.bin_rx[6]);
				
				//Make sure the number falls within the proper range.
				if(ent < 1)
    713e:	21 15       	cp	r18, r1
    7140:	31 05       	cpc	r19, r1
    7142:	21 f4       	brne	.+8      	; 0x714c <_Z12bin_tokenizeP8as_class+0x6ce>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    7144:	81 e0       	ldi	r24, 0x01	; 1
    7146:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    714a:	d7 c0       	rjmp	.+430    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				if(ent > entries)
    714c:	82 17       	cp	r24, r18
    714e:	93 07       	cpc	r25, r19
    7150:	20 f4       	brcc	.+8      	; 0x715a <_Z12bin_tokenizeP8as_class+0x6dc>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    7152:	82 e0       	ldi	r24, 0x02	; 2
    7154:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    7158:	d0 c0       	rjmp	.+416    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    715a:	50 e0       	ldi	r21, 0x00	; 0
	temp16 <<= 8;
    715c:	54 2f       	mov	r21, r20
    715e:	44 27       	eor	r20, r20
	temp16 += array[1];
    7160:	46 0f       	add	r20, r22
    7162:	51 1d       	adc	r21, r1
				if(ent > entries)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
					break;
				}
				if(start_v > ARB_VOLT_MAX)
    7164:	43 37       	cpi	r20, 0x73	; 115
    7166:	96 e0       	ldi	r25, 0x06	; 6
    7168:	59 07       	cpc	r21, r25
    716a:	24 f0       	brlt	.+8      	; 0x7174 <_Z12bin_tokenizeP8as_class+0x6f6>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    716c:	82 e0       	ldi	r24, 0x02	; 2
    716e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    7172:	c3 c0       	rjmp	.+390    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else if(start_v < ARB_VOLT_MIN)
    7174:	4e 38       	cpi	r20, 0x8E	; 142
    7176:	89 ef       	ldi	r24, 0xF9	; 249
    7178:	58 07       	cpc	r21, r24
    717a:	24 f4       	brge	.+8      	; 0x7184 <_Z12bin_tokenizeP8as_class+0x706>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    717c:	81 e0       	ldi	r24, 0x01	; 1
    717e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    7182:	bb c0       	rjmp	.+374    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into an int16_t.
int16_t load_int16(const uint8_t *array)
{
	int16_t temp16;
	
	temp16 = array[0];
    7184:	f1 2c       	mov	r15, r1
	temp16 <<= 8;
    7186:	fe 2c       	mov	r15, r14
    7188:	ee 24       	eor	r14, r14
	temp16 += array[1];
    718a:	ea 0e       	add	r14, r26
    718c:	f1 1c       	adc	r15, r1
				else if(start_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(end_v > ARB_VOLT_MAX)
    718e:	93 e7       	ldi	r25, 0x73	; 115
    7190:	e9 16       	cp	r14, r25
    7192:	96 e0       	ldi	r25, 0x06	; 6
    7194:	f9 06       	cpc	r15, r25
    7196:	24 f0       	brlt	.+8      	; 0x71a0 <_Z12bin_tokenizeP8as_class+0x722>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    7198:	82 e0       	ldi	r24, 0x02	; 2
    719a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    719e:	ad c0       	rjmp	.+346    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else if(end_v < ARB_VOLT_MIN)
    71a0:	8e e8       	ldi	r24, 0x8E	; 142
    71a2:	e8 16       	cp	r14, r24
    71a4:	89 ef       	ldi	r24, 0xF9	; 249
    71a6:	f8 06       	cpc	r15, r24
    71a8:	24 f4       	brge	.+8      	; 0x71b2 <_Z12bin_tokenizeP8as_class+0x734>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    71aa:	81 e0       	ldi	r24, 0x01	; 1
    71ac:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    71b0:	a4 c0       	rjmp	.+328    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
//Takes a unit8_t array and takes the first 2 values and loads them into a uint16_t.
uint16_t load_u16(const uint8_t *array)
{
	uint16_t temp16;
	
	temp16 = array[0];
    71b2:	d0 e0       	ldi	r29, 0x00	; 0
	temp16 <<= 8;
    71b4:	dc 2f       	mov	r29, r28
    71b6:	cc 27       	eor	r28, r28
	temp16 += array[1];
    71b8:	c7 0f       	add	r28, r23
    71ba:	d1 1d       	adc	r29, r1
				else if(end_v < ARB_VOLT_MIN)
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
					break;
				}
				if(rate > ARB_RATE_MAX)
    71bc:	c1 3e       	cpi	r28, 0xE1	; 225
    71be:	9e e2       	ldi	r25, 0x2E	; 46
    71c0:	d9 07       	cpc	r29, r25
    71c2:	20 f0       	brcs	.+8      	; 0x71cc <_Z12bin_tokenizeP8as_class+0x74e>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_HIGH);
    71c4:	82 e0       	ldi	r24, 0x02	; 2
    71c6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    71ca:	97 c0       	rjmp	.+302    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				else if(rate < ARB_RATE_MIN)
    71cc:	20 97       	sbiw	r28, 0x00	; 0
    71ce:	21 f4       	brne	.+8      	; 0x71d8 <_Z12bin_tokenizeP8as_class+0x75a>
				{
					atmega_uart::tx_byte(ER_BIN_VAL_LOW);
    71d0:	81 e0       	ldi	r24, 0x01	; 1
    71d2:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
					break;
    71d6:	91 c0       	rjmp	.+290    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				}
				
				//Save values in the EEPROM.
				fram1_write_word(ARB_START + 6 * (ent - 1), start_v);
    71d8:	86 e0       	ldi	r24, 0x06	; 6
    71da:	82 9f       	mul	r24, r18
    71dc:	80 01       	movw	r16, r0
    71de:	83 9f       	mul	r24, r19
    71e0:	10 0d       	add	r17, r0
    71e2:	11 24       	eor	r1, r1
    71e4:	b8 01       	movw	r22, r16
    71e6:	66 50       	subi	r22, 0x06	; 6
    71e8:	71 09       	sbc	r23, r1
    71ea:	80 e0       	ldi	r24, 0x00	; 0
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
				fram1_write_word(ARB_START + 2 + 6 * (ent - 1), end_v);
    71f2:	b8 01       	movw	r22, r16
    71f4:	64 50       	subi	r22, 0x04	; 4
    71f6:	71 09       	sbc	r23, r1
    71f8:	80 e0       	ldi	r24, 0x00	; 0
    71fa:	90 e0       	ldi	r25, 0x00	; 0
    71fc:	a7 01       	movw	r20, r14
    71fe:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
				fram1_write_word(ARB_START + 4 + 6 * (ent - 1), rate);
    7202:	b8 01       	movw	r22, r16
    7204:	62 50       	subi	r22, 0x02	; 2
    7206:	71 09       	sbc	r23, r1
    7208:	80 e0       	ldi	r24, 0x00	; 0
    720a:	90 e0       	ldi	r25, 0x00	; 0
    720c:	ae 01       	movw	r20, r28
    720e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
				
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    7212:	80 e0       	ldi	r24, 0x00	; 0
    7214:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    7218:	70 c0       	rjmp	.+224    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
			}
			else//Transmit error.
				atmega_uart::tx_byte(ER_BIN_INV_PARAM);
    721a:	83 e0       	ldi	r24, 0x03	; 3
    721c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
    7220:	6c c0       	rjmp	.+216    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		break;
		
		case BIN_ARB_DLE://Delete last arbitrary waveform entry.
					
			//Get number of entries already in list.
			entries = fram1_read_word(ARB_NUM);
    7222:	62 ed       	ldi	r22, 0xD2	; 210
    7224:	7b ef       	ldi	r23, 0xFB	; 251
    7226:	81 e0       	ldi	r24, 0x01	; 1
    7228:	90 e0       	ldi	r25, 0x00	; 0
    722a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
			
			if(entries)//decrement and save.
    722e:	00 97       	sbiw	r24, 0x00	; 0
    7230:	49 f0       	breq	.+18     	; 0x7244 <_Z12bin_tokenizeP8as_class+0x7c6>
				fram1_write_word(ARB_NUM, entries - 1);
    7232:	ac 01       	movw	r20, r24
    7234:	41 50       	subi	r20, 0x01	; 1
    7236:	51 09       	sbc	r21, r1
    7238:	62 ed       	ldi	r22, 0xD2	; 210
    723a:	7b ef       	ldi	r23, 0xFB	; 251
    723c:	81 e0       	ldi	r24, 0x01	; 1
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
			
			atmega_uart::tx_byte(ER_BIN_NO_ERR);
    7244:	80 e0       	ldi	r24, 0x00	; 0
    7246:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		break;
    724a:	57 c0       	rjmp	.+174    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_ARB_DAE://Delete all arbitrary waveform entries.
			fram1_write_word(ARB_NUM, 0);
    724c:	40 e0       	ldi	r20, 0x00	; 0
    724e:	50 e0       	ldi	r21, 0x00	; 0
    7250:	62 ed       	ldi	r22, 0xD2	; 210
    7252:	7b ef       	ldi	r23, 0xFB	; 251
    7254:	81 e0       	ldi	r24, 0x01	; 1
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_Z16fram1_write_wordmj>
			atmega_uart::tx_byte(ER_BIN_NO_ERR);
    725c:	80 e0       	ldi	r24, 0x00	; 0
    725e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		break;
    7262:	4b c0       	rjmp	.+150    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		case BIN_ARB_SV://Get stored arbitrary waveform entries.
					
			//Get number of entries already in list.
			entries = fram1_read_word(ARB_NUM);
    7264:	62 ed       	ldi	r22, 0xD2	; 210
    7266:	7b ef       	ldi	r23, 0xFB	; 251
    7268:	81 e0       	ldi	r24, 0x01	; 1
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    7270:	ec 01       	movw	r28, r24
			
			if(!entries)//If no entries, exit.
    7272:	00 97       	sbiw	r24, 0x00	; 0
    7274:	21 f4       	brne	.+8      	; 0x727e <_Z12bin_tokenizeP8as_class+0x800>
			{
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
    7276:	80 e0       	ldi	r24, 0x00	; 0
    7278:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
				break;
    727c:	3e c0       	rjmp	.+124    	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		case BIN_ARB_SV://Get stored arbitrary waveform entries.
					
			//Get number of entries already in list.
			entries = fram1_read_word(ARB_NUM);
			
			if(!entries)//If no entries, exit.
    727e:	f1 2c       	mov	r15, r1
				break;
			}
			
			for (uint8_t i = 0; i < entries; i++)//Transmit stored contents.
			{
				atmega_uart::tx_word(fram1_read_word(ARB_START + 6 * i));
    7280:	8f 2d       	mov	r24, r15
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	8c 01       	movw	r16, r24
    7286:	00 0f       	add	r16, r16
    7288:	11 1f       	adc	r17, r17
    728a:	80 0f       	add	r24, r16
    728c:	91 1f       	adc	r25, r17
    728e:	8c 01       	movw	r16, r24
    7290:	00 0f       	add	r16, r16
    7292:	11 1f       	adc	r17, r17
    7294:	b8 01       	movw	r22, r16
    7296:	88 27       	eor	r24, r24
    7298:	77 fd       	sbrc	r23, 7
    729a:	80 95       	com	r24
    729c:	98 2f       	mov	r25, r24
    729e:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    72a2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(fram1_read_word(ARB_START + 2 + 6 * i));
    72a6:	b8 01       	movw	r22, r16
    72a8:	6e 5f       	subi	r22, 0xFE	; 254
    72aa:	7f 4f       	sbci	r23, 0xFF	; 255
    72ac:	88 27       	eor	r24, r24
    72ae:	77 fd       	sbrc	r23, 7
    72b0:	80 95       	com	r24
    72b2:	98 2f       	mov	r25, r24
    72b4:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    72b8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
				atmega_uart::tx_word(fram1_read_word(ARB_START + 4 + 6 * i));
    72bc:	b8 01       	movw	r22, r16
    72be:	6c 5f       	subi	r22, 0xFC	; 252
    72c0:	7f 4f       	sbci	r23, 0xFF	; 255
    72c2:	88 27       	eor	r24, r24
    72c4:	77 fd       	sbrc	r23, 7
    72c6:	80 95       	com	r24
    72c8:	98 2f       	mov	r25, r24
    72ca:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <_Z15fram1_read_wordm>
    72ce:	0e 94 0a 1c 	call	0x3814	; 0x3814 <_ZN11atmega_uart7tx_wordEj>
			{
				atmega_uart::tx_byte(ER_BIN_NO_ERR);
				break;
			}
			
			for (uint8_t i = 0; i < entries; i++)//Transmit stored contents.
    72d2:	f3 94       	inc	r15
    72d4:	8f 2d       	mov	r24, r15
    72d6:	90 e0       	ldi	r25, 0x00	; 0
    72d8:	8c 17       	cp	r24, r28
    72da:	9d 07       	cpc	r25, r29
    72dc:	88 f2       	brcs	.-94     	; 0x7280 <_Z12bin_tokenizeP8as_class+0x802>
    72de:	0d c0       	rjmp	.+26     	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
				atmega_uart::tx_word(fram1_read_word(ARB_START + 4 + 6 * i));
			}
		break;
		
		case BIN_LPF_SF://Set low-pass filter selection.
			set_u8(&(arr.bin_rx[1]), as, &as_class::set_soft_sel);
    72e0:	24 e5       	ldi	r18, 0x54	; 84
    72e2:	3b e1       	ldi	r19, 0x1B	; 27
    72e4:	40 e0       	ldi	r20, 0x00	; 0
    72e6:	50 e0       	ldi	r21, 0x00	; 0
    72e8:	be 01       	movw	r22, r28
    72ea:	87 e8       	ldi	r24, 0x87	; 135
    72ec:	91 e0       	ldi	r25, 0x01	; 1
    72ee:	0e 94 2f 2b 	call	0x565e	; 0x565e <_Z6set_u8PKhP8as_classMS1_FhhE>
		break;
    72f2:	03 c0       	rjmp	.+6      	; 0x72fa <_Z12bin_tokenizeP8as_class+0x87c>
		
		default://Unrecognized command.
			atmega_uart::tx_byte(ER_BIN_INV_CMD);
    72f4:	86 e0       	ldi	r24, 0x06	; 6
    72f6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN11atmega_uart7tx_byteEh>
		break;
	}
	
	//Reset index for next string.
	bin_index = 0;
    72fa:	10 92 85 01 	sts	0x0185, r1
}
    72fe:	df 91       	pop	r29
    7300:	cf 91       	pop	r28
    7302:	1f 91       	pop	r17
    7304:	0f 91       	pop	r16
    7306:	ff 90       	pop	r15
    7308:	ef 90       	pop	r14
    730a:	df 90       	pop	r13
    730c:	cf 90       	pop	r12
    730e:	08 95       	ret

00007310 <__subsf3>:
    7310:	50 58       	subi	r21, 0x80	; 128

00007312 <__addsf3>:
    7312:	bb 27       	eor	r27, r27
    7314:	aa 27       	eor	r26, r26
    7316:	0e d0       	rcall	.+28     	; 0x7334 <__addsf3x>
    7318:	75 c1       	rjmp	.+746    	; 0x7604 <__fp_round>
    731a:	66 d1       	rcall	.+716    	; 0x75e8 <__fp_pscA>
    731c:	30 f0       	brcs	.+12     	; 0x732a <__addsf3+0x18>
    731e:	6b d1       	rcall	.+726    	; 0x75f6 <__fp_pscB>
    7320:	20 f0       	brcs	.+8      	; 0x732a <__addsf3+0x18>
    7322:	31 f4       	brne	.+12     	; 0x7330 <__addsf3+0x1e>
    7324:	9f 3f       	cpi	r25, 0xFF	; 255
    7326:	11 f4       	brne	.+4      	; 0x732c <__addsf3+0x1a>
    7328:	1e f4       	brtc	.+6      	; 0x7330 <__addsf3+0x1e>
    732a:	5b c1       	rjmp	.+694    	; 0x75e2 <__fp_nan>
    732c:	0e f4       	brtc	.+2      	; 0x7330 <__addsf3+0x1e>
    732e:	e0 95       	com	r30
    7330:	e7 fb       	bst	r30, 7
    7332:	51 c1       	rjmp	.+674    	; 0x75d6 <__fp_inf>

00007334 <__addsf3x>:
    7334:	e9 2f       	mov	r30, r25
    7336:	77 d1       	rcall	.+750    	; 0x7626 <__fp_split3>
    7338:	80 f3       	brcs	.-32     	; 0x731a <__addsf3+0x8>
    733a:	ba 17       	cp	r27, r26
    733c:	62 07       	cpc	r22, r18
    733e:	73 07       	cpc	r23, r19
    7340:	84 07       	cpc	r24, r20
    7342:	95 07       	cpc	r25, r21
    7344:	18 f0       	brcs	.+6      	; 0x734c <__addsf3x+0x18>
    7346:	71 f4       	brne	.+28     	; 0x7364 <__addsf3x+0x30>
    7348:	9e f5       	brtc	.+102    	; 0x73b0 <__addsf3x+0x7c>
    734a:	8f c1       	rjmp	.+798    	; 0x766a <__fp_zero>
    734c:	0e f4       	brtc	.+2      	; 0x7350 <__addsf3x+0x1c>
    734e:	e0 95       	com	r30
    7350:	0b 2e       	mov	r0, r27
    7352:	ba 2f       	mov	r27, r26
    7354:	a0 2d       	mov	r26, r0
    7356:	0b 01       	movw	r0, r22
    7358:	b9 01       	movw	r22, r18
    735a:	90 01       	movw	r18, r0
    735c:	0c 01       	movw	r0, r24
    735e:	ca 01       	movw	r24, r20
    7360:	a0 01       	movw	r20, r0
    7362:	11 24       	eor	r1, r1
    7364:	ff 27       	eor	r31, r31
    7366:	59 1b       	sub	r21, r25
    7368:	99 f0       	breq	.+38     	; 0x7390 <__addsf3x+0x5c>
    736a:	59 3f       	cpi	r21, 0xF9	; 249
    736c:	50 f4       	brcc	.+20     	; 0x7382 <__addsf3x+0x4e>
    736e:	50 3e       	cpi	r21, 0xE0	; 224
    7370:	68 f1       	brcs	.+90     	; 0x73cc <__addsf3x+0x98>
    7372:	1a 16       	cp	r1, r26
    7374:	f0 40       	sbci	r31, 0x00	; 0
    7376:	a2 2f       	mov	r26, r18
    7378:	23 2f       	mov	r18, r19
    737a:	34 2f       	mov	r19, r20
    737c:	44 27       	eor	r20, r20
    737e:	58 5f       	subi	r21, 0xF8	; 248
    7380:	f3 cf       	rjmp	.-26     	; 0x7368 <__addsf3x+0x34>
    7382:	46 95       	lsr	r20
    7384:	37 95       	ror	r19
    7386:	27 95       	ror	r18
    7388:	a7 95       	ror	r26
    738a:	f0 40       	sbci	r31, 0x00	; 0
    738c:	53 95       	inc	r21
    738e:	c9 f7       	brne	.-14     	; 0x7382 <__addsf3x+0x4e>
    7390:	7e f4       	brtc	.+30     	; 0x73b0 <__addsf3x+0x7c>
    7392:	1f 16       	cp	r1, r31
    7394:	ba 0b       	sbc	r27, r26
    7396:	62 0b       	sbc	r22, r18
    7398:	73 0b       	sbc	r23, r19
    739a:	84 0b       	sbc	r24, r20
    739c:	ba f0       	brmi	.+46     	; 0x73cc <__addsf3x+0x98>
    739e:	91 50       	subi	r25, 0x01	; 1
    73a0:	a1 f0       	breq	.+40     	; 0x73ca <__addsf3x+0x96>
    73a2:	ff 0f       	add	r31, r31
    73a4:	bb 1f       	adc	r27, r27
    73a6:	66 1f       	adc	r22, r22
    73a8:	77 1f       	adc	r23, r23
    73aa:	88 1f       	adc	r24, r24
    73ac:	c2 f7       	brpl	.-16     	; 0x739e <__addsf3x+0x6a>
    73ae:	0e c0       	rjmp	.+28     	; 0x73cc <__addsf3x+0x98>
    73b0:	ba 0f       	add	r27, r26
    73b2:	62 1f       	adc	r22, r18
    73b4:	73 1f       	adc	r23, r19
    73b6:	84 1f       	adc	r24, r20
    73b8:	48 f4       	brcc	.+18     	; 0x73cc <__addsf3x+0x98>
    73ba:	87 95       	ror	r24
    73bc:	77 95       	ror	r23
    73be:	67 95       	ror	r22
    73c0:	b7 95       	ror	r27
    73c2:	f7 95       	ror	r31
    73c4:	9e 3f       	cpi	r25, 0xFE	; 254
    73c6:	08 f0       	brcs	.+2      	; 0x73ca <__addsf3x+0x96>
    73c8:	b3 cf       	rjmp	.-154    	; 0x7330 <__addsf3+0x1e>
    73ca:	93 95       	inc	r25
    73cc:	88 0f       	add	r24, r24
    73ce:	08 f0       	brcs	.+2      	; 0x73d2 <__addsf3x+0x9e>
    73d0:	99 27       	eor	r25, r25
    73d2:	ee 0f       	add	r30, r30
    73d4:	97 95       	ror	r25
    73d6:	87 95       	ror	r24
    73d8:	08 95       	ret

000073da <__cmpsf2>:
    73da:	d9 d0       	rcall	.+434    	; 0x758e <__fp_cmp>
    73dc:	08 f4       	brcc	.+2      	; 0x73e0 <__cmpsf2+0x6>
    73de:	81 e0       	ldi	r24, 0x01	; 1
    73e0:	08 95       	ret

000073e2 <__divsf3>:
    73e2:	0c d0       	rcall	.+24     	; 0x73fc <__divsf3x>
    73e4:	0f c1       	rjmp	.+542    	; 0x7604 <__fp_round>
    73e6:	07 d1       	rcall	.+526    	; 0x75f6 <__fp_pscB>
    73e8:	40 f0       	brcs	.+16     	; 0x73fa <__divsf3+0x18>
    73ea:	fe d0       	rcall	.+508    	; 0x75e8 <__fp_pscA>
    73ec:	30 f0       	brcs	.+12     	; 0x73fa <__divsf3+0x18>
    73ee:	21 f4       	brne	.+8      	; 0x73f8 <__divsf3+0x16>
    73f0:	5f 3f       	cpi	r21, 0xFF	; 255
    73f2:	19 f0       	breq	.+6      	; 0x73fa <__divsf3+0x18>
    73f4:	f0 c0       	rjmp	.+480    	; 0x75d6 <__fp_inf>
    73f6:	51 11       	cpse	r21, r1
    73f8:	39 c1       	rjmp	.+626    	; 0x766c <__fp_szero>
    73fa:	f3 c0       	rjmp	.+486    	; 0x75e2 <__fp_nan>

000073fc <__divsf3x>:
    73fc:	14 d1       	rcall	.+552    	; 0x7626 <__fp_split3>
    73fe:	98 f3       	brcs	.-26     	; 0x73e6 <__divsf3+0x4>

00007400 <__divsf3_pse>:
    7400:	99 23       	and	r25, r25
    7402:	c9 f3       	breq	.-14     	; 0x73f6 <__divsf3+0x14>
    7404:	55 23       	and	r21, r21
    7406:	b1 f3       	breq	.-20     	; 0x73f4 <__divsf3+0x12>
    7408:	95 1b       	sub	r25, r21
    740a:	55 0b       	sbc	r21, r21
    740c:	bb 27       	eor	r27, r27
    740e:	aa 27       	eor	r26, r26
    7410:	62 17       	cp	r22, r18
    7412:	73 07       	cpc	r23, r19
    7414:	84 07       	cpc	r24, r20
    7416:	38 f0       	brcs	.+14     	; 0x7426 <__divsf3_pse+0x26>
    7418:	9f 5f       	subi	r25, 0xFF	; 255
    741a:	5f 4f       	sbci	r21, 0xFF	; 255
    741c:	22 0f       	add	r18, r18
    741e:	33 1f       	adc	r19, r19
    7420:	44 1f       	adc	r20, r20
    7422:	aa 1f       	adc	r26, r26
    7424:	a9 f3       	breq	.-22     	; 0x7410 <__divsf3_pse+0x10>
    7426:	33 d0       	rcall	.+102    	; 0x748e <__divsf3_pse+0x8e>
    7428:	0e 2e       	mov	r0, r30
    742a:	3a f0       	brmi	.+14     	; 0x743a <__divsf3_pse+0x3a>
    742c:	e0 e8       	ldi	r30, 0x80	; 128
    742e:	30 d0       	rcall	.+96     	; 0x7490 <__divsf3_pse+0x90>
    7430:	91 50       	subi	r25, 0x01	; 1
    7432:	50 40       	sbci	r21, 0x00	; 0
    7434:	e6 95       	lsr	r30
    7436:	00 1c       	adc	r0, r0
    7438:	ca f7       	brpl	.-14     	; 0x742c <__divsf3_pse+0x2c>
    743a:	29 d0       	rcall	.+82     	; 0x748e <__divsf3_pse+0x8e>
    743c:	fe 2f       	mov	r31, r30
    743e:	27 d0       	rcall	.+78     	; 0x748e <__divsf3_pse+0x8e>
    7440:	66 0f       	add	r22, r22
    7442:	77 1f       	adc	r23, r23
    7444:	88 1f       	adc	r24, r24
    7446:	bb 1f       	adc	r27, r27
    7448:	26 17       	cp	r18, r22
    744a:	37 07       	cpc	r19, r23
    744c:	48 07       	cpc	r20, r24
    744e:	ab 07       	cpc	r26, r27
    7450:	b0 e8       	ldi	r27, 0x80	; 128
    7452:	09 f0       	breq	.+2      	; 0x7456 <__divsf3_pse+0x56>
    7454:	bb 0b       	sbc	r27, r27
    7456:	80 2d       	mov	r24, r0
    7458:	bf 01       	movw	r22, r30
    745a:	ff 27       	eor	r31, r31
    745c:	93 58       	subi	r25, 0x83	; 131
    745e:	5f 4f       	sbci	r21, 0xFF	; 255
    7460:	2a f0       	brmi	.+10     	; 0x746c <__divsf3_pse+0x6c>
    7462:	9e 3f       	cpi	r25, 0xFE	; 254
    7464:	51 05       	cpc	r21, r1
    7466:	68 f0       	brcs	.+26     	; 0x7482 <__divsf3_pse+0x82>
    7468:	b6 c0       	rjmp	.+364    	; 0x75d6 <__fp_inf>
    746a:	00 c1       	rjmp	.+512    	; 0x766c <__fp_szero>
    746c:	5f 3f       	cpi	r21, 0xFF	; 255
    746e:	ec f3       	brlt	.-6      	; 0x746a <__divsf3_pse+0x6a>
    7470:	98 3e       	cpi	r25, 0xE8	; 232
    7472:	dc f3       	brlt	.-10     	; 0x746a <__divsf3_pse+0x6a>
    7474:	86 95       	lsr	r24
    7476:	77 95       	ror	r23
    7478:	67 95       	ror	r22
    747a:	b7 95       	ror	r27
    747c:	f7 95       	ror	r31
    747e:	9f 5f       	subi	r25, 0xFF	; 255
    7480:	c9 f7       	brne	.-14     	; 0x7474 <__divsf3_pse+0x74>
    7482:	88 0f       	add	r24, r24
    7484:	91 1d       	adc	r25, r1
    7486:	96 95       	lsr	r25
    7488:	87 95       	ror	r24
    748a:	97 f9       	bld	r25, 7
    748c:	08 95       	ret
    748e:	e1 e0       	ldi	r30, 0x01	; 1
    7490:	66 0f       	add	r22, r22
    7492:	77 1f       	adc	r23, r23
    7494:	88 1f       	adc	r24, r24
    7496:	bb 1f       	adc	r27, r27
    7498:	62 17       	cp	r22, r18
    749a:	73 07       	cpc	r23, r19
    749c:	84 07       	cpc	r24, r20
    749e:	ba 07       	cpc	r27, r26
    74a0:	20 f0       	brcs	.+8      	; 0x74aa <__divsf3_pse+0xaa>
    74a2:	62 1b       	sub	r22, r18
    74a4:	73 0b       	sbc	r23, r19
    74a6:	84 0b       	sbc	r24, r20
    74a8:	ba 0b       	sbc	r27, r26
    74aa:	ee 1f       	adc	r30, r30
    74ac:	88 f7       	brcc	.-30     	; 0x7490 <__divsf3_pse+0x90>
    74ae:	e0 95       	com	r30
    74b0:	08 95       	ret

000074b2 <__fixsfsi>:
    74b2:	04 d0       	rcall	.+8      	; 0x74bc <__fixunssfsi>
    74b4:	68 94       	set
    74b6:	b1 11       	cpse	r27, r1
    74b8:	d9 c0       	rjmp	.+434    	; 0x766c <__fp_szero>
    74ba:	08 95       	ret

000074bc <__fixunssfsi>:
    74bc:	bc d0       	rcall	.+376    	; 0x7636 <__fp_splitA>
    74be:	88 f0       	brcs	.+34     	; 0x74e2 <__fixunssfsi+0x26>
    74c0:	9f 57       	subi	r25, 0x7F	; 127
    74c2:	90 f0       	brcs	.+36     	; 0x74e8 <__fixunssfsi+0x2c>
    74c4:	b9 2f       	mov	r27, r25
    74c6:	99 27       	eor	r25, r25
    74c8:	b7 51       	subi	r27, 0x17	; 23
    74ca:	a0 f0       	brcs	.+40     	; 0x74f4 <__fixunssfsi+0x38>
    74cc:	d1 f0       	breq	.+52     	; 0x7502 <__fixunssfsi+0x46>
    74ce:	66 0f       	add	r22, r22
    74d0:	77 1f       	adc	r23, r23
    74d2:	88 1f       	adc	r24, r24
    74d4:	99 1f       	adc	r25, r25
    74d6:	1a f0       	brmi	.+6      	; 0x74de <__fixunssfsi+0x22>
    74d8:	ba 95       	dec	r27
    74da:	c9 f7       	brne	.-14     	; 0x74ce <__fixunssfsi+0x12>
    74dc:	12 c0       	rjmp	.+36     	; 0x7502 <__fixunssfsi+0x46>
    74de:	b1 30       	cpi	r27, 0x01	; 1
    74e0:	81 f0       	breq	.+32     	; 0x7502 <__fixunssfsi+0x46>
    74e2:	c3 d0       	rcall	.+390    	; 0x766a <__fp_zero>
    74e4:	b1 e0       	ldi	r27, 0x01	; 1
    74e6:	08 95       	ret
    74e8:	c0 c0       	rjmp	.+384    	; 0x766a <__fp_zero>
    74ea:	67 2f       	mov	r22, r23
    74ec:	78 2f       	mov	r23, r24
    74ee:	88 27       	eor	r24, r24
    74f0:	b8 5f       	subi	r27, 0xF8	; 248
    74f2:	39 f0       	breq	.+14     	; 0x7502 <__fixunssfsi+0x46>
    74f4:	b9 3f       	cpi	r27, 0xF9	; 249
    74f6:	cc f3       	brlt	.-14     	; 0x74ea <__fixunssfsi+0x2e>
    74f8:	86 95       	lsr	r24
    74fa:	77 95       	ror	r23
    74fc:	67 95       	ror	r22
    74fe:	b3 95       	inc	r27
    7500:	d9 f7       	brne	.-10     	; 0x74f8 <__fixunssfsi+0x3c>
    7502:	3e f4       	brtc	.+14     	; 0x7512 <__fixunssfsi+0x56>
    7504:	90 95       	com	r25
    7506:	80 95       	com	r24
    7508:	70 95       	com	r23
    750a:	61 95       	neg	r22
    750c:	7f 4f       	sbci	r23, 0xFF	; 255
    750e:	8f 4f       	sbci	r24, 0xFF	; 255
    7510:	9f 4f       	sbci	r25, 0xFF	; 255
    7512:	08 95       	ret

00007514 <__floatunsisf>:
    7514:	e8 94       	clt
    7516:	09 c0       	rjmp	.+18     	; 0x752a <__floatsisf+0x12>

00007518 <__floatsisf>:
    7518:	97 fb       	bst	r25, 7
    751a:	3e f4       	brtc	.+14     	; 0x752a <__floatsisf+0x12>
    751c:	90 95       	com	r25
    751e:	80 95       	com	r24
    7520:	70 95       	com	r23
    7522:	61 95       	neg	r22
    7524:	7f 4f       	sbci	r23, 0xFF	; 255
    7526:	8f 4f       	sbci	r24, 0xFF	; 255
    7528:	9f 4f       	sbci	r25, 0xFF	; 255
    752a:	99 23       	and	r25, r25
    752c:	a9 f0       	breq	.+42     	; 0x7558 <__floatsisf+0x40>
    752e:	f9 2f       	mov	r31, r25
    7530:	96 e9       	ldi	r25, 0x96	; 150
    7532:	bb 27       	eor	r27, r27
    7534:	93 95       	inc	r25
    7536:	f6 95       	lsr	r31
    7538:	87 95       	ror	r24
    753a:	77 95       	ror	r23
    753c:	67 95       	ror	r22
    753e:	b7 95       	ror	r27
    7540:	f1 11       	cpse	r31, r1
    7542:	f8 cf       	rjmp	.-16     	; 0x7534 <__floatsisf+0x1c>
    7544:	fa f4       	brpl	.+62     	; 0x7584 <__floatsisf+0x6c>
    7546:	bb 0f       	add	r27, r27
    7548:	11 f4       	brne	.+4      	; 0x754e <__floatsisf+0x36>
    754a:	60 ff       	sbrs	r22, 0
    754c:	1b c0       	rjmp	.+54     	; 0x7584 <__floatsisf+0x6c>
    754e:	6f 5f       	subi	r22, 0xFF	; 255
    7550:	7f 4f       	sbci	r23, 0xFF	; 255
    7552:	8f 4f       	sbci	r24, 0xFF	; 255
    7554:	9f 4f       	sbci	r25, 0xFF	; 255
    7556:	16 c0       	rjmp	.+44     	; 0x7584 <__floatsisf+0x6c>
    7558:	88 23       	and	r24, r24
    755a:	11 f0       	breq	.+4      	; 0x7560 <__floatsisf+0x48>
    755c:	96 e9       	ldi	r25, 0x96	; 150
    755e:	11 c0       	rjmp	.+34     	; 0x7582 <__floatsisf+0x6a>
    7560:	77 23       	and	r23, r23
    7562:	21 f0       	breq	.+8      	; 0x756c <__floatsisf+0x54>
    7564:	9e e8       	ldi	r25, 0x8E	; 142
    7566:	87 2f       	mov	r24, r23
    7568:	76 2f       	mov	r23, r22
    756a:	05 c0       	rjmp	.+10     	; 0x7576 <__floatsisf+0x5e>
    756c:	66 23       	and	r22, r22
    756e:	71 f0       	breq	.+28     	; 0x758c <__floatsisf+0x74>
    7570:	96 e8       	ldi	r25, 0x86	; 134
    7572:	86 2f       	mov	r24, r22
    7574:	70 e0       	ldi	r23, 0x00	; 0
    7576:	60 e0       	ldi	r22, 0x00	; 0
    7578:	2a f0       	brmi	.+10     	; 0x7584 <__floatsisf+0x6c>
    757a:	9a 95       	dec	r25
    757c:	66 0f       	add	r22, r22
    757e:	77 1f       	adc	r23, r23
    7580:	88 1f       	adc	r24, r24
    7582:	da f7       	brpl	.-10     	; 0x757a <__floatsisf+0x62>
    7584:	88 0f       	add	r24, r24
    7586:	96 95       	lsr	r25
    7588:	87 95       	ror	r24
    758a:	97 f9       	bld	r25, 7
    758c:	08 95       	ret

0000758e <__fp_cmp>:
    758e:	99 0f       	add	r25, r25
    7590:	00 08       	sbc	r0, r0
    7592:	55 0f       	add	r21, r21
    7594:	aa 0b       	sbc	r26, r26
    7596:	e0 e8       	ldi	r30, 0x80	; 128
    7598:	fe ef       	ldi	r31, 0xFE	; 254
    759a:	16 16       	cp	r1, r22
    759c:	17 06       	cpc	r1, r23
    759e:	e8 07       	cpc	r30, r24
    75a0:	f9 07       	cpc	r31, r25
    75a2:	c0 f0       	brcs	.+48     	; 0x75d4 <__fp_cmp+0x46>
    75a4:	12 16       	cp	r1, r18
    75a6:	13 06       	cpc	r1, r19
    75a8:	e4 07       	cpc	r30, r20
    75aa:	f5 07       	cpc	r31, r21
    75ac:	98 f0       	brcs	.+38     	; 0x75d4 <__fp_cmp+0x46>
    75ae:	62 1b       	sub	r22, r18
    75b0:	73 0b       	sbc	r23, r19
    75b2:	84 0b       	sbc	r24, r20
    75b4:	95 0b       	sbc	r25, r21
    75b6:	39 f4       	brne	.+14     	; 0x75c6 <__fp_cmp+0x38>
    75b8:	0a 26       	eor	r0, r26
    75ba:	61 f0       	breq	.+24     	; 0x75d4 <__fp_cmp+0x46>
    75bc:	23 2b       	or	r18, r19
    75be:	24 2b       	or	r18, r20
    75c0:	25 2b       	or	r18, r21
    75c2:	21 f4       	brne	.+8      	; 0x75cc <__fp_cmp+0x3e>
    75c4:	08 95       	ret
    75c6:	0a 26       	eor	r0, r26
    75c8:	09 f4       	brne	.+2      	; 0x75cc <__fp_cmp+0x3e>
    75ca:	a1 40       	sbci	r26, 0x01	; 1
    75cc:	a6 95       	lsr	r26
    75ce:	8f ef       	ldi	r24, 0xFF	; 255
    75d0:	81 1d       	adc	r24, r1
    75d2:	81 1d       	adc	r24, r1
    75d4:	08 95       	ret

000075d6 <__fp_inf>:
    75d6:	97 f9       	bld	r25, 7
    75d8:	9f 67       	ori	r25, 0x7F	; 127
    75da:	80 e8       	ldi	r24, 0x80	; 128
    75dc:	70 e0       	ldi	r23, 0x00	; 0
    75de:	60 e0       	ldi	r22, 0x00	; 0
    75e0:	08 95       	ret

000075e2 <__fp_nan>:
    75e2:	9f ef       	ldi	r25, 0xFF	; 255
    75e4:	80 ec       	ldi	r24, 0xC0	; 192
    75e6:	08 95       	ret

000075e8 <__fp_pscA>:
    75e8:	00 24       	eor	r0, r0
    75ea:	0a 94       	dec	r0
    75ec:	16 16       	cp	r1, r22
    75ee:	17 06       	cpc	r1, r23
    75f0:	18 06       	cpc	r1, r24
    75f2:	09 06       	cpc	r0, r25
    75f4:	08 95       	ret

000075f6 <__fp_pscB>:
    75f6:	00 24       	eor	r0, r0
    75f8:	0a 94       	dec	r0
    75fa:	12 16       	cp	r1, r18
    75fc:	13 06       	cpc	r1, r19
    75fe:	14 06       	cpc	r1, r20
    7600:	05 06       	cpc	r0, r21
    7602:	08 95       	ret

00007604 <__fp_round>:
    7604:	09 2e       	mov	r0, r25
    7606:	03 94       	inc	r0
    7608:	00 0c       	add	r0, r0
    760a:	11 f4       	brne	.+4      	; 0x7610 <__fp_round+0xc>
    760c:	88 23       	and	r24, r24
    760e:	52 f0       	brmi	.+20     	; 0x7624 <__fp_round+0x20>
    7610:	bb 0f       	add	r27, r27
    7612:	40 f4       	brcc	.+16     	; 0x7624 <__fp_round+0x20>
    7614:	bf 2b       	or	r27, r31
    7616:	11 f4       	brne	.+4      	; 0x761c <__fp_round+0x18>
    7618:	60 ff       	sbrs	r22, 0
    761a:	04 c0       	rjmp	.+8      	; 0x7624 <__fp_round+0x20>
    761c:	6f 5f       	subi	r22, 0xFF	; 255
    761e:	7f 4f       	sbci	r23, 0xFF	; 255
    7620:	8f 4f       	sbci	r24, 0xFF	; 255
    7622:	9f 4f       	sbci	r25, 0xFF	; 255
    7624:	08 95       	ret

00007626 <__fp_split3>:
    7626:	57 fd       	sbrc	r21, 7
    7628:	90 58       	subi	r25, 0x80	; 128
    762a:	44 0f       	add	r20, r20
    762c:	55 1f       	adc	r21, r21
    762e:	59 f0       	breq	.+22     	; 0x7646 <__fp_splitA+0x10>
    7630:	5f 3f       	cpi	r21, 0xFF	; 255
    7632:	71 f0       	breq	.+28     	; 0x7650 <__fp_splitA+0x1a>
    7634:	47 95       	ror	r20

00007636 <__fp_splitA>:
    7636:	88 0f       	add	r24, r24
    7638:	97 fb       	bst	r25, 7
    763a:	99 1f       	adc	r25, r25
    763c:	61 f0       	breq	.+24     	; 0x7656 <__fp_splitA+0x20>
    763e:	9f 3f       	cpi	r25, 0xFF	; 255
    7640:	79 f0       	breq	.+30     	; 0x7660 <__fp_splitA+0x2a>
    7642:	87 95       	ror	r24
    7644:	08 95       	ret
    7646:	12 16       	cp	r1, r18
    7648:	13 06       	cpc	r1, r19
    764a:	14 06       	cpc	r1, r20
    764c:	55 1f       	adc	r21, r21
    764e:	f2 cf       	rjmp	.-28     	; 0x7634 <__fp_split3+0xe>
    7650:	46 95       	lsr	r20
    7652:	f1 df       	rcall	.-30     	; 0x7636 <__fp_splitA>
    7654:	08 c0       	rjmp	.+16     	; 0x7666 <__fp_splitA+0x30>
    7656:	16 16       	cp	r1, r22
    7658:	17 06       	cpc	r1, r23
    765a:	18 06       	cpc	r1, r24
    765c:	99 1f       	adc	r25, r25
    765e:	f1 cf       	rjmp	.-30     	; 0x7642 <__fp_splitA+0xc>
    7660:	86 95       	lsr	r24
    7662:	71 05       	cpc	r23, r1
    7664:	61 05       	cpc	r22, r1
    7666:	08 94       	sec
    7668:	08 95       	ret

0000766a <__fp_zero>:
    766a:	e8 94       	clt

0000766c <__fp_szero>:
    766c:	bb 27       	eor	r27, r27
    766e:	66 27       	eor	r22, r22
    7670:	77 27       	eor	r23, r23
    7672:	cb 01       	movw	r24, r22
    7674:	97 f9       	bld	r25, 7
    7676:	08 95       	ret

00007678 <__gesf2>:
    7678:	8a df       	rcall	.-236    	; 0x758e <__fp_cmp>
    767a:	08 f4       	brcc	.+2      	; 0x767e <__gesf2+0x6>
    767c:	8f ef       	ldi	r24, 0xFF	; 255
    767e:	08 95       	ret

00007680 <__mulsf3>:
    7680:	0b d0       	rcall	.+22     	; 0x7698 <__mulsf3x>
    7682:	c0 cf       	rjmp	.-128    	; 0x7604 <__fp_round>
    7684:	b1 df       	rcall	.-158    	; 0x75e8 <__fp_pscA>
    7686:	28 f0       	brcs	.+10     	; 0x7692 <__mulsf3+0x12>
    7688:	b6 df       	rcall	.-148    	; 0x75f6 <__fp_pscB>
    768a:	18 f0       	brcs	.+6      	; 0x7692 <__mulsf3+0x12>
    768c:	95 23       	and	r25, r21
    768e:	09 f0       	breq	.+2      	; 0x7692 <__mulsf3+0x12>
    7690:	a2 cf       	rjmp	.-188    	; 0x75d6 <__fp_inf>
    7692:	a7 cf       	rjmp	.-178    	; 0x75e2 <__fp_nan>
    7694:	11 24       	eor	r1, r1
    7696:	ea cf       	rjmp	.-44     	; 0x766c <__fp_szero>

00007698 <__mulsf3x>:
    7698:	c6 df       	rcall	.-116    	; 0x7626 <__fp_split3>
    769a:	a0 f3       	brcs	.-24     	; 0x7684 <__mulsf3+0x4>

0000769c <__mulsf3_pse>:
    769c:	95 9f       	mul	r25, r21
    769e:	d1 f3       	breq	.-12     	; 0x7694 <__mulsf3+0x14>
    76a0:	95 0f       	add	r25, r21
    76a2:	50 e0       	ldi	r21, 0x00	; 0
    76a4:	55 1f       	adc	r21, r21
    76a6:	62 9f       	mul	r22, r18
    76a8:	f0 01       	movw	r30, r0
    76aa:	72 9f       	mul	r23, r18
    76ac:	bb 27       	eor	r27, r27
    76ae:	f0 0d       	add	r31, r0
    76b0:	b1 1d       	adc	r27, r1
    76b2:	63 9f       	mul	r22, r19
    76b4:	aa 27       	eor	r26, r26
    76b6:	f0 0d       	add	r31, r0
    76b8:	b1 1d       	adc	r27, r1
    76ba:	aa 1f       	adc	r26, r26
    76bc:	64 9f       	mul	r22, r20
    76be:	66 27       	eor	r22, r22
    76c0:	b0 0d       	add	r27, r0
    76c2:	a1 1d       	adc	r26, r1
    76c4:	66 1f       	adc	r22, r22
    76c6:	82 9f       	mul	r24, r18
    76c8:	22 27       	eor	r18, r18
    76ca:	b0 0d       	add	r27, r0
    76cc:	a1 1d       	adc	r26, r1
    76ce:	62 1f       	adc	r22, r18
    76d0:	73 9f       	mul	r23, r19
    76d2:	b0 0d       	add	r27, r0
    76d4:	a1 1d       	adc	r26, r1
    76d6:	62 1f       	adc	r22, r18
    76d8:	83 9f       	mul	r24, r19
    76da:	a0 0d       	add	r26, r0
    76dc:	61 1d       	adc	r22, r1
    76de:	22 1f       	adc	r18, r18
    76e0:	74 9f       	mul	r23, r20
    76e2:	33 27       	eor	r19, r19
    76e4:	a0 0d       	add	r26, r0
    76e6:	61 1d       	adc	r22, r1
    76e8:	23 1f       	adc	r18, r19
    76ea:	84 9f       	mul	r24, r20
    76ec:	60 0d       	add	r22, r0
    76ee:	21 1d       	adc	r18, r1
    76f0:	82 2f       	mov	r24, r18
    76f2:	76 2f       	mov	r23, r22
    76f4:	6a 2f       	mov	r22, r26
    76f6:	11 24       	eor	r1, r1
    76f8:	9f 57       	subi	r25, 0x7F	; 127
    76fa:	50 40       	sbci	r21, 0x00	; 0
    76fc:	8a f0       	brmi	.+34     	; 0x7720 <__mulsf3_pse+0x84>
    76fe:	e1 f0       	breq	.+56     	; 0x7738 <__mulsf3_pse+0x9c>
    7700:	88 23       	and	r24, r24
    7702:	4a f0       	brmi	.+18     	; 0x7716 <__mulsf3_pse+0x7a>
    7704:	ee 0f       	add	r30, r30
    7706:	ff 1f       	adc	r31, r31
    7708:	bb 1f       	adc	r27, r27
    770a:	66 1f       	adc	r22, r22
    770c:	77 1f       	adc	r23, r23
    770e:	88 1f       	adc	r24, r24
    7710:	91 50       	subi	r25, 0x01	; 1
    7712:	50 40       	sbci	r21, 0x00	; 0
    7714:	a9 f7       	brne	.-22     	; 0x7700 <__mulsf3_pse+0x64>
    7716:	9e 3f       	cpi	r25, 0xFE	; 254
    7718:	51 05       	cpc	r21, r1
    771a:	70 f0       	brcs	.+28     	; 0x7738 <__mulsf3_pse+0x9c>
    771c:	5c cf       	rjmp	.-328    	; 0x75d6 <__fp_inf>
    771e:	a6 cf       	rjmp	.-180    	; 0x766c <__fp_szero>
    7720:	5f 3f       	cpi	r21, 0xFF	; 255
    7722:	ec f3       	brlt	.-6      	; 0x771e <__mulsf3_pse+0x82>
    7724:	98 3e       	cpi	r25, 0xE8	; 232
    7726:	dc f3       	brlt	.-10     	; 0x771e <__mulsf3_pse+0x82>
    7728:	86 95       	lsr	r24
    772a:	77 95       	ror	r23
    772c:	67 95       	ror	r22
    772e:	b7 95       	ror	r27
    7730:	f7 95       	ror	r31
    7732:	e7 95       	ror	r30
    7734:	9f 5f       	subi	r25, 0xFF	; 255
    7736:	c1 f7       	brne	.-16     	; 0x7728 <__mulsf3_pse+0x8c>
    7738:	fe 2b       	or	r31, r30
    773a:	88 0f       	add	r24, r24
    773c:	91 1d       	adc	r25, r1
    773e:	96 95       	lsr	r25
    7740:	87 95       	ror	r24
    7742:	97 f9       	bld	r25, 7
    7744:	08 95       	ret

00007746 <round>:
    7746:	77 df       	rcall	.-274    	; 0x7636 <__fp_splitA>
    7748:	e0 f0       	brcs	.+56     	; 0x7782 <round+0x3c>
    774a:	9e 37       	cpi	r25, 0x7E	; 126
    774c:	d8 f0       	brcs	.+54     	; 0x7784 <round+0x3e>
    774e:	96 39       	cpi	r25, 0x96	; 150
    7750:	b8 f4       	brcc	.+46     	; 0x7780 <round+0x3a>
    7752:	9e 38       	cpi	r25, 0x8E	; 142
    7754:	48 f4       	brcc	.+18     	; 0x7768 <round+0x22>
    7756:	67 2f       	mov	r22, r23
    7758:	78 2f       	mov	r23, r24
    775a:	88 27       	eor	r24, r24
    775c:	98 5f       	subi	r25, 0xF8	; 248
    775e:	f9 cf       	rjmp	.-14     	; 0x7752 <round+0xc>
    7760:	86 95       	lsr	r24
    7762:	77 95       	ror	r23
    7764:	67 95       	ror	r22
    7766:	93 95       	inc	r25
    7768:	95 39       	cpi	r25, 0x95	; 149
    776a:	d0 f3       	brcs	.-12     	; 0x7760 <round+0x1a>
    776c:	b6 2f       	mov	r27, r22
    776e:	b1 70       	andi	r27, 0x01	; 1
    7770:	6b 0f       	add	r22, r27
    7772:	71 1d       	adc	r23, r1
    7774:	81 1d       	adc	r24, r1
    7776:	20 f4       	brcc	.+8      	; 0x7780 <round+0x3a>
    7778:	87 95       	ror	r24
    777a:	77 95       	ror	r23
    777c:	67 95       	ror	r22
    777e:	93 95       	inc	r25
    7780:	02 c0       	rjmp	.+4      	; 0x7786 <__fp_mintl>
    7782:	1c c0       	rjmp	.+56     	; 0x77bc <__fp_mpack>
    7784:	73 cf       	rjmp	.-282    	; 0x766c <__fp_szero>

00007786 <__fp_mintl>:
    7786:	88 23       	and	r24, r24
    7788:	71 f4       	brne	.+28     	; 0x77a6 <__fp_mintl+0x20>
    778a:	77 23       	and	r23, r23
    778c:	21 f0       	breq	.+8      	; 0x7796 <__fp_mintl+0x10>
    778e:	98 50       	subi	r25, 0x08	; 8
    7790:	87 2b       	or	r24, r23
    7792:	76 2f       	mov	r23, r22
    7794:	07 c0       	rjmp	.+14     	; 0x77a4 <__fp_mintl+0x1e>
    7796:	66 23       	and	r22, r22
    7798:	11 f4       	brne	.+4      	; 0x779e <__fp_mintl+0x18>
    779a:	99 27       	eor	r25, r25
    779c:	0d c0       	rjmp	.+26     	; 0x77b8 <__fp_mintl+0x32>
    779e:	90 51       	subi	r25, 0x10	; 16
    77a0:	86 2b       	or	r24, r22
    77a2:	70 e0       	ldi	r23, 0x00	; 0
    77a4:	60 e0       	ldi	r22, 0x00	; 0
    77a6:	2a f0       	brmi	.+10     	; 0x77b2 <__fp_mintl+0x2c>
    77a8:	9a 95       	dec	r25
    77aa:	66 0f       	add	r22, r22
    77ac:	77 1f       	adc	r23, r23
    77ae:	88 1f       	adc	r24, r24
    77b0:	da f7       	brpl	.-10     	; 0x77a8 <__fp_mintl+0x22>
    77b2:	88 0f       	add	r24, r24
    77b4:	96 95       	lsr	r25
    77b6:	87 95       	ror	r24
    77b8:	97 f9       	bld	r25, 7
    77ba:	08 95       	ret

000077bc <__fp_mpack>:
    77bc:	9f 3f       	cpi	r25, 0xFF	; 255
    77be:	31 f0       	breq	.+12     	; 0x77cc <__fp_mpack_finite+0xc>

000077c0 <__fp_mpack_finite>:
    77c0:	91 50       	subi	r25, 0x01	; 1
    77c2:	20 f4       	brcc	.+8      	; 0x77cc <__fp_mpack_finite+0xc>
    77c4:	87 95       	ror	r24
    77c6:	77 95       	ror	r23
    77c8:	67 95       	ror	r22
    77ca:	b7 95       	ror	r27
    77cc:	88 0f       	add	r24, r24
    77ce:	91 1d       	adc	r25, r1
    77d0:	96 95       	lsr	r25
    77d2:	87 95       	ror	r24
    77d4:	97 f9       	bld	r25, 7
    77d6:	08 95       	ret

000077d8 <__udivmodhi4>:
    77d8:	aa 1b       	sub	r26, r26
    77da:	bb 1b       	sub	r27, r27
    77dc:	51 e1       	ldi	r21, 0x11	; 17
    77de:	07 c0       	rjmp	.+14     	; 0x77ee <__udivmodhi4_ep>

000077e0 <__udivmodhi4_loop>:
    77e0:	aa 1f       	adc	r26, r26
    77e2:	bb 1f       	adc	r27, r27
    77e4:	a6 17       	cp	r26, r22
    77e6:	b7 07       	cpc	r27, r23
    77e8:	10 f0       	brcs	.+4      	; 0x77ee <__udivmodhi4_ep>
    77ea:	a6 1b       	sub	r26, r22
    77ec:	b7 0b       	sbc	r27, r23

000077ee <__udivmodhi4_ep>:
    77ee:	88 1f       	adc	r24, r24
    77f0:	99 1f       	adc	r25, r25
    77f2:	5a 95       	dec	r21
    77f4:	a9 f7       	brne	.-22     	; 0x77e0 <__udivmodhi4_loop>
    77f6:	80 95       	com	r24
    77f8:	90 95       	com	r25
    77fa:	bc 01       	movw	r22, r24
    77fc:	cd 01       	movw	r24, r26
    77fe:	08 95       	ret

00007800 <__udivmodsi4>:
    7800:	a1 e2       	ldi	r26, 0x21	; 33
    7802:	1a 2e       	mov	r1, r26
    7804:	aa 1b       	sub	r26, r26
    7806:	bb 1b       	sub	r27, r27
    7808:	fd 01       	movw	r30, r26
    780a:	0d c0       	rjmp	.+26     	; 0x7826 <__udivmodsi4_ep>

0000780c <__udivmodsi4_loop>:
    780c:	aa 1f       	adc	r26, r26
    780e:	bb 1f       	adc	r27, r27
    7810:	ee 1f       	adc	r30, r30
    7812:	ff 1f       	adc	r31, r31
    7814:	a2 17       	cp	r26, r18
    7816:	b3 07       	cpc	r27, r19
    7818:	e4 07       	cpc	r30, r20
    781a:	f5 07       	cpc	r31, r21
    781c:	20 f0       	brcs	.+8      	; 0x7826 <__udivmodsi4_ep>
    781e:	a2 1b       	sub	r26, r18
    7820:	b3 0b       	sbc	r27, r19
    7822:	e4 0b       	sbc	r30, r20
    7824:	f5 0b       	sbc	r31, r21

00007826 <__udivmodsi4_ep>:
    7826:	66 1f       	adc	r22, r22
    7828:	77 1f       	adc	r23, r23
    782a:	88 1f       	adc	r24, r24
    782c:	99 1f       	adc	r25, r25
    782e:	1a 94       	dec	r1
    7830:	69 f7       	brne	.-38     	; 0x780c <__udivmodsi4_loop>
    7832:	60 95       	com	r22
    7834:	70 95       	com	r23
    7836:	80 95       	com	r24
    7838:	90 95       	com	r25
    783a:	9b 01       	movw	r18, r22
    783c:	ac 01       	movw	r20, r24
    783e:	bd 01       	movw	r22, r26
    7840:	cf 01       	movw	r24, r30
    7842:	08 95       	ret

00007844 <__tablejump2__>:
    7844:	ee 0f       	add	r30, r30
    7846:	ff 1f       	adc	r31, r31

00007848 <__tablejump__>:
    7848:	05 90       	lpm	r0, Z+
    784a:	f4 91       	lpm	r31, Z
    784c:	e0 2d       	mov	r30, r0
    784e:	09 94       	ijmp

00007850 <__umulhisi3>:
    7850:	a2 9f       	mul	r26, r18
    7852:	b0 01       	movw	r22, r0
    7854:	b3 9f       	mul	r27, r19
    7856:	c0 01       	movw	r24, r0
    7858:	a3 9f       	mul	r26, r19
    785a:	70 0d       	add	r23, r0
    785c:	81 1d       	adc	r24, r1
    785e:	11 24       	eor	r1, r1
    7860:	91 1d       	adc	r25, r1
    7862:	b2 9f       	mul	r27, r18
    7864:	70 0d       	add	r23, r0
    7866:	81 1d       	adc	r24, r1
    7868:	11 24       	eor	r1, r1
    786a:	91 1d       	adc	r25, r1
    786c:	08 95       	ret

0000786e <__usmulhisi3>:
    786e:	0e 94 28 3c 	call	0x7850	; 0x7850 <__umulhisi3>

00007872 <__usmulhisi3_tail>:
    7872:	b7 ff       	sbrs	r27, 7
    7874:	08 95       	ret
    7876:	82 1b       	sub	r24, r18
    7878:	93 0b       	sbc	r25, r19
    787a:	08 95       	ret

0000787c <__ashldi3>:
    787c:	0f 93       	push	r16
    787e:	08 30       	cpi	r16, 0x08	; 8
    7880:	90 f0       	brcs	.+36     	; 0x78a6 <__ashldi3+0x2a>
    7882:	98 2f       	mov	r25, r24
    7884:	87 2f       	mov	r24, r23
    7886:	76 2f       	mov	r23, r22
    7888:	65 2f       	mov	r22, r21
    788a:	54 2f       	mov	r21, r20
    788c:	43 2f       	mov	r20, r19
    788e:	32 2f       	mov	r19, r18
    7890:	22 27       	eor	r18, r18
    7892:	08 50       	subi	r16, 0x08	; 8
    7894:	f4 cf       	rjmp	.-24     	; 0x787e <__ashldi3+0x2>
    7896:	22 0f       	add	r18, r18
    7898:	33 1f       	adc	r19, r19
    789a:	44 1f       	adc	r20, r20
    789c:	55 1f       	adc	r21, r21
    789e:	66 1f       	adc	r22, r22
    78a0:	77 1f       	adc	r23, r23
    78a2:	88 1f       	adc	r24, r24
    78a4:	99 1f       	adc	r25, r25
    78a6:	0a 95       	dec	r16
    78a8:	b2 f7       	brpl	.-20     	; 0x7896 <__ashldi3+0x1a>
    78aa:	0f 91       	pop	r16
    78ac:	08 95       	ret

000078ae <__adddi3>:
    78ae:	2a 0d       	add	r18, r10
    78b0:	3b 1d       	adc	r19, r11
    78b2:	4c 1d       	adc	r20, r12
    78b4:	5d 1d       	adc	r21, r13
    78b6:	6e 1d       	adc	r22, r14
    78b8:	7f 1d       	adc	r23, r15
    78ba:	80 1f       	adc	r24, r16
    78bc:	91 1f       	adc	r25, r17
    78be:	08 95       	ret

000078c0 <_exit>:
    78c0:	f8 94       	cli

000078c2 <__stop_program>:
    78c2:	ff cf       	rjmp	.-2      	; 0x78c2 <__stop_program>
